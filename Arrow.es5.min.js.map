{"version":3,"sources":["node_modules/tslib/tslib.es6.js"," [synthetic:base] "," [synthetic:es6/util/arrayiterator] "," [synthetic:util/defines] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:es6/generator_engine] ","targets/es5/cls/io/interfaces.js","node_modules/flatbuffers/js/flatbuffers.mjs","targets/es5/cls/fb/Schema.js","targets/es5/cls/util/compat.js","targets/es5/cls/util/buffer.js","targets/es5/cls/io/adapters.js","targets/es5/cls/vector.js","targets/es5/cls/ipc/metadata/message.js","targets/es5/cls/fb/Message.js","targets/es5/cls/enum.js","targets/es5/cls/fb/File.js","targets/es5/cls/type.js","targets/es5/cls/schema.js","targets/es5/cls/ipc/metadata/file.js","targets/es5/cls/util/bit.js","targets/es5/cls/data.js","targets/es5/cls/util/pretty.js","targets/es5/cls/vector/row.js","targets/es5/cls/util/vector.js","targets/es5/cls/vector/chunked.js","targets/es5/cls/vector/base.js","targets/es5/cls/vector/struct.js","targets/es5/cls/recordbatch.js","targets/es5/cls/io/stream.js","targets/es5/cls/io/file.js","node_modules/text-encoding-utf-8/src/encoding.js","targets/es5/cls/visitor.js","targets/es5/cls/util/int.js","targets/es5/cls/visitor/vectorloader.js","targets/es5/cls/visitor/typeassembler.js","targets/es5/cls/ipc/metadata/json.js","targets/es5/cls/ipc/message.js","targets/es5/cls/ipc/reader.js","targets/es5/cls/visitor/vectorassembler.js","targets/es5/cls/ipc/writer.js","targets/es5/cls/column.js","targets/es5/cls/vector/binary.js","targets/es5/cls/vector/bool.js","targets/es5/cls/vector/date.js","targets/es5/cls/vector/decimal.js","targets/es5/cls/vector/dictionary.js","targets/es5/cls/vector/fixedsizebinary.js","targets/es5/cls/vector/fixedsizelist.js","targets/es5/cls/vector/float.js","targets/es5/cls/vector/interval.js","targets/es5/cls/vector/int.js","targets/es5/cls/vector/list.js","targets/es5/cls/vector/map.js","targets/es5/cls/vector/null.js","targets/es5/cls/vector/timestamp.js","targets/es5/cls/vector/time.js","targets/es5/cls/vector/union.js","targets/es5/cls/visitor/set.js","targets/es5/cls/vector/utf8.js","targets/es5/cls/vector/all.js","targets/es5/cls/visitor/get.js","targets/es5/cls/visitor/indexof.js","targets/es5/cls/visitor/iterator.js","targets/es5/cls/visitor/toarray.js","targets/es5/cls/visitor/bytewidth.js","targets/es5/cls/visitor/vectorctor.js","targets/es5/cls/vector/index.js","targets/es5/cls/table.js","targets/es5/cls/compute/predicate.js","targets/es5/cls/compute/dataframe.js","targets/es5/cls/Arrow.js","targets/es5/cls/Arrow.dom.js","targets/es5/cls/Arrow.dom.cls.js"],"names":["$jscomp.generator.Context","$jscomp.generator.Engine_","$jscomp.generator.Generator_","__awaiter","thisArg","generator","P","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","__values","o","m","Symbol","iterator","i","call","length","__await","v","__asyncGenerator","_arguments","verb","n","g","a","b","q","push","resume","r","fulfill","settle","f","shift","asyncIterator","TypeError","__asyncDelegator","p","__asyncValues","d","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32","Int32Array","Float32Array","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32.buffer","buffer","Float64Array","Uint16Array","Uint8Array","flatbuffers.Long","low","high","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long","prototype","equals","flatbuffers.Long.prototype.equals","other","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long.ZERO","flatbuffers.Builder","bb","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","flatbuffers.Builder.prototype.asUint8Array","bytes","subarray","position","offset","flatbuffers.Builder.prototype.prep","size","additional_bytes","align_size","bytes_","old_buf_size","Error","new_buf_size","nbb","setPosition","set","pad","flatbuffers.Builder.prototype.pad","byte_size","writeInt8","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder.prototype","flatbuffers.Builder.prototype.writeInt8","writeInt16","flatbuffers.Builder.prototype.writeInt16","writeInt32","flatbuffers.Builder.prototype.writeInt32","writeInt64","flatbuffers.Builder.prototype.writeInt64","flatbuffers.Builder.prototype.addInt16","prep","flatbuffers.Builder.prototype.addFieldInt8","voffset","defaultValue","addInt8","slot","flatbuffers.Builder.prototype.addFieldInt16","addInt16","flatbuffers.Builder.prototype.addFieldInt32","addInt32","flatbuffers.Builder.prototype.addFieldInt64","addInt64","flatbuffers.Builder.prototype.addFieldOffset","addOffset","flatbuffers.Builder.prototype.notNested","flatbuffers.Builder.prototype.slot","flatbuffers.Builder.prototype.offset","flatbuffers.Builder.prototype.addOffset","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_INT","flatbuffers.Builder.prototype.startObject","numfields","notNested","flatbuffers.Builder.prototype.endObject","vtableloc","trimmed_size","len","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_SHORT","standard_fields","existing_vtable","vt1","vt2","readInt16","j","finish","flatbuffers.Builder.prototype.finish","root_table","opt_file_identifier","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.FILE_IDENTIFIER_LENGTH","charCodeAt","flatbuffers.Builder.prototype.startVector","elem_size","num_elems","alignment","flatbuffers.Builder.prototype.endVector","flatbuffers.Builder.prototype.createString","s","utf8","codePoint","startVector","endVector","createLong","flatbuffers.Builder.prototype.createLong","flatbuffers.ByteBuffer","position_","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer.prototype","flatbuffers.ByteBuffer.prototype.bytes","flatbuffers.ByteBuffer.prototype.position","flatbuffers.ByteBuffer.prototype.setPosition","flatbuffers.ByteBuffer.prototype.readUint8","flatbuffers.ByteBuffer.prototype.readInt16","readUint16","readInt32","flatbuffers.ByteBuffer.prototype.readInt32","flatbuffers.ByteBuffer.prototype.readInt64","flatbuffers.ByteBuffer.prototype.writeInt8","flatbuffers.ByteBuffer.prototype.writeInt16","flatbuffers.ByteBuffer.prototype.writeInt32","flatbuffers.ByteBuffer.prototype.writeInt64","flatbuffers.ByteBuffer.prototype.__offset","bb_pos","vtable_offset","flatbuffers.ByteBuffer.prototype.__union","t","flatbuffers.ByteBuffer.prototype.__string","opt_encoding","UTF8_BYTES","readUint8","c","String","fromCharCode","flatbuffers.ByteBuffer.prototype.__indirect","flatbuffers.ByteBuffer.prototype.__vector","flatbuffers.ByteBuffer.prototype.__vector_len","flatbuffers.ByteBuffer.prototype.createLong","ITERATOR_DONE","Object","freeze","constructor","ArrowJSON","_json","schema","batches","dictionaries","defineProperty","get","ReadableInterop","tee","_getReadableDOMStream","pipe","writable","options","_getReadableNodeStream","_readableNodeStream","toReadableNodeStream","pipeTo","pipeThrough","duplex","_readableDOMStream","toReadableDOMStream","AsyncQueue","values","resolvers","_closedPromise","_closedPromiseResolve","cancel","reason","return","write","_ensureOpen","name","abort","_error","error","close","undefined","?.prototype","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toReadableDOMStream","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toReadableNodeStream","throw","_","read","peek","closed","hasFuncs","x","hasProps","fn","map","ks","every","k","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","collapseContiguousByteRanges","chunks","y","xOffset","yOffset","yLen","xLen","splice","memcpy","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","byteOffset","src","Math","min","toArrayBufferView","ArrayBufferViewCtor","input","chunk","isView","BYTES_PER_ELEMENT","from","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toArrayBufferViewAsyncIterator","arguments","toArrayBufferViewAsyncIterator_1","emit","exports","joinUint8Arrays","index","chunksLen","sliced","reduce","slice","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","fromIterable","threw","cmd","bufferLength","isNaN","fromAsyncIterable","fromAsyncIterable_1","fromReadableDOMStream","fromReadableDOMStream_1","AdaptiveByteReader","releaseLock","defaultReader","byobReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","mode","readFromBYOBReader","readInto","onEvent","stream","event","handler","fromReadableNodeStream","fromReadableNodeStream_1","byteRange","cleanup","events","err","evt","destroyed","cb","race","isFinite","Vector","bindDataAccessors","nullCount","wrapNullable1","isValid","org","apache","arrow","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","getRootAsNull","obj","startNull","builder","startObject","endNull","endObject","Struct_","getRootAsStruct_","startStruct_","endStruct_","List","getRootAsList","startList","endList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","Map","getRootAsMap","keysSorted","startMap","addKeysSorted","addFieldInt8","endMap","Union","getRootAsUnion","Sparse","typeIds","__vector","typeIdsArray","__vector_len","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startTypeIdsVector","numElems","endUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","Binary","getRootAsBinary","startBinary","endBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","Time","getRootAsTime","startTime","endTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","VectorLayout","getRootAsVectorLayout","type","OFFSET","startVectorLayout","addType","endVectorLayout","KeyValue","getRootAsKeyValue","key","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","Field","getRootAsField","nullable","typeType","NONE","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","startChildrenVector","addLayout","layoutOffset","createLayoutVector","startLayoutVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","Buffer","createBuffer","Schema","getRootAsSchema","fields","fieldsLength","startSchema","addEndianness","platformIsLittleEndian","endianness","_Endianness","Little","Big","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","module$targets$es5$cls$fb$Schema.org","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Schema","MessageHeader","FieldNode","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Buffer","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","Message","getRootAsMessage","version","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion.V1","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","module$targets$es5$cls$fb$Message.org","ArrowType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Type","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DateUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.TimeUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Precision","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.UnionMode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.VectorType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.IntervalUnit","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.MessageHeader","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion","module$targets$es5$cls$enum.Type","Footer","getRootAsFooter","Block","dictionariesLength","recordBatches","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","metaDataLength","createBlock","module$targets$es5$cls$fb$File.org","DataType","_TType","_children","module$targets$es5$cls$enum.Type.NONE","isNull","TType","module$targets$es5$cls$enum.Type.Null","isInt","module$targets$es5$cls$enum.Type.Int","isFloat","module$targets$es5$cls$enum.Type.Float","Float","isBinary","module$targets$es5$cls$enum.Type.Binary","isUtf8","module$targets$es5$cls$enum.Type.Utf8","isBool","module$targets$es5$cls$enum.Type.Bool","isDecimal","module$targets$es5$cls$enum.Type.Decimal","isDate","module$targets$es5$cls$enum.Type.Date","isTime","module$targets$es5$cls$enum.Type.Time","isTimestamp","module$targets$es5$cls$enum.Type.Timestamp","isInterval","module$targets$es5$cls$enum.Type.Interval","isList","module$targets$es5$cls$enum.Type.List","isStruct","module$targets$es5$cls$enum.Type.Struct","Struct","isUnion","module$targets$es5$cls$enum.Type.Union","isFixedSizeBinary","module$targets$es5$cls$enum.Type.FixedSizeBinary","isFixedSizeList","module$targets$es5$cls$enum.Type.FixedSizeList","isMap","module$targets$es5$cls$enum.Type.Map","isDictionary","module$targets$es5$cls$enum.Type.Dictionary","Dictionary","toStringTag","proto","ArrayType","Array","toString","Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","_precision","SINGLE","DOUBLE","Float16","Float32","Float64","_scale","Date_","_unit","DateDay","DAY","DateMillisecond","Time_","TimeSecond","TimeMillisecond","TimeMicrosecond","MICROSECOND","TimeNanosecond","NANOSECOND","Timestamp_","_timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","Interval_","IntervalDayTime","DAY_TIME","IntervalYearMonth","valueType","valueField","join","Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","typeId","idx","create","DenseUnion","Dense","SparseUnion","_byteWidth","_listSize","Map_","_keysSorted","getId","atomicDictionaryId","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_id","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","_dictionaries","_dictionaryFields","vectors","names","select","columnNames","xs","filter","_name","_type","_nullable","field","has","_Block","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Block","_Footer","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Footer","Footer_","dictionaryBatches","V4","_recordBatches","_dictionaryBatches","decode","buf","footer","OffHeapFooter","encode","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder","numRecordBatches","reverse","forEach","rb","FileBlock","numDictionaries","db","dictionaryBatchesOffset","asUint8Array","block","getRecordBatch","getDictionaryBatch","_footer","fileBlock","getBool","_data","_index","byte","bit","getBit","packBools","iterateBits","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","setBool","truncateBitmap","bitmap","alignedSize","Data","childData","_buffers","_offset","floor","max","_length","assign","_nullCount","_childData","clone","sliceBuffers","sliceChildren","BufferType","TYPE","sliceData","sliceOffsets","DATA","child","nullBitmap","VALIDITY","valueOffsetsOrChildData","TArray","TValue","kUnknownNullCount","valueToString","JSON","stringify","columnDescriptor","enumerable","configurable","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","Row","fieldsAreEnumerable","columnIndex","_bindGetter","new","schemaOrFields","isArray","keys","colIndex","getChildAt","bind","bound","toJSON","getOwnPropertyNames","props","prop","tmp","clampRange","end","ChunkedVector","offsets","_chunks","_chunkOffsets","_numChildren","flatten","concat","others","numChildren","columns","vector","vec","search","mid","isValidInternal","getInternal","indexOf","element","self","indexOfInternal","toArray","arraySet","typedSet","sliceInternal","chunkIndex","fromIndex","start","found","column","slices","chunkOffsets","chunkLength","chunkOffset","stride","BaseVector","_stride","val","VectorName","StructVector","rowProxy","asMap","_schema","args","numRows","impl","childNames","structData","numCols","AsyncByteQueue","super","sync","e_1","_a","_b","_c","e_1_1","ByteStream","ByteStreamSource","AsyncByteStream","AsyncByteStreamSource","body","RandomAccessFile","readAt","getInt32","seek","nBytes","Infinity","AsyncRandomAccessFile","file","stat","bytesRead","ToDictionary","Stream","tokens","endOfStream","end_of_stream","prepend","token","unshift","pop","decoderError","fatal","TextDecoder","encoding","toLowerCase","DEFAULT_ENCODING","_BOMseen","_streaming","_decoder","_fatal","_ignoreBOM","UTF8Decoder","input_stream","code_points","finished","cp","TextEncoder","_encoder","opt_string","UTF8Encoder","string","u","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","this.handler","bite","code_point","count","Visitor","visitMany","node","visit","getVisitFn","throwIfNotFound","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","dtype","inferDType","module$targets$es5$cls$enum.Type.Int8","visitInt8","module$targets$es5$cls$enum.Type.Int16","visitInt16","module$targets$es5$cls$enum.Type.Int32","visitInt32","module$targets$es5$cls$enum.Type.Int64","visitInt64","module$targets$es5$cls$enum.Type.Uint8","visitUint8","module$targets$es5$cls$enum.Type.Uint16","visitUint16","module$targets$es5$cls$enum.Type.Uint32","visitUint32","module$targets$es5$cls$enum.Type.Uint64","visitUint64","module$targets$es5$cls$enum.Type.Float16","visitFloat16","module$targets$es5$cls$enum.Type.Float32","visitFloat32","module$targets$es5$cls$enum.Type.Float64","visitFloat64","module$targets$es5$cls$enum.Type.DateDay","visitDateDay","module$targets$es5$cls$enum.Type.DateMillisecond","visitDateMillisecond","module$targets$es5$cls$enum.Type.TimestampSecond","visitTimestampSecond","module$targets$es5$cls$enum.Type.TimestampMillisecond","visitTimestampMillisecond","module$targets$es5$cls$enum.Type.TimestampMicrosecond","visitTimestampMicrosecond","module$targets$es5$cls$enum.Type.TimestampNanosecond","visitTimestampNanosecond","module$targets$es5$cls$enum.Type.TimeSecond","visitTimeSecond","module$targets$es5$cls$enum.Type.TimeMillisecond","visitTimeMillisecond","module$targets$es5$cls$enum.Type.TimeMicrosecond","visitTimeMicrosecond","module$targets$es5$cls$enum.Type.TimeNanosecond","visitTimeNanosecond","module$targets$es5$cls$enum.Type.DenseUnion","visitDenseUnion","module$targets$es5$cls$enum.Type.SparseUnion","visitSparseUnion","module$targets$es5$cls$enum.Type.IntervalDayTime","visitIntervalDayTime","module$targets$es5$cls$enum.Type.IntervalYearMonth","visitIntervalYearMonth","intAsHex","kPowersOfTen","BaseInt64","_times","L","R","product","carryBit16","_plus","lessThan","greaterThan","hex","times","plus","out_buffer","fromString","fromNumber","num","str","out","posn","group","kInt32DecimalDigits","parseInt","substr","multiple","convertArray","multiply","left","right","rtrn","add","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums","utf8Encoder","VectorLoader","buffersIndex","nodesIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","JSONVectorLoader","sources","binaryDataFromJSON","joined","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Null","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Int","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FloatingPoint","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Binary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Bool","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Utf8","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Decimal","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Date","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Time","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Timestamp","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Interval","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.List","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Struct_","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Union","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeBinary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeList","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Map","TypeAssembler","createString","instance","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","schemaFieldsFromJSON","Boolean","fromJSON","fieldChildrenFromJSON","_field","fieldNodes","nullCountFromJSON","BufferRegion","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","_Field","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Field","_Schema","_Buffer","_Message","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.Message","_KeyValue","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.KeyValue","_FieldNode","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.FieldNode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Endianness","_RecordBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.RecordBatch","_DictionaryBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.DictionaryBatch","_version","_headerType","_createHeader","this._createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","_nodes","_isDelta","encodeField","decodeField","fieldFromJSON","dictMeta","dictType","dictField","encodeSchema","decodeSchema","schemaFromJSON","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","dictionaryBatchFromJSON","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","v3Compat","decodeFieldChildren","decodeIndexType","decodeFieldType","entry","fieldOffsets","fieldsVectorOffset","metadataOffset","typeAssembler","childOffsets","childrenVectorOffset","recordBatch","nodesVectorOffset","b_","buffersVectorOffset","dictionaryBatch","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","readMessage","readMessageBody","readSchema","throwIfNull","PADDING","metadataLength","AsyncMessageReader","JSONMessageReader","_body","_dictionaryIndex","_batchIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","RecordBatchReader","reset","isSync","RecordBatchFileReader","RecordBatchStreamReader","isAsync","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","isFile","isStream","throughNode","throughDOM","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromFileHandle","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromAsyncByteStream","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromByteStream","fromByteStream","fromAsyncByteStream","fromFileHandle","autoClose","AsyncRecordBatchFileReaderImpl","RecordBatchFileReaderImpl","open","readRecordBatch","RecordBatchJSONReaderImpl","RecordBatchStreamReaderImpl","AsyncRecordBatchStreamReaderImpl","rest","RecordBatchReaderImplBase","recordBatchIndex","dictionaryIndex","_loadRecordBatch","_loadVectors","_loadDictionaryBatch","types","readNextMessageAndValidate","readFooter","readDictionaryBatch","_super","VectorAssembler","_byteLength","_bufferRegions","assemble","RangeError","addBuffer","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","VectorAssembler.prototype","assembleBoolVector","assembleUnion","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","childIndex","childLength","kAlignmentBytes","RecordBatchWriter","started","sink","dictionaryBlocks","recordBatchBlocks","_writeSchema","_writeBodyBuffers","_writeMessage","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeDictionaries","_writeDictionaryBatch","padding","RecordBatchFileWriter","writeAll","writer","batches_1","batches_1_1","_writeFooter","_writeMagic","RecordBatchStreamWriter","e_2","batches_2","batches_2_1","e_2_1","Column","BinaryVector","asUtf8","BoolVector","DateVector","valueOf","IntUtil","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","getKey","getValue","reverseLookup","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","asStruct","NullVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","encoder","SetVisitor","setVariableWidthBytes","setDateDay","epochMs","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","SetVisitor.prototype","setInt","setFloat","setUtf8","encodeUtf8","setBinary","setFixedSizeBinary","getDate","setTimestamp","setTime","setDecimal","setList","setUnion","setDictionary","setIntervalValue","setFixedSizeList","Utf8Vector","asBinary","decoder","GetVisitor","epochMillisecondsLongToMs","getVariableWidthBytes","getDateDay","getDateMillisecond","getNumeric","getFloat16","getNumericX2","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","GetVisitor.prototype","getNull","getInt","getFloat","getUtf8","decodeUtf8","getBinary","getFixedSizeBinary","getTimestamp","getTime","getDecimal","getList","getUnion","getDictionary","getInterval","getFixedSizeList","IndexOfVisitor","indexOfNull","valueIndexOf","searchElement","dateIndexOf","valueOfDate","arrayIndexOf","listIndexOf","getSearchElement","indexOfNested","IndexOfVisitor.prototype","nullIndexOf","dictionaryIndexOf","IteratorVisitor","nullableIterator","getFn","getVisitor","nullByte","nullBit","vectorIterator","IteratorVisitor.prototype","ToArrayVisitor","arrayOfVector","iteratorVisitor","ToArrayVisitor.prototype","variableWidthColumnErrorMessage","ByteWidthVisitor","visitFields","GetVectorConstructor","vecs","newVector","getVectorConstructor","BaseVector.prototype","BaseVector.prototype.get","BaseVector.prototype.set","setVisitor","BaseVector.prototype.indexOf","indexOfVisitor","BaseVector.prototype.toArray","toArrayVisitor","getByteWidth","BaseVector.prototype.getByteWidth","byteWidthVisitor","T","VectorCtor","partial1","partial2","partial0","Table","_batches","_batchesUnion","batchesUnion","_numCols","empty","opening","reader_1","reader_1_1","fromAsync","fromVectors","fromStruct","struct","getColumn","getColumnAt","getColumnIndex","findIndex","serialize","Value","eq","Literal","Equals","le","LTeq","ge","GTeq","lt","Not","gt","ne","Col","colidx","Predicate","and","And","expr","or","Or","not","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","some","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","cols","func","CustomPredicate","bind_","custom","scan","tableScan","tableFilter","countBy","tableCountBy","Dataframe","predicate","FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","log","counts","CountsArrayType","CountByResult","util","util_int_","util_bit_","util_buffer_","recordBatchReaderThroughDOMStream","recordBatchWriterThroughDOMStream","through","controller","desiredSize","enqueue","readable","ReadableStream","pull","WritableStream","writableStrategy","readableStrategy","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","exports0"],"mappings":"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","file":"Arrow.js","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport streamAdapters from './adapters';\nexport const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });\n/**\n * @ignore\n */\nexport class ArrowJSON {\n    constructor(_json) {\n        this._json = _json;\n    }\n    get schema() { return this._json['schema']; }\n    get batches() { return (this._json['batches'] || []); }\n    get dictionaries() { return (this._json['dictionaries'] || []); }\n}\nObject.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; } });\nObject.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []); } });\nObject.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []); } });\nexport class ReadableInterop {\n    tee() {\n        return this._getReadableDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getReadableNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) { return this._getReadableDOMStream().pipeTo(writable, options); }\n    pipeThrough(duplex, options) {\n        return this._getReadableDOMStream().pipeThrough(duplex, options);\n    }\n    _getReadableDOMStream() {\n        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());\n    }\n    _getReadableNodeStream() {\n        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());\n    }\n}\n/**\n * @ignore\n */\nexport class AsyncQueue extends ReadableInterop {\n    constructor() {\n        super();\n        this.values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    get closed() { return this._closedPromise; }\n    cancel(reason) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.return(reason); });\n    }\n    write(value) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this.values.push(value))\n                : (this.resolvers.shift().resolve({ done: false, value }));\n        }\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift().reject({ done: true, value }));\n        }\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift().resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    toReadableDOMStream(options) {\n        return streamAdapters.toReadableDOMStream(this, options);\n    }\n    toReadableNodeStream(options) {\n        return streamAdapters.toReadableNodeStream(this, options);\n    }\n    throw(_) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.abort(_); return ITERATOR_DONE; });\n    }\n    ;\n    return(_) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return ITERATOR_DONE; });\n    }\n    ;\n    read(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });\n    }\n    peek(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });\n    }\n    next(..._args) {\n        if (this.values.length > 0) {\n            return Promise.resolve({ done: false, value: this.values.shift() });\n        }\n        else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        }\n        else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this.constructor.name} is closed`);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * @enum\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let VectorType;\n                (function (VectorType) {\n                    /**\n                     * used in List type, Dense Union and variable length primitive types (String, Binary)\n                     */\n                    VectorType[VectorType[\"OFFSET\"] = 0] = \"OFFSET\";\n                    /**\n                     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n                     */\n                    VectorType[VectorType[\"DATA\"] = 1] = \"DATA\";\n                    /**\n                     * Bit vector indicating if each value is null\n                     */\n                    VectorType[VectorType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n                    /**\n                     * Type vector used in Union type\n                     */\n                    VectorType[VectorType[\"TYPE\"] = 3] = \"TYPE\";\n                })(VectorType = flatbuf.VectorType || (flatbuf.VectorType = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Null}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Null=} obj\n                     * @returns {Null}\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Struct_}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Struct_=} obj\n                     * @returns {Struct_}\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {List}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {List=} obj\n                     * @returns {List}\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeList}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeList=} obj\n                     * @returns {FixedSizeList}\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns {number}\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Map}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Map=} obj\n                     * @returns {Map}\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns {boolean}\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Union}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Union=} obj\n                     * @returns {Union}\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.UnionMode}\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param {number} index\n                     * @returns {number}\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {Int32Array}\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<number>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Int}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Int=} obj\n                     * @returns {Int}\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FloatingPoint}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FloatingPoint=} obj\n                     * @returns {FloatingPoint}\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Precision}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Precision} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Utf8}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Utf8=} obj\n                     * @returns {Utf8}\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Binary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Binary=} obj\n                     * @returns {Binary}\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeBinary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeBinary=} obj\n                     * @returns {FixedSizeBinary}\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns {number}\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Bool}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Bool=} obj\n                     * @returns {Bool}\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Decimal}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Decimal=} obj\n                     * @returns {Decimal}\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns {number}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns {number}\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Date}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Date=} obj\n                     * @returns {Date}\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.DateUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Time}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Time=} obj\n                     * @returns {Time}\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Timestamp}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Timestamp=} obj\n                     * @returns {Timestamp}\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Interval}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Interval=} obj\n                     * @returns {Interval}\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class VectorLayout {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {VectorLayout}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {VectorLayout=} obj\n                     * @returns {VectorLayout}\n                     */\n                    static getRootAsVectorLayout(bb, obj) {\n                        return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n                     *\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * the purpose of the vector\n                     *\n                     * @returns {org.apache.arrow.flatbuf.VectorType}\n                     */\n                    type() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startVectorLayout(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt16(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.VectorType} type\n                     */\n                    static addType(builder, type) {\n                        builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endVectorLayout(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.VectorLayout = VectorLayout;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {KeyValue}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {KeyValue=} obj\n                     * @returns {KeyValue}\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryEncoding}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryEncoding=} obj\n                     * @returns {DictionaryEncoding}\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param {org.apache.arrow.flatbuf.Int=} obj\n                     * @returns {org.apache.arrow.flatbuf.Int|null}\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns {boolean}\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Field}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Field=} obj\n                     * @returns {Field}\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Type}\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n                     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * layout of buffers produced for this type (as derived from the Type)\n                     * does not include children\n                     * each recordbatch will return instances of those Buffers.\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n                     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n                     */\n                    layout(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    layoutLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Type} typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} layoutOffset\n                     */\n                    static addLayout(builder, layoutOffset) {\n                        builder.addFieldOffset(6, layoutOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createLayoutVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startLayoutVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(7, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Buffer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {flatbuffers.Long} length\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Schema}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Schema=} obj\n                     * @returns {Schema}\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns {org.apache.arrow.flatbuf.Endianness}\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ReadableInterop } from '../io/interfaces';\nconst isObject = (x) => x != null && Object(x) === x;\nconst hasFuncs = (x, ...fn) => hasProps(x, ...fn.map((f) => [f, 'function']));\nconst hasProps = (x, ...ks) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));\n/** @ignore */ export const isPromise = (x) => hasFuncs(x, 'then');\n/** @ignore */ export const isObservable = (x) => hasFuncs(x, 'subscribe');\n/** @ignore */ export const isIterable = (x) => hasFuncs(x, Symbol.iterator);\n/** @ignore */ export const isAsyncIterable = (x) => hasFuncs(x, Symbol.asyncIterator);\n/** @ignore */ export const isArrowJSON = (x) => hasProps(x, ['schema', 'object']);\n/** @ignore */ export const isArrayLike = (x) => hasProps(x, ['length', 'number']);\n/** @ignore */ export const isIteratorResult = (x) => hasProps(x, ['done'], ['value']);\n/** @ignore */ export const isUnderlyingSink = (x) => hasFuncs(x, 'abort', 'close', 'start', 'write');\n/** @ignore */ export const isFileHandle = (x) => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);\n/** @ignore */ export const isFSReadStream = (x) => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);\n/** @ignore */ export const isFetchResponse = (x) => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);\n/** @ignore */ export const isWritableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');\n/** @ignore */ export const isWritableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');\n/** @ignore */ export const isReadableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');\n/** @ignore */ export const isReadableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\nfunction collapseContiguousByteRanges(chunks) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            continue;\n        }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            continue;\n        }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n/**\n * @ignore\n */\nexport function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n/**\n * @ignore\n */\nexport function joinUint8Arrays(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, chunksLen = chunks.length;\n    let source, sliced, buffer;\n    let length = typeof size === 'number' ? size : chunks.reduce((x, y) => x + y.length, 0);\n    while (++index < chunksLen) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            }\n            else if (sliced.length === source.length) {\n                index++;\n            }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n/**\n * @ignore\n */\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n    let value = isIteratorResult(input) ? input.value : input;\n    if (!value) {\n        return new ArrayBufferViewCtor(0);\n    }\n    if (typeof value === 'string') {\n        value = decodeUtf8(value);\n    }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof SharedArrayBuf) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof ByteBuffer) {\n        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n    }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */ export const toInt8Array = (input) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input) => toArrayBufferView(Uint8ClampedArray, input);\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n    const wrap = function* (x) { yield x; };\n    const buffers = (typeof source === 'string') ? wrap(source)\n        : (ArrayBuffer.isView(source)) ? wrap(source)\n            : (source instanceof ArrayBuffer) ? wrap(source)\n                : (source instanceof SharedArrayBuf) ? wrap(source)\n                    : !isIterable(source) ? wrap(source) : source;\n    yield* pump((function* (it) {\n        let r = null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n/** @ignore */ export const toInt8ArrayIterator = (input) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n    return tslib_1.__asyncGenerator(this, arguments, function* toArrayBufferViewAsyncIterator_1() {\n        // if a Promise, unwrap the Promise and iterate the resolved value\n        if (isPromise(source)) {\n            return yield tslib_1.__await(yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(toArrayBufferViewAsyncIterator(ArrayCtor, yield tslib_1.__await(source))))));\n        }\n        const wrap = function (x) { return tslib_1.__asyncGenerator(this, arguments, function* () { yield yield tslib_1.__await(yield tslib_1.__await(x)); }); };\n        const emit = function (source) {\n            return tslib_1.__asyncGenerator(this, arguments, function* () {\n                yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(pump((function* (it) {\n                    let r = null;\n                    do {\n                        r = it.next(yield r && r.value);\n                    } while (!r.done);\n                })(source[Symbol.iterator]())))));\n            });\n        };\n        const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n            : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n                : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                    : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                        : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                            : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                                : source; // otherwise if AsyncIterable, use it\n        yield tslib_1.__await(// otherwise if AsyncIterable, use it\n        yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(pump((function (it) {\n            return tslib_1.__asyncGenerator(this, arguments, function* () {\n                let r = null;\n                do {\n                    r = yield tslib_1.__await(it.next(yield yield tslib_1.__await(toArrayBufferView(ArrayCtor, r))));\n                } while (!r.done);\n            });\n        })(buffers[Symbol.asyncIterator]())))));\n    });\n}\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/**\n * @ignore\n */\nfunction decodeUtf8(chunk) {\n    const bytes = new Uint8Array(chunk.length);\n    for (let i = -1, n = chunk.length; ++i < n;) {\n        bytes[i] = chunk.charCodeAt(i);\n    }\n    return bytes;\n}\n/**\n * @ignore\n */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer';\n/**\n * @ignore\n */\nexport default {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromReadableDOMStream(source) {\n        return pump(fromReadableDOMStream(source));\n    },\n    fromReadableNodeStream(stream) {\n        return pump(fromReadableNodeStream(stream));\n    },\n    // @ts-ignore\n    toReadableDOMStream(source, options) {\n        throw new Error(`\"toReadableDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toReadableNodeStream(source, options) {\n        throw new Error(`\"toReadableNodeStream\" not available in this environment`);\n    },\n};\nconst pump = (iterator) => { iterator.next(); return iterator; };\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\nfunction fromAsyncIterable(source) {\n    return tslib_1.__asyncGenerator(this, arguments, function* fromAsyncIterable_1() {\n        let done, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers.slice(), size)[0];\n            }\n            [buffer, buffers] = joinUint8Arrays(buffers, size);\n            bufferLength -= buffer.byteLength;\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before creating the source AsyncIterator\n        ({ cmd, size } = yield yield tslib_1.__await(null));\n        // initialize the iterator\n        let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = isNaN(size - bufferLength)\n                    ? yield tslib_1.__await(it.next(undefined))\n                    : yield tslib_1.__await(it.next(size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield tslib_1.__await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (typeof it.throw === 'function') && (yield tslib_1.__await(it.throw(e)));\n        }\n        finally {\n            (threw === false) && (typeof it.return === 'function') && (yield tslib_1.__await(it.return()));\n        }\n    });\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\nfunction fromReadableDOMStream(source) {\n    return tslib_1.__asyncGenerator(this, arguments, function* fromReadableDOMStream_1() {\n        let done = false, threw = false;\n        let buffers = [], buffer;\n        let cmd, size, bufferLength = 0;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers.slice(), size)[0];\n            }\n            [buffer, buffers] = joinUint8Arrays(buffers, size);\n            bufferLength -= buffer.byteLength;\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we establish the ReadableStream lock\n        ({ cmd, size } = yield yield tslib_1.__await(null));\n        // initialize the reader and lock the stream\n        let it = new AdaptiveByteReader(source);\n        try {\n            do {\n                // read the next value\n                ({ done, value: buffer } = isNaN(size - bufferLength)\n                    ? yield tslib_1.__await(it['read'](undefined))\n                    : yield tslib_1.__await(it['read'](size - bufferLength)));\n                // if chunk is not null or empty, push it onto the queue\n                if (!done && buffer.byteLength > 0) {\n                    buffers.push(toUint8Array(buffer));\n                    bufferLength += buffer.byteLength;\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield tslib_1.__await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        catch (e) {\n            (threw = true) && (yield tslib_1.__await(it['cancel'](e)));\n        }\n        finally {\n            source['locked'] && it.releaseLock();\n            (threw === false) && (yield tslib_1.__await(it['cancel']()));\n        }\n    });\n}\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.byobReader = null;\n        this.defaultReader = null;\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        }\n        catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n    cancel(reason) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { reader } = this;\n            this.reader = null;\n            this.releaseLock();\n            if (reader) {\n                yield reader['cancel'](reason);\n            }\n        });\n    }\n    read(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (size === 0) {\n                return { done: this.reader == null, value: new Uint8Array(0) };\n            }\n            const result = !this.supportsBYOB || typeof size !== 'number'\n                ? yield this.getDefaultReader().read()\n                : yield this.readFromBYOBReader(size);\n            !result.done && (result.value = toUint8Array(result));\n            return result;\n        });\n    }\n    getDefaultReader() {\n        if (this.byobReader) {\n            this.releaseLock();\n        }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.defaultReader);\n    }\n    getBYOBReader() {\n        if (this.defaultReader) {\n            this.releaseLock();\n        }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.byobReader);\n    }\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    readFromBYOBReader(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            return yield readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n        });\n    }\n}\nfunction readInto(reader, buffer, offset, size) {\n    return tslib_1.__awaiter(this, void 0, void 0, function* () {\n        if (offset >= size) {\n            return { done: false, value: new Uint8Array(buffer, 0, size) };\n        }\n        const { done, value } = yield reader.read(new Uint8Array(buffer, offset, size - offset));\n        if (((offset += value.byteLength) < size) && !done) {\n            return yield readInto(reader, value.buffer, offset, size);\n        }\n        return { done, value: new Uint8Array(value.buffer, 0, offset) };\n    });\n}\nconst onEvent = (stream, event) => {\n    let handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\nfunction fromReadableNodeStream(stream) {\n    return tslib_1.__asyncGenerator(this, arguments, function* fromReadableNodeStream_1() {\n        let events = [];\n        let event = 'error';\n        let done = false, err = null;\n        let cmd, size, bufferLength = 0;\n        let buffers = [], buffer;\n        function byteRange() {\n            if (cmd === 'peek') {\n                return joinUint8Arrays(buffers.slice(), size)[0];\n            }\n            [buffer, buffers] = joinUint8Arrays(buffers, size);\n            bufferLength -= buffer.byteLength;\n            return buffer;\n        }\n        // Yield so the caller can inject the read command before we\n        // add the listener for the source stream's 'readable' event.\n        ({ cmd, size } = yield yield tslib_1.__await(null));\n        // ignore stdin if it's a TTY\n        if (stream['isTTY']) {\n            return yield tslib_1.__await(yield yield tslib_1.__await(new Uint8Array(0)));\n        }\n        try {\n            // initialize the stream event handlers\n            events[0] = onEvent(stream, 'end');\n            events[1] = onEvent(stream, 'error');\n            do {\n                events[2] = onEvent(stream, 'readable');\n                // wait on the first message event from the stream\n                [event, err] = yield tslib_1.__await(Promise.race(events.map((x) => x[2])));\n                // if the stream emitted an Error, rethrow it\n                if (event === 'error') {\n                    break;\n                }\n                if (!(done = event === 'end')) {\n                    // If the size is NaN, request to read everything in the stream's internal buffer\n                    if (!isFinite(size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                    else {\n                        buffer = toUint8Array(stream['read'](size - bufferLength));\n                        // If the byteLength is 0, then the requested amount is more than the stream has\n                        // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                        // continue emitting readable events, so request to read everything the stream\n                        // has in its internal buffer right now.\n                        if (buffer.byteLength < (size - bufferLength)) {\n                            buffer = toUint8Array(stream['read'](undefined));\n                        }\n                    }\n                    // if chunk is not null or empty, push it onto the queue\n                    if (buffer.byteLength > 0) {\n                        buffers.push(buffer);\n                        bufferLength += buffer.byteLength;\n                    }\n                }\n                // If we have enough bytes in our buffer, yield chunks until we don't\n                if (done || size <= bufferLength) {\n                    do {\n                        ({ cmd, size } = yield yield tslib_1.__await(byteRange()));\n                    } while (size < bufferLength);\n                }\n            } while (!done);\n        }\n        finally {\n            yield tslib_1.__await(cleanup(events, event === 'error' ? err : null));\n        }\n        function cleanup(events, err) {\n            buffer = buffers = null;\n            return new Promise((resolve, reject) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n                for (const [evt, fn] of events) {\n                    stream['off'](evt, fn);\n                }\n                const [evt, fn, closed] = onEvent(stream, 'close');\n                const destroyed = new Promise((resolve, reject) => {\n                    const destroy = stream['destroy'] || ((e, cb) => cb(e));\n                    destroy.call(stream, err, (e) => e != null ? reject(e) : resolve());\n                });\n                try {\n                    yield Promise.race([closed, destroyed]);\n                    err = undefined;\n                }\n                catch (e) {\n                    err = e || err;\n                }\n                finally {\n                    stream['off'](evt, fn);\n                    err != null ? reject(err) : resolve();\n                }\n            }));\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport class Vector {\n    // @ts-ignore\n    bindDataAccessors(data) {\n        if (this.nullCount > 0) {\n            this['get'] && (this['get'] = wrapNullable1(this['get']));\n        }\n    }\n}\nfunction wrapNullable1(fn) {\n    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsTUFBTSxPQUFnQixNQUFNO0lBRXhCLGFBQWE7SUFDSCxpQkFBaUIsQ0FBQyxJQUFhO1FBQ3JDLElBQUksSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLEVBQUU7WUFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLGFBQWEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzdEO0lBQ0wsQ0FBQztDQXlCSjtBQUVELFNBQVMsYUFBYSxDQUF3RSxFQUFLO0lBQy9GLE9BQU8sVUFBa0IsQ0FBUyxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUM5RixDQUFDIiwiZmlsZSI6InZlY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi90eXBlJztcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGltcGxlbWVudHMgSXRlcmFibGU8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdGVjdGVkIGJpbmREYXRhQWNjZXNzb3JzKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgaWYgKHRoaXMubnVsbENvdW50ID4gMCkge1xuICAgICAgICAgICAgdGhpc1snZ2V0J10gJiYgKHRoaXNbJ2dldCddID0gd3JhcE51bGxhYmxlMSh0aGlzWydnZXQnXSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHR5cGU6IFQ7XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGRhdGE6IERhdGE8VD47XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBzdHJpZGU6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbnVsbENvdW50OiBudW1iZXI7XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IG51bUNoaWxkcmVuOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgVFR5cGU6IFRbJ1RUeXBlJ107XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IFRBcnJheTogVFsnVEFycmF5J107XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IFRWYWx1ZTogVFsnVFZhbHVlJ107XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IEFycmF5VHlwZTogVFsnQXJyYXlUeXBlJ107XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgaXNWYWxpZChpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0KGluZGV4OiBudW1iZXIpOiBUWydUVmFsdWUnXSB8IG51bGw7XG4gICAgcHVibGljIGFic3RyYWN0IHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgaW5kZXhPZih2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBmcm9tSW5kZXg/OiBudW1iZXIpOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgdG9BcnJheSgpOiBUWydUQXJyYXknXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXSB8IG51bGw+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBzbGljZShiZWdpbj86IG51bWJlciwgZW5kPzogbnVtYmVyKTogVmVjdG9yPFQ+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBjb25jYXQodGhpczogVmVjdG9yPFQ+LCAuLi5vdGhlcnM6IFZlY3RvcjxUPltdKTogVmVjdG9yPFQ+O1xuXG4gICAgcHVibGljIGFic3RyYWN0IGdldENoaWxkQXQ8UiBleHRlbmRzIERhdGFUeXBlID0gYW55PihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbDtcbn1cblxuZnVuY3Rpb24gd3JhcE51bGxhYmxlMTxUIGV4dGVuZHMgRGF0YVR5cGUsIFYgZXh0ZW5kcyBWZWN0b3I8VD4sIEYgZXh0ZW5kcyAoaTogbnVtYmVyKSA9PiBhbnk+KGZuOiBGKTogKC4uLmFyZ3M6IFBhcmFtZXRlcnM8Rj4pID0+IFJldHVyblR5cGU8Rj4ge1xuICAgIHJldHVybiBmdW5jdGlvbih0aGlzOiBWLCBpOiBudW1iZXIpIHsgcmV0dXJuIHRoaXMuaXNWYWxpZChpKSA/IGZuLmNhbGwodGhpcywgaSkgOiBudWxsOyB9O1xufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\n/**\n * @ignore\n */\nexport class Message {\n    constructor(bodyLength, version, headerType, header) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static fromJSON(msg, headerType) {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static encode(message) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header());\n        }\n        else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header());\n        }\n        else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header());\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */\n    static from(header, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() { return this.headerType; }\n    get version() { return this._version; }\n    get headerType() { return this._headerType; }\n    get bodyLength() { return this._bodyLength; }\n    header() { return this._createHeader(); }\n    isSchema() { return this.headerType === MessageHeader.Schema; }\n    isRecordBatch() { return this.headerType === MessageHeader.RecordBatch; }\n    isDictionaryBatch() { return this.headerType === MessageHeader.DictionaryBatch; }\n}\n/**\n * @ignore\n */\nexport class RecordBatch {\n    get nodes() { return this._nodes; }\n    get length() { return this._length; }\n    get buffers() { return this._buffers; }\n    constructor(length, nodes, buffers) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n/**\n * @ignore\n */\nexport class DictionaryBatch {\n    get id() { return this._id; }\n    get data() { return this._data; }\n    get isDelta() { return this._isDelta; }\n    get length() { return this.data.length; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n    constructor(data, id, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n/**\n * @ignore\n */\nexport class BufferRegion {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n/**\n * @ignore\n */\nexport class FieldNode {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\nfunction messageHeaderFromJSON(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nfunction decodeMessageHeader(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema()));\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\nfunction decodeSchema(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\nfunction decodeBufferRegion(b) {\n    return new BufferRegion(b.offset(), b.length());\n}\nfunction decodeFieldNode(f) {\n    return new FieldNode(f.length(), f.nullCount());\n}\nfunction decodeFieldNodes(batch) {\n    return Array.from({ length: batch.nodesLength() }, (_, i) => batch.nodes(i)).filter(Boolean).map(FieldNode.decode);\n}\nfunction decodeBuffers(batch, version) {\n    return Array.from({ length: batch.buffersLength() }, (_, i) => batch.buffers(i)).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\nfunction v3Compat(version, decode) {\n    return (buffer, i) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\nfunction decodeSchemaFields(schema, dictionaries, dictionaryFields) {\n    return Array.from({ length: schema.fieldsLength() }, (_, i) => schema.fields(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\nfunction decodeFieldChildren(field, dictionaries, dictionaryFields) {\n    return Array.from({ length: field.childrenLength() }, (_, i) => field.children(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\nfunction decodeField(f, dictionaries, dictionaryFields) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\nfunction decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\nfunction decodeIndexType(_type) {\n    return new Int(_type.isSigned(), _type.bitWidth());\n}\nfunction decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch (typeId) {\n        case Type.NONE: return new DataType();\n        case Type.Null: return new Null();\n        case Type.Binary: return new Binary();\n        case Type.Utf8: return new Utf8();\n        case Type.Bool: return new Bool();\n        case Type.List: return new List(children || []);\n        case Type.Struct_: return new Struct(children || []);\n    }\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n            return new Time(t.unit(), t.bitWidth());\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n            return new Union(t.mode(), (t.typeIdsArray() || []), children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n            return new FixedSizeList(t.listSize(), children || []);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\nfunction encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n    if (metadataOffset !== -1) {\n        _Schema.addCustomMetadata(b, metadataOffset);\n    }\n    return _Schema.endSchema(b);\n}\nfunction encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    let type = field.type;\n    let typeId = field.typeId;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b);\n    }\n    else {\n        typeId = type.dictionary.TType;\n        dictionaryOffset = typeAssembler.visit(type, b);\n        typeOffset = typeAssembler.visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) {\n        _Field.addName(b, nameOffset);\n    }\n    if (dictionaryOffset !== -1) {\n        _Field.addDictionary(b, dictionaryOffset);\n    }\n    if (metadataOffset !== -1) {\n        _Field.addCustomMetadata(b, metadataOffset);\n    }\n    return _Field.endField(b);\n}\nfunction encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n    const nodesVectorOffset = b.endVector();\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n    const buffersVectorOffset = b.endVector();\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\nfunction encodeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\nfunction encodeBufferRegion(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FieldNode}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     * @param {flatbuffers.Long} null_count\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {RecordBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {RecordBatch=} obj\n                     * @returns {RecordBatch}\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n                     * @returns {org.apache.arrow.flatbuf.FieldNode}\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n                     * @returns {org.apache.arrow.flatbuf.Buffer}\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryBatch=} obj\n                     * @returns {DictionaryBatch}\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns {boolean}\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Message}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Message=} obj\n                     * @returns {Message}\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nexport var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport var Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(Type || (Type = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUE7SUFDM0IsdUNBQTJCLENBQUE7SUFDM0IsdUNBQTJCLENBQUE7SUFDM0IsdURBQTJCLENBQUE7SUFDM0IsdURBQTJCLENBQUE7SUFDM0IsaUVBQTJCLENBQUE7SUFDM0IsaUVBQTJCLENBQUE7SUFDM0IsK0RBQTJCLENBQUE7SUFDM0IsNkNBQTJCLENBQUE7SUFDM0IsdURBQTJCLENBQUE7SUFDM0IsdURBQTJCLENBQUE7SUFDM0IscURBQTJCLENBQUE7SUFDM0IsNkNBQTJCLENBQUE7SUFDM0IsK0NBQTJCLENBQUE7SUFDM0IsdURBQTJCLENBQUE7SUFDM0IsMkRBQTJCLENBQUE7QUFDL0IsQ0FBQyxFQXZEVyxJQUFJLEtBQUosSUFBSSxRQXVEZiIsImZpbGUiOiJlbnVtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCAqIGFzIFNjaGVtYV8gZnJvbSAnLi9mYi9TY2hlbWEnO1xuaW1wb3J0ICogYXMgTWVzc2FnZV8gZnJvbSAnLi9mYi9NZXNzYWdlJztcblxuZXhwb3J0IGltcG9ydCBBcnJvd1R5cGUgPSBTY2hlbWFfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5UeXBlO1xuZXhwb3J0IGltcG9ydCBEYXRlVW5pdCA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkRhdGVVbml0O1xuZXhwb3J0IGltcG9ydCBUaW1lVW5pdCA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLlRpbWVVbml0O1xuZXhwb3J0IGltcG9ydCBQcmVjaXNpb24gPSBTY2hlbWFfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5QcmVjaXNpb247XG5leHBvcnQgaW1wb3J0IFVuaW9uTW9kZSA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLlVuaW9uTW9kZTtcbmV4cG9ydCBpbXBvcnQgVmVjdG9yVHlwZSA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLlZlY3RvclR5cGU7XG5leHBvcnQgaW1wb3J0IEludGVydmFsVW5pdCA9IFNjaGVtYV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLkludGVydmFsVW5pdDtcbmV4cG9ydCBpbXBvcnQgTWVzc2FnZUhlYWRlciA9IE1lc3NhZ2VfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5NZXNzYWdlSGVhZGVyO1xuZXhwb3J0IGltcG9ydCBNZXRhZGF0YVZlcnNpb24gPSBTY2hlbWFfLm9yZy5hcGFjaGUuYXJyb3cuZmxhdGJ1Zi5NZXRhZGF0YVZlcnNpb247XG5cbi8qKlxuICogKlxuICogTWFpbiBkYXRhIHR5cGUgZW51bWVyYXRpb246XG4gKiAqXG4gKiBEYXRhIHR5cGVzIGluIHRoaXMgbGlicmFyeSBhcmUgYWxsICpsb2dpY2FsKi4gVGhleSBjYW4gYmUgZXhwcmVzc2VkIGFzXG4gKiBlaXRoZXIgYSBwcmltaXRpdmUgcGh5c2ljYWwgdHlwZSAoYnl0ZXMgb3IgYml0cyBvZiBzb21lIGZpeGVkIHNpemUpLCBhXG4gKiBuZXN0ZWQgdHlwZSBjb25zaXN0aW5nIG9mIG90aGVyIGRhdGEgdHlwZXMsIG9yIGFub3RoZXIgZGF0YSB0eXBlIChlLmcuIGFcbiAqIHRpbWVzdGFtcCBlbmNvZGVkIGFzIGFuIGludDY0KVxuICovXG5leHBvcnQgZW51bSBUeXBlIHtcbiAgICBOT05FICAgICAgICAgICAgPSAgMCwgIC8vIFRoZSBkZWZhdWx0IHBsYWNlaG9sZGVyIHR5cGVcbiAgICBOdWxsICAgICAgICAgICAgPSAgMSwgIC8vIEEgTlVMTCB0eXBlIGhhdmluZyBubyBwaHlzaWNhbCBzdG9yYWdlXG4gICAgSW50ICAgICAgICAgICAgID0gIDIsICAvLyBTaWduZWQgb3IgdW5zaWduZWQgOCwgMTYsIDMyLCBvciA2NC1iaXQgbGl0dGxlLWVuZGlhbiBpbnRlZ2VyXG4gICAgRmxvYXQgICAgICAgICAgID0gIDMsICAvLyAyLCA0LCBvciA4LWJ5dGUgZmxvYXRpbmcgcG9pbnQgdmFsdWVcbiAgICBCaW5hcnkgICAgICAgICAgPSAgNCwgIC8vIFZhcmlhYmxlLWxlbmd0aCBieXRlcyAobm8gZ3VhcmFudGVlIG9mIFVURjgtbmVzcylcbiAgICBVdGY4ICAgICAgICAgICAgPSAgNSwgIC8vIFVURjggdmFyaWFibGUtbGVuZ3RoIHN0cmluZyBhcyBMaXN0PENoYXI+XG4gICAgQm9vbCAgICAgICAgICAgID0gIDYsICAvLyBCb29sZWFuIGFzIDEgYml0LCBMU0IgYml0LXBhY2tlZCBvcmRlcmluZ1xuICAgIERlY2ltYWwgICAgICAgICA9ICA3LCAgLy8gUHJlY2lzaW9uLWFuZC1zY2FsZS1iYXNlZCBkZWNpbWFsIHR5cGUuIFN0b3JhZ2UgdHlwZSBkZXBlbmRzIG9uIHRoZSBwYXJhbWV0ZXJzLlxuICAgIERhdGUgICAgICAgICAgICA9ICA4LCAgLy8gaW50MzJfdCBkYXlzIG9yIGludDY0X3QgbWlsbGlzZWNvbmRzIHNpbmNlIHRoZSBVTklYIGVwb2NoXG4gICAgVGltZSAgICAgICAgICAgID0gIDksICAvLyBUaW1lIGFzIHNpZ25lZCAzMiBvciA2NC1iaXQgaW50ZWdlciwgcmVwcmVzZW50aW5nIGVpdGhlciBzZWNvbmRzLCBtaWxsaXNlY29uZHMsIG1pY3Jvc2Vjb25kcywgb3IgbmFub3NlY29uZHMgc2luY2UgbWlkbmlnaHQgc2luY2UgbWlkbmlnaHRcbiAgICBUaW1lc3RhbXAgICAgICAgPSAxMCwgIC8vIEV4YWN0IHRpbWVzdGFtcCBlbmNvZGVkIHdpdGggaW50NjQgc2luY2UgVU5JWCBlcG9jaCAoRGVmYXVsdCB1bml0IG1pbGxpc2Vjb25kKVxuICAgIEludGVydmFsICAgICAgICA9IDExLCAgLy8gWUVBUl9NT05USCBvciBEQVlfVElNRSBpbnRlcnZhbCBpbiBTUUwgc3R5bGVcbiAgICBMaXN0ICAgICAgICAgICAgPSAxMiwgIC8vIEEgbGlzdCBvZiBzb21lIGxvZ2ljYWwgZGF0YSB0eXBlXG4gICAgU3RydWN0ICAgICAgICAgID0gMTMsICAvLyBTdHJ1Y3Qgb2YgbG9naWNhbCB0eXBlc1xuICAgIFVuaW9uICAgICAgICAgICA9IDE0LCAgLy8gVW5pb24gb2YgbG9naWNhbCB0eXBlc1xuICAgIEZpeGVkU2l6ZUJpbmFyeSA9IDE1LCAgLy8gRml4ZWQtc2l6ZSBiaW5hcnkuIEVhY2ggdmFsdWUgb2NjdXBpZXMgdGhlIHNhbWUgbnVtYmVyIG9mIGJ5dGVzXG4gICAgRml4ZWRTaXplTGlzdCAgID0gMTYsICAvLyBGaXhlZC1zaXplIGxpc3QuIEVhY2ggdmFsdWUgb2NjdXBpZXMgdGhlIHNhbWUgbnVtYmVyIG9mIGJ5dGVzXG4gICAgTWFwICAgICAgICAgICAgID0gMTcsICAvLyBNYXAgb2YgbmFtZWQgbG9naWNhbCB0eXBlc1xuXG4gICAgLy8gVGhlc2UgZW51bSB2YWx1ZXMgYXJlIGhlcmUgc28gdGhhdCBUeXBlU2NyaXB0IGNhbiBuYXJyb3cgdGhlIHR5cGUgc2lnbmF0dXJlcyBmdXJ0aGVyXG4gICAgLy8gYmV5b25kIHRoZSBiYXNlIEFycm93IHR5cGVzLiBUaGUgYmFzZSBBcnJvdyB0eXBlcyBpbmNsdWRlIG1ldGFkYXRhIGxpa2UgYml0V2lkdGhzIHRoYXRcbiAgICAvLyBpbXBhY3QgdGhlIHR5cGUgc2lnbmF0dXJlcyBvZiB0aGUgdmFsdWVzIHdlIHJldHVybi4gRm9yIGV4YW1wbGUsIHRoZSBJbnQ4VmVjdG9yIHJlYWRzXG4gICAgLy8gMS1ieXRlIG51bWJlcnMgZnJvbSBhbiBJbnQ4QXJyYXksIGFuIEludDMyVmVjdG9yIHJlYWRzIGEgNC1ieXRlIG51bWJlciBmcm9tIGFuIEludDMyQXJyYXksXG4gICAgLy8gYW5kIGFuIEludDY0VmVjdG9yIHJlYWRzIGEgcGFpciBvZiA0LWJ5dGUgbG8sIGhpIGludDMycywgYW5kIHJldHVybnMgdGhlbSBhcyBhIHplcm8tY29weVxuICAgIC8vIHNsaWNlIGZyb20gYW4gdW5kZXJseWluZyBJbnQzMkFycmF5LiBMaWJyYXJ5IGNvbnN1bWVycyBiZW5lZml0IGJ5IGRvaW5nIHRoaXMgdHlwZSBuYXJyb3dpbmcsXG4gICAgLy8gc2luY2Ugd2UgY2FuIGVuc3VyZSB0aGUgdHlwZXMgYWNyb3NzIGFsbCBwdWJsaWMgbWV0aG9kcyBhcmUgcHJvcGFnYXRlZCBhbmQgbmV2ZXIgYmFpbCB0byBgYW55YC5cbiAgICAvLyBUaGVzZSB2YWx1ZXMgYXJlIF9uZXZlcl8gYWN0dWFsbHkgdXNlZCBhdCBydW50aW1lLCBhbmQgdGhleSB3aWxsIF9uZXZlcl8gYmUgd3JpdHRlbiBpbnRvIHRoZVxuICAgIC8vIGZsYXRidWZmZXJzIG1ldGFkYXRhIG9mIHNlcmlhbGl6ZWQgQXJyb3cgSVBDIHBheWxvYWRzLlxuICAgIERpY3Rpb25hcnkgICAgICAgICAgICA9IC0xLCAvLyBEaWN0aW9uYXJ5IGFrYSBDYXRlZ29yeSB0eXBlXG4gICAgSW50OCAgICAgICAgICAgICAgICAgID0gLTIsXG4gICAgSW50MTYgICAgICAgICAgICAgICAgID0gLTMsXG4gICAgSW50MzIgICAgICAgICAgICAgICAgID0gLTQsXG4gICAgSW50NjQgICAgICAgICAgICAgICAgID0gLTUsXG4gICAgVWludDggICAgICAgICAgICAgICAgID0gLTYsXG4gICAgVWludDE2ICAgICAgICAgICAgICAgID0gLTcsXG4gICAgVWludDMyICAgICAgICAgICAgICAgID0gLTgsXG4gICAgVWludDY0ICAgICAgICAgICAgICAgID0gLTksXG4gICAgRmxvYXQxNiAgICAgICAgICAgICAgID0gLTEwLFxuICAgIEZsb2F0MzIgICAgICAgICAgICAgICA9IC0xMSxcbiAgICBGbG9hdDY0ICAgICAgICAgICAgICAgPSAtMTIsXG4gICAgRGF0ZURheSAgICAgICAgICAgICAgID0gLTEzLFxuICAgIERhdGVNaWxsaXNlY29uZCAgICAgICA9IC0xNCxcbiAgICBUaW1lc3RhbXBTZWNvbmQgICAgICAgPSAtMTUsXG4gICAgVGltZXN0YW1wTWlsbGlzZWNvbmQgID0gLTE2LFxuICAgIFRpbWVzdGFtcE1pY3Jvc2Vjb25kICA9IC0xNyxcbiAgICBUaW1lc3RhbXBOYW5vc2Vjb25kICAgPSAtMTgsXG4gICAgVGltZVNlY29uZCAgICAgICAgICAgID0gLTE5LFxuICAgIFRpbWVNaWxsaXNlY29uZCAgICAgICA9IC0yMCxcbiAgICBUaW1lTWljcm9zZWNvbmQgICAgICAgPSAtMjEsXG4gICAgVGltZU5hbm9zZWNvbmQgICAgICAgID0gLTIyLFxuICAgIERlbnNlVW5pb24gICAgICAgICAgICA9IC0yMyxcbiAgICBTcGFyc2VVbmlvbiAgICAgICAgICAgPSAtMjQsXG4gICAgSW50ZXJ2YWxEYXlUaW1lICAgICAgID0gLTI1LFxuICAgIEludGVydmFsWWVhck1vbnRoICAgICA9IC0yNixcbn1cbiJdfQ==\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Footer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Footer=} obj\n                     * @returns {Footer}\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.Schema=} obj\n                     * @returns {org.apache.arrow.flatbuf.Schema|null}\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Block}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns {number}\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {number} metaDataLength\n                     * @param {flatbuffers.Long} bodyLength\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';\nexport class DataType {\n    constructor(_TType = Type.NONE, _children) {\n        this._TType = _TType;\n        this._children = _children;\n    }\n    /** @nocollapse */ static isNull(x) { return x && x.TType === Type.Null; }\n    /** @nocollapse */ static isInt(x) { return x && x.TType === Type.Int; }\n    /** @nocollapse */ static isFloat(x) { return x && x.TType === Type.Float; }\n    /** @nocollapse */ static isBinary(x) { return x && x.TType === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x) { return x && x.TType === Type.Utf8; }\n    /** @nocollapse */ static isBool(x) { return x && x.TType === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x) { return x && x.TType === Type.Decimal; }\n    /** @nocollapse */ static isDate(x) { return x && x.TType === Type.Date; }\n    /** @nocollapse */ static isTime(x) { return x && x.TType === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x) { return x && x.TType === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x) { return x && x.TType === Type.Interval; }\n    /** @nocollapse */ static isList(x) { return x && x.TType === Type.List; }\n    /** @nocollapse */ static isStruct(x) { return x && x.TType === Type.Struct; }\n    /** @nocollapse */ static isUnion(x) { return x && x.TType === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.TType === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x) { return x && x.TType === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x) { return x && x.TType === Type.Map; }\n    /** @nocollapse */ static isDictionary(x) { return x && x.TType === Type.Dictionary; }\n    get TType() { return this._TType; }\n    get children() { return this._children; }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexport class Null extends DataType {\n    constructor() {\n        super(Type.Null);\n    }\n    toString() { return `Null`; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nclass Int_ extends DataType {\n    constructor(_isSigned, _bitWidth) {\n        super(Type.Int);\n        this._isSigned = _isSigned;\n        this._bitWidth = _bitWidth;\n    }\n    get isSigned() { return this._isSigned; }\n    get bitWidth() { return this._bitWidth; }\n    get ArrayType() {\n        switch (this._bitWidth) {\n            case 8: return (this._isSigned ? Int8Array : Uint8Array);\n            case 16: return (this._isSigned ? Int16Array : Uint16Array);\n            case 32: return (this._isSigned ? Int32Array : Uint32Array);\n            case 64: return (this._isSigned ? Int32Array : Uint32Array);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n}\nInt_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\nexport class Int8 extends Int_ {\n    constructor() { super(true, 8); }\n}\nexport class Int16 extends Int_ {\n    constructor() { super(true, 16); }\n}\nexport class Int32 extends Int_ {\n    constructor() { super(true, 32); }\n}\nexport class Int64 extends Int_ {\n    constructor() { super(true, 64); }\n}\nexport class Uint8 extends Int_ {\n    constructor() { super(false, 8); }\n}\nexport class Uint16 extends Int_ {\n    constructor() { super(false, 16); }\n}\nexport class Uint32 extends Int_ {\n    constructor() { super(false, 32); }\n}\nexport class Uint64 extends Int_ {\n    constructor() { super(false, 64); }\n}\nexport class Float extends DataType {\n    constructor(_precision) {\n        super(Type.Float);\n        this._precision = _precision;\n    }\n    get precision() { return this._precision; }\n    // @ts-ignore\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super(Type.Binary);\n    }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexport class Utf8 extends DataType {\n    constructor() {\n        super(Type.Utf8);\n    }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexport class Bool extends DataType {\n    constructor() {\n        super(Type.Bool);\n    }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexport class Decimal extends DataType {\n    constructor(_scale, _precision) {\n        super(Type.Decimal);\n        this._scale = _scale;\n        this._precision = _precision;\n    }\n    get scale() { return this._scale; }\n    get precision() { return this._precision; }\n    toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexport class Date_ extends DataType {\n    constructor(_unit) {\n        super(Type.Date);\n        this._unit = _unit;\n    }\n    get unit() { return this._unit; }\n    toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexport class DateDay extends Date_ {\n    constructor() { super(DateUnit.DAY); }\n}\nexport class DateMillisecond extends Date_ {\n    constructor() { super(DateUnit.MILLISECOND); }\n}\nclass Time_ extends DataType {\n    constructor(_unit, _bitWidth) {\n        super(Type.Time);\n        this._unit = _unit;\n        this._bitWidth = _bitWidth;\n    }\n    get unit() { return this._unit; }\n    get bitWidth() { return this._bitWidth; }\n    toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n}\nTime_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\nexport class TimeSecond extends Time_ {\n    constructor(bitWidth) { super(TimeUnit.SECOND, bitWidth); }\n}\nexport class TimeMillisecond extends Time_ {\n    constructor(bitWidth) { super(TimeUnit.MILLISECOND, bitWidth); }\n}\nexport class TimeMicrosecond extends Time_ {\n    constructor(bitWidth) { super(TimeUnit.MICROSECOND, bitWidth); }\n}\nexport class TimeNanosecond extends Time_ {\n    constructor(bitWidth) { super(TimeUnit.NANOSECOND, bitWidth); }\n}\nclass Timestamp_ extends DataType {\n    constructor(_unit, _timezone) {\n        super(Type.Timestamp);\n        this._unit = _unit;\n        this._timezone = _timezone;\n    }\n    get unit() { return this._unit; }\n    get timezone() { return this._timezone; }\n    toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n}\nTimestamp_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\nexport class TimestampSecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.SECOND, timezone); }\n}\nexport class TimestampMillisecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MILLISECOND, timezone); }\n}\nexport class TimestampMicrosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MICROSECOND, timezone); }\n}\nexport class TimestampNanosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.NANOSECOND, timezone); }\n}\nclass Interval_ extends DataType {\n    constructor(_unit) {\n        super(Type.Interval);\n        this._unit = _unit;\n    }\n    get unit() { return this._unit; }\n    toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n}\nInterval_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\nexport class IntervalDayTime extends Interval_ {\n    constructor() { super(IntervalUnit.DAY_TIME); }\n}\nexport class IntervalYearMonth extends Interval_ {\n    constructor() { super(IntervalUnit.YEAR_MONTH); }\n}\nexport class List extends DataType {\n    constructor(_children) {\n        super(Type.List, _children);\n        this._children = _children;\n    }\n    toString() { return `List<${this.valueType}>`; }\n    get children() { return this._children; }\n    get valueType() { return this._children[0].type; }\n    get valueField() { return this._children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexport class Struct extends DataType {\n    constructor(_children) {\n        super(Type.Struct, _children);\n        this._children = _children;\n    }\n    get children() { return this._children; }\n    toString() { return `Struct<${this._children.map((f) => f.type).join(`, `)}>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nclass Union_ extends DataType {\n    constructor(_mode, _typeIds, _children) {\n        super(Type.Union, _children);\n        this._mode = _mode;\n        this._typeIds = _typeIds;\n        this._children = _children;\n        this._typeIdToChildIndex = (_typeIds || []).reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null));\n    }\n    get mode() { return this._mode; }\n    get typeIds() { return this._typeIds; }\n    get children() { return this._children; }\n    get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this._children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\nUnion_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\nexport class DenseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\nexport class SparseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\nexport class FixedSizeBinary extends DataType {\n    constructor(_byteWidth) {\n        super(Type.FixedSizeBinary);\n        this._byteWidth = _byteWidth;\n    }\n    get byteWidth() { return this._byteWidth; }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexport class FixedSizeList extends DataType {\n    constructor(_listSize, _children) {\n        super(Type.FixedSizeList, _children);\n        this._listSize = _listSize;\n        this._children = _children;\n    }\n    get listSize() { return this._listSize; }\n    get children() { return this._children; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexport class Map_ extends DataType {\n    constructor(_children, _keysSorted = false) {\n        super(Type.Map, _children);\n        this._children = _children;\n        this._keysSorted = _keysSorted;\n    }\n    get children() { return this._children; }\n    get keysSorted() { return this._keysSorted; }\n    toString() { return `Map<${this.children.join(`, `)}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered, dictionaryVector) {\n        super(Type.Dictionary);\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this.dictionaryVector = dictionaryVector;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    get id() { return this._id; }\n    get indices() { return this._indices; }\n    get dictionary() { return this._dictionary; }\n    get isOrdered() { return this._isOrdered; }\n    set children(_) { }\n    get children() { return this.dictionary.children; }\n    get valueType() { return this.dictionary; }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nexport class Schema {\n    constructor(fields, metadata, dictionaries, dictionaryFields) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new Schema(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n    get fields() { return this._fields; }\n    get metadata() { return this._metadata; }\n    get dictionaries() { return this._dictionaries; }\n    get dictionaryFields() { return this._dictionaryFields; }\n    select(...columnNames) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n}\nSchema[Symbol.toStringTag] = ((prototype) => {\n    prototype._metadata = Object.freeze(new Map());\n    return 'Schema';\n})(Schema.prototype);\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    get type() { return this._type; }\n    get name() { return this._name; }\n    get typeId() { return this.type.TType; }\n    get nullable() { return this._nullable; }\n    get metadata() { return this._metadata; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    get indices() {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n    toString() { return `${this.name}: ${this.type}`; }\n}\nfunction generateDictionaryMap(fields, dictionaries, dictionaryFields) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id).push(field);\n            }\n            else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n    return { dictionaries, dictionaryFields };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nclass Footer_ {\n    constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema());\n        return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n    static encode(footer) {\n        const b = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n        const dictionaryBatchesOffset = b.endVector();\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() { return this._recordBatches.length; }\n    get numDictionaries() { return this._dictionaryBatches.length; }\n    *recordBatches() {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    *dictionaryBatches() {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    getRecordBatch(index) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\nexport { Footer_ as Footer };\nclass OffHeapFooter extends Footer_ {\n    constructor(schema, _footer) {\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    get numDictionaries() { return this._footer.dictionariesLength(); }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n}\nexport class FileBlock {\n    /** @nocollapse */\n    static decode(block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n    static encode(b, fileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/**\n * @ignore\n */\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\n/**\n * @ignore\n */\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\n/**\n * @ignore\n */\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n/**\n * @ignore\n */\nexport function truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n/**\n * @ignore\n */\nexport function packBools(values) {\n    let n = 0, i = 0;\n    let xs = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do {\n            xs[i] = 0;\n        } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n/**\n * @ignore\n */\nexport function* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/**\n * @ignore\n */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\n/**\n * @ignore\n */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n/**\n * @ignore\n */\nexport function popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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SUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7U0FDbEI7S0FDSjtJQUNELElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxHQUFHLEdBQUcsQ0FBQyxFQUFFO1FBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDO0tBQUU7SUFDM0MsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1FBQzlCLEdBQUc7WUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1NBQUUsUUFBUSxFQUFFLENBQUMsR0FBRyxDQUFDLEVBQUU7S0FDckM7SUFDRCxPQUFPLElBQUksVUFBVSxDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBQzlCLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sU0FBUyxDQUFDLENBQUMsV0FBVyxDQUFJLEtBQWlCLEVBQUUsS0FBYSxFQUFFLE1BQWMsRUFBRSxPQUFZLEVBQzlELEdBQWtFO0lBQzlGLElBQUksR0FBRyxHQUFHLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDcEIsSUFBSSxTQUFTLEdBQUcsS0FBSyxJQUFJLENBQUMsQ0FBQztJQUMzQixJQUFJLEtBQUssR0FBRyxDQUFDLEVBQUUsU0FBUyxHQUFHLE1BQU0sQ0FBQztJQUNsQyxPQUFPLFNBQVMsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLENBQUMsRUFBRTtRQUMzQixJQUFJLElBQUksR0FBRyxLQUFLLENBQUMsU0FBUyxFQUFFLENBQUMsQ0FBQztRQUM5QixHQUFHO1lBQ0MsTUFBTSxHQUFHLENBQUMsT0FBTyxFQUFFLEtBQUssRUFBRSxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQztTQUMxQyxRQUFRLEVBQUUsU0FBUyxHQUFHLENBQUMsSUFBSSxFQUFFLEdBQUcsR0FBRyxDQUFDLEVBQUU7S0FDMUM7QUFDTCxDQUFDO0FBRUQ7Ozs7O0dBS0c7QUFDSDs7R0FFRztBQUNILE1BQU0sVUFB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QUssQ0FBQyxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUM7SUFDaEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxVQUFVLENBQUMsR0FBRyxVQUFVLENBQUMsS0FBSyxFQUFFLENBQUM7QUFDaEUsQ0FBQyIsImZpbGUiOiJ1dGlsL2JpdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEJvb2woX2RhdGE6IGFueSwgX2luZGV4OiBudW1iZXIsIGJ5dGU6IG51bWJlciwgYml0OiBudW1iZXIpIHtcbiAgICByZXR1cm4gKGJ5dGUgJiAxIDw8IGJpdCkgIT09IDA7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0Qml0KF9kYXRhOiBhbnksIF9pbmRleDogbnVtYmVyLCBieXRlOiBudW1iZXIsIGJpdDogbnVtYmVyKTogMCB8IDEge1xuICAgIHJldHVybiAoYnl0ZSAmIDEgPDwgYml0KSA+PiBiaXQgYXMgKDAgfCAxKTtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXRCb29sKGJ5dGVzOiBVaW50OEFycmF5LCBpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSB7XG4gICAgcmV0dXJuIHZhbHVlID9cbiAgICAgICAgISEoYnl0ZXNbaW5kZXggPj4gM10gfD0gICgxIDw8IChpbmRleCAlIDgpKSkgfHwgdHJ1ZSA6XG4gICAgICAgICEoYnl0ZXNbaW5kZXggPj4gM10gJj0gfigxIDw8IChpbmRleCAlIDgpKSkgJiYgZmFsc2UgO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRydW5jYXRlQml0bWFwKG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgYml0bWFwOiBVaW50OEFycmF5KSB7XG4gICAgY29uc3QgYWxpZ25lZFNpemUgPSAoYml0bWFwLmJ5dGVMZW5ndGggKyA3KSAmIH43O1xuICAgIGlmIChvZmZzZXQgPiAwIHx8IGJpdG1hcC5ieXRlTGVuZ3RoIDwgYWxpZ25lZFNpemUpIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBuZXcgVWludDhBcnJheShhbGlnbmVkU2l6ZSk7XG4gICAgICAgIGJ5dGVzLnNldCgob2Zmc2V0ICUgOCA9PT0gMClcbiAgICAgICAgICAgIC8vIElmIHRoZSBvZmZzZXQgaXMgYSBtdWx0aXBsZSBvZiA4IGJpdHMsIGl0J3Mgc2FmZSB0byBzbGljZSB0aGUgYml0bWFwXG4gICAgICAgICAgICA/IGJpdG1hcC5zdWJhcnJheShvZmZzZXQgPj4gMylcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpdGVyYXRlIGVhY2ggYml0IGZyb20gdGhlIG9mZnNldCBhbmQgcmV0dXJuIGEgbmV3IG9uZVxuICAgICAgICAgICAgOiBwYWNrQm9vbHMoaXRlcmF0ZUJpdHMoYml0bWFwLCBvZmZzZXQsIGxlbmd0aCwgbnVsbCwgZ2V0Qm9vbCkpKTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzO1xuICAgIH1cbiAgICByZXR1cm4gYml0bWFwO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBhY2tCb29scyh2YWx1ZXM6IEl0ZXJhYmxlPGFueT4pIHtcbiAgICBsZXQgbiA9IDAsIGkgPSAwO1xuICAgIGxldCB4czogbnVtYmVyW10gPSBbXTtcbiAgICBsZXQgYml0ID0gMCwgYnl0ZSA9IDA7XG4gICAgZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcbiAgICAgICAgdmFsdWUgJiYgKGJ5dGUgfD0gMSA8PCBiaXQpO1xuICAgICAgICBpZiAoKytiaXQgPT09IDgpIHtcbiAgICAgICAgICAgIHhzW2krK10gPSBieXRlO1xuICAgICAgICAgICAgYnl0ZSA9IGJpdCA9IDA7XG4gICAgICAgIH1cbiAgICB9XG4gICAgaWYgKGkgPT09IDAgfHwgYml0ID4gMCkgeyB4c1tpKytdID0gYnl0ZTsgfVxuICAgIGlmIChpICUgOCAmJiAobiA9IGkgKyA4IC0gaSAlIDgpKSB7XG4gICAgICAgIGRvIHsgeHNbaV0gPSAwOyB9IHdoaWxlICgrK2kgPCBuKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KHhzKTtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiogaXRlcmF0ZUJpdHM8VD4oYnl0ZXM6IFVpbnQ4QXJyYXksIGJlZ2luOiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBjb250ZXh0OiBhbnksXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldDogKGNvbnRleHQ6IGFueSwgaW5kZXg6IG51bWJlciwgYnl0ZTogbnVtYmVyLCBiaXQ6IG51bWJlcikgPT4gVCkge1xuICAgIGxldCBiaXQgPSBiZWdpbiAlIDg7XG4gICAgbGV0IGJ5dGVJbmRleCA9IGJlZ2luID4+IDM7XG4gICAgbGV0IGluZGV4ID0gMCwgcmVtYWluaW5nID0gbGVuZ3RoO1xuICAgIGZvciAoOyByZW1haW5pbmcgPiAwOyBiaXQgPSAwKSB7XG4gICAgICAgIGxldCBieXRlID0gYnl0ZXNbYnl0ZUluZGV4KytdO1xuICAgICAgICBkbyB7XG4gICAgICAgICAgICB5aWVsZCBnZXQoY29udGV4dCwgaW5kZXgrKywgYnl0ZSwgYml0KTtcbiAgICAgICAgfSB3aGlsZSAoLS1yZW1haW5pbmcgPiAwICYmICsrYml0IDwgOCk7XG4gICAgfVxufVxuXG4vKipcbiAqIENvbXB1dGUgdGhlIHBvcHVsYXRpb24gY291bnQgKHRoZSBudW1iZXIgb2YgYml0cyBzZXQgdG8gMSkgZm9yIGEgcmFuZ2Ugb2YgYml0cyBpbiBhIFVpbnQ4QXJyYXkuXG4gKiBAcGFyYW0gdmVjdG9yIFRoZSBVaW50OEFycmF5IG9mIGJpdHMgZm9yIHdoaWNoIHRvIGNvbXB1dGUgdGhlIHBvcHVsYXRpb24gY291bnQuXG4gKiBAcGFyYW0gbGhzIFRoZSByYW5nZSdzIGxlZnQtaGFuZCBzaWRlIChvciBzdGFydCkgYml0XG4gKiBAcGFyYW0gcmhzIFRoZSByYW5nZSdzIHJpZ2h0LWhhbmQgc2lkZSAob3IgZW5kKSBiaXRcbiAqL1xuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBwb3BjbnRfYml0X3JhbmdlKGRhdGE6IFVpbnQ4QXJyYXksIGxoczogbnVtYmVyLCByaHM6IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHJocyAtIGxocyA8PSAwKSB7IHJldHVybiAwOyB9XG4gICAgLy8gSWYgdGhlIGJpdCByYW5nZSBpcyBsZXNzIHRoYW4gb25lIGJ5dGUsIHN1bSB0aGUgMSBiaXRzIGluIHRoZSBiaXQgcmFuZ2VcbiAgICBpZiAocmhzIC0gbGhzIDwgOCkge1xuICAgICAgICBsZXQgc3VtID0gMDtcbiAgICAgICAgZm9yIChjb25zdCBiaXQgb2YgaXRlcmF0ZUJpdHMoZGF0YSwgbGhzLCByaHMgLSBsaHMsIGRhdGEsIGdldEJpdCkpIHtcbiAgICAgICAgICAgIHN1bSArPSBiaXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN1bTtcbiAgICB9XG4gICAgLy8gR2V0IHRoZSBuZXh0IGxvd2VzdCBtdWx0aXBsZSBvZiA4IGZyb20gdGhlIHJpZ2h0IGhhbmQgc2lkZVxuICAgIGNvbnN0IHJoc0luc2lkZSA9IHJocyA+PiAzIDw8IDM7XG4gICAgLy8gR2V0IHRoZSBuZXh0IGhpZ2hlc3QgbXVsdGlwbGUgb2YgOCBmcm9tIHRoZSBsZWZ0IGhhbmQgc2lkZVxuICAgIGNvbnN0IGxoc0luc2lkZSA9IGxocyArIChsaHMgJSA4ID09PSAwID8gMCA6IDggLSBsaHMgJSA4KTtcbiAgICByZXR1cm4gKFxuICAgICAgICAvLyBHZXQgdGhlIHBvcGNudCBvZiBiaXRzIGJldHdlZW4gdGhlIGxlZnQgaGFuZCBzaWRlLCBhbmQgdGhlIG5leHQgaGlnaGVzdCBtdWx0aXBsZSBvZiA4XG4gICAgICAgIHBvcGNudF9iaXRfcmFuZ2UoZGF0YSwgbGhzLCBsaHNJbnNpZGUpICtcbiAgICAgICAgLy8gR2V0IHRoZSBwb3BjbnQgb2YgYml0cyBiZXR3ZWVuIHRoZSByaWdodCBoYW5kIHNpZGUsIGFuZCB0aGUgbmV4dCBsb3dlc3QgbXVsdGlwbGUgb2YgOFxuICAgICAgICBwb3BjbnRfYml0X3JhbmdlKGRhdGEsIHJoc0luc2lkZSwgcmhzKSArXG4gICAgICAgIC8vIEdldCB0aGUgcG9wY250IG9mIGFsbCBiaXRzIGJldHdlZW4gdGhlIGxlZnQgYW5kIHJpZ2h0IGhhbmQgc2lkZXMnIG11bHRpcGxlcyBvZiA4XG4gICAgICAgIHBvcGNudF9hcnJheShkYXRhLCBsaHNJbnNpZGUgPj4gMywgKHJoc0luc2lkZSAtIGxoc0luc2lkZSkgPj4gMylcbiAgICApO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvcGNudF9hcnJheShhcnI6IEFycmF5QnVmZmVyVmlldywgYnl0ZU9mZnNldD86IG51bWJlciwgYnl0ZUxlbmd0aD86IG51bWJlcikge1xuICAgIGxldCBjbnQgPSAwLCBwb3MgPSBieXRlT2Zmc2V0ISB8IDA7XG4gICAgY29uc3QgdmlldyA9IG5ldyBEYXRhVmlldyhhcnIuYnVmZmVyLCBhcnIuYnl0ZU9mZnNldCwgYXJyLmJ5dGVMZW5ndGgpO1xuICAgIGNvbnN0IGxlbiA9ICBieXRlTGVuZ3RoID09PSB2b2lkIDAgPyBhcnIuYnl0ZUxlbmd0aCA6IHBvcyArIGJ5dGVMZW5ndGg7XG4gICAgd2hpbGUgKGxlbiAtIHBvcyA+PSA0KSB7XG4gICAgICAgIGNudCArPSBwb3BjbnRfdWludDMyKHZpZXcuZ2V0VWludDMyKHBvcykpO1xuICAgICAgICBwb3MgKz0gNDtcbiAgICB9XG4gICAgd2hpbGUgKGxlbiAtIHBvcyA+PSAyKSB7XG4gICAgICAgIGNudCArPSBwb3BjbnRfdWludDMyKHZpZXcuZ2V0VWludDE2KHBvcykpO1xuICAgICAgICBwb3MgKz0gMjtcbiAgICB9XG4gICAgd2hpbGUgKGxlbiAtIHBvcyA+PSAxKSB7XG4gICAgICAgIGNudCArPSBwb3BjbnRfdWludDMyKHZpZXcuZ2V0VWludDgocG9zKSk7XG4gICAgICAgIHBvcyArPSAxO1xuICAgIH1cbiAgICByZXR1cm4gY250O1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHBvcGNudF91aW50MzIodWludDMyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIGxldCBpID0gdWludDMyIHwgMDtcbiAgICBpID0gaSAtICgoaSA+Pj4gMSkgJiAweDU1NTU1NTU1KTtcbiAgICBpID0gKGkgJiAweDMzMzMzMzMzKSArICgoaSA+Pj4gMikgJiAweDMzMzMzMzMzKTtcbiAgICByZXR1cm4gKCgoaSArIChpID4+PiA0KSkgJiAweDBGMEYwRjBGKSAqIDB4MDEwMTAxMDEpID4+PiAyNDtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { Type, VectorType as BufferType, UnionMode } from './enum';\nexport const kUnknownNullCount = -1;\nexport class Data {\n    constructor(type, offset, length, nullCount, buffers, childData) {\n        this._buffers = [];\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers);\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data);\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get offset() { return this._offset; }\n    get childData() { return this._childData; }\n    get TType() { return this.type.TType; }\n    get TArray() { return this.type.TArray; }\n    get TValue() { return this.type.TValue; }\n    get ArrayType() { return this.type.ArrayType; }\n    get values() { return this._buffers[BufferType.DATA]; }\n    get typeIds() { return this._buffers[BufferType.TYPE]; }\n    get nullBitmap() { return this._buffers[BufferType.VALIDITY]; }\n    get valueOffsets() { return this._buffers[BufferType.OFFSET]; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this.nullBitmap)) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    clone(type, offset = this.offset, length = this.length, nullCount = this._nullCount, buffers = this._buffers, childData = this.childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n    slice(offset, length) {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone(this.type, this.offset + offset, length, nullCount, buffers, childData);\n    }\n    sliceBuffers(offset, length) {\n        let arr, buffers = Object.assign([], this._buffers);\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n    sliceChildren(offset, length) {\n        // Only slice children if this isn't variable width data\n        if (!this.valueOffsets) {\n            return this.childData.map((child) => child.slice(offset, length));\n        }\n        return this.childData;\n    }\n    sliceData(data, offset, length) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this.type.TType === Type.Bool ? data : data.subarray(offset, offset + length);\n    }\n    sliceOffsets(valueOffsets, offset, length) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    static Null(type, offset, length, nullCount, nullBitmap) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    static Int(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Dictionary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Float(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Bool(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Date(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Time(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Interval(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, childData);\n    }\n    /** @nocollapse */\n    static FixedSizeList(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Struct(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Map(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildData, childData) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        };\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QWMsRUFBRSxTQUFpQixFQUFFLFVBQXNCLEVBQUUsT0FBbUIsRUFBRSx1QkFBK0QsRUFBRSxTQUE2QjtRQUN4TyxNQUFNLE9BQU8sR0FBRztZQUNaLENBQUMsVUFBVSxDQUFDLFFBQVEsQ0FBQyxFQUFFLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxVQUFVLENBQUM7WUFDaEUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUUsaUJBQWlCLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUM7U0FDekQsQ0FBQztRQUNULElBQUksSUFBSSxDQUFDLElBQUksS0FBSyxTQUFTLENBQUMsTUFBTSxFQUFFO1lBQ2hDLE9BQU8sSUFBSSxJQUFJLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRSx1QkFBNEMsQ0FBQyxDQUFDO1NBQzNHO1FBQ0QsT0FBTyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsR0FBRyxpQkFBaUIsQ0FBQyxVQUFVLEVBQXVCLHVCQUF1QixDQUFDLENBQUM7UUFDekcsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUUsT0FBTyxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSiIsImZpbGUiOiJkYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IHBvcGNudF9iaXRfcmFuZ2UgfSBmcm9tICcuL3V0aWwvYml0JztcbmltcG9ydCB7IHRvQXJyYXlCdWZmZXJWaWV3IH0gZnJvbSAnLi91dGlsL2J1ZmZlcic7XG5pbXBvcnQgeyBUeXBlLCBWZWN0b3JUeXBlIGFzIEJ1ZmZlclR5cGUsIFVuaW9uTW9kZSB9IGZyb20gJy4vZW51bSc7XG5pbXBvcnQge1xuICAgIERpY3Rpb25hcnksXG4gICAgTnVsbCwgSW50LCBGbG9hdCxcbiAgICBCaW5hcnksIEJvb2wsIFV0ZjgsIERlY2ltYWwsXG4gICAgRGF0ZV8sIFRpbWUsIFRpbWVzdGFtcCwgSW50ZXJ2YWwsXG4gICAgTGlzdCwgU3RydWN0LCBVbmlvbiwgRml4ZWRTaXplQmluYXJ5LCBGaXhlZFNpemVMaXN0LCBNYXBfLFxufSBmcm9tICcuL3R5cGUnO1xuXG4vLyBXaGVuIHNsaWNpbmcsIHdlIGRvIG5vdCBrbm93IHRoZSBudWxsIGNvdW50IG9mIHRoZSBzbGljZWQgcmFuZ2Ugd2l0aG91dFxuLy8gZG9pbmcgc29tZSBjb21wdXRhdGlvbi4gVG8gYXZvaWQgZG9pbmcgdGhpcyBlYWdlcmx5LCB3ZSBzZXQgdGhlIG51bGwgY291bnRcbi8vIHRvIC0xIChhbnkgbmVnYXRpdmUgbnVtYmVyIHdpbGwgZG8pLiBXaGVuIEFycmF5OjpudWxsX2NvdW50IGlzIGNhbGxlZCB0aGVcbi8vIGZpcnN0IHRpbWUsIHRoZSBudWxsIGNvdW50IHdpbGwgYmUgY29tcHV0ZWQuIFNlZSBBUlJPVy0zM1xuZXhwb3J0IHR5cGUga1Vua25vd25OdWxsQ291bnQgPSAtMTtcbmV4cG9ydCBjb25zdCBrVW5rbm93bk51bGxDb3VudCA9IC0xO1xuXG5leHBvcnQgdHlwZSBOdWxsQnVmZmVyID0gVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQ7XG5leHBvcnQgdHlwZSBWYWx1ZU9mZnNldHNCdWZmZXIgPSBJbnQzMkFycmF5ICB8IEFycmF5TGlrZTxudW1iZXI+IHwgSXRlcmFibGU8bnVtYmVyPjtcbmV4cG9ydCB0eXBlIERhdGFCdWZmZXI8VCBleHRlbmRzIERhdGFUeXBlPiA9IFRbJ1RBcnJheSddIHwgQXJyYXlMaWtlPG51bWJlcj4gfCBJdGVyYWJsZTxudW1iZXI+O1xuXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZlcnM8VCBleHRlbmRzIERhdGFUeXBlPiB7XG4gICAgICBbQnVmZmVyVHlwZS5PRkZTRVRdPzogSW50MzJBcnJheTtcbiAgICAgICAgW0J1ZmZlclR5cGUuREFUQV0/OiBUWydUQXJyYXknXTtcbiAgICBbQnVmZmVyVHlwZS5WQUxJRElUWV0/OiBVaW50OEFycmF5O1xuICAgICAgICBbQnVmZmVyVHlwZS5UWVBFXT86IFRbJ1RBcnJheSddO1xufVxuXG5leHBvcnQgY2xhc3MgRGF0YTxUIGV4dGVuZHMgRGF0YVR5cGUgPSBEYXRhVHlwZT4ge1xuXG4gICAgcHJvdGVjdGVkIF90eXBlOiBUO1xuICAgIHByb3RlY3RlZCBfbGVuZ3RoOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIF9vZmZzZXQ6IG51bWJlcjtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgX2NoaWxkRGF0YTogRGF0YVtdO1xuICAgIHByb3RlY3RlZCBfYnVmZmVycyA9IFtdIGFzIEJ1ZmZlcnM8VD47XG4gICAgcHJvdGVjdGVkIF9udWxsQ291bnQ6IG51bWJlciB8IGtVbmtub3duTnVsbENvdW50O1xuXG4gICAgcHVibGljIGdldCB0eXBlKCkgeyByZXR1cm4gdGhpcy5fdHlwZTsgfVxuICAgIHB1YmxpYyBnZXQgbGVuZ3RoKCkgeyByZXR1cm4gdGhpcy5fbGVuZ3RoOyB9XG4gICAgcHVibGljIGdldCBvZmZzZXQoKSB7IHJldHVybiB0aGlzLl9vZmZzZXQ7IH1cbiAgICBwdWJsaWMgZ2V0IGNoaWxkRGF0YSgpIHsgcmV0dXJuIHRoaXMuX2NoaWxkRGF0YTsgfVxuXG4gICAgcHVibGljIGdldCBUVHlwZSgpIHsgcmV0dXJuIHRoaXMudHlwZS5UVHlwZTsgfVxuICAgIHB1YmxpYyBnZXQgVEFycmF5KCkgeyByZXR1cm4gdGhpcy50eXBlLlRBcnJheTsgfVxuICAgIHB1YmxpYyBnZXQgVFZhbHVlKCkgeyByZXR1cm4gdGhpcy50eXBlLlRWYWx1ZTsgfVxuICAgIHB1YmxpYyBnZXQgQXJyYXlUeXBlKCkgeyByZXR1cm4gdGhpcy50eXBlLkFycmF5VHlwZTsgfVxuXG4gICAgcHVibGljIGdldCB2YWx1ZXMoKSB7IHJldHVybiB0aGlzLl9idWZmZXJzW0J1ZmZlclR5cGUuREFUQV0hOyB9XG4gICAgcHVibGljIGdldCB0eXBlSWRzKCkgeyByZXR1cm4gdGhpcy5fYnVmZmVyc1tCdWZmZXJUeXBlLlRZUEVdITsgfVxuICAgIHB1YmxpYyBnZXQgbnVsbEJpdG1hcCgpIHsgcmV0dXJuIHRoaXMuX2J1ZmZlcnNbQnVmZmVyVHlwZS5WQUxJRElUWV0hOyB9XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzLl9idWZmZXJzW0J1ZmZlclR5cGUuT0ZGU0VUXSE7IH1cbiAgICBwdWJsaWMgZ2V0IG51bGxDb3VudCgpIHtcbiAgICAgICAgbGV0IG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudDtcbiAgICAgICAgbGV0IG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChudWxsQ291bnQgPT09IGtVbmtub3duTnVsbENvdW50ICYmIChudWxsQml0bWFwID0gdGhpcy5udWxsQml0bWFwKSkge1xuICAgICAgICAgICAgdGhpcy5fbnVsbENvdW50ID0gbnVsbENvdW50ID0gdGhpcy5sZW5ndGggLSBwb3BjbnRfYml0X3JhbmdlKG51bGxCaXRtYXAsIHRoaXMub2Zmc2V0LCB0aGlzLm9mZnNldCArIHRoaXMubGVuZ3RoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbENvdW50O1xuICAgIH1cblxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyLCBidWZmZXJzPzogQnVmZmVyczxUPiwgY2hpbGREYXRhPzogKERhdGEgfCBWZWN0b3IpW10pIHtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX29mZnNldCA9IE1hdGguZmxvb3IoTWF0aC5tYXgob2Zmc2V0IHx8IDAsIDApKTtcbiAgICAgICAgdGhpcy5fbGVuZ3RoID0gTWF0aC5mbG9vcihNYXRoLm1heChsZW5ndGggfHwgMCwgMCkpO1xuICAgICAgICB0aGlzLl9idWZmZXJzID0gT2JqZWN0LmFzc2lnbihbXSwgYnVmZmVycykgYXMgQnVmZmVyczxUPjtcbiAgICAgICAgdGhpcy5fbnVsbENvdW50ID0gTWF0aC5mbG9vcihNYXRoLm1heChudWxsQ291bnQgfHwgMCwgLTEpKTtcbiAgICAgICAgdGhpcy5fY2hpbGREYXRhID0gKGNoaWxkRGF0YSB8fCBbXSkubWFwKCh4KSA9PiB4IGluc3RhbmNlb2YgRGF0YSA/IHggOiB4LmRhdGEpIGFzIERhdGFbXTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIERhdGFUeXBlPih0eXBlOiBSLCBvZmZzZXQgPSB0aGlzLm9mZnNldCwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCwgYnVmZmVyczogQnVmZmVyczxSPiA9IDxhbnk+IHRoaXMuX2J1ZmZlcnMsIGNoaWxkRGF0YTogKERhdGEgfCBWZWN0b3IpW10gPSB0aGlzLmNoaWxkRGF0YSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgYnVmZmVycywgY2hpbGREYXRhKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2xpY2Uob2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKTogRGF0YTxUPiB7XG4gICAgICAgIC8vICt0cnVlID09PSAxLCArZmFsc2UgPT09IDAsIHNvIHRoaXMgbWVhbnNcbiAgICAgICAgLy8gd2Uga2VlcCBudWxsQ291bnQgYXQgMCBpZiBpdCdzIGFscmVhZHkgMCxcbiAgICAgICAgLy8gb3RoZXJ3aXNlIHNldCB0byB0aGUgaW52YWxpZGF0ZWQgZmxhZyAtMVxuICAgICAgICBjb25zdCBudWxsQ291bnQgPSArKHRoaXMuX251bGxDb3VudCA9PT0gMCkgLSAxO1xuICAgICAgICBjb25zdCBidWZmZXJzID0gdGhpcy5zbGljZUJ1ZmZlcnMob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICBjb25zdCBjaGlsZERhdGEgPSB0aGlzLnNsaWNlQ2hpbGRyZW4ob2Zmc2V0LCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZTxUPih0aGlzLnR5cGUsIHRoaXMub2Zmc2V0ICsgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwgYnVmZmVycywgY2hpbGREYXRhKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2xpY2VCdWZmZXJzKG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IEJ1ZmZlcnM8VD4ge1xuICAgICAgICBsZXQgYXJyOiBhbnksIGJ1ZmZlcnMgPSBPYmplY3QuYXNzaWduKFtdLCB0aGlzLl9idWZmZXJzKSBhcyBCdWZmZXJzPFQ+O1xuICAgICAgICAvLyBJZiB0eXBlSWRzIGV4aXN0LCBzbGljZSB0aGUgdHlwZUlkcyBidWZmZXJcbiAgICAgICAgKGFyciA9IGJ1ZmZlcnNbQnVmZmVyVHlwZS5UWVBFXSkgJiYgKGJ1ZmZlcnNbQnVmZmVyVHlwZS5UWVBFXSA9IHRoaXMuc2xpY2VEYXRhKGFyciwgb2Zmc2V0LCBsZW5ndGgpKTtcbiAgICAgICAgLy8gSWYgb2Zmc2V0cyBleGlzdCwgb25seSBzbGljZSB0aGUgb2Zmc2V0cyBidWZmZXJcbiAgICAgICAgKGFyciA9IGJ1ZmZlcnNbQnVmZmVyVHlwZS5PRkZTRVRdKSAmJiAoYnVmZmVyc1tCdWZmZXJUeXBlLk9GRlNFVF0gPSB0aGlzLnNsaWNlT2Zmc2V0cyhhcnIsIG9mZnNldCwgbGVuZ3RoKSkgfHxcbiAgICAgICAgICAgIC8vIE90aGVyd2lzZSBpZiBubyBvZmZzZXRzLCBzbGljZSB0aGUgZGF0YSBidWZmZXJcbiAgICAgICAgICAgIChhcnIgPSBidWZmZXJzW0J1ZmZlclR5cGUuREFUQV0pICYmIChidWZmZXJzW0J1ZmZlclR5cGUuREFUQV0gPSB0aGlzLnNsaWNlRGF0YShhcnIsIG9mZnNldCwgbGVuZ3RoKSk7XG4gICAgICAgIHJldHVybiBidWZmZXJzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBzbGljZUNoaWxkcmVuKG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcik6IERhdGFbXSB7XG4gICAgICAgIC8vIE9ubHkgc2xpY2UgY2hpbGRyZW4gaWYgdGhpcyBpc24ndCB2YXJpYWJsZSB3aWR0aCBkYXRhXG4gICAgICAgIGlmICghdGhpcy52YWx1ZU9mZnNldHMpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNoaWxkRGF0YS5tYXAoKGNoaWxkKSA9PiBjaGlsZC5zbGljZShvZmZzZXQsIGxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmNoaWxkRGF0YTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2xpY2VEYXRhKGRhdGE6IFRbJ1RBcnJheSddICYgQXJyYXlCdWZmZXJWaWV3LCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIpIHtcbiAgICAgICAgLy8gRG9uJ3Qgc2xpY2UgdGhlIGRhdGEgdmVjdG9yIGZvciBCb29sZWFucywgc2luY2UgdGhlIG9mZnNldCBnb2VzIGJ5IGJpdHMgbm90IGJ5dGVzXG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuVFR5cGUgPT09IFR5cGUuQm9vbCA/IGRhdGEgOiBkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgc2xpY2VPZmZzZXRzKHZhbHVlT2Zmc2V0czogSW50MzJBcnJheSwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZU9mZnNldHMuc3ViYXJyYXkob2Zmc2V0LCBvZmZzZXQgKyBsZW5ndGggKyAxKTtcbiAgICB9XG5cbiAgICAvL1xuICAgIC8vIENvbnZlbmllbmNlIG1ldGhvZHMgZm9yIGNyZWF0aW5nIERhdGEgaW5zdGFuY2VzIGZvciBlYWNoIG9mIHRoZSBBcnJvdyBWZWN0b3IgdHlwZXNcbiAgICAvL1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgTnVsbDxUIGV4dGVuZHMgTnVsbD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlcikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBJbnQ8VCBleHRlbmRzIEludD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLkRBVEFdOiB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRGljdGlvbmFyeTxUIGV4dGVuZHMgRGljdGlvbmFyeT4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLkRBVEFdOiB0b0FycmF5QnVmZmVyVmlldzxUWydUQXJyYXknXT4odHlwZS5pbmRpY2VzLkFycmF5VHlwZSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRmxvYXQ8VCBleHRlbmRzIEZsb2F0Pih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCB7XG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5WQUxJRElUWV06IHRvQXJyYXlCdWZmZXJWaWV3KFVpbnQ4QXJyYXksIG51bGxCaXRtYXApLFxuICAgICAgICAgICAgW0J1ZmZlclR5cGUuREFUQV06IHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBCb29sPFQgZXh0ZW5kcyBCb29sPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCB7XG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5WQUxJRElUWV06IHRvQXJyYXlCdWZmZXJWaWV3KFVpbnQ4QXJyYXksIG51bGxCaXRtYXApLFxuICAgICAgICAgICAgW0J1ZmZlclR5cGUuREFUQV06IHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBEZWNpbWFsPFQgZXh0ZW5kcyBEZWNpbWFsPih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCBkYXRhOiBEYXRhQnVmZmVyPFQ+KSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCB7XG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5WQUxJRElUWV06IHRvQXJyYXlCdWZmZXJWaWV3KFVpbnQ4QXJyYXksIG51bGxCaXRtYXApLFxuICAgICAgICAgICAgW0J1ZmZlclR5cGUuREFUQV06IHRvQXJyYXlCdWZmZXJWaWV3KHR5cGUuQXJyYXlUeXBlLCBkYXRhKVxuICAgICAgICB9KTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBEYXRlPFQgZXh0ZW5kcyBEYXRlXz4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLkRBVEFdOiB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgVGltZTxUIGV4dGVuZHMgVGltZT4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLkRBVEFdOiB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgVGltZXN0YW1wPFQgZXh0ZW5kcyBUaW1lc3RhbXA+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIHtcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLlZBTElESVRZXTogdG9BcnJheUJ1ZmZlclZpZXcoVWludDhBcnJheSwgbnVsbEJpdG1hcCksXG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5EQVRBXTogdG9BcnJheUJ1ZmZlclZpZXcodHlwZS5BcnJheVR5cGUsIGRhdGEpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIEludGVydmFsPFQgZXh0ZW5kcyBJbnRlcnZhbD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgZGF0YTogRGF0YUJ1ZmZlcjxUPikge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLkRBVEFdOiB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgRml4ZWRTaXplQmluYXJ5PFQgZXh0ZW5kcyBGaXhlZFNpemVCaW5hcnk+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGRhdGE6IERhdGFCdWZmZXI8VD4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIHtcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLlZBTElESVRZXTogdG9BcnJheUJ1ZmZlclZpZXcoVWludDhBcnJheSwgbnVsbEJpdG1hcCksXG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5EQVRBXTogdG9BcnJheUJ1ZmZlclZpZXcodHlwZS5BcnJheVR5cGUsIGRhdGEpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIEJpbmFyeTxUIGV4dGVuZHMgQmluYXJ5Pih0eXBlOiBULCBvZmZzZXQ6IG51bWJlciwgbGVuZ3RoOiBudW1iZXIsIG51bGxDb3VudDogbnVtYmVyLCBudWxsQml0bWFwOiBOdWxsQnVmZmVyLCB2YWx1ZU9mZnNldHM6IFZhbHVlT2Zmc2V0c0J1ZmZlciwgZGF0YTogVWludDhBcnJheSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLk9GRlNFVF06IHRvQXJyYXlCdWZmZXJWaWV3KEludDMyQXJyYXksIHZhbHVlT2Zmc2V0cyksXG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5EQVRBXTogdG9BcnJheUJ1ZmZlclZpZXcoVWludDhBcnJheSwgZGF0YSlcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgVXRmODxUIGV4dGVuZHMgVXRmOD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgdmFsdWVPZmZzZXRzOiBWYWx1ZU9mZnNldHNCdWZmZXIsIGRhdGE6IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIHtcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLlZBTElESVRZXTogdG9BcnJheUJ1ZmZlclZpZXcoVWludDhBcnJheSwgbnVsbEJpdG1hcCksXG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5PRkZTRVRdOiB0b0FycmF5QnVmZmVyVmlldyhJbnQzMkFycmF5LCB2YWx1ZU9mZnNldHMpLFxuICAgICAgICAgICAgW0J1ZmZlclR5cGUuREFUQV06IHRvQXJyYXlCdWZmZXJWaWV3KFVpbnQ4QXJyYXksIGRhdGEpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIExpc3Q8VCBleHRlbmRzIExpc3Q+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIHZhbHVlT2Zmc2V0czogVmFsdWVPZmZzZXRzQnVmZmVyLCBjaGlsZERhdGE6IChEYXRhIHwgVmVjdG9yKVtdKSB7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCB7XG4gICAgICAgICAgICBbQnVmZmVyVHlwZS5WQUxJRElUWV06IHRvQXJyYXlCdWZmZXJWaWV3KFVpbnQ4QXJyYXksIG51bGxCaXRtYXApLFxuICAgICAgICAgICAgW0J1ZmZlclR5cGUuT0ZGU0VUXTogdG9BcnJheUJ1ZmZlclZpZXcoSW50MzJBcnJheSwgdmFsdWVPZmZzZXRzKVxuICAgICAgICB9LCBjaGlsZERhdGEpO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIEZpeGVkU2l6ZUxpc3Q8VCBleHRlbmRzIEZpeGVkU2l6ZUxpc3Q+KHR5cGU6IFQsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlciwgbnVsbENvdW50OiBudW1iZXIsIG51bGxCaXRtYXA6IE51bGxCdWZmZXIsIGNoaWxkRGF0YTogKERhdGEgfCBWZWN0b3IpW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhKHR5cGUsIG9mZnNldCwgbGVuZ3RoLCBudWxsQ291bnQsIHtcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLlZBTElESVRZXTogdG9BcnJheUJ1ZmZlclZpZXcoVWludDhBcnJheSwgbnVsbEJpdG1hcClcbiAgICAgICAgfSwgY2hpbGREYXRhKTtcbiAgICB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBTdHJ1Y3Q8VCBleHRlbmRzIFN0cnVjdD4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgY2hpbGREYXRhOiAoRGF0YSB8IFZlY3RvcilbXSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKVxuICAgICAgICB9LCBjaGlsZERhdGEpO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIE1hcDxUIGV4dGVuZHMgTWFwXz4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgY2hpbGREYXRhOiAoRGF0YSB8IFZlY3RvcilbXSkge1xuICAgICAgICByZXR1cm4gbmV3IERhdGEodHlwZSwgb2Zmc2V0LCBsZW5ndGgsIG51bGxDb3VudCwge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKVxuICAgICAgICB9LCBjaGlsZERhdGEpO1xuICAgIH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIFVuaW9uPFQgZXh0ZW5kcyBVbmlvbj4odHlwZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyLCBudWxsQ291bnQ6IG51bWJlciwgbnVsbEJpdG1hcDogTnVsbEJ1ZmZlciwgdHlwZUlkczogVWludDhBcnJheSwgdmFsdWVPZmZzZXRzT3JDaGlsZERhdGE6IFZhbHVlT2Zmc2V0c0J1ZmZlciB8IChEYXRhIHwgVmVjdG9yKVtdLCBjaGlsZERhdGE/OiAoRGF0YSB8IFZlY3RvcilbXSkge1xuICAgICAgICBjb25zdCBidWZmZXJzID0ge1xuICAgICAgICAgICAgW0J1ZmZlclR5cGUuVkFMSURJVFldOiB0b0FycmF5QnVmZmVyVmlldyhVaW50OEFycmF5LCBudWxsQml0bWFwKSxcbiAgICAgICAgICAgIFtCdWZmZXJUeXBlLlRZUEVdOiB0b0FycmF5QnVmZmVyVmlldyh0eXBlLkFycmF5VHlwZSwgdHlwZUlkcylcbiAgICAgICAgfSBhcyBhbnk7XG4gICAgICAgIGlmICh0eXBlLm1vZGUgPT09IFVuaW9uTW9kZS5TcGFyc2UpIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBidWZmZXJzLCB2YWx1ZU9mZnNldHNPckNoaWxkRGF0YSBhcyAoRGF0YSB8IFZlY3RvcilbXSk7XG4gICAgICAgIH1cbiAgICAgICAgYnVmZmVyc1tCdWZmZXJUeXBlLk9GRlNFVF0gPSB0b0FycmF5QnVmZmVyVmlldyhJbnQzMkFycmF5LCA8VmFsdWVPZmZzZXRzQnVmZmVyPiB2YWx1ZU9mZnNldHNPckNoaWxkRGF0YSk7XG4gICAgICAgIHJldHVybiBuZXcgRGF0YSh0eXBlLCBvZmZzZXQsIGxlbmd0aCwgbnVsbENvdW50LCBidWZmZXJzLCBjaGlsZERhdGEpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport function valueToString(x) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHJldHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixNQUFNLFVBQVUsYUFBYSxDQUFDLENBQU07SUFDaEMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkcsQ0FBQyIsImZpbGUiOiJ1dGlsL3ByZXR0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1N0cmluZyh4OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnID8gYFwiJHt4fVwiYCA6IEFycmF5QnVmZmVyLmlzVmlldyh4KSA/IGBbJHt4fV1gIDogSlNPTi5zdHJpbmdpZnkoeCk7XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nconst columnDescriptor = { enumerable: true, configurable: false, get: () => { } };\nconst lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\nconst rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null };\nconst rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null };\nconst row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\nexport class Row {\n    constructor(fields, fieldsAreEnumerable) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null;\n        });\n    }\n    /** @nocollapse */\n    static new(schemaOrFields, fieldsAreEnumerable = false) {\n        let schema, fields;\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        }\n        else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row(fields, fieldsAreEnumerable);\n    }\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    _bindGetter(colIndex) {\n        return function () {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    get(key) { return this[key]; }\n    bind(parent, rowIndex) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound;\n    }\n    toJSON() {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = this[prop]) && props || props;\n            }, {});\n    }\n    toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = valueToString(this[prop])) && props || props;\n            }, {});\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9yb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxLQUFLLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFFbEMsT0FBTyxFQUFFLFFBQVEsRUFBVyxNQUFNLFNBQVMsQ0FBQztBQUM1QyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFHL0MsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUUsQ0FBQyxFQUFFLENBQUM7QUFDbEYsTUFBTSxnQkFBZ0IsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDO0FBQ2hHLE1BQU0sa0JBQWtCLEdBQUcsRUFBRSxRQUFRLEVBQUUsS0FBSyxFQUFFLFVBQVUsRUFBRSxLQUFLLEVBQUUsWUFBWSxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsSUFBVyxFQUFFLENBQUM7QUFDMUcsTUFBTSxtQkFBbUIsR0FBRyxFQUFFLFFBQVEsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxJQUFXLEVBQUUsQ0FBQztBQUM1RyxNQUFNLEdBQUcsR0FBRyxFQUFFLE1BQU0sRUFBRSxtQkFBbUIsRUFBRSxRQUFRLEVBQUUsa0JBQWtCLEVBQUUsQ0FBQztBQUUxRSxNQUFNLE9BQU8sR0FBRztJQW1CWixZQUFvQixNQUFlLEVBQUUsbUJBQTRCO1FBQzdELGdCQUFnQixDQUFDLEtBQUssR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQ3ZDLE1BQU0sQ0FBQyxjQUFjLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO1FBQ3hELE1BQU0sQ0FBQyxPQUFPLENBQUMsQ0FBQyxLQUFLLEVBQUUsV0FBVyxFQUFFLEVBQUU7WUFDbEMsZ0JBQWdCLENBQUMsR0FBRyxHQUFHLElBQUksQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLENBQUM7WUFDckQsMkRBQTJEO1lBQzNELHNEQUFzRDtZQUN0RCxnQkFBZ0IsQ0FBQyxZQUFZLEdBQUcsSUFBSSxDQUFDO1lBQ3JDLGdCQUFnQixDQUFDLFVBQVUsR0FBRyxtQkFBbUIsQ0FBQztZQUNsRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsSUFBSSxFQUFFLGdCQUFnQixDQUFDLENBQUM7WUFDMUQsZ0JBQWdCLENBQUMsWUFBWSxHQUFHLEtBQUssQ0FBQztZQUN0QyxnQkFBZ0IsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBQztZQUNuRCxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksRUFBRSxXQUFXLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztZQUMzRCxnQkFBZ0IsQ0FBQyxHQUFHLEdBQUcsSUFBVyxDQUFDO1FBQ3ZDLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQWpDRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsR0FBRyxDQUF3QyxjQUEyQixFQUFFLG1CQUFtQixHQUFHLEtBQUs7UUFDN0csSUFBSSxNQUFTLEVBQUUsTUFBZSxDQUFDO1FBQy9CLElBQUksS0FBSyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUMvQixNQUFNLEdBQUcsY0FBYyxDQUFDO1NBQzNCO2FBQU07WUFDSCxNQUFNLEdBQUcsY0FBYyxDQUFDO1lBQ3hCLG1CQUFtQixHQUFHLElBQUksQ0FBQztZQUMzQixNQUFNLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ3BFO1FBQ0QsT0FBTyxJQUFJLEdBQUcsQ0FBSSxNQUFNLEVBQUUsbUJBQW1CLENBQXdCLENBQUM7SUFDMUUsQ0FBQztJQXVCRCxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNkLEtBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLElBQUksQ0FBQyxNQUFNLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxHQUFHO1lBQ3hDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ2pCO0lBQ0wsQ0FBQztJQUNPLFdBQVcsQ0FBQyxRQUFnQjtRQUNoQyxPQUFPO1lBQ0gsSUFBSSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsUUFBUSxDQUFDLENBQUM7WUFDN0MsT0FBTyxLQUFLLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7UUFDbkQsQ0FBQyxDQUFDO0lBQ04sQ0FBQztJQUNNLEdBQUcsQ0FBb0IsR0FBTSxJQUFJLE9BQVEsSUFBWSxDQUFDLEdBQUcsQ0FBbUIsQ0FBQyxDQUFDLENBQUM7SUFDL0UsSUFBSSxDQUFpRCxNQUFlLEVBQUUsUUFBZ0I7UUFDekYsa0JBQWtCLENBQUMsS0FBSyxHQUFHLFFBQVEsQ0FBQztRQUNwQyxtQkFBbUIsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDO1FBQ25DLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLGtCQUFrQixDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7UUFDaEMsbUJBQW1CLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQztRQUNqQyxPQUFPLEtBQW1CLENBQUM7SUFDL0IsQ0FBQztJQUNNLE1BQU07UUFDVCxPQUFPLFFBQVEsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDcEQsTUFBTSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQVUsRUFBRSxJQUFZLEVBQUUsRUFBRTtnQkFDakUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsR0FBSSxJQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksS0FBSyxDQUFBO1lBQ2hFLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztJQUNmLENBQUM7SUFDTSxRQUFRO1FBQ1gsT0FBTyxRQUFRLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUN4QyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUNuRCxNQUFNLENBQUMsbUJBQW1CLENBQUMsSUFBSSxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBVSxFQUFFLElBQVksRUFBRSxFQUFFO2dCQUNqRSxPQUFPLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBRSxJQUFZLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLEtBQUssSUFBSSxLQUFLLENBQUE7WUFDL0UsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO0lBQ2YsQ0FBQztDQUNKIiwiZmlsZSI6InZlY3Rvci9yb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRmllbGQgfSBmcm9tICcuLi9zY2hlbWEnO1xuaW1wb3J0IHsgTWFwVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yL21hcCc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgUm93TGlrZSB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgdmFsdWVUb1N0cmluZyB9IGZyb20gJy4uL3V0aWwvcHJldHR5JztcbmltcG9ydCB7IFN0cnVjdFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvci9zdHJ1Y3QnO1xuXG5jb25zdCBjb2x1bW5EZXNjcmlwdG9yID0geyBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IGZhbHNlLCBnZXQ6ICgpID0+IHt9IH07XG5jb25zdCBsZW5ndGhEZXNjcmlwdG9yID0geyB3cml0YWJsZTogZmFsc2UsIGVudW1lcmFibGU6IGZhbHNlLCBjb25maWd1cmFibGU6IGZhbHNlLCB2YWx1ZTogLTEgfTtcbmNvbnN0IHJvd0luZGV4RGVzY3JpcHRvciA9IHsgd3JpdGFibGU6IGZhbHNlLCBlbnVtZXJhYmxlOiBmYWxzZSwgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogbnVsbCBhcyBhbnkgfTtcbmNvbnN0IHJvd1BhcmVudERlc2NyaXB0b3IgPSB7IHdyaXRhYmxlOiBmYWxzZSwgZW51bWVyYWJsZTogZmFsc2UsIGNvbmZpZ3VyYWJsZTogZmFsc2UsIHZhbHVlOiBudWxsIGFzIGFueSB9O1xuY29uc3Qgcm93ID0geyBwYXJlbnQ6IHJvd1BhcmVudERlc2NyaXB0b3IsIHJvd0luZGV4OiByb3dJbmRleERlc2NyaXB0b3IgfTtcblxuZXhwb3J0IGNsYXNzIFJvdzxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9PiBpbXBsZW1lbnRzIEl0ZXJhYmxlPFRba2V5b2YgVF1bJ1RWYWx1ZSddPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBuZXc8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oc2NoZW1hT3JGaWVsZHM6IFQgfCBGaWVsZFtdLCBmaWVsZHNBcmVFbnVtZXJhYmxlID0gZmFsc2UpOiBSb3dMaWtlPFQ+ICYgUm93PFQ+IHtcbiAgICAgICAgbGV0IHNjaGVtYTogVCwgZmllbGRzOiBGaWVsZFtdO1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzY2hlbWFPckZpZWxkcykpIHtcbiAgICAgICAgICAgIGZpZWxkcyA9IHNjaGVtYU9yRmllbGRzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2NoZW1hID0gc2NoZW1hT3JGaWVsZHM7XG4gICAgICAgICAgICBmaWVsZHNBcmVFbnVtZXJhYmxlID0gdHJ1ZTtcbiAgICAgICAgICAgIGZpZWxkcyA9IE9iamVjdC5rZXlzKHNjaGVtYSkubWFwKCh4KSA9PiBuZXcgRmllbGQoeCwgc2NoZW1hW3hdKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBSb3c8VD4oZmllbGRzLCBmaWVsZHNBcmVFbnVtZXJhYmxlKSBhcyBSb3dMaWtlPFQ+ICYgUm93PFQ+O1xuICAgIH1cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJpdmF0ZSBwYXJlbnQ6IFRQYXJlbnQ7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByaXZhdGUgcm93SW5kZXg6IG51bWJlcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHJlYWRvbmx5IGxlbmd0aDogbnVtYmVyO1xuICAgIHByaXZhdGUgY29uc3RydWN0b3IoZmllbGRzOiBGaWVsZFtdLCBmaWVsZHNBcmVFbnVtZXJhYmxlOiBib29sZWFuKSB7XG4gICAgICAgIGxlbmd0aERlc2NyaXB0b3IudmFsdWUgPSBmaWVsZHMubGVuZ3RoO1xuICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ2xlbmd0aCcsIGxlbmd0aERlc2NyaXB0b3IpO1xuICAgICAgICBmaWVsZHMuZm9yRWFjaCgoZmllbGQsIGNvbHVtbkluZGV4KSA9PiB7XG4gICAgICAgICAgICBjb2x1bW5EZXNjcmlwdG9yLmdldCA9IHRoaXMuX2JpbmRHZXR0ZXIoY29sdW1uSW5kZXgpO1xuICAgICAgICAgICAgLy8gc2V0IGNvbmZpZ3VyYWJsZSB0byB0cnVlIHRvIGVuc3VyZSBPYmplY3QuZGVmaW5lUHJvcGVydHlcbiAgICAgICAgICAgIC8vIGRvZXNuJ3QgdGhyb3cgaW4gdGhlIGNhc2Ugb2YgZHVwbGljYXRlIGNvbHVtbiBuYW1lc1xuICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgICAgICAgY29sdW1uRGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZmllbGRzQXJlRW51bWVyYWJsZTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBmaWVsZC5uYW1lLCBjb2x1bW5EZXNjcmlwdG9yKTtcbiAgICAgICAgICAgIGNvbHVtbkRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gZmFsc2U7XG4gICAgICAgICAgICBjb2x1bW5EZXNjcmlwdG9yLmVudW1lcmFibGUgPSAhZmllbGRzQXJlRW51bWVyYWJsZTtcbiAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBjb2x1bW5JbmRleCwgY29sdW1uRGVzY3JpcHRvcik7XG4gICAgICAgICAgICBjb2x1bW5EZXNjcmlwdG9yLmdldCA9IG51bGwgYXMgYW55O1xuICAgICAgICB9KTtcbiAgICB9XG4gICAgKltTeW1ib2wuaXRlcmF0b3JdKHRoaXM6IFJvd0xpa2U8VD4pIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IC0xLCBuID0gdGhpcy5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgICAgICB5aWVsZCB0aGlzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHByaXZhdGUgX2JpbmRHZXR0ZXIoY29sSW5kZXg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHRoaXM6IFJvdzxUPikge1xuICAgICAgICAgICAgbGV0IGNoaWxkID0gdGhpcy5wYXJlbnQuZ2V0Q2hpbGRBdChjb2xJbmRleCk7XG4gICAgICAgICAgICByZXR1cm4gY2hpbGQgPyBjaGlsZC5nZXQodGhpcy5yb3dJbmRleCkgOiBudWxsO1xuICAgICAgICB9O1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0PEsgZXh0ZW5kcyBrZXlvZiBUPihrZXk6IEspIHsgcmV0dXJuICh0aGlzIGFzIGFueSlba2V5XSBhcyBUW0tdWydUVmFsdWUnXTsgfVxuICAgIHB1YmxpYyBiaW5kPFRQYXJlbnQgZXh0ZW5kcyBNYXBWZWN0b3I8VD4gfCBTdHJ1Y3RWZWN0b3I8VD4+KHBhcmVudDogVFBhcmVudCwgcm93SW5kZXg6IG51bWJlcikge1xuICAgICAgICByb3dJbmRleERlc2NyaXB0b3IudmFsdWUgPSByb3dJbmRleDtcbiAgICAgICAgcm93UGFyZW50RGVzY3JpcHRvci52YWx1ZSA9IHBhcmVudDtcbiAgICAgICAgY29uc3QgYm91bmQgPSBPYmplY3QuY3JlYXRlKHRoaXMsIHJvdyk7XG4gICAgICAgIHJvd0luZGV4RGVzY3JpcHRvci52YWx1ZSA9IG51bGw7XG4gICAgICAgIHJvd1BhcmVudERlc2NyaXB0b3IudmFsdWUgPSBudWxsO1xuICAgICAgICByZXR1cm4gYm91bmQgYXMgUm93TGlrZTxUPjtcbiAgICB9XG4gICAgcHVibGljIHRvSlNPTigpOiBhbnkge1xuICAgICAgICByZXR1cm4gRGF0YVR5cGUuaXNTdHJ1Y3QodGhpcy5wYXJlbnQudHlwZSkgPyBbLi4udGhpc10gOlxuICAgICAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykucmVkdWNlKChwcm9wczogYW55LCBwcm9wOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKHByb3BzW3Byb3BdID0gKHRoaXMgYXMgYW55KVtwcm9wXSkgJiYgcHJvcHMgfHwgcHJvcHNcbiAgICAgICAgICAgIH0sIHt9KTtcbiAgICB9XG4gICAgcHVibGljIHRvU3RyaW5nKCkge1xuICAgICAgICByZXR1cm4gRGF0YVR5cGUuaXNTdHJ1Y3QodGhpcy5wYXJlbnQudHlwZSkgP1xuICAgICAgICAgICAgWy4uLnRoaXNdLm1hcCgoeCkgPT4gdmFsdWVUb1N0cmluZyh4KSkuam9pbignLCAnKSA6XG4gICAgICAgICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKS5yZWR1Y2UoKHByb3BzOiBhbnksIHByb3A6IHN0cmluZykgPT4ge1xuICAgICAgICAgICAgICAgIHJldHVybiAocHJvcHNbcHJvcF0gPSB2YWx1ZVRvU3RyaW5nKCh0aGlzIGFzIGFueSlbcHJvcF0pKSAmJiBwcm9wcyB8fCBwcm9wc1xuICAgICAgICAgICAgfSwge30pO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport function clampIndex(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\nlet tmp;\nexport function clampRange(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdmVjdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQVFyQixNQUFNLFVBQVUsVUFBVSxDQUE2RCxNQUFTLEVBQUUsS0FBYSxFQUFFLElBQVE7SUFDckgsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUM3QixNQUFNLE1BQU0sR0FBRyxLQUFLLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLEdBQUcsQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUNoRSxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDO0FBQ2hELENBQUM7QUFFRCxJQUFJLEdBQVcsQ0FBQztBQUdoQixNQUFNLFVBQVUsVUFBVSxDQUF1RSxNQUFTLEVBQUUsS0FBeUIsRUFBRSxHQUF1QixFQUFFLElBQVE7SUFFcEssdUVBQXVFO0lBQ3ZFLHdFQUF3RTtJQUN4RSwrQkFBK0I7SUFDL0IsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLEdBQUcsQ0FBQyxFQUFFLEdBQUcsTUFBTSxDQUFDO0lBQ2pDLElBQUksR0FBRyxHQUFHLE9BQU8sS0FBSyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUM7SUFDaEQsSUFBSSxHQUFHLEdBQUcsT0FBTyxHQUFHLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQztJQUM5Qyw4Q0FBOEM7SUFDOUMsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQztJQUMvQyxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxDQUFDLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBQy9DLG9CQUFvQjtJQUNwQixDQUFDLEdBQUcsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsR0FBRyxHQUFHLEVBQUUsR0FBRyxHQUFHLEdBQUcsRUFBRSxHQUFHLEdBQUcsR0FBRyxDQUFDLENBQUM7SUFDaEQsdUJBQXVCO0lBQ3hCLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxHQUFHLEdBQUcsQ0FBQyxDQUFDO0lBRTNCLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLEdBQUcsRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7QUFDdEQsQ0FBQyIsImZpbGUiOiJ1dGlsL3ZlY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG50eXBlIFJhbmdlTGlrZSA9IHsgbGVuZ3RoOiBudW1iZXI7IHN0cmlkZT86IG51bWJlciB9O1xudHlwZSBDbGFtcFRoZW48VCBleHRlbmRzIFJhbmdlTGlrZT4gPSAoc291cmNlOiBULCBpbmRleDogbnVtYmVyKSA9PiBhbnk7XG50eXBlIENsYW1wUmFuZ2VUaGVuPFQgZXh0ZW5kcyBSYW5nZUxpa2U+ID0gKHNvdXJjZTogVCwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSA9PiBhbnk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEluZGV4PFQgZXh0ZW5kcyBSYW5nZUxpa2U+KHNvdXJjZTogVCwgaW5kZXg6IG51bWJlcik6IG51bWJlcjtcbmV4cG9ydCBmdW5jdGlvbiBjbGFtcEluZGV4PFQgZXh0ZW5kcyBSYW5nZUxpa2UsIE4gZXh0ZW5kcyBDbGFtcFRoZW48VD4gPSBDbGFtcFRoZW48VD4+KHNvdXJjZTogVCwgaW5kZXg6IG51bWJlciwgdGhlbjogTik6IFJldHVyblR5cGU8Tj47XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBJbmRleDxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBUaGVuPFQ+ID0gQ2xhbXBUaGVuPFQ+Pihzb3VyY2U6IFQsIGluZGV4OiBudW1iZXIsIHRoZW4/OiBOKSB7XG4gICAgY29uc3QgbGVuZ3RoID0gc291cmNlLmxlbmd0aDtcbiAgICBjb25zdCBhZGp1c3QgPSBpbmRleCA+IC0xID8gaW5kZXggOiAobGVuZ3RoICsgKGluZGV4ICUgbGVuZ3RoKSk7XG4gICAgcmV0dXJuIHRoZW4gPyB0aGVuKHNvdXJjZSwgYWRqdXN0KSA6IGFkanVzdDtcbn1cblxubGV0IHRtcDogbnVtYmVyO1xuZXhwb3J0IGZ1bmN0aW9uIGNsYW1wUmFuZ2U8VCBleHRlbmRzIFJhbmdlTGlrZT4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCk6IFtudW1iZXIsIG51bWJlcl07XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBSYW5nZTxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBSYW5nZVRoZW48VD4gPSBDbGFtcFJhbmdlVGhlbjxUPj4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCwgdGhlbjogTik6IFJldHVyblR5cGU8Tj47XG5leHBvcnQgZnVuY3Rpb24gY2xhbXBSYW5nZTxUIGV4dGVuZHMgUmFuZ2VMaWtlLCBOIGV4dGVuZHMgQ2xhbXBSYW5nZVRoZW48VD4gPSBDbGFtcFJhbmdlVGhlbjxUPj4oc291cmNlOiBULCBiZWdpbjogbnVtYmVyIHwgdW5kZWZpbmVkLCBlbmQ6IG51bWJlciB8IHVuZGVmaW5lZCwgdGhlbj86IE4pIHtcblxuICAgIC8vIEFkanVzdCBhcmdzIHNpbWlsYXIgdG8gQXJyYXkucHJvdG90eXBlLnNsaWNlLiBOb3JtYWxpemUgYmVnaW4vZW5kIHRvXG4gICAgLy8gY2xhbXAgYmV0d2VlbiAwIGFuZCBsZW5ndGgsIGFuZCB3cmFwIGFyb3VuZCBvbiBuZWdhdGl2ZSBpbmRpY2VzLCBlLmcuXG4gICAgLy8gc2xpY2UoLTEsIDUpIG9yIHNsaWNlKDUsIC0xKVxuICAgIGxldCB7IGxlbmd0aDogbGVuID0gMCB9ID0gc291cmNlO1xuICAgIGxldCBsaHMgPSB0eXBlb2YgYmVnaW4gIT09ICdudW1iZXInID8gMCA6IGJlZ2luO1xuICAgIGxldCByaHMgPSB0eXBlb2YgZW5kICE9PSAnbnVtYmVyJyA/IGxlbiA6IGVuZDtcbiAgICAvLyB3cmFwIGFyb3VuZCBvbiBuZWdhdGl2ZSBzdGFydC9lbmQgcG9zaXRpb25zXG4gICAgKGxocyA8IDApICYmIChsaHMgPSAoKGxocyAlIGxlbikgKyBsZW4pICUgbGVuKTtcbiAgICAocmhzIDwgMCkgJiYgKHJocyA9ICgocmhzICUgbGVuKSArIGxlbikgJSBsZW4pO1xuICAgIC8vIGVuc3VyZSBsaHMgPD0gcmhzXG4gICAgKHJocyA8IGxocykgJiYgKHRtcCA9IGxocywgbGhzID0gcmhzLCByaHMgPSB0bXApO1xuICAgICAvLyBlbnN1cmUgcmhzIDw9IGxlbmd0aFxuICAgIChyaHMgPiBsZW4pICYmIChyaHMgPSBsZW4pO1xuXG4gICAgcmV0dXJuIHRoZW4gPyB0aGVuKHNvdXJjZSwgbGhzLCByaHMpIDogW2xocywgcmhzXTtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { clampRange } from '../util/vector';\nexport class ChunkedVector extends Vector {\n    constructor(type, chunks = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._nullCount = -1;\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n    /** @nocollapse */\n    static flatten(...vectors) {\n        return vectors.reduce(function flatten(xs, x) {\n            return x instanceof ChunkedVector ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof Vector);\n    }\n    /** @nocollapse */\n    static concat(...vectors) {\n        return new ChunkedVector(vectors[0].type, ChunkedVector.flatten(...vectors));\n    }\n    bindDataAccessors() { }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get TType() { return this._type.TType; }\n    get TArray() { return this._type.TArray; }\n    get TValue() { return this._type.TValue; }\n    get ArrayType() { return this._type.ArrayType; }\n    get numChildren() { return this._numChildren; }\n    get data() { return this._chunks[0] ? this._chunks[0].data : null; }\n    get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n    *[Symbol.iterator]() {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n    concat(...others) {\n        return ChunkedVector.concat(this, ...others);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let child, field, chunks;\n        if (child = columns[index]) {\n            return child;\n        }\n        if (field = (this._type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new ChunkedVector(field.type, chunks));\n            }\n        }\n        return null;\n    }\n    search(index, then) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0) {\n            return null;\n        }\n        if (idx >= offsets[rhs]) {\n            return null;\n        }\n        if (rhs <= 1) {\n            return then ? then(this, 0, idx) : [0, idx];\n        }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n    isValid(index) {\n        return !!this.search(index, this.isValidInternal);\n    }\n    get(index) {\n        return this.search(index, this.getInternal);\n    }\n    set(index, value) {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n    indexOf(element, offset) {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n    toArray() {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) {\n            return new ArrayType(0);\n        }\n        if (n <= 1) {\n            return chunks[0].toArray();\n        }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n    slice(begin, end) {\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n    getInternal({ chunks }, i, j) { return chunks[i].get(j); }\n    isValidInternal({ chunks }, i, j) { return chunks[i].isValid(j); }\n    indexOfInternal({ chunks }, chunkIndex, fromIndex, element) {\n        let i = chunkIndex - 1, n = chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += chunks[i].length;\n        }\n        return -1;\n    }\n    sliceInternal(column, offset, length) {\n        const slices = [];\n        const { type, chunks, _chunkOffsets: chunkOffsets } = column;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) {\n                continue;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end));\n        }\n        return new ChunkedVector(type, slices);\n    }\n}\nfunction calculateOffsets(vectors) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\nconst typedSet = (src, dst, offset) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\nconst arraySet = (src, dst, offset) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { ChunkedVector } from './chunked';\nimport { clampRange } from '../util/vector';\nexport class BaseVector extends Vector {\n    constructor(data, children, stride) {\n        super();\n        this._stride = 1;\n        this._numChildren = 0;\n        this._children = children;\n        this.bindDataAccessors(this._data = data);\n        this._numChildren = data.childData.length;\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n    get data() { return this._data; }\n    get stride() { return this._stride; }\n    get numChildren() { return this._numChildren; }\n    get type() { return this.data.type; }\n    get length() { return this.data.length; }\n    get offset() { return this.data.offset; }\n    get nullCount() { return this.data.nullCount; }\n    get VectorName() { return this.constructor.name; }\n    get TType() { return this.data.TType; }\n    get TArray() { return this.data.TArray; }\n    get TValue() { return this.data.TValue; }\n    get ArrayType() { return this.data.ArrayType; }\n    get values() { return this.data.values; }\n    get typeIds() { return this.data.typeIds; }\n    get nullBitmap() { return this.data.nullBitmap; }\n    get valueOffsets() { return this.data.valueOffsets; }\n    get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n    clone(data, children = this._children, stride = this.stride) {\n        return Vector.new(data, children, stride);\n    }\n    concat(...others) {\n        return ChunkedVector.concat(this, ...others);\n    }\n    isValid(index) {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren ? null : ((this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new(this.data.childData[index])));\n    }\n    // @ts-ignore\n    toJSON() { }\n    slice(begin, end) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n    sliceInternal(vector, offset, length) {\n        const stride = vector.stride;\n        return vector.clone(vector.data.slice(offset * stride, (length - offset) * stride));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Map_ } from '../type';\nexport class StructVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], false);\n    }\n    asMap(keysSorted = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBWSxJQUFJLEVBQVUsTUFBTSxTQUFTLENBQUM7QUFFakQsTUFBTSxPQUFPLFlBQTBELFNBQVEsVUFBcUI7SUFBcEc7O1FBQ1csYUFBUSxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBSTFFLENBQUM7SUFIVSxLQUFLLENBQUMsYUFBc0IsS0FBSztRQUNwQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3Ivc3RydWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFJvdyB9IGZyb20gJy4vcm93JztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IERhdGFUeXBlLCBNYXBfLCBTdHJ1Y3QgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFN0cnVjdFZlY3RvcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIEJhc2VWZWN0b3I8U3RydWN0PFQ+PiB7XG4gICAgcHVibGljIHJvd1Byb3h5OiBSb3c8VD4gPSBSb3cubmV3PFQ+KHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSwgZmFsc2UpO1xuICAgIHB1YmxpYyBhc01hcChrZXlzU29ydGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBNYXBfKHRoaXMudHlwZS5jaGlsZHJlbiwga2V5c1NvcnRlZCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Schema } from './schema';\nimport { Struct } from './type';\nimport { StructVector } from './vector/struct';\nexport class RecordBatch extends Vector {\n    constructor(...args) {\n        super();\n        this._schema = args[0];\n        let data;\n        let children;\n        if (typeof args[1] === 'number') {\n            const fields = this.schema.fields;\n            const [, numRows, childData] = args;\n            data = Data.Struct(new Struct(fields), 0, numRows, 0, null, childData);\n        }\n        else {\n            [, data, children] = args;\n        }\n        this.impl = new StructVector(data, children);\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new RecordBatch(Schema.from(vectors, names), vectors.reduce((len, vec) => Math.max(len, vec.length), 0), vectors);\n    }\n    clone(data, children = this.impl.children) {\n        return new RecordBatch(this.schema, data, children);\n    }\n    get schema() { return this._schema; }\n    get type() { return this.impl.type; }\n    get data() { return this.impl.data; }\n    get length() { return this.impl.length; }\n    get stride() { return this.impl.stride; }\n    get numCols() { return this.schema.fields.length; }\n    get rowProxy() { return this.impl.rowProxy; }\n    get nullCount() { return this.impl.nullCount; }\n    get numChildren() { return this.impl.numChildren; }\n    get TType() { return this.impl.TType; }\n    get TArray() { return this.impl.TArray; }\n    get TValue() { return this.impl.TValue; }\n    get ArrayType() { return this.impl.ArrayType; }\n    get(index) {\n        return this.impl.get(index);\n    }\n    set(index, value) {\n        this.impl.set(index, value);\n    }\n    isValid(index) { return this.impl.isValid(index); }\n    indexOf(value, fromIndex) { return this.impl.indexOf(value, fromIndex); }\n    toArray() { return this.impl.toArray(); }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    slice(begin, end) {\n        const { length, childData } = this.impl.slice(begin, end).data;\n        return new RecordBatch(this.schema, length, childData);\n    }\n    concat(...others) {\n        return this.impl.concat(...others.map((x) => x instanceof RecordBatch ? x.impl : x));\n    }\n    getChildAt(index) { return this.impl.getChildAt(index); }\n    select(...columnNames) {\n        const fields = this.schema.fields;\n        const schema = this.schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});\n        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch(schema, structData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport streamAdapters from './adapters';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/**\n * @ignore\n */\nexport class AsyncByteQueue extends AsyncQueue {\n    write(value) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value);\n        }\n    }\n    toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this.values.slice())[0] : (() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            let buffers = [], byteLength = 0;\n            try {\n                for (var _b = tslib_1.__asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {\n                    const chunk = _c.value;\n                    buffers.push(chunk);\n                    byteLength += chunk.byteLength;\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        }))();\n    }\n}\n/**\n * @ignore\n */\nexport class ByteStream {\n    constructor(source) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/**\n * @ignore\n */\nexport class AsyncByteStream {\n    constructor(source) {\n        if (!source) { }\n        else if (source instanceof AsyncByteStream) {\n            this.source = source.source;\n        }\n        else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source));\n        }\n        else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body));\n        }\n        else if (isIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        }\n        else if (isPromise(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isAsyncIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableDOMStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source));\n        }\n    }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    get closed() { return this.source.closed; }\n    cancel(reason) { return this.source.cancel(reason); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\nclass ByteStreamSource {\n    constructor(source) {\n        this.source = source;\n    }\n    cancel(reason) { this.return(reason); }\n    peek(size) { return this.next(size, 'peek').value; }\n    read(size) { return this.next(size, 'read').value; }\n    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }\n    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\nclass AsyncByteStreamSource {\n    constructor(source) {\n        this.source = source;\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    cancel(reason) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.return(reason); });\n    }\n    get closed() { return this._closedPromise; }\n    read(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });\n    }\n    peek(size) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });\n    }\n    next(size, cmd = 'read') {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.source.next({ cmd, size })); });\n    }\n    throw(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const result = (this.source.throw && (yield this.source.throw(value))) || ITERATOR_DONE;\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const result = (this.source.return && (yield this.source.return(value))) || ITERATOR_DONE;\n            this._closedPromiseResolve && this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n            return Object.create(result);\n        });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { ByteStream, AsyncByteStream } from './stream';\n/**\n * @ignore\n */\nexport class RandomAccessFile extends ByteStream {\n    constructor(buffer, byteLength = buffer.byteLength) {\n        super();\n        this.position = 0;\n        this.buffer = buffer;\n        this.size = byteLength;\n    }\n    readInt32(position) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() { this.buffer && (this.buffer = null); }\n    throw(value) { this.close(); return { done: true, value }; }\n    return(value) { this.close(); return { done: true, value }; }\n}\n/**\n * @ignore\n */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    constructor(file, byteLength) {\n        super();\n        this.position = 0;\n        this.file = file;\n        this.size = byteLength;\n        if ((typeof byteLength) !== 'number') {\n            (() => tslib_1.__awaiter(this, void 0, void 0, function* () { return this.size = (yield file.stat()).size; }))();\n        }\n    }\n    readInt32(position) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { buffer, byteOffset } = yield this.readAt(position, 4);\n            return new DataView(buffer, byteOffset).getInt32(0, true);\n        });\n    }\n    seek(position) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            this.position = Math.min(position, this.size);\n            return position < this.size;\n        });\n    }\n    read(nBytes) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { file, size, position } = this;\n            if (file && position < size) {\n                if (typeof nBytes !== 'number') {\n                    nBytes = Infinity;\n                }\n                let pos = position, offset = 0, bytesRead = 0;\n                let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n                let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n                while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                    ({ bytesRead } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));\n                }\n                return buffer;\n            }\n            return null;\n        });\n    }\n    readAt(position, nBytes) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { file, size } = this;\n            if (file && (position + nBytes) < size) {\n                const end = Math.min(size, position + nBytes);\n                const buffer = new Uint8Array(end - position);\n                return (yield file.read(buffer, 0, nBytes, position)).buffer;\n            }\n            return new Uint8Array(nBytes);\n        });\n    }\n    close() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { const f = this.file; this.file = null; f && (yield f.close()); });\n    }\n    throw(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, } from './type';\nexport class Visitor {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    visit(node, ...args) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) { return null; }\n    visitBool(_node, ..._args) { return null; }\n    visitInt(_node, ..._args) { return null; }\n    visitFloat(_node, ..._args) { return null; }\n    visitUtf8(_node, ..._args) { return null; }\n    visitBinary(_node, ..._args) { return null; }\n    visitFixedSizeBinary(_node, ..._args) { return null; }\n    visitDate(_node, ..._args) { return null; }\n    visitTimestamp(_node, ..._args) { return null; }\n    visitTime(_node, ..._args) { return null; }\n    visitDecimal(_node, ..._args) { return null; }\n    visitList(_node, ..._args) { return null; }\n    visitStruct(_node, ..._args) { return null; }\n    visitUnion(_node, ..._args) { return null; }\n    visitDictionary(_node, ..._args) { return null; }\n    visitInterval(_node, ..._args) { return null; }\n    visitFixedSizeList(_node, ..._args) { return null; }\n    visitMap(_node, ..._args) { return null; }\n}\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n    let fn = null;\n    let dtype = Type.NONE;\n    // tslint:disable\n    if (node instanceof Data) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof Vector) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof DataType) {\n        dtype = inferDType(node);\n    }\n    else if (typeof (dtype = node) !== 'number') {\n        dtype = Type[node];\n    }\n    switch (dtype) {\n        case Type.Null:\n            fn = visitor.visitNull;\n            break;\n        case Type.Bool:\n            fn = visitor.visitBool;\n            break;\n        case Type.Int:\n            fn = visitor.visitInt;\n            break;\n        case Type.Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case Type.Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case Type.Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case Type.Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case Type.Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case Type.Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case Type.Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case Type.Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case Type.Float:\n            fn = visitor.visitFloat;\n            break;\n        case Type.Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case Type.Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case Type.Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case Type.Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case Type.Binary:\n            fn = visitor.visitBinary;\n            break;\n        case Type.FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case Type.Date:\n            fn = visitor.visitDate;\n            break;\n        case Type.DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case Type.DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case Type.Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case Type.TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case Type.Time:\n            fn = visitor.visitTime;\n            break;\n        case Type.TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case Type.TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case Type.TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case Type.TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case Type.Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case Type.List:\n            fn = visitor.visitList;\n            break;\n        case Type.Struct:\n            fn = visitor.visitStruct;\n            break;\n        case Type.Union:\n            fn = visitor.visitUnion;\n            break;\n        case Type.DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case Type.SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case Type.Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case Type.Interval:\n            fn = visitor.visitInterval;\n            break;\n        case Type.IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case Type.IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case Type.FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case Type.Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === 'function')\n        return fn;\n    if (!throwIfNotFound)\n        return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\nfunction inferDType(type) {\n    switch (type.TType) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = type;\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch (type.precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch (type.unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch (type.unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch (type.mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.TType]}'`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst carryBit16 = 1 << 16;\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(4)) {\n        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nconst utf8Encoder = new TextEncoder('utf-8');\nexport class VectorLoader extends Visitor {\n    constructor(bytes, nodes, buffers) {\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n    visitMany(nodes) {\n        return nodes.map((node) => this.visit(node instanceof Field ? node.type : node));\n    }\n    visitNull(type, { length, nullCount } = this.nextFieldNode()) { return Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount)); }\n    visitBool(type, { length, nullCount } = this.nextFieldNode()) { return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitInt(type, { length, nullCount } = this.nextFieldNode()) { return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFloat(type, { length, nullCount } = this.nextFieldNode()) { return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitUtf8(type, { length, nullCount } = this.nextFieldNode()) { return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDate(type, { length, nullCount } = this.nextFieldNode()) { return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) { return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTime(type, { length, nullCount } = this.nextFieldNode()) { return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDecimal(type, { length, nullCount } = this.nextFieldNode()) { return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitList(type, { length, nullCount } = this.nextFieldNode()) { return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visitMany(type.children)); }\n    visitStruct(type, { length, nullCount } = this.nextFieldNode()) { return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    visitUnion(type) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type); }\n    visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children)); }\n    visitDictionary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices)); }\n    visitInterval(type, { length, nullCount } = this.nextFieldNode()) { return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    visitMap(type, { length, nullCount } = this.nextFieldNode()) { return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\nexport class JSONVectorLoader extends VectorLoader {\n    constructor(sources, nodes, buffers) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int8Array, this.sources[offset]));\n    }\n    readData(type, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n        }\n        else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset]);\n        }\n        else if (DataType.isBool(type)) {\n            return packBools(sources[offset]);\n        }\n        else if (DataType.isUtf8(type)) {\n            return utf8Encoder.encode(sources[offset].join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\nexport class TypeAssembler extends Visitor {\n    visit(node, builder) {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    visitInt(node, b) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    visitFloat(node, b) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    visitBool(_node, b) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    visitUtf8(_node, b) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    visitDate(node, b) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    visitTime(node, b) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    visitList(_node, b) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    visitStruct(_node, b) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    visitUnion(node, b) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\nexport const instance = new TypeAssembler();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Schema, Field } from '../../schema';\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\nexport function schemaFromJSON(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    return new Schema(schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields), customMetadataFromJSON(_schema['customMetadata']), dictionaries, dictionaryFields);\n}\nexport function recordBatchFromJSON(b) {\n    return new RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\nexport function dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\nfunction schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields) {\n    return (_schema['fields'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\nfunction fieldChildrenFromJSON(_field, dictionaries, dictionaryFields) {\n    return (_field['children'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldNode(column['count'], nullCountFromJSON(column['VALIDITY'])),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\nexport function fieldFromJSON(_field, dictionaries, dictionaryFields) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\nfunction customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\nfunction indexTypeFromJSON(_type) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\nfunction typeFromJSON(f, children) {\n    const typeId = f['type']['name'];\n    switch (typeId) {\n        case 'NONE': return new DataType();\n        case 'null': return new Null();\n        case 'binary': return new Binary();\n        case 'utf8': return new Utf8();\n        case 'bool': return new Bool();\n        case 'list': return new List(children || []);\n        case 'struct': return new Struct(children || []);\n    }\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth']);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']]);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']]);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']], t['bitWidth']);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']], t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']]);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']], (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], children || []);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\nconst invalidMessageType = (type) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\nconst nullMessage = (type) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\nconst invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\nconst invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\nexport class MessageReader {\n    constructor(source) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0));\n        return { done: len <= 0, value: len };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\nexport class AsyncMessageReader {\n    constructor(source, byteLength) {\n        this.source = source instanceof AsyncByteStream ? source\n            : (isFileHandle(source) && typeof byteLength === 'number')\n                ? new AsyncRandomAccessFile(source, byteLength)\n                : new AsyncByteStream(source);\n    }\n    [Symbol.asyncIterator]() { return this; }\n    next() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let r;\n            if ((r = yield this.readMetadataLength()).done) {\n                return ITERATOR_DONE;\n            }\n            if ((r = yield this.readMetadata(r.value)).done) {\n                return ITERATOR_DONE;\n            }\n            return r;\n        });\n    }\n    throw(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return yield this.source.throw(value); });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { return yield this.source.return(value); });\n    }\n    readMessage(type) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let r;\n            if ((r = yield this.next()).done) {\n                return null;\n            }\n            if ((type != null) && r.value.headerType !== type) {\n                throw new Error(invalidMessageType(type));\n            }\n            return r.value;\n        });\n    }\n    readMessageBody(bodyLength) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (bodyLength <= 0) {\n                return new Uint8Array(0);\n            }\n            const buf = toUint8Array(yield this.source.read(bodyLength));\n            if (buf.byteLength < bodyLength) {\n                throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n            }\n            // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n            return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n        });\n    }\n    readSchema(throwIfNull = false) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const type = MessageHeader.Schema;\n            const message = yield this.readMessage(type);\n            const schema = message && message.header();\n            if (throwIfNull && !schema) {\n                throw new Error(nullMessage(type));\n            }\n            return schema;\n        });\n    }\n    readMetadataLength() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.source.read(PADDING);\n            const bb = buf && new ByteBuffer(buf);\n            const len = +(bb && bb.readInt32(0));\n            return { done: len <= 0, value: len };\n        });\n    }\n    readMetadata(metadataLength) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const buf = yield this.source.read(metadataLength);\n            if (!buf) {\n                return ITERATOR_DONE;\n            }\n            if (buf.byteLength < metadataLength) {\n                throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n            }\n            return { done: false, value: Message.decode(buf) };\n        });\n    }\n}\nexport class JSONMessageReader extends MessageReader {\n    constructor(source) {\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isValidArrowFile(bb) {\n    let fileLength = bb.capacity(), footerLength, lengthOffset;\n    if ((fileLength < magicX2AndPadding /*                                  Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        ( /*                                                                 Invalid footer length  */(footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n            (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { RecordBatch } from '../recordbatch';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { toUint8Array } from '../util/buffer';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ArrowJSON, ReadableInterop, ITERATOR_DONE } from '../io/interfaces';\nimport { isPromise, isArrowJSON, isFileHandle, isFetchResponse, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nimport { MessageReader, AsyncMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding, JSONMessageReader } from './message';\nexport class RecordBatchReader extends ReadableInterop {\n    constructor(impl) {\n        super();\n        this.impl = impl;\n    }\n    get closed() { return this.impl.closed; }\n    get schema() { return this.impl.schema; }\n    get autoClose() { return this.impl.autoClose; }\n    get dictionaries() { return this.impl.dictionaries; }\n    get numDictionaries() { return this.impl.numDictionaries; }\n    get numRecordBatches() { return this.impl.numRecordBatches; }\n    next(value) { return this.impl.next(value); }\n    throw(value) { return this.impl.throw(value); }\n    return(value) { return this.impl.return(value); }\n    reset(schema) { this.impl.reset(schema); return this; }\n    toReadableDOMStream() { return streamAdapters.toReadableDOMStream(this); }\n    toReadableNodeStream() { return streamAdapters.toReadableNodeStream(this, { objectMode: true }); }\n    isSync() {\n        return (this instanceof RecordBatchFileReader) || (this instanceof RecordBatchStreamReader);\n    }\n    isAsync() {\n        return (this instanceof AsyncRecordBatchFileReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    isFile() {\n        return (this instanceof RecordBatchFileReader) || (this instanceof AsyncRecordBatchFileReader);\n    }\n    isStream() {\n        return (this instanceof RecordBatchStreamReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    /** @nocollapse */\n    static throughNode() { throw new Error(`\"asNodeStream\" not available in this environment`); }\n    /** @nocollapse */\n    static throughDOM() {\n        throw new Error(`\"asDOMStream\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static from(source) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        }\n        else if (isArrowJSON(source)) {\n            return RecordBatchReader.fromJSON(source);\n        }\n        else if (isFileHandle(source)) {\n            return RecordBatchReader.fromFileHandle(source);\n        }\n        else if (isPromise(source)) {\n            return (() => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield RecordBatchReader.from(yield source); }))();\n        }\n        else if (isPromise(source)) {\n            return (() => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield RecordBatchReader.from(yield source); }))();\n        }\n        else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return RecordBatchReader.fromAsyncByteStream(new AsyncByteStream(source));\n        }\n        return RecordBatchReader.fromByteStream(new ByteStream(source));\n    }\n    static fromJSON(source) {\n        return new RecordBatchStreamReader(new ArrowJSON(source));\n    }\n    static fromByteStream(source) {\n        const bytes = source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n                ? new RecordBatchFileReader(source.read())\n                : new RecordBatchStreamReader(source)\n            : new RecordBatchStreamReader(function* () { }());\n    }\n    static fromAsyncByteStream(source) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const bytes = yield source.peek((magicLength + 7) & ~7);\n            return bytes && bytes.byteLength >= 4\n                ? checkForMagicArrowString(bytes)\n                    ? new RecordBatchFileReader(yield source.read())\n                    : new AsyncRecordBatchStreamReader(source)\n                : new AsyncRecordBatchStreamReader(function () { return tslib_1.__asyncGenerator(this, arguments, function* () { }); }());\n        });\n    }\n    static fromFileHandle(source) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { size } = yield source.stat();\n            const file = new AsyncRandomAccessFile(source, size);\n            if (size >= magicX2AndPadding) {\n                if (checkForMagicArrowString(yield file.readAt(0, (magicLength + 7) & ~7))) {\n                    return new AsyncRecordBatchFileReader(file);\n                }\n            }\n            return new AsyncRecordBatchStreamReader(file);\n        });\n    }\n}\nexport class RecordBatchFileReader extends RecordBatchReader {\n    constructor(source, dictionaries) {\n        if (source instanceof AsyncRecordBatchFileReaderImpl) {\n            super(source);\n        }\n        else if (source instanceof RandomAccessFile) {\n            super(new RecordBatchFileReaderImpl(source, dictionaries));\n        }\n        else {\n            super(new RecordBatchFileReaderImpl(new RandomAccessFile(toUint8Array(source)), dictionaries));\n        }\n    }\n    get footer() { return this.impl.footer; }\n    cancel() { this.impl.close(); }\n    open(autoClose) { this.impl.open(autoClose); return this; }\n    readRecordBatch(index) { return this.impl.readRecordBatch(index); }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    [Symbol.asyncIterator]() { return tslib_1.__asyncGenerator(this, arguments, function* _a() { yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(this[Symbol.iterator]()))); }); }\n}\nexport class RecordBatchStreamReader extends RecordBatchReader {\n    constructor(source, dictionaries) {\n        super(isArrowJSON(source)\n            ? new RecordBatchJSONReaderImpl(new JSONMessageReader(source), dictionaries)\n            : new RecordBatchStreamReaderImpl(new MessageReader(source), dictionaries));\n    }\n    cancel() { this.impl.close(); }\n    open(autoClose) { this.impl.open(autoClose); return this; }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    [Symbol.asyncIterator]() { return tslib_1.__asyncGenerator(this, arguments, function* _a() { yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(this[Symbol.iterator]()))); }); }\n}\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n    constructor(source, byteLength) {\n        super(new AsyncRecordBatchStreamReaderImpl(new AsyncMessageReader(source, byteLength)));\n    }\n    cancel() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.impl.close(); });\n    }\n    open(autoClose) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.impl.open(autoClose); return this; });\n    }\n    [Symbol.asyncIterator]() { return this.impl[Symbol.asyncIterator](); }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n}\nexport class AsyncRecordBatchFileReader extends RecordBatchReader {\n    constructor(source, ...rest) {\n        let [byteLength, dictionaries] = rest;\n        if (byteLength && typeof byteLength !== 'number') {\n            dictionaries = byteLength;\n        }\n        let file = source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength);\n        super(new AsyncRecordBatchFileReaderImpl(file, dictionaries));\n    }\n    get footer() { return this.impl.footer; }\n    cancel() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.impl.close(); });\n    }\n    open(autoClose) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.impl.open(autoClose); return this; });\n    }\n    readRecordBatch(index) { return this.impl.readRecordBatch(index); }\n    [Symbol.asyncIterator]() { return this.impl[Symbol.asyncIterator](); }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchFileReader is not Iterable`); }\n}\nclass RecordBatchReaderImplBase {\n    constructor(dictionaries = new Map()) {\n        this.closed = false;\n        this.autoClose = true;\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() { return this.dictionaryIndex; }\n    get numRecordBatches() { return this.recordBatchIndex; }\n    reset(schema) {\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n            const type = schema.dictionaries.get(id);\n            const vector = (isDelta ? dictionaries.get(id).concat(Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0]));\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n            return vector;\n        }\n        return dictionaries.get(id);\n    }\n    _loadVectors(header, body, types) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImplBase {\n    constructor(reader, dictionaries = new Map()) {\n        super(dictionaries);\n        this.reader = reader;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    close() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset().reader.return();\n            this.reader = null;\n            this.dictionaries = null;\n        }\n        return this;\n    }\n    open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = this.reader.readSchema()))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    return(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message, { reader } = this;\n        while (message = this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    readNextMessageAndValidate(type) {\n        return this.reader.readMessage(type);\n    }\n}\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImplBase {\n    constructor(reader, dictionaries = new Map()) {\n        super(dictionaries);\n        this.reader = reader;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    close() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && (this.closed = true)) {\n                yield this.reset().reader.return();\n                this.reader = null;\n                this.dictionaries = null;\n            }\n            return this;\n        });\n    }\n    open(autoClose = this.autoClose) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.closed) {\n                this.autoClose = autoClose;\n                if (!(this.schema || (this.schema = (yield this.reader.readSchema())))) {\n                    return this.close();\n                }\n            }\n            return this;\n        });\n    }\n    throw(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && this.autoClose && (this.closed = true)) {\n                return yield this.reset().reader.throw(value);\n            }\n            return ITERATOR_DONE;\n        });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && this.autoClose && (this.closed = true)) {\n                return yield this.reset().reader.return(value);\n            }\n            return ITERATOR_DONE;\n        });\n    }\n    next() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.closed) {\n                return ITERATOR_DONE;\n            }\n            let message, { reader } = this;\n            while (message = yield this.readNextMessageAndValidate()) {\n                if (message.isSchema()) {\n                    yield this.reset(message.header());\n                }\n                else if (message.isRecordBatch()) {\n                    this.recordBatchIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return { done: false, value: recordBatch };\n                }\n                else if (message.isDictionaryBatch()) {\n                    this.dictionaryIndex++;\n                    const header = message.header();\n                    const buffer = yield reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n            return yield this.return();\n        });\n    }\n    readNextMessageAndValidate(type) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            return yield this.reader.readMessage(type);\n        });\n    }\n}\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(file, dictionaries = new Map()) {\n        super(new MessageReader(file), dictionaries);\n        this.file = file;\n    }\n    get numDictionaries() { return this.footer.numDictionaries; }\n    get numRecordBatches() { return this.footer.numRecordBatches; }\n    open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return super.open(autoClose);\n    }\n    readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this.footer) {\n            this.open();\n        }\n        const block = this.footer.getRecordBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    readDictionaryBatch(index) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    readFooter() {\n        const { file } = this;\n        const size = file.size;\n        const offset = size - magicAndPadding;\n        const length = file.readInt32(offset);\n        const buffer = file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    readNextMessageAndValidate(type) {\n        if (!this.footer) {\n            this.open();\n        }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && this.file.seek(block.offset)) {\n                return this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n    constructor(file, dictionaries = new Map()) {\n        super(new AsyncMessageReader(file), dictionaries);\n        this.file = file;\n    }\n    get numDictionaries() { return this.footer.numDictionaries; }\n    get numRecordBatches() { return this.footer.numRecordBatches; }\n    open(autoClose = this.autoClose) {\n        const _super = Object.create(null, {\n            open: { get: () => super.open }\n        });\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.closed && !this.footer) {\n                this.schema = (this.footer = yield this.readFooter()).schema;\n                for (const block of this.footer.dictionaryBatches()) {\n                    block && this.readDictionaryBatch(this.dictionaryIndex++);\n                }\n            }\n            return yield _super.open.call(this, autoClose);\n        });\n    }\n    readRecordBatch(index) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (this.closed) {\n                return null;\n            }\n            if (!this.footer) {\n                yield this.open();\n            }\n            const block = this.footer.getRecordBatch(index);\n            if (block && (yield this.file.seek(block.offset))) {\n                const message = yield this.reader.readMessage(MessageHeader.RecordBatch);\n                if (message && message.isRecordBatch()) {\n                    const header = message.header();\n                    const buffer = yield this.reader.readMessageBody(message.bodyLength);\n                    const recordBatch = this._loadRecordBatch(header, buffer);\n                    return recordBatch;\n                }\n            }\n            return null;\n        });\n    }\n    readDictionaryBatch(index) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const block = this.footer.getDictionaryBatch(index);\n            if (block && (yield this.file.seek(block.offset))) {\n                const message = yield this.reader.readMessage(MessageHeader.DictionaryBatch);\n                if (message && message.isDictionaryBatch()) {\n                    const header = message.header();\n                    const buffer = yield this.reader.readMessageBody(message.bodyLength);\n                    const vector = this._loadDictionaryBatch(header, buffer);\n                    this.dictionaries.set(header.id, vector);\n                }\n            }\n        });\n    }\n    readFooter() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            const { file } = this;\n            const offset = file.size - magicAndPadding;\n            const length = yield file.readInt32(offset);\n            const buffer = yield file.readAt(offset - length, length);\n            return Footer.decode(buffer);\n        });\n    }\n    readNextMessageAndValidate(type) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (!this.footer) {\n                yield this.open();\n            }\n            if (this.recordBatchIndex < this.numRecordBatches) {\n                const block = this.footer.getRecordBatch(this.recordBatchIndex);\n                if (block && (yield this.file.seek(block.offset))) {\n                    return yield this.reader.readMessage(type);\n                }\n            }\n            return null;\n        });\n    }\n}\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(reader, dictionaries = new Map()) {\n        super(reader, dictionaries);\n        this.reader = reader;\n    }\n    _loadVectors(header, body, types) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9yZWFkZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUdyQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDeEMsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRXpDLE9BQU8sY0FBYyxNQUFNLGdCQUFnQixDQUFDO0FBRTVDLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUU3QyxPQUFPLEVBQUUsVUFBVSxFQUFFLGVBQWUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUMzRCxPQUFPLEVBQXdCLFlBQVksRUFBRSxNQUFNLGdCQUFnQixDQUFDO0FBQ3BFLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxxQkFBcUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUNyRSxPQUFPLEVBQUUsWUFBWSxFQUFFLGdCQUFnQixFQUFFLE1BQU0seUJBQXlCLENBQUM7QUFDekUsT0FBTyxFQUFFLFNBQVMsRUFBNkIsZUFBZSxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ3hHLE9BQU8sRUFBRSxTQUFTLEVBQUUsV0FBVyxFQUFFLFlBQVksRUFBRSxlQUFlLEVBQUUsZUFBZSxFQUFFLG1CQUFtQixFQUFFLG9CQUFvQixFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDbkosT0FBTyxFQUFFLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSx3QkFBd0IsRUFBRSxXQUFXLEVBQUUsZUFBZSxFQUFFLGlCQUFpQixFQUFFLGlCQUFpQixFQUFFLE1BQU0sV0FBVyxDQUFDO0FBUzVKLE1BQU0sT0FBZ0IsaUJBQStELFNBQVEsZUFBK0I7SUFFeEgsWUFBZ0MsSUFBK0I7UUFBSSxLQUFLLEVBQUUsQ0FBQztRQUEzQyxTQUFJLEdBQUosSUFBSSxDQUEyQjtJQUFhLENBQUM7SUFFN0UsSUFBVyxNQUFNLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEQsSUFBVyxNQUFNLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDaEQsSUFBVyxTQUFTLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUM7SUFDdEQsSUFBVyxZQUFZLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDLENBQUM7SUFDNUQsSUFBVyxlQUFlLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUM7SUFDbEUsSUFBVyxnQkFBZ0IsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBRTdELElBQUksQ0FBQyxLQUFXLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDbkQsS0FBSyxDQUFDLEtBQVcsSUFBSSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRCxNQUFNLENBQUMsS0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELEtBQUssQ0FBQyxNQUF5QixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBTzFFLG1CQUFtQixLQUFLLE9BQU8sY0FBYyxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUMxRSxvQkFBb0IsS0FBSyxPQUFPLGNBQWMsQ0FBQyxvQkFBb0IsQ0FBQyxJQUFJLEVBQUUsRUFBRSxVQUFVLEVBQUUsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFFbEcsTUFBTTtRQUNULE9BQU8sQ0FBQyxJQUFJLFlBQVkscUJBQXFCLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFDTSxPQUFPO1FBQ1YsT0FBTyxDQUFDLElBQUksWUFBWSwwQkFBMEIsQ0FBQyxJQUFJLENBQUMsSUFBSSxZQUFZLDRCQUE0QixDQUFDLENBQUM7SUFDMUcsQ0FBQztJQUNNLE1BQU07UUFDVCxPQUFPLENBQUMsSUFBSSxZQUFZLHFCQUFxQixDQUFDLElBQUksQ0FBQyxJQUFJLFlBQVksMEJBQTBCLENBQUMsQ0FBQztJQUNuRyxDQUFDO0lBQ00sUUFBUTtRQUNYLE9BQU8sQ0FBQyxJQUFJLFlBQVksdUJBQXVCLENBQUMsSUFBSSxDQUFDLElBQUksWUFBWSw0QkFBNEIsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7SUFFRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsV0FBVyxLQUE4QixNQUFNLElBQUksS0FBSyxDQUFDLGtEQUFrRCxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdILGtCQUFrQjtJQUNYLE1BQU0sQ0FBQyxVQUFVO1FBQ3BCLE1BQU0sSUFBSSxLQUFLLENBQUMsaURBQWlELENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBUUQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBOEMsTUFBVztRQUN2RSxJQUFJLE1BQU0sWUFBWSxpQkFBaUIsRUFBRTtZQUNyQyxPQUFPLE1BQU0sQ0FBQztTQUNqQjthQUFNLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQzVCLE9BQU8saUJBQWlCLENBQUMsUUFBUSxDQUFJLE1BQU0sQ0FBQyxDQUFDO1NBQ2hEO2FBQU0sSUFBSSxZQUFZLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDN0IsT0FBTyxpQkFBaUIsQ0FBQyxjQUFjLENBQUksTUFBTSxDQUFDLENBQUM7U0FDdEQ7YUFBTSxJQUFJLFNBQVMsQ0FBVyxNQUFNLENBQUMsRUFBRTtZQUNwQyxPQUFPLENBQUMsR0FBUyxFQUFFLHdEQUFDLE9BQUEsTUFBTSxpQkFBaUIsQ0FBQyxJQUFJLENBQUksTUFBTSxNQUFNLENBQUMsQ0FBQSxHQUFBLENBQUMsRUFBRSxDQUFDO1NBQ3hFO2FBQU0sSUFBSSxTQUFTLENBQXdCLE1BQU0sQ0FBQyxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxHQUFTLEVBQUUsd0RBQUMsT0FBQSxNQUFNLGlCQUFpQixDQUFDLElBQUksQ0FBSSxNQUFNLE1BQU0sQ0FBQyxDQUFBLEdBQUEsQ0FBQyxFQUFFLENBQUM7U0FDeEU7YUFBTSxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsSUFBSSxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBSSxvQkFBb0IsQ0FBQyxNQUFNLENBQUMsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDMUgsT0FBTyxpQkFBaUIsQ0FBQyxtQkFBbUIsQ0FBSSxJQUFJLGVBQWUsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQ2hGO1FBQ0QsT0FBTyxpQkFBaUIsQ0FBQyxjQUFjLENBQUksSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0lBQ08sTUFBTSxDQUFDLFFBQVEsQ0FBd0MsTUFBcUI7UUFDaEYsT0FBTyxJQUFJLHVCQUF1QixDQUFJLElBQUksU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDakUsQ0FBQztJQUNPLE1BQU0sQ0FBQyxjQUFjLENBQXdDLE1BQWtCO1FBQ25GLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxXQUFXLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRCxPQUFPLEtBQUssSUFBSSxLQUFLLENBQUMsVUFBVSxJQUFJLENBQUM7WUFDakMsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEtBQUssQ0FBQztnQkFDakMsQ0FBQyxDQUFDLElBQUkscUJBQXFCLENBQUksTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDO2dCQUM3QyxDQUFDLENBQUMsSUFBSSx1QkFBdUIsQ0FBSSxNQUFNLENBQUM7WUFDeEMsQ0FBQyxDQUFDLElBQUksdUJBQXVCLENBQUksUUFBUSxDQUFDLE1BQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUNoRSxDQUFDO0lBQ08sTUFBTSxDQUFPLG1CQUFtQixDQUF3QyxNQUF1Qjs7WUFDbkcsTUFBTSxLQUFLLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsV0FBVyxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsT0FBTyxLQUFLLElBQUksS0FBSyxDQUFDLFVBQVUsSUFBSSxDQUFDO2dCQUNqQyxDQUFDLENBQUMsd0JBQXdCLENBQUMsS0FBSyxDQUFDO29CQUNqQyxDQUFDLENBQUMsSUFBSSxxQkFBcUIsQ0FBSSxNQUFNLE1BQU0sQ0FBQyxJQUFJLEVBQUUsQ0FBQztvQkFDbkQsQ0FBQyxDQUFDLElBQUksNEJBQTRCLENBQUksTUFBTSxDQUFDO2dCQUM3QyxDQUFDLENBQUMsSUFBSSw0QkFBNEIsQ0FBSSw4RUFBd0IsQ0FBQyxJQUFBLEVBQUUsQ0FBQyxDQUFDO1FBQzNFLENBQUM7S0FBQTtJQUNPLE1BQU0sQ0FBTyxjQUFjLENBQXdDLE1BQWtCOztZQUN6RixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxNQUFNLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDckMsTUFBTSxJQUFJLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDLENBQUM7WUFDckQsSUFBSSxJQUFJLElBQUksaUJBQWlCLEVBQUU7Z0JBQzNCLElBQUksd0JBQXdCLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLFdBQVcsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7b0JBQ3hFLE9BQU8sSUFBSSwwQkFBMEIsQ0FBSSxJQUFJLENBQUMsQ0FBQztpQkFDbEQ7YUFDSjtZQUNELE9BQU8sSUFBSSw0QkFBNEIsQ0FBSSxJQUFJLENBQUMsQ0FBQztRQUNyRCxDQUFDO0tBQUE7Q0FDSjtBQUVELE1BQU0sT0FBTyxxQkFBbUUsU0FBUSxpQkFBb0I7SUFNeEcsWUFBWSxNQUFtRixFQUFFLFlBQWtDO1FBQy9ILElBQUksTUFBTSxZQUFZLDhCQUE4QixFQUFFO1lBQ2xELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUNqQjthQUFNLElBQUksTUFBTSxZQUFZLGdCQUFnQixFQUFFO1lBQzNDLEtBQUssQ0FBQyxJQUFJLHlCQUF5QixDQUFDLE1BQU0sRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO1NBQzlEO2FBQU07WUFDSCxLQUFLLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLGdCQUFnQixDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDLENBQUM7U0FDbEc7SUFDTCxDQUFDO0lBQ0QsSUFBVyxNQUFNLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekMsTUFBTSxLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQyxTQUFtQixJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ3JFLGVBQWUsQ0FBQyxLQUFhLElBQUksT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDM0UsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssT0FBUSxJQUFJLENBQUMsSUFBeUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLHVFQUE0QyxzQkFBQSxLQUFLLENBQUMsQ0FBQyx5QkFBQSxzQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUEsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUE7Q0FDcEg7QUFFRCxNQUFNLE9BQU8sdUJBQXFFLFNBQVEsaUJBQW9CO0lBRzFHLFlBQVksTUFBNEUsRUFBRSxZQUFrQztRQUN4SCxLQUFLLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQztZQUNyQixDQUFDLENBQUMsSUFBSSx5QkFBeUIsQ0FBQyxJQUFJLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxFQUFFLFlBQVksQ0FBQztZQUM1RSxDQUFDLENBQUMsSUFBSSwyQkFBMkIsQ0FBQyxJQUFJLGFBQWEsQ0FBQyxNQUFNLENBQUMsRUFBRSxZQUFZLENBQUMsQ0FBQyxDQUFDO0lBQ3BGLENBQUM7SUFDTSxNQUFNLEtBQUssSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDL0IsSUFBSSxDQUFDLFNBQW1CLElBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDckUsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssT0FBUSxJQUFJLENBQUMsSUFBeUMsQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDM0YsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLHVFQUE0QyxzQkFBQSxLQUFLLENBQUMsQ0FBQyx5QkFBQSxzQkFBQSxJQUFJLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxFQUFFLENBQUEsQ0FBQSxDQUFBLENBQUMsQ0FBQyxDQUFDLElBQUE7Q0FDcEg7QUFFRCxNQUFNLE9BQU8sNEJBQTBFLFNBQVEsaUJBQW9CO0lBRy9HLFlBQVksTUFBK0gsRUFBRSxVQUFtQjtRQUM1SixLQUFLLENBQUMsSUFBSSxnQ0FBZ0MsQ0FBQyxJQUFJLGtCQUFrQixDQUFDLE1BQW9CLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzFHLENBQUM7SUFDWSxNQUFNO3NFQUFLLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FBQTtJQUNyQyxJQUFJLENBQUMsU0FBbUI7c0VBQUksTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsQ0FBQztLQUFBO0lBQ2pGLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLE9BQVEsSUFBSSxDQUFDLElBQThDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pILENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUF1QyxNQUFNLElBQUksS0FBSyxDQUFDLDhDQUE4QyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3BJO0FBRUQsTUFBTSxPQUFPLDBCQUF3RSxTQUFRLGlCQUFvQjtJQU03RyxZQUFZLE1BQTBDLEVBQUUsR0FBRyxJQUFzQztRQUM3RixJQUFJLENBQUMsVUFBVSxFQUFFLFlBQVksQ0FBQyxHQUFHLElBQXFDLENBQUM7UUFDdkUsSUFBSSxVQUFVLElBQUksT0FBTyxVQUFVLEtBQUssUUFBUSxFQUFFO1lBQUUsWUFBWSxHQUFHLFVBQVUsQ0FBQztTQUFFO1FBQ2hGLElBQUksSUFBSSxHQUFHLE1BQU0sWUFBWSxxQkFBcUIsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLHFCQUFxQixDQUFDLE1BQU0sRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM1RyxLQUFLLENBQUMsSUFBSSw4QkFBOEIsQ0FBQyxJQUFJLEVBQUUsWUFBWSxDQUFDLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBQ0QsSUFBVyxNQUFNLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDbkMsTUFBTTtzRUFBSyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxDQUFDO0tBQUE7SUFDckMsSUFBSSxDQUFDLFNBQW1CO3NFQUFJLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxPQUFPLElBQUksQ0FBQyxDQUFDLENBQUM7S0FBQTtJQUNqRixlQUFlLENBQUMsS0FBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNFLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxLQUFLLE9BQVEsSUFBSSxDQUFDLElBQThDLENBQUMsTUFBTSxDQUFDLGFBQWEsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ2pILENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxLQUF1QyxNQUFNLElBQUksS0FBSyxDQUFDLDRDQUE0QyxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ2xJO0FBRUQsTUFBZSx5QkFBeUI7SUFZcEMsWUFBWSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWtCO1FBUjdDLFdBQU0sR0FBRyxLQUFLLENBQUM7UUFDZixjQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ2pCLG9CQUFlLEdBQUcsQ0FBQyxDQUFDO1FBQ3BCLHFCQUFnQixHQUFHLENBQUMsQ0FBQztRQU14QixJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQztJQUNyQyxDQUFDO0lBTEQsSUFBVyxlQUFlLEtBQUssT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUM3RCxJQUFXLGdCQUFnQixLQUFLLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUt4RCxLQUFLLENBQUMsTUFBeUI7UUFDbEMsSUFBSSxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7UUFDekIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLENBQUMsQ0FBQztRQUMxQixJQUFJLENBQUMsTUFBTSxHQUFTLE1BQU0sQ0FBQztRQUMzQixJQUFJLENBQUMsWUFBWSxHQUFHLElBQUksR0FBRyxFQUFFLENBQUM7UUFDOUIsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUNTLGdCQUFnQixDQUFDLE1BQTRCLEVBQUUsSUFBUztRQUM5RCxPQUFPLElBQUksV0FBVyxDQUFJLElBQUksQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsWUFBWSxDQUFDLE1BQU0sRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQy9HLENBQUM7SUFDUyxvQkFBb0IsQ0FBQyxNQUFnQyxFQUFFLElBQVM7UUFDdEUsTUFBTSxFQUFFLEVBQUUsRUFBRSxPQUFPLEVBQUUsSUFBSSxFQUFFLEdBQUcsTUFBTSxDQUFDO1FBQ3JDLE1BQU0sRUFBRSxZQUFZLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3RDLElBQUksT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUVsQyxNQUFNLElBQUksR0FBRyxNQUFNLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQztZQUMxQyxNQUFNLE1BQU0sR0FBRyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUUsQ0FBQyxNQUFNLENBQ2xELE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztnQkFDdkQsTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksRUFBRSxJQUFJLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQVcsQ0FBQztZQUVwRSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFLENBQUMsSUFBSSxDQUFDLGdCQUFnQixHQUFHLE1BQU0sQ0FBQyxDQUFDO1lBRTlGLE9BQU8sTUFBTSxDQUFDO1NBQ2pCO1FBQ0QsT0FBTyxZQUFZLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBRSxDQUFDO0lBQ2pDLENBQUM7SUFDUyxZQUFZLENBQUMsTUFBNEIsRUFBRSxJQUFTLEVBQUUsS0FBMkI7UUFDdkYsT0FBTyxJQUFJLFlBQVksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDSjtBQUVELE1BQU0sMkJBQ0YsU0FBUSx5QkFBNEI7SUFHcEMsWUFBc0IsTUFBcUIsRUFBRSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWtCO1FBQ2pGLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQURGLFdBQU0sR0FBTixNQUFNLENBQWU7SUFFM0MsQ0FBQztJQUNNLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNwQixPQUFPLElBQXdDLENBQUM7SUFDcEQsQ0FBQztJQUNNLEtBQUs7UUFDUixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUU7WUFDdEMsSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUM3QixJQUFJLENBQUMsTUFBTSxHQUFTLElBQUksQ0FBQztZQUN6QixJQUFJLENBQUMsWUFBWSxHQUFTLElBQUksQ0FBQztTQUNsQztRQUNELE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFDTSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTO1FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7WUFDM0IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxVQUFVLEVBQUcsQ0FBQyxDQUFDLEVBQUU7Z0JBQzdELE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2FBQ3ZCO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQVc7UUFDcEIsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUU7WUFDeEQsT0FBTyxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUMzQztRQUNELE9BQU8sYUFBYSxDQUFDO0lBQ3pCLENBQUM7SUFDTSxNQUFNLENBQUMsS0FBVztRQUNyQixJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRTtZQUN4RCxPQUFPLElBQUksQ0FBQyxLQUFLLEVBQUUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQzVDO1FBQ0QsT0FBTyxhQUFhLENBQUM7SUFDekIsQ0FBQztJQUNNLElBQUk7UUFDUCxJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxPQUFPLGFBQWEsQ0FBQztTQUFFO1FBQzFDLElBQUksT0FBdUIsRUFBRSxFQUFFLE1BQU0sRUFBRSxHQUFHLElBQUksQ0FBQztRQUMvQyxPQUFPLE9BQU8sR0FBRyxJQUFJLENBQUMsMEJBQTBCLEVBQUUsRUFBRTtZQUNoRCxJQUFJLE9BQU8sQ0FBQyxRQUFRLEVBQUUsRUFBRTtnQkFDcEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLENBQUMsQ0FBQzthQUNoQztpQkFBTSxJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRTtnQkFDaEMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLENBQUM7Z0JBQ3hCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzFELE9BQU8sRUFBRSxJQUFJLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxXQUFXLEVBQUUsQ0FBQzthQUM5QztpQkFBTSxJQUFJLE9BQU8sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO2dCQUNwQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUM7Z0JBQ3ZCLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQzFELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxvQkFBb0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQ3pELElBQUksQ0FBQyxZQUFZLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEVBQUUsTUFBTSxDQUFDLENBQUM7YUFDNUM7U0FDSjtRQUNELE9BQU8sSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO0lBQ3pCLENBQUM7SUFDUywwQkFBMEIsQ0FBMEIsSUFBZTtRQUN6RSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFJLElBQUksQ0FBQyxDQUFDO0lBQzVDLENBQUM7Q0FDSjtBQUVELE1BQU0sZ0NBQ0YsU0FBUSx5QkFBNEI7SUFHcEMsWUFBc0IsTUFBMEIsRUFBRSxZQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWtCO1FBQ3RGLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQztRQURGLFdBQU0sR0FBTixNQUFNLENBQW9CO0lBRWhELENBQUM7SUFDTSxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUM7UUFDekIsT0FBTyxJQUE2QyxDQUFDO0lBQ3pELENBQUM7SUFDWSxLQUFLOztZQUNkLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsRUFBRTtnQkFDdEMsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNuQyxJQUFJLENBQUMsTUFBTSxHQUFTLElBQUksQ0FBQztnQkFDekIsSUFBSSxDQUFDLFlBQVksR0FBUyxJQUFJLENBQUM7YUFDbEM7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQUE7SUFDWSxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTOztZQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sRUFBRTtnQkFDZCxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztnQkFDM0IsSUFBSSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFLENBQUUsQ0FBQyxDQUFDLEVBQUU7b0JBQ3JFLE9BQU8sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDO2lCQUN2QjthQUNKO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBQ1ksS0FBSyxDQUFDLEtBQVc7O1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUksQ0FBQyxFQUFFO2dCQUN4RCxPQUFPLE1BQU0sSUFBSSxDQUFDLEtBQUssRUFBRSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7YUFDakQ7WUFDRCxPQUFPLGFBQWEsQ0FBQztRQUN6QixDQUFDO0tBQUE7SUFDWSxNQUFNLENBQUMsS0FBVzs7WUFDM0IsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLEVBQUU7Z0JBQ3hELE9BQU8sTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNsRDtZQUNELE9BQU8sYUFBYSxDQUFDO1FBQ3pCLENBQUM7S0FBQTtJQUNZLElBQUk7O1lBQ2IsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUFFLE9BQU8sYUFBYSxDQUFDO2FBQUU7WUFDMUMsSUFBSSxPQUF1QixFQUFFLEVBQUUsTUFBTSxFQUFFLEdBQUcsSUFBSSxDQUFDO1lBQy9DLE9BQU8sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLDBCQUEwQixFQUFFLEVBQUU7Z0JBQ3RELElBQUksT0FBTyxDQUFDLFFBQVEsRUFBRSxFQUFFO29CQUNwQixNQUFNLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUM7aUJBQ3RDO3FCQUFNLElBQUksT0FBTyxDQUFDLGFBQWEsRUFBRSxFQUFFO29CQUNoQyxJQUFJLENBQUMsZ0JBQWdCLEVBQUUsQ0FBQztvQkFDeEIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNoRSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUMxRCxPQUFPLEVBQUUsSUFBSSxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLENBQUM7aUJBQzlDO3FCQUFNLElBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7b0JBQ3BDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQztvQkFDdkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO29CQUNoRSxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO29CQUN6RCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2lCQUM1QzthQUNKO1lBQ0QsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQztRQUMvQixDQUFDO0tBQUE7SUFDZSwwQkFBMEIsQ0FBMEIsSUFBZTs7WUFDL0UsT0FBTyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFJLElBQUksQ0FBQyxDQUFDO1FBQ2xELENBQUM7S0FBQTtDQUNKO0FBRUQsTUFBTSx5QkFDRixTQUFRLDJCQUE4QjtJQVF0QyxZQUFzQixJQUFzQixFQUFFLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBa0I7UUFDbEYsS0FBSyxDQUFDLElBQUksYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRDNCLFNBQUksR0FBSixJQUFJLENBQWtCO0lBRTVDLENBQUM7SUFMRCxJQUFXLGVBQWUsS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLENBQUMsQ0FBQztJQUNwRSxJQUFXLGdCQUFnQixLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDLENBQUM7SUFLL0QsSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUztRQUNsQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFDOUIsSUFBSSxDQUFDLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO1lBQ3ZELEtBQUssTUFBTSxLQUFLLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRSxFQUFFO2dCQUNqRCxLQUFLLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxlQUFlLEVBQUUsQ0FBQyxDQUFDO2FBQzdEO1NBQ0o7UUFDRCxPQUFPLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNNLGVBQWUsQ0FBQyxLQUFhO1FBQ2hDLElBQUksSUFBSSxDQUFDLE1BQU0sRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUU7UUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7WUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7U0FBRTtRQUNsQyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNoRCxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO1lBQ25FLElBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxhQUFhLEVBQUUsRUFBRTtnQkFDcEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO2dCQUNoQyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7Z0JBQy9ELE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7Z0JBQzFELE9BQU8sV0FBVyxDQUFDO2FBQ3RCO1NBQ0o7UUFDRCxPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDO0lBQ1MsbUJBQW1CLENBQUMsS0FBYTtRQUN2QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGtCQUFrQixDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BELElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtZQUN2QyxNQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxhQUFhLENBQUMsZUFBZSxDQUFDLENBQUM7WUFDdkUsSUFBSSxPQUFPLElBQUksT0FBTyxDQUFDLGlCQUFpQixFQUFFLEVBQUU7Z0JBQ3hDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztnQkFDaEMsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDO2dCQUMvRCxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsb0JBQW9CLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2dCQUN6RCxJQUFJLENBQUMsWUFBWSxDQUFDLEdBQUcsQ0FBQyxNQUFNLENBQUMsRUFBRSxFQUFFLE1BQU0sQ0FBQyxDQUFDO2FBQzVDO1NBQ0o7SUFDTCxDQUFDO0lBQ1MsVUFBVTtRQUNoQixNQUFNLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7UUFDdkIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLGVBQWUsQ0FBQztRQUN0QyxNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxHQUFHLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztRQUNwRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNTLDBCQUEwQixDQUEwQixJQUFlO1FBQ3pFLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQUUsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFDO1NBQUU7UUFDbEMsSUFBSSxJQUFJLENBQUMsZ0JBQWdCLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixFQUFFO1lBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO1lBQ2hFLElBQUksS0FBSyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsRUFBRTtnQkFDdkMsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUN4QztTQUNKO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKO0FBRUQsTUFBTSw4QkFDRixTQUFRLGdDQUFtQztJQVEzQyxZQUFzQixJQUEyQixFQUFFLFlBQVksR0FBRyxJQUFJLEdBQUcsRUFBa0I7UUFDdkYsS0FBSyxDQUFDLElBQUksa0JBQWtCLENBQUMsSUFBSSxDQUFDLEVBQUUsWUFBWSxDQUFDLENBQUM7UUFEaEMsU0FBSSxHQUFKLElBQUksQ0FBdUI7SUFFakQsQ0FBQztJQUxELElBQVcsZUFBZSxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLElBQVcsZ0JBQWdCLEtBQUssT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUt6RCxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTOzs7OztZQUN4QyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQzlCLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDO2dCQUM3RCxLQUFLLE1BQU0sS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtvQkFDakQsS0FBSyxJQUFJLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxJQUFJLENBQUMsZUFBZSxFQUFFLENBQUMsQ0FBQztpQkFDN0Q7YUFDSjtZQUNELE9BQU8sTUFBTSxPQUFNLElBQUksWUFBQyxTQUFTLENBQUMsQ0FBQztRQUN2QyxDQUFDO0tBQUE7SUFDWSxlQUFlLENBQUMsS0FBYTs7WUFDdEMsSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO2dCQUFFLE9BQU8sSUFBSSxDQUFDO2FBQUU7WUFDakMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQUUsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFBRTtZQUN4QyxNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNoRCxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLFdBQVcsQ0FBQyxDQUFDO2dCQUN6RSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsYUFBYSxFQUFFLEVBQUU7b0JBQ3BDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsQ0FBQztvQkFDaEMsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLENBQUM7b0JBQ3JFLE1BQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLEVBQUUsTUFBTSxDQUFDLENBQUM7b0JBQzFELE9BQU8sV0FBVyxDQUFDO2lCQUN0QjthQUNKO1lBQ0QsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQztLQUFBO0lBQ2UsbUJBQW1CLENBQUMsS0FBYTs7WUFDN0MsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUNwRCxJQUFJLEtBQUssSUFBSSxDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUU7Z0JBQy9DLE1BQU0sT0FBTyxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsYUFBYSxDQUFDLGVBQWUsQ0FBQyxDQUFDO2dCQUM3RSxJQUFJLE9BQU8sSUFBSSxPQUFPLENBQUMsaUJBQWlCLEVBQUUsRUFBRTtvQkFDeEMsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sRUFBRSxDQUFDO29CQUNoQyxNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsZUFBZSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztvQkFDckUsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG9CQUFvQixDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsQ0FBQztvQkFDekQsSUFBSSxDQUFDLFlBQVksQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEVBQUUsRUFBRSxNQUFNLENBQUMsQ0FBQztpQkFDNUM7YUFDSjtRQUNMLENBQUM7S0FBQTtJQUNlLFVBQVU7O1lBQ3RCLE1BQU0sRUFBRSxJQUFJLEVBQUUsR0FBRyxJQUFJLENBQUM7WUFDdEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLElBQUksR0FBRyxlQUFlLENBQUM7WUFDM0MsTUFBTSxNQUFNLEdBQUcsTUFBTSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1lBQzVDLE1BQU0sTUFBTSxHQUFHLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzFELE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxDQUFDO0tBQUE7SUFDZSwwQkFBMEIsQ0FBMEIsSUFBZTs7WUFDL0UsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQUUsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUM7YUFBRTtZQUN4QyxJQUFJLElBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLEVBQUU7Z0JBQy9DLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxNQUFNLENBQUMsY0FBYyxDQUFDLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFDO2dCQUNoRSxJQUFJLEtBQUssS0FBSSxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQSxFQUFFO29CQUM3QyxPQUFPLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLENBQUM7aUJBQzlDO2FBQ0o7WUFDRCxPQUFPLElBQUksQ0FBQztRQUNoQixDQUFDO0tBQUE7Q0FDSjtBQUVELE1BQU0seUJBQXVFLFNBQVEsMkJBQThCO0lBQy9HLFlBQXNCLE1BQXlCLEVBQUUsWUFBWSxHQUFHLElBQUksR0FBRyxFQUFrQjtRQUNyRixLQUFLLENBQUMsTUFBTSxFQUFFLFlBQVksQ0FBQyxDQUFDO1FBRFYsV0FBTSxHQUFOLE1BQU0sQ0FBbUI7SUFFL0MsQ0FBQztJQUNTLFlBQVksQ0FBQyxNQUE0QixFQUFFLElBQVMsRUFBRSxLQUEyQjtRQUN2RixPQUFPLElBQUksZ0JBQWdCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLE9BQU8sQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNyRixDQUFDO0NBQ0oiLCJmaWxlIjoiaXBjL3JlYWRlci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IE1lc3NhZ2VIZWFkZXIgfSBmcm9tICcuLi9lbnVtJztcbmltcG9ydCB7IEZvb3RlciB9IGZyb20gJy4vbWV0YWRhdGEvZmlsZSc7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi4vc2NoZW1hJztcbmltcG9ydCBzdHJlYW1BZGFwdGVycyBmcm9tICcuLi9pby9hZGFwdGVycyc7XG5pbXBvcnQgeyBNZXNzYWdlIH0gZnJvbSAnLi9tZXRhZGF0YS9tZXNzYWdlJztcbmltcG9ydCB7IFJlY29yZEJhdGNoIH0gZnJvbSAnLi4vcmVjb3JkYmF0Y2gnO1xuaW1wb3J0ICogYXMgbWV0YWRhdGEgZnJvbSAnLi9tZXRhZGF0YS9tZXNzYWdlJztcbmltcG9ydCB7IEJ5dGVTdHJlYW0sIEFzeW5jQnl0ZVN0cmVhbSB9IGZyb20gJy4uL2lvL3N0cmVhbSc7XG5pbXBvcnQgeyBBcnJheUJ1ZmZlclZpZXdJbnB1dCwgdG9VaW50OEFycmF5IH0gZnJvbSAnLi4vdXRpbC9idWZmZXInO1xuaW1wb3J0IHsgUmFuZG9tQWNjZXNzRmlsZSwgQXN5bmNSYW5kb21BY2Nlc3NGaWxlIH0gZnJvbSAnLi4vaW8vZmlsZSc7XG5pbXBvcnQgeyBWZWN0b3JMb2FkZXIsIEpTT05WZWN0b3JMb2FkZXIgfSBmcm9tICcuLi92aXNpdG9yL3ZlY3RvcmxvYWRlcic7XG5pbXBvcnQgeyBBcnJvd0pTT04sIEFycm93SlNPTkxpa2UsIEZpbGVIYW5kbGUsIFJlYWRhYmxlSW50ZXJvcCwgSVRFUkFUT1JfRE9ORSB9IGZyb20gJy4uL2lvL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgaXNQcm9taXNlLCBpc0Fycm93SlNPTiwgaXNGaWxlSGFuZGxlLCBpc0ZldGNoUmVzcG9uc2UsIGlzQXN5bmNJdGVyYWJsZSwgaXNSZWFkYWJsZURPTVN0cmVhbSwgaXNSZWFkYWJsZU5vZGVTdHJlYW0gfSBmcm9tICcuLi91dGlsL2NvbXBhdCc7XG5pbXBvcnQgeyBNZXNzYWdlUmVhZGVyLCBBc3luY01lc3NhZ2VSZWFkZXIsIGNoZWNrRm9yTWFnaWNBcnJvd1N0cmluZywgbWFnaWNMZW5ndGgsIG1hZ2ljQW5kUGFkZGluZywgbWFnaWNYMkFuZFBhZGRpbmcsIEpTT05NZXNzYWdlUmVhZGVyIH0gZnJvbSAnLi9tZXNzYWdlJztcblxuZXhwb3J0IHR5cGUgRnJvbUFyZzAgPSBBcnJvd0pTT05MaWtlO1xuZXhwb3J0IHR5cGUgRnJvbUFyZzEgPSBJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBBcnJheUJ1ZmZlclZpZXdJbnB1dDtcbmV4cG9ydCB0eXBlIEZyb21BcmcyID0gUHJvbWlzZUxpa2U8SXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+IHwgQXJyYXlCdWZmZXJWaWV3SW5wdXQ+O1xuZXhwb3J0IHR5cGUgRnJvbUFyZzMgPSBOb2RlSlMuUmVhZGFibGVTdHJlYW0gfCBSZWFkYWJsZVN0cmVhbTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBBc3luY0l0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0PjtcbmV4cG9ydCB0eXBlIEZyb21Bcmc0ID0gUmVzcG9uc2UgfCBGaWxlSGFuZGxlIHwgUHJvbWlzZUxpa2U8RmlsZUhhbmRsZT4gfCBQcm9taXNlTGlrZTxSZXNwb25zZT47XG5leHBvcnQgdHlwZSBGcm9tQXJncyA9IEZyb21BcmcwIHwgRnJvbUFyZzMgfCBGcm9tQXJnMSB8IEZyb21BcmcyIHwgRnJvbUFyZzQ7XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBSZWNvcmRCYXRjaFJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIFJlYWRhYmxlSW50ZXJvcDxSZWNvcmRCYXRjaDxUPj4ge1xuXG4gICAgcHJvdGVjdGVkIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBpbXBsOiBJUmVjb3JkQmF0Y2hSZWFkZXJJbXBsPFQ+KSB7IHN1cGVyKCk7IH1cblxuICAgIHB1YmxpYyBnZXQgY2xvc2VkKCkgeyByZXR1cm4gdGhpcy5pbXBsLmNsb3NlZDsgfVxuICAgIHB1YmxpYyBnZXQgc2NoZW1hKCkgeyByZXR1cm4gdGhpcy5pbXBsLnNjaGVtYTsgfVxuICAgIHB1YmxpYyBnZXQgYXV0b0Nsb3NlKCkgeyByZXR1cm4gdGhpcy5pbXBsLmF1dG9DbG9zZTsgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5pbXBsLmRpY3Rpb25hcmllczsgfVxuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5pbXBsLm51bURpY3Rpb25hcmllczsgfVxuICAgIHB1YmxpYyBnZXQgbnVtUmVjb3JkQmF0Y2hlcygpIHsgcmV0dXJuIHRoaXMuaW1wbC5udW1SZWNvcmRCYXRjaGVzOyB9XG5cbiAgICBwdWJsaWMgbmV4dCh2YWx1ZT86IGFueSkgeyByZXR1cm4gdGhpcy5pbXBsLm5leHQodmFsdWUpOyB9XG4gICAgcHVibGljIHRocm93KHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLmltcGwudGhyb3codmFsdWUpOyB9XG4gICAgcHVibGljIHJldHVybih2YWx1ZT86IGFueSkgeyByZXR1cm4gdGhpcy5pbXBsLnJldHVybih2YWx1ZSk7IH1cbiAgICBwdWJsaWMgcmVzZXQoc2NoZW1hPzogU2NoZW1hPFQ+IHwgbnVsbCkgeyB0aGlzLmltcGwucmVzZXQoc2NoZW1hKTsgcmV0dXJuIHRoaXM7IH1cblxuICAgIHB1YmxpYyBhYnN0cmFjdCBjYW5jZWwoKTogdm9pZCB8IFByb21pc2U8dm9pZD47XG4gICAgcHVibGljIGFic3RyYWN0IG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbik6IHRoaXMgfCBQcm9taXNlPHRoaXM+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+O1xuXG4gICAgcHVibGljIHRvUmVhZGFibGVET01TdHJlYW0oKSB7IHJldHVybiBzdHJlYW1BZGFwdGVycy50b1JlYWRhYmxlRE9NU3RyZWFtKHRoaXMpOyB9XG4gICAgcHVibGljIHRvUmVhZGFibGVOb2RlU3RyZWFtKCkgeyByZXR1cm4gc3RyZWFtQWRhcHRlcnMudG9SZWFkYWJsZU5vZGVTdHJlYW0odGhpcywgeyBvYmplY3RNb2RlOiB0cnVlIH0pOyB9XG5cbiAgICBwdWJsaWMgaXNTeW5jKCk6IHRoaXMgaXMgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+IHwgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4ge1xuICAgICAgICByZXR1cm4gKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRCYXRjaEZpbGVSZWFkZXIpIHx8ICh0aGlzIGluc3RhbmNlb2YgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXIpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNBc3luYygpOiB0aGlzIGlzIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+IHwgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPiB7XG4gICAgICAgIHJldHVybiAodGhpcyBpbnN0YW5jZW9mIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVyKSB8fCAodGhpcyBpbnN0YW5jZW9mIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXIpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNGaWxlKCk6IHRoaXMgaXMgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+IHwgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4ge1xuICAgICAgICByZXR1cm4gKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRCYXRjaEZpbGVSZWFkZXIpIHx8ICh0aGlzIGluc3RhbmNlb2YgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXIpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNTdHJlYW0oKTogdGhpcyBpcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPiB8IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4ge1xuICAgICAgICByZXR1cm4gKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcikgfHwgKHRoaXMgaW5zdGFuY2VvZiBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyKTtcbiAgICB9XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIHRocm91Z2hOb2RlKCk6IGltcG9ydCgnc3RyZWFtJykuRHVwbGV4IHsgdGhyb3cgbmV3IEVycm9yKGBcImFzTm9kZVN0cmVhbVwiIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudGApOyB9XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyB0aHJvdWdoRE9NPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0+KCk6IHsgd3JpdGFibGU6IFdyaXRhYmxlU3RyZWFtPFVpbnQ4QXJyYXk+LCByZWFkYWJsZTogUmVhZGFibGVTdHJlYW08UmVjb3JkQmF0Y2g8VD4+IH0ge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoYFwiYXNET01TdHJlYW1cIiBub3QgYXZhaWxhYmxlIGluIHRoaXMgZW52aXJvbm1lbnRgKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIFJlY29yZEJhdGNoUmVhZGVyPihzb3VyY2U6IFQpOiBUO1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pihzb3VyY2U6IEZyb21BcmcwKTogUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHNvdXJjZTogRnJvbUFyZzEpOiBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oc291cmNlOiBGcm9tQXJnMik6IFByb21pc2U8UmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+IHwgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pihzb3VyY2U6IEZyb21BcmczKTogUHJvbWlzZTxSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+PjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oc291cmNlOiBGcm9tQXJnNCk6IFByb21pc2U8QXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+PjtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oc291cmNlOiBhbnkpIHtcbiAgICAgICAgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFJlY29yZEJhdGNoUmVhZGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gc291cmNlO1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyb3dKU09OKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWNvcmRCYXRjaFJlYWRlci5mcm9tSlNPTjxUPihzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmlsZUhhbmRsZShzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbUZpbGVIYW5kbGU8VD4oc291cmNlKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2U8RnJvbUFyZzE+KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4gYXdhaXQgUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbTxUPihhd2FpdCBzb3VyY2UpKSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZTxGaWxlSGFuZGxlIHwgUmVzcG9uc2U+KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoYXN5bmMgKCkgPT4gYXdhaXQgUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbTxUPihhd2FpdCBzb3VyY2UpKSgpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRmV0Y2hSZXNwb25zZShzb3VyY2UpIHx8IGlzUmVhZGFibGVET01TdHJlYW0oc291cmNlKSB8fCBpc1JlYWRhYmxlTm9kZVN0cmVhbShzb3VyY2UpIHx8IGlzQXN5bmNJdGVyYWJsZShzb3VyY2UpKSB7XG4gICAgICAgICAgICByZXR1cm4gUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbUFzeW5jQnl0ZVN0cmVhbTxUPihuZXcgQXN5bmNCeXRlU3RyZWFtKHNvdXJjZSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBSZWNvcmRCYXRjaFJlYWRlci5mcm9tQnl0ZVN0cmVhbTxUPihuZXcgQnl0ZVN0cmVhbShzb3VyY2UpKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzdGF0aWMgZnJvbUpTT048VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oc291cmNlOiBBcnJvd0pTT05MaWtlKSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4obmV3IEFycm93SlNPTihzb3VyY2UpKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzdGF0aWMgZnJvbUJ5dGVTdHJlYW08VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oc291cmNlOiBCeXRlU3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gc291cmNlLnBlZWsoKG1hZ2ljTGVuZ3RoICsgNykgJiB+Nyk7XG4gICAgICAgIHJldHVybiBieXRlcyAmJiBieXRlcy5ieXRlTGVuZ3RoID49IDRcbiAgICAgICAgICAgID8gY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nKGJ5dGVzKVxuICAgICAgICAgICAgPyBuZXcgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+KHNvdXJjZS5yZWFkKCkpXG4gICAgICAgICAgICA6IG5ldyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPihzb3VyY2UpXG4gICAgICAgICAgICA6IG5ldyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPihmdW5jdGlvbiooKTogYW55IHt9KCkpO1xuICAgIH1cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBmcm9tQXN5bmNCeXRlU3RyZWFtPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0+KHNvdXJjZTogQXN5bmNCeXRlU3RyZWFtKSB7XG4gICAgICAgIGNvbnN0IGJ5dGVzID0gYXdhaXQgc291cmNlLnBlZWsoKG1hZ2ljTGVuZ3RoICsgNykgJiB+Nyk7XG4gICAgICAgIHJldHVybiBieXRlcyAmJiBieXRlcy5ieXRlTGVuZ3RoID49IDRcbiAgICAgICAgICAgID8gY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nKGJ5dGVzKVxuICAgICAgICAgICAgPyBuZXcgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+KGF3YWl0IHNvdXJjZS5yZWFkKCkpXG4gICAgICAgICAgICA6IG5ldyBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+KHNvdXJjZSlcbiAgICAgICAgICAgIDogbmV3IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4oYXN5bmMgZnVuY3Rpb24qKCk6IGFueSB7fSgpKTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzdGF0aWMgYXN5bmMgZnJvbUZpbGVIYW5kbGU8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oc291cmNlOiBGaWxlSGFuZGxlKSB7XG4gICAgICAgIGNvbnN0IHsgc2l6ZSB9ID0gYXdhaXQgc291cmNlLnN0YXQoKTtcbiAgICAgICAgY29uc3QgZmlsZSA9IG5ldyBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUoc291cmNlLCBzaXplKTtcbiAgICAgICAgaWYgKHNpemUgPj0gbWFnaWNYMkFuZFBhZGRpbmcpIHtcbiAgICAgICAgICAgIGlmIChjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYXdhaXQgZmlsZS5yZWFkQXQoMCwgKG1hZ2ljTGVuZ3RoICsgNykgJiB+NykpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcjxUPihmaWxlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4oZmlsZSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgUmVjb3JkQmF0Y2hSZWFkZXI8VD4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgaW1wbDogUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPik7XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBSYW5kb21BY2Nlc3NGaWxlLCBkaWN0aW9uYXJpZXM/OiBNYXA8bnVtYmVyLCBWZWN0b3I+KTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFycmF5QnVmZmVyVmlld0lucHV0LCBkaWN0aW9uYXJpZXM/OiBNYXA8bnVtYmVyLCBWZWN0b3I+KTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPiB8IFJhbmRvbUFjY2Vzc0ZpbGUgfCBBcnJheUJ1ZmZlclZpZXdJbnB1dCwgZGljdGlvbmFyaWVzPzogTWFwPG51bWJlciwgVmVjdG9yPikge1xuICAgICAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsKSB7XG4gICAgICAgICAgICBzdXBlcihzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIFJhbmRvbUFjY2Vzc0ZpbGUpIHtcbiAgICAgICAgICAgIHN1cGVyKG5ldyBSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsKHNvdXJjZSwgZGljdGlvbmFyaWVzKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzdXBlcihuZXcgUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbChuZXcgUmFuZG9tQWNjZXNzRmlsZSh0b1VpbnQ4QXJyYXkoc291cmNlKSksIGRpY3Rpb25hcmllcykpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgZm9vdGVyKCkgeyByZXR1cm4gdGhpcy5pbXBsLmZvb3RlcjsgfVxuICAgIHB1YmxpYyBjYW5jZWwoKSB7IHRoaXMuaW1wbC5jbG9zZSgpOyB9XG4gICAgcHVibGljIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbikgeyB0aGlzLmltcGwub3BlbihhdXRvQ2xvc2UpOyByZXR1cm4gdGhpczsgfVxuICAgIHB1YmxpYyByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcikgeyByZXR1cm4gdGhpcy5pbXBsLnJlYWRSZWNvcmRCYXRjaChpbmRleCk7IH1cbiAgICBwdWJsaWMgW1N5bWJvbC5pdGVyYXRvcl0oKSB7IHJldHVybiAodGhpcy5pbXBsIGFzIEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+KVtTeW1ib2wuaXRlcmF0b3JdKCk7IH1cbiAgICBwdWJsaWMgYXN5bmMgKltTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7IHlpZWxkKiB0aGlzW1N5bWJvbC5pdGVyYXRvcl0oKTsgfVxufVxuXG5leHBvcnQgY2xhc3MgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBSZWNvcmRCYXRjaFJlYWRlcjxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByb3RlY3RlZCBpbXBsOiBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD47XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBCeXRlU3RyZWFtIHwgQXJyb3dKU09OIHwgQXJyYXlCdWZmZXJWaWV3IHwgSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3PiwgZGljdGlvbmFyaWVzPzogTWFwPG51bWJlciwgVmVjdG9yPikge1xuICAgICAgICBzdXBlcihpc0Fycm93SlNPTihzb3VyY2UpXG4gICAgICAgICAgICA/IG5ldyBSZWNvcmRCYXRjaEpTT05SZWFkZXJJbXBsKG5ldyBKU09OTWVzc2FnZVJlYWRlcihzb3VyY2UpLCBkaWN0aW9uYXJpZXMpXG4gICAgICAgICAgICA6IG5ldyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGwobmV3IE1lc3NhZ2VSZWFkZXIoc291cmNlKSwgZGljdGlvbmFyaWVzKSk7XG4gICAgfVxuICAgIHB1YmxpYyBjYW5jZWwoKSB7IHRoaXMuaW1wbC5jbG9zZSgpOyB9XG4gICAgcHVibGljIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbikgeyB0aGlzLmltcGwub3BlbihhdXRvQ2xvc2UpOyByZXR1cm4gdGhpczsgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpIHsgcmV0dXJuICh0aGlzLmltcGwgYXMgSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4pW1N5bWJvbC5pdGVyYXRvcl0oKTsgfVxuICAgIHB1YmxpYyBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHsgeWllbGQqIHRoaXNbU3ltYm9sLml0ZXJhdG9yXSgpOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgUmVjb3JkQmF0Y2hSZWFkZXI8VD4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgaW1wbDogQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD47XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY0J5dGVTdHJlYW0gfCBGaWxlSGFuZGxlIHwgTm9kZUpTLlJlYWRhYmxlU3RyZWFtIHwgUmVhZGFibGVTdHJlYW08QXJyYXlCdWZmZXJWaWV3PiB8IEFzeW5jSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3PiwgYnl0ZUxlbmd0aD86IG51bWJlcikge1xuICAgICAgICBzdXBlcihuZXcgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGwobmV3IEFzeW5jTWVzc2FnZVJlYWRlcihzb3VyY2UgYXMgRmlsZUhhbmRsZSwgYnl0ZUxlbmd0aCkpKTtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGNhbmNlbCgpIHsgYXdhaXQgdGhpcy5pbXBsLmNsb3NlKCk7IH1cbiAgICBwdWJsaWMgYXN5bmMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7IGF3YWl0IHRoaXMuaW1wbC5vcGVuKGF1dG9DbG9zZSk7IHJldHVybiB0aGlzOyB9XG4gICAgcHVibGljIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7IHJldHVybiAodGhpcy5pbXBsIGFzIEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4pW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOyB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHsgdGhyb3cgbmV3IEVycm9yKGBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyIGlzIG5vdCBJdGVyYWJsZWApOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIFJlY29yZEJhdGNoUmVhZGVyPFQ+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdGVjdGVkIGltcGw6IEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jUmFuZG9tQWNjZXNzRmlsZSk7XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUsIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgVmVjdG9yPik7XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBGaWxlSGFuZGxlLCBieXRlTGVuZ3RoOiBudW1iZXIsIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgVmVjdG9yPik7XG4gICAgY29uc3RydWN0b3Ioc291cmNlOiBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUgfCBGaWxlSGFuZGxlLCAuLi5yZXN0OiAobnVtYmVyIHwgTWFwPG51bWJlciwgVmVjdG9yPilbXSkge1xuICAgICAgICBsZXQgW2J5dGVMZW5ndGgsIGRpY3Rpb25hcmllc10gPSByZXN0IGFzIFtudW1iZXIsIE1hcDxudW1iZXIsIFZlY3Rvcj5dO1xuICAgICAgICBpZiAoYnl0ZUxlbmd0aCAmJiB0eXBlb2YgYnl0ZUxlbmd0aCAhPT0gJ251bWJlcicpIHsgZGljdGlvbmFyaWVzID0gYnl0ZUxlbmd0aDsgfVxuICAgICAgICBsZXQgZmlsZSA9IHNvdXJjZSBpbnN0YW5jZW9mIEFzeW5jUmFuZG9tQWNjZXNzRmlsZSA/IHNvdXJjZSA6IG5ldyBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUoc291cmNlLCBieXRlTGVuZ3RoKTtcbiAgICAgICAgc3VwZXIobmV3IEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbChmaWxlLCBkaWN0aW9uYXJpZXMpKTtcbiAgICB9XG4gICAgcHVibGljIGdldCBmb290ZXIoKSB7IHJldHVybiB0aGlzLmltcGwuZm9vdGVyOyB9XG4gICAgcHVibGljIGFzeW5jIGNhbmNlbCgpIHsgYXdhaXQgdGhpcy5pbXBsLmNsb3NlKCk7IH1cbiAgICBwdWJsaWMgYXN5bmMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7IGF3YWl0IHRoaXMuaW1wbC5vcGVuKGF1dG9DbG9zZSk7IHJldHVybiB0aGlzOyB9XG4gICAgcHVibGljIHJlYWRSZWNvcmRCYXRjaChpbmRleDogbnVtYmVyKSB7IHJldHVybiB0aGlzLmltcGwucmVhZFJlY29yZEJhdGNoKGluZGV4KTsgfVxuICAgIHB1YmxpYyBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCkgeyByZXR1cm4gKHRoaXMuaW1wbCBhcyBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+KVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTsgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7IHRocm93IG5ldyBFcnJvcihgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXIgaXMgbm90IEl0ZXJhYmxlYCk7IH1cbn1cblxuYWJzdHJhY3QgY2xhc3MgUmVjb3JkQmF0Y2hSZWFkZXJJbXBsQmFzZTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIHNjaGVtYTogU2NoZW1hO1xuICAgIHB1YmxpYyBjbG9zZWQgPSBmYWxzZTtcbiAgICBwdWJsaWMgYXV0b0Nsb3NlID0gdHJ1ZTtcbiAgICBwdWJsaWMgZGljdGlvbmFyeUluZGV4ID0gMDtcbiAgICBwdWJsaWMgcmVjb3JkQmF0Y2hJbmRleCA9IDA7XG4gICAgcHVibGljIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgVmVjdG9yPjtcbiAgICBwdWJsaWMgZ2V0IG51bURpY3Rpb25hcmllcygpIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeUluZGV4OyB9XG4gICAgcHVibGljIGdldCBudW1SZWNvcmRCYXRjaGVzKCkgeyByZXR1cm4gdGhpcy5yZWNvcmRCYXRjaEluZGV4OyB9XG5cbiAgICBjb25zdHJ1Y3RvcihkaWN0aW9uYXJpZXMgPSBuZXcgTWFwPG51bWJlciwgVmVjdG9yPigpKSB7XG4gICAgICAgIHRoaXMuZGljdGlvbmFyaWVzID0gZGljdGlvbmFyaWVzO1xuICAgIH1cbiAgICBwdWJsaWMgcmVzZXQoc2NoZW1hPzogU2NoZW1hPFQ+IHwgbnVsbCkge1xuICAgICAgICB0aGlzLmRpY3Rpb25hcnlJbmRleCA9IDA7XG4gICAgICAgIHRoaXMucmVjb3JkQmF0Y2hJbmRleCA9IDA7XG4gICAgICAgIHRoaXMuc2NoZW1hID0gPGFueT4gc2NoZW1hO1xuICAgICAgICB0aGlzLmRpY3Rpb25hcmllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfbG9hZFJlY29yZEJhdGNoKGhlYWRlcjogbWV0YWRhdGEuUmVjb3JkQmF0Y2gsIGJvZHk6IGFueSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoPFQ+KHRoaXMuc2NoZW1hLCBoZWFkZXIubGVuZ3RoLCB0aGlzLl9sb2FkVmVjdG9ycyhoZWFkZXIsIGJvZHksIHRoaXMuc2NoZW1hLmZpZWxkcykpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2xvYWREaWN0aW9uYXJ5QmF0Y2goaGVhZGVyOiBtZXRhZGF0YS5EaWN0aW9uYXJ5QmF0Y2gsIGJvZHk6IGFueSkge1xuICAgICAgICBjb25zdCB7IGlkLCBpc0RlbHRhLCBkYXRhIH0gPSBoZWFkZXI7XG4gICAgICAgIGNvbnN0IHsgZGljdGlvbmFyaWVzLCBzY2hlbWEgfSA9IHRoaXM7XG4gICAgICAgIGlmIChpc0RlbHRhIHx8ICFkaWN0aW9uYXJpZXMuZ2V0KGlkKSkge1xuXG4gICAgICAgICAgICBjb25zdCB0eXBlID0gc2NoZW1hLmRpY3Rpb25hcmllcy5nZXQoaWQpITtcbiAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IChpc0RlbHRhID8gZGljdGlvbmFyaWVzLmdldChpZCkhLmNvbmNhdChcbiAgICAgICAgICAgICAgICBWZWN0b3IubmV3KHRoaXMuX2xvYWRWZWN0b3JzKGRhdGEsIGJvZHksIFt0eXBlXSlbMF0pKSA6XG4gICAgICAgICAgICAgICAgVmVjdG9yLm5ldyh0aGlzLl9sb2FkVmVjdG9ycyhkYXRhLCBib2R5LCBbdHlwZV0pWzBdKSkgYXMgVmVjdG9yO1xuXG4gICAgICAgICAgICAoc2NoZW1hLmRpY3Rpb25hcnlGaWVsZHMuZ2V0KGlkKSB8fCBbXSkuZm9yRWFjaCgoeyB0eXBlIH0pID0+IHR5cGUuZGljdGlvbmFyeVZlY3RvciA9IHZlY3Rvcik7XG5cbiAgICAgICAgICAgIHJldHVybiB2ZWN0b3I7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRpY3Rpb25hcmllcy5nZXQoaWQpITtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9sb2FkVmVjdG9ycyhoZWFkZXI6IG1ldGFkYXRhLlJlY29yZEJhdGNoLCBib2R5OiBhbnksIHR5cGVzOiAoRmllbGQgfCBEYXRhVHlwZSlbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFZlY3RvckxvYWRlcihib2R5LCBoZWFkZXIubm9kZXMsIGhlYWRlci5idWZmZXJzKS52aXNpdE1hbnkodHlwZXMpO1xuICAgIH1cbn1cblxuY2xhc3MgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+XG4gICAgZXh0ZW5kcyBSZWNvcmRCYXRjaFJlYWRlckltcGxCYXNlPFQ+XG4gICAgICAgIGltcGxlbWVudHMgSVJlY29yZEJhdGNoUmVhZGVySW1wbDxUPiwgSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4ge1xuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHJlYWRlcjogTWVzc2FnZVJlYWRlciwgZGljdGlvbmFyaWVzID0gbmV3IE1hcDxudW1iZXIsIFZlY3Rvcj4oKSkge1xuICAgICAgICBzdXBlcihkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4ge1xuICAgICAgICByZXR1cm4gdGhpcyBhcyBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PjtcbiAgICB9XG4gICAgcHVibGljIGNsb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICB0aGlzLnJlc2V0KCkucmVhZGVyLnJldHVybigpO1xuICAgICAgICAgICAgdGhpcy5yZWFkZXIgPSA8YW55PiBudWxsO1xuICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMgPSA8YW55PiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgb3BlbihhdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmF1dG9DbG9zZSA9IGF1dG9DbG9zZTtcbiAgICAgICAgICAgIGlmICghKHRoaXMuc2NoZW1hIHx8ICh0aGlzLnNjaGVtYSA9IHRoaXMucmVhZGVyLnJlYWRTY2hlbWEoKSEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyB0aHJvdyh2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT4ge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmIHRoaXMuYXV0b0Nsb3NlICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNldCgpLnJlYWRlci50aHJvdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElURVJBVE9SX0RPTkU7XG4gICAgfVxuICAgIHB1YmxpYyByZXR1cm4odmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiB0aGlzLmF1dG9DbG9zZSAmJiAodGhpcy5jbG9zZWQgPSB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucmVzZXQoKS5yZWFkZXIucmV0dXJuKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSVRFUkFUT1JfRE9ORTtcbiAgICB9XG4gICAgcHVibGljIG5leHQoKTogSXRlcmF0b3JSZXN1bHQ8UmVjb3JkQmF0Y2g8VD4+IHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7IHJldHVybiBJVEVSQVRPUl9ET05FOyB9XG4gICAgICAgIGxldCBtZXNzYWdlOiBNZXNzYWdlIHwgbnVsbCwgeyByZWFkZXIgfSA9IHRoaXM7XG4gICAgICAgIHdoaWxlIChtZXNzYWdlID0gdGhpcy5yZWFkTmV4dE1lc3NhZ2VBbmRWYWxpZGF0ZSgpKSB7XG4gICAgICAgICAgICBpZiAobWVzc2FnZS5pc1NjaGVtYSgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZXNldChtZXNzYWdlLmhlYWRlcigpKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5pc1JlY29yZEJhdGNoKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlY29yZEJhdGNoSW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRCYXRjaCA9IHRoaXMuX2xvYWRSZWNvcmRCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgZG9uZTogZmFsc2UsIHZhbHVlOiByZWNvcmRCYXRjaCB9O1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmlzRGljdGlvbmFyeUJhdGNoKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmRpY3Rpb25hcnlJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IG1lc3NhZ2UuaGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gcmVhZGVyLnJlYWRNZXNzYWdlQm9keShtZXNzYWdlLmJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IHRoaXMuX2xvYWREaWN0aW9uYXJ5QmF0Y2goaGVhZGVyLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyaWVzLnNldChoZWFkZXIuaWQsIHZlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMucmV0dXJuKCk7XG4gICAgfVxuICAgIHByb3RlY3RlZCByZWFkTmV4dE1lc3NhZ2VBbmRWYWxpZGF0ZTxUIGV4dGVuZHMgTWVzc2FnZUhlYWRlcj4odHlwZT86IFQgfCBudWxsKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZTxUPih0eXBlKTtcbiAgICB9XG59XG5cbmNsYXNzIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+XG4gICAgZXh0ZW5kcyBSZWNvcmRCYXRjaFJlYWRlckltcGxCYXNlPFQ+XG4gICAgICAgIGltcGxlbWVudHMgSVJlY29yZEJhdGNoUmVhZGVySW1wbDxUPiwgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZGVyOiBBc3luY01lc3NhZ2VSZWFkZXIsIGRpY3Rpb25hcmllcyA9IG5ldyBNYXA8bnVtYmVyLCBWZWN0b3I+KCkpIHtcbiAgICAgICAgc3VwZXIoZGljdGlvbmFyaWVzKTtcbiAgICB9XG4gICAgcHVibGljIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKTogQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG4gICAgICAgIHJldHVybiB0aGlzIGFzIEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj47XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBjbG9zZSgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiAodGhpcy5jbG9zZWQgPSB0cnVlKSkge1xuICAgICAgICAgICAgYXdhaXQgdGhpcy5yZXNldCgpLnJlYWRlci5yZXR1cm4oKTtcbiAgICAgICAgICAgIHRoaXMucmVhZGVyID0gPGFueT4gbnVsbDtcbiAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyaWVzID0gPGFueT4gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG9wZW4oYXV0b0Nsb3NlID0gdGhpcy5hdXRvQ2xvc2UpIHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvQ2xvc2UgPSBhdXRvQ2xvc2U7XG4gICAgICAgICAgICBpZiAoISh0aGlzLnNjaGVtYSB8fCAodGhpcy5zY2hlbWEgPSAoYXdhaXQgdGhpcy5yZWFkZXIucmVhZFNjaGVtYSgpKSEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyB0aHJvdyh2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8YW55Pj4ge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmIHRoaXMuYXV0b0Nsb3NlICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXNldCgpLnJlYWRlci50aHJvdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElURVJBVE9SX0RPTkU7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZXR1cm4odmFsdWU/OiBhbnkpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiB0aGlzLmF1dG9DbG9zZSAmJiAodGhpcy5jbG9zZWQgPSB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVzZXQoKS5yZWFkZXIucmV0dXJuKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSVRFUkFUT1JfRE9ORTtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkgeyByZXR1cm4gSVRFUkFUT1JfRE9ORTsgfVxuICAgICAgICBsZXQgbWVzc2FnZTogTWVzc2FnZSB8IG51bGwsIHsgcmVhZGVyIH0gPSB0aGlzO1xuICAgICAgICB3aGlsZSAobWVzc2FnZSA9IGF3YWl0IHRoaXMucmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGUoKSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaXNTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzZXQobWVzc2FnZS5oZWFkZXIoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaXNSZWNvcmRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRCYXRjaEluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZWFkZXIucmVhZE1lc3NhZ2VCb2R5KG1lc3NhZ2UuYm9keUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjb3JkQmF0Y2ggPSB0aGlzLl9sb2FkUmVjb3JkQmF0Y2goaGVhZGVyLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcmVjb3JkQmF0Y2ggfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5pc0RpY3Rpb25hcnlCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5SW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSB0aGlzLl9sb2FkRGljdGlvbmFyeUJhdGNoKGhlYWRlciwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpY3Rpb25hcmllcy5zZXQoaGVhZGVyLmlkLCB2ZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJldHVybigpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGU8VCBleHRlbmRzIE1lc3NhZ2VIZWFkZXI+KHR5cGU/OiBUIHwgbnVsbCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWFkZXIucmVhZE1lc3NhZ2U8VD4odHlwZSk7XG4gICAgfVxufVxuXG5jbGFzcyBSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+XG4gICAgZXh0ZW5kcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPiwgSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4ge1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1YmxpYyBmb290ZXI6IEZvb3RlcjtcbiAgICBwdWJsaWMgZ2V0IG51bURpY3Rpb25hcmllcygpIHsgcmV0dXJuIHRoaXMuZm9vdGVyLm51bURpY3Rpb25hcmllczsgfVxuICAgIHB1YmxpYyBnZXQgbnVtUmVjb3JkQmF0Y2hlcygpIHsgcmV0dXJuIHRoaXMuZm9vdGVyLm51bVJlY29yZEJhdGNoZXM7IH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmaWxlOiBSYW5kb21BY2Nlc3NGaWxlLCBkaWN0aW9uYXJpZXMgPSBuZXcgTWFwPG51bWJlciwgVmVjdG9yPigpKSB7XG4gICAgICAgIHN1cGVyKG5ldyBNZXNzYWdlUmVhZGVyKGZpbGUpLCBkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgb3BlbihhdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmICF0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSAodGhpcy5mb290ZXIgPSB0aGlzLnJlYWRGb290ZXIoKSkuc2NoZW1hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBibG9jayBvZiB0aGlzLmZvb3Rlci5kaWN0aW9uYXJ5QmF0Y2hlcygpKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sgJiYgdGhpcy5yZWFkRGljdGlvbmFyeUJhdGNoKHRoaXMuZGljdGlvbmFyeUluZGV4KyspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5vcGVuKGF1dG9DbG9zZSk7XG4gICAgfVxuICAgIHB1YmxpYyByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZShNZXNzYWdlSGVhZGVyLlJlY29yZEJhdGNoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UuaXNSZWNvcmRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRCYXRjaCA9IHRoaXMuX2xvYWRSZWNvcmRCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZEJhdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZERpY3Rpb25hcnlCYXRjaChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5mb290ZXIuZ2V0RGljdGlvbmFyeUJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZShNZXNzYWdlSGVhZGVyLkRpY3Rpb25hcnlCYXRjaCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmlzRGljdGlvbmFyeUJhdGNoKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlQm9keShtZXNzYWdlLmJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IHRoaXMuX2xvYWREaWN0aW9uYXJ5QmF0Y2goaGVhZGVyLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyaWVzLnNldChoZWFkZXIuaWQsIHZlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlYWRGb290ZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZmlsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGZpbGUuc2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc2l6ZSAtIG1hZ2ljQW5kUGFkZGluZztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZmlsZS5yZWFkSW50MzIob2Zmc2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZmlsZS5yZWFkQXQob2Zmc2V0IC0gbGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gRm9vdGVyLmRlY29kZShidWZmZXIpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGU8VCBleHRlbmRzIE1lc3NhZ2VIZWFkZXI+KHR5cGU/OiBUIHwgbnVsbCk6IE1lc3NhZ2U8VD4gfCBudWxsIHtcbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBpZiAodGhpcy5yZWNvcmRCYXRjaEluZGV4IDwgdGhpcy5udW1SZWNvcmRCYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKHRoaXMucmVjb3JkQmF0Y2hJbmRleCk7XG4gICAgICAgICAgICBpZiAoYmxvY2sgJiYgdGhpcy5maWxlLnNlZWsoYmxvY2sub2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZSh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PlxuICAgIGV4dGVuZHMgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPiwgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGZvb3RlcjogRm9vdGVyO1xuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5mb290ZXIubnVtRGljdGlvbmFyaWVzOyB9XG4gICAgcHVibGljIGdldCBudW1SZWNvcmRCYXRjaGVzKCkgeyByZXR1cm4gdGhpcy5mb290ZXIubnVtUmVjb3JkQmF0Y2hlczsgfVxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZpbGU6IEFzeW5jUmFuZG9tQWNjZXNzRmlsZSwgZGljdGlvbmFyaWVzID0gbmV3IE1hcDxudW1iZXIsIFZlY3Rvcj4oKSkge1xuICAgICAgICBzdXBlcihuZXcgQXN5bmNNZXNzYWdlUmVhZGVyKGZpbGUpLCBkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgb3BlbihhdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmICF0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSAodGhpcy5mb290ZXIgPSBhd2FpdCB0aGlzLnJlYWRGb290ZXIoKSkuc2NoZW1hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBibG9jayBvZiB0aGlzLmZvb3Rlci5kaWN0aW9uYXJ5QmF0Y2hlcygpKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sgJiYgdGhpcy5yZWFkRGljdGlvbmFyeUJhdGNoKHRoaXMuZGljdGlvbmFyeUluZGV4KyspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCBzdXBlci5vcGVuKGF1dG9DbG9zZSk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyBhd2FpdCB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIChhd2FpdCB0aGlzLmZpbGUuc2VlayhibG9jay5vZmZzZXQpKSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlKE1lc3NhZ2VIZWFkZXIuUmVjb3JkQmF0Y2gpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS5pc1JlY29yZEJhdGNoKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlQm9keShtZXNzYWdlLmJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY29yZEJhdGNoID0gdGhpcy5fbG9hZFJlY29yZEJhdGNoKGhlYWRlciwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gcmVjb3JkQmF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIHByb3RlY3RlZCBhc3luYyByZWFkRGljdGlvbmFyeUJhdGNoKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmZvb3Rlci5nZXREaWN0aW9uYXJ5QmF0Y2goaW5kZXgpO1xuICAgICAgICBpZiAoYmxvY2sgJiYgKGF3YWl0IHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpKSB7XG4gICAgICAgICAgICBjb25zdCBtZXNzYWdlID0gYXdhaXQgdGhpcy5yZWFkZXIucmVhZE1lc3NhZ2UoTWVzc2FnZUhlYWRlci5EaWN0aW9uYXJ5QmF0Y2gpO1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UgJiYgbWVzc2FnZS5pc0RpY3Rpb25hcnlCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSB0aGlzLl9sb2FkRGljdGlvbmFyeUJhdGNoKGhlYWRlciwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpY3Rpb25hcmllcy5zZXQoaGVhZGVyLmlkLCB2ZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHByb3RlY3RlZCBhc3luYyByZWFkRm9vdGVyKCkge1xuICAgICAgICBjb25zdCB7IGZpbGUgfSA9IHRoaXM7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGZpbGUuc2l6ZSAtIG1hZ2ljQW5kUGFkZGluZztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gYXdhaXQgZmlsZS5yZWFkSW50MzIob2Zmc2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgZmlsZS5yZWFkQXQob2Zmc2V0IC0gbGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gRm9vdGVyLmRlY29kZShidWZmZXIpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGU8VCBleHRlbmRzIE1lc3NhZ2VIZWFkZXI+KHR5cGU/OiBUIHwgbnVsbCk6IFByb21pc2U8TWVzc2FnZTxUPiB8IG51bGw+IHtcbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyBhd2FpdCB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBpZiAodGhpcy5yZWNvcmRCYXRjaEluZGV4IDwgdGhpcy5udW1SZWNvcmRCYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKHRoaXMucmVjb3JkQmF0Y2hJbmRleCk7XG4gICAgICAgICAgICBpZiAoYmxvY2sgJiYgYXdhaXQgdGhpcy5maWxlLnNlZWsoYmxvY2sub2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZSh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIFJlY29yZEJhdGNoSlNPTlJlYWRlckltcGw8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkZXI6IEpTT05NZXNzYWdlUmVhZGVyLCBkaWN0aW9uYXJpZXMgPSBuZXcgTWFwPG51bWJlciwgVmVjdG9yPigpKSB7XG4gICAgICAgIHN1cGVyKHJlYWRlciwgZGljdGlvbmFyaWVzKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9sb2FkVmVjdG9ycyhoZWFkZXI6IG1ldGFkYXRhLlJlY29yZEJhdGNoLCBib2R5OiBhbnksIHR5cGVzOiAoRmllbGQgfCBEYXRhVHlwZSlbXSkge1xuICAgICAgICByZXR1cm4gbmV3IEpTT05WZWN0b3JMb2FkZXIoYm9keSwgaGVhZGVyLm5vZGVzLCBoZWFkZXIuYnVmZmVycykudmlzaXRNYW55KHR5cGVzKTtcbiAgICB9XG59XG5cbmludGVyZmFjZSBJUmVjb3JkQmF0Y2hSZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IHtcblxuICAgIGNsb3NlZDogYm9vbGVhbjtcbiAgICBzY2hlbWE6IFNjaGVtYTxUPjtcbiAgICBhdXRvQ2xvc2U6IGJvb2xlYW47XG4gICAgbnVtRGljdGlvbmFyaWVzOiBudW1iZXI7XG4gICAgbnVtUmVjb3JkQmF0Y2hlczogbnVtYmVyO1xuICAgIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgVmVjdG9yPjtcblxuICAgIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbik6IHRoaXMgfCBQcm9taXNlPHRoaXM+O1xuICAgIHJlc2V0KHNjaGVtYT86IFNjaGVtYTxUPiB8IG51bGwpOiB0aGlzO1xuICAgIGNsb3NlKCk6IHRoaXMgfCBQcm9taXNlPHRoaXM+O1xuXG4gICAgW1N5bWJvbC5pdGVyYXRvcl0/KCk6IEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+O1xuICAgIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0/KCk6IEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj47XG5cbiAgICB0aHJvdyh2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT4gfCBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+O1xuICAgIHJldHVybih2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT4gfCBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+O1xuICAgIG5leHQodmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4gfCBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFJlY29yZEJhdGNoPFQ+Pj47XG59XG5cbmludGVyZmFjZSBJUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIElSZWNvcmRCYXRjaFJlYWRlckltcGw8VD4ge1xuXG4gICAgZm9vdGVyOiBGb290ZXI7XG5cbiAgICByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcik6IFJlY29yZEJhdGNoPFQ+IHwgbnVsbCB8IFByb21pc2U8UmVjb3JkQmF0Y2g8VD4gfCBudWxsPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4ge1xuICAgIGNhbmNlbCgpOiB2b2lkO1xuICAgIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbik6IHRoaXM7XG4gICAgdGhyb3codmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+O1xuICAgIHJldHVybih2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT47XG4gICAgbmV4dCh2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PFJlY29yZEJhdGNoPFQ+PjtcbiAgICByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcik6IFJlY29yZEJhdGNoPFQ+IHwgbnVsbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG4gICAgY2FuY2VsKCk6IHZvaWQ7XG4gICAgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKTogdGhpcztcbiAgICB0aHJvdyh2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT47XG4gICAgcmV0dXJuKHZhbHVlPzogYW55KTogSXRlcmF0b3JSZXN1bHQ8YW55PjtcbiAgICBuZXh0KHZhbHVlPzogYW55KTogSXRlcmF0b3JSZXN1bHQ8UmVjb3JkQmF0Y2g8VD4+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IHtcbiAgICBjYW5jZWwoKTogUHJvbWlzZTx2b2lkPjtcbiAgICBvcGVuKGF1dG9DbG9zZT86IGJvb2xlYW4pOiBQcm9taXNlPHRoaXM+O1xuICAgIHRocm93KHZhbHVlPzogYW55KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxhbnk+PjtcbiAgICByZXR1cm4odmFsdWU/OiBhbnkpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+O1xuICAgIG5leHQodmFsdWU/OiBhbnkpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PFJlY29yZEJhdGNoPFQ+Pj47XG4gICAgcmVhZFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpOiBQcm9taXNlPFJlY29yZEJhdGNoPFQ+IHwgbnVsbD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG4gICAgY2FuY2VsKCk6IFByb21pc2U8dm9pZD47XG4gICAgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKTogUHJvbWlzZTx0aGlzPjtcbiAgICB0aHJvdyh2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8YW55Pj47XG4gICAgcmV0dXJuKHZhbHVlPzogYW55KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxhbnk+PjtcbiAgICBuZXh0KHZhbHVlPzogYW55KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4+O1xufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType, } from '../type';\nexport class VectorAssembler extends Visitor {\n    constructor() {\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */\n    static assemble(...args) {\n        const vectors = args.reduce(function flatten(xs, x) {\n            if (Array.isArray(x)) {\n                return x.reduce(flatten, xs);\n            }\n            if (!(x instanceof RecordBatch)) {\n                return [...xs, x];\n            }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i))];\n        }, []).filter((x) => x instanceof Vector);\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n    visit(vector) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullV) { return this; }\n    visitDictionary(vector) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n    get nodes() { return this._nodes; }\n    get buffers() { return this._buffers; }\n    get byteLength() { return this._byteLength; }\n    get bufferRegions() { return this._bufferRegions; }\n}\nfunction addBuffer(values) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\nfunction assembleUnion(vector) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    }\n    else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        }\n        else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\nfunction assembleBoolVector(vector) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n    // the values as bools and re-pack them into a Uint8Array (slow path)\n    return addBuffer.call(this, packBools(vector));\n}\nfunction assembleFlatVector(vector) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\nfunction assembleFlatListVector(vector) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\nfunction assembleListVector(vector) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0));\n}\nfunction assembleNestedVector(vector) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleNestedVector;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { MAGIC } from './message';\nimport { Schema } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ChunkedVector } from '../vector/chunked';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { isWritableDOMStream, isWritableNodeStream, isAsyncIterable } from '../util/compat';\nimport { ReadableInterop } from '../io/interfaces';\nconst kAlignmentBytes = new Uint8Array(64).fill(0);\nexport class RecordBatchWriter extends ReadableInterop {\n    constructor() {\n        super(...arguments);\n        this.position = 0;\n        this.started = false;\n        // @ts-ignore\n        this.sink = new AsyncByteQueue();\n        this.schema = null;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n    }\n    /** @nocollapse */\n    static throughNode() { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    static throughDOM() {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toUint8Array(sync = false) {\n        return this.sink.toUint8Array(sync);\n    }\n    get closed() { return this.sink.closed; }\n    [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }\n    toReadableDOMStream(options) { return this.sink.toReadableDOMStream(options); }\n    toReadableNodeStream(options) { return this.sink.toReadableNodeStream(options); }\n    close() { return this.reset().sink.close(); }\n    abort(reason) { return this.reset().sink.abort(reason); }\n    reset(sink = this.sink, schema) {\n        if ((sink === this.sink) || (sink instanceof AsyncByteQueue)) {\n            this.sink = sink;\n        }\n        else {\n            this.sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toReadableDOMStream().pipeTo(sink);\n            }\n            else if (sink && isWritableNodeStream(sink)) {\n                this.toReadableNodeStream().pipe(sink);\n            }\n        }\n        this.position = 0;\n        this.schema = null;\n        this.started = false;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n        if (schema instanceof Schema) {\n            this.started = true;\n            this.schema = schema;\n            this._writeSchema(schema);\n        }\n        return this;\n    }\n    write(chunk) {\n        if (!this.sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        if (!this.started && (this.started = true)) {\n            this._writeSchema(this.schema = chunk.schema);\n        }\n        if (chunk.schema !== this.schema) {\n            throw new Error('Schemas unequal');\n        }\n        this._writeRecordBatch(chunk);\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this.recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n        else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this.dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) {\n            this._write(buffer);\n        }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(buffer) {\n        if (buffer && buffer.byteLength > 0) {\n            this.sink.write(buffer);\n            this.position += buffer.byteLength;\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n    _writeFooter() {\n        const { schema, recordBatchBlocks, dictionaryBlocks } = this;\n        const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, recordBatchBlocks, dictionaryBlocks));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n    _writeMagic() {\n        return this._write(MAGIC);\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;\n    }\n    _writeRecordBatch(records) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n    _writeDictionaries(dictionaryFields) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof ChunkedVector)) {\n                this._writeDictionaryBatch(vector, id, false);\n            }\n            else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(batches) {\n        const writer = new RecordBatchFileWriter();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches)\n                writer.write(batch);\n            writer.close();\n            return writer;\n        }\n        return (() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            try {\n                for (var batches_1 = tslib_1.__asyncValues(batches), batches_1_1; batches_1_1 = yield batches_1.next(), !batches_1_1.done;) {\n                    const batch = batches_1_1.value;\n                    writer.write(batch);\n                }\n            }\n            catch (e_1_1) { e_1 = { error: e_1_1 }; }\n            finally {\n                try {\n                    if (batches_1_1 && !batches_1_1.done && (_a = batches_1.return)) yield _a.call(batches_1);\n                }\n                finally { if (e_1) throw e_1.error; }\n            }\n            writer.close();\n            return writer;\n        }))();\n    }\n    close() {\n        this._writeFooter();\n        return super.close();\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n}\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(batches) {\n        const writer = new RecordBatchStreamWriter();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches)\n                writer.write(batch);\n            writer.close();\n            return writer;\n        }\n        return (() => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            var e_2, _a;\n            try {\n                for (var batches_2 = tslib_1.__asyncValues(batches), batches_2_1; batches_2_1 = yield batches_2.next(), !batches_2_1.done;) {\n                    const batch = batches_2_1.value;\n                    writer.write(batch);\n                }\n            }\n            catch (e_2_1) { e_2 = { error: e_2_1 }; }\n            finally {\n                try {\n                    if (batches_2_1 && !batches_2_1.done && (_a = batches_2.return)) yield _a.call(batches_2);\n                }\n                finally { if (e_2) throw e_2.error; }\n            }\n            writer.close();\n            return writer;\n        }))();\n    }\n    close() {\n        this._writePadding(4);\n        return super.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ChunkedVector } from './vector/chunked';\nexport class Column extends ChunkedVector {\n    constructor(field, vectors = [], offsets) {\n        super(field.type, ChunkedVector.flatten(...vectors), offsets);\n        this._field = field;\n    }\n    get field() { return this._field; }\n    get name() { return this.field.name; }\n    slice(begin, end) {\n        return new Column(this.field, super.slice(begin, end).chunks);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let column, field, chunks;\n        if (column = columns[index]) {\n            return column;\n        }\n        if (field = (this.type.children || [])[index]) {\n            chunks = this.chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column(field, chunks));\n            }\n        }\n        return null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE1BQU0sT0FBTyxNQUFpQyxTQUFRLGFBQWdCO0lBRWxFLFlBQVksS0FBZSxFQUFFLFVBQXVCLEVBQUUsRUFBRSxPQUFxQjtRQUN6RSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUtELElBQVcsS0FBSyxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBVyxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFdEMsS0FBSyxDQUFDLEtBQWMsRUFBRSxHQUFZO1FBQ3JDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sVUFBVSxDQUEyQixLQUFhO1FBRXJELElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUU7UUFFNUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEQsSUFBSSxNQUFpQixFQUFFLEtBQWUsRUFBRSxNQUFtQixDQUFDO1FBRTVELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLE9BQU8sTUFBTSxDQUFDO1NBQUU7UUFDL0MsSUFBSSxLQUFLLEdBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQWMsRUFBRTtZQUN6RCxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU07aUJBQ2YsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFJLEtBQUssQ0FBQyxDQUFDO2lCQUM1QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQW9CLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7WUFDcEQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUMxRDtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwiZmlsZSI6ImNvbHVtbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IENodW5rZWRWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvci9jaHVua2VkJztcblxuZXhwb3J0IGNsYXNzIENvbHVtbjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQ2h1bmtlZFZlY3RvcjxUPiB7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQ8VD4sIHZlY3RvcnM6IFZlY3RvcjxUPltdID0gW10sIG9mZnNldHM/OiBVaW50MzJBcnJheSkge1xuICAgICAgICBzdXBlcihmaWVsZC50eXBlLCBDaHVua2VkVmVjdG9yLmZsYXR0ZW4oLi4udmVjdG9ycyksIG9mZnNldHMpO1xuICAgICAgICB0aGlzLl9maWVsZCA9IGZpZWxkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfY2hpbGRyZW4/OiBDb2x1bW5bXTtcbiAgICBwcm90ZWN0ZWQgX2ZpZWxkOiBGaWVsZDxUPjtcblxuICAgIHB1YmxpYyBnZXQgZmllbGQoKSB7IHJldHVybiB0aGlzLl9maWVsZDsgfVxuICAgIHB1YmxpYyBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuZmllbGQubmFtZTsgfVxuXG4gICAgcHVibGljIHNsaWNlKGJlZ2luPzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBDb2x1bW48VD4ge1xuICAgICAgICByZXR1cm4gbmV3IENvbHVtbih0aGlzLmZpZWxkLCBzdXBlci5zbGljZShiZWdpbiwgZW5kKS5jaHVua3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4oaW5kZXg6IG51bWJlcik6IENvbHVtbjxSPiB8IG51bGwge1xuXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5udW1DaGlsZHJlbikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGxldCBjb2x1bW5zID0gdGhpcy5fY2hpbGRyZW4gfHwgKHRoaXMuX2NoaWxkcmVuID0gW10pO1xuICAgICAgICBsZXQgY29sdW1uOiBDb2x1bW48Uj4sIGZpZWxkOiBGaWVsZDxSPiwgY2h1bmtzOiBWZWN0b3I8Uj5bXTtcblxuICAgICAgICBpZiAoY29sdW1uID0gY29sdW1uc1tpbmRleF0pIHsgcmV0dXJuIGNvbHVtbjsgfVxuICAgICAgICBpZiAoZmllbGQgPSAoKHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSlbaW5kZXhdIGFzIEZpZWxkPFI+KSkge1xuICAgICAgICAgICAgY2h1bmtzID0gdGhpcy5jaHVua3NcbiAgICAgICAgICAgICAgICAubWFwKCh2ZWN0b3IpID0+IHZlY3Rvci5nZXRDaGlsZEF0PFI+KGluZGV4KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh2ZWMpOiB2ZWMgaXMgVmVjdG9yPFI+ID0+IHZlYyAhPSBudWxsKTtcbiAgICAgICAgICAgIGlmIChjaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoY29sdW1uc1tpbmRleF0gPSBuZXcgQ29sdW1uPFI+KGZpZWxkLCBjaHVua3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Utf8 } from '../type';\nexport class BinaryVector extends BaseVector {\n    asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9iaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQVUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXZDLE1BQU0sT0FBTyxZQUFhLFNBQVEsVUFBa0I7SUFDekMsTUFBTTtRQUNULE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2JpbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBCaW5hcnksIFV0ZjggfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIEJpbmFyeVZlY3RvciBleHRlbmRzIEJhc2VWZWN0b3I8QmluYXJ5PiB7XG4gICAgcHVibGljIGFzVXRmOCgpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBVdGY4KCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\nexport class BoolVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        let length = 0, bitmap = packBools(function* () {\n            for (let x of data) {\n                length++;\n                yield x;\n            }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9ib29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFnQjtJQUM1QyxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXVCO1FBQ3RDLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUN4QyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFBRSxNQUFNLEVBQUUsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQzthQUFFO1FBQzlDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvYm9vbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCb29sIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBwYWNrQm9vbHMgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5cbmV4cG9ydCBjbGFzcyBCb29sVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxCb29sPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEl0ZXJhYmxlPGJvb2xlYW4+KSB7XG4gICAgICAgIGxldCBsZW5ndGggPSAwLCBiaXRtYXAgPSBwYWNrQm9vbHMoZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgeCBvZiBkYXRhKSB7IGxlbmd0aCsrOyB5aWVsZCB4OyB9XG4gICAgICAgIH0oKSk7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuQm9vbChuZXcgQm9vbCgpLCAwLCBsZW5ndGgsIDAsIG51bGwsIGJpdG1hcCkpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { DateDay, DateMillisecond } from '../type';\nexport class DateVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n    /** @nocollapse */\n    static from(data, unit = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\nexport class DateDayVector extends DateVector {\n}\nexport class DateMillisecondVector extends DateVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBUyxPQUFPLEVBQUUsZUFBZSxFQUFHLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxVQUFvQyxTQUFRLFVBQWE7SUFlbEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFoQkQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBb0MsSUFBWSxFQUFFLE9BQWtCLFFBQVEsQ0FBQyxXQUFXO1FBQ3RHLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDaEY7WUFDRCxLQUFLLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDeEY7U0FDSjtRQUNELE1BQU0sSUFBSSxTQUFTLENBQUMsMkJBQTJCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUlKO0FBQ0QsTUFBTSxPQUFPLGFBQWMsU0FBUSxVQUFtQjtDQUFHO0FBQ3pELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUEyQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9kYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRlVW5pdCB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBJbnRVdGlsIGZyb20gJy4uL3V0aWwvaW50JztcbmltcG9ydCB7IERhdGVfLCBEYXRlRGF5LCBEYXRlTWlsbGlzZWNvbmQgIH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVmVjdG9yPFQgZXh0ZW5kcyBEYXRlXyA9IERhdGVfPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgRGF0ZV8gPSBEYXRlTWlsbGlzZWNvbmQ+KGRhdGE6IERhdGVbXSwgdW5pdDogVFsndW5pdCddID0gRGF0ZVVuaXQuTUlMTElTRUNPTkQpIHtcbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0LkRBWToge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IEludDMyQXJyYXkuZnJvbShkYXRhLm1hcCgoZCkgPT4gZC52YWx1ZU9mKCkgLyA4NjQwMDAwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuRGF0ZShuZXcgRGF0ZURheSgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgdmFsdWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0Lk1JTExJU0VDT05EOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gSW50VXRpbC5JbnQ2NC5jb252ZXJ0QXJyYXkoZGF0YS5tYXAoKGQpID0+IGQudmFsdWVPZigpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5EYXRlKG5ldyBEYXRlTWlsbGlzZWNvbmQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIHZhbHVlcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCBkYXRlIHVuaXQgXCIke0RhdGVVbml0W3VuaXRdfVwiYCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCBkYXRhLnR5cGUudW5pdCArIDEpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEYXRlRGF5VmVjdG9yIGV4dGVuZHMgRGF0ZVZlY3RvcjxEYXRlRGF5PiB7fVxuZXhwb3J0IGNsYXNzIERhdGVNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIERhdGVWZWN0b3I8RGF0ZU1pbGxpc2Vjb25kPiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class DecimalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 4);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kZWNpbWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBbUI7SUFDbEQsWUFBWSxJQUFtQjtRQUMzQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2RlY2ltYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgRGVjaW1hbCB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBEZWNpbWFsVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxEZWNpbWFsPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEZWNpbWFsPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIDQpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Dictionary } from '../type';\nexport class DictionaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    /** @nocollapse */\n    static from(values, indices, keys) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    get indices() { return this._indices; }\n    get dictionary() { return this.type.dictionaryVector; }\n    getKey(index) { return this.indices.get(index); }\n    getValue(key) { return this.dictionary.get(key); }\n    isValid(index) { return this.indices.isValid(index); }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxPQUFPLEVBQVksVUFBVSxFQUFTLE1BQU0sU0FBUyxDQUFDO0FBRXRELE1BQU0sT0FBTyxnQkFBdUUsU0FBUSxVQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFaRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUNkLE1BQWlCLEVBQUUsT0FBYSxFQUNoQyxJQUF3QztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQU1ELElBQVcsT0FBTyxLQUFLLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUM7SUFDOUMsSUFBVyxVQUFVLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsS0FBYSxJQUEyQixPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNoRixRQUFRLENBQUMsR0FBVyxJQUF3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxPQUFPLENBQUMsS0FBYSxJQUFJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELGFBQWEsQ0FBQyxLQUFRLElBQUksT0FBTyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDNUUiLCJmaWxlIjoidmVjdG9yL2RpY3Rpb25hcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFYgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IERhdGFUeXBlLCBEaWN0aW9uYXJ5LCBUS2V5cyB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeVZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnksIFRLZXkgZXh0ZW5kcyBUS2V5cyA9IFRLZXlzPiBleHRlbmRzIEJhc2VWZWN0b3I8RGljdGlvbmFyeTxULCBUS2V5Pj4ge1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgRGF0YVR5cGU8YW55PiwgVEtleSBleHRlbmRzIFRLZXlzID0gVEtleXM+KFxuICAgICAgICB2YWx1ZXM6IFZlY3RvcjxUPiwgaW5kaWNlczogVEtleSxcbiAgICAgICAga2V5czogQXJyYXlMaWtlPG51bWJlcj4gfCBUS2V5WydUQXJyYXknXVxuICAgICkge1xuICAgICAgICBjb25zdCB0eXBlID0gbmV3IERpY3Rpb25hcnkodmFsdWVzLnR5cGUsIGluZGljZXMsIG51bGwsIG51bGwsIHZhbHVlcyk7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuRGljdGlvbmFyeSh0eXBlLCAwLCBrZXlzLmxlbmd0aCwgMCwgbnVsbCwga2V5cykpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2luZGljZXM6IFY8VEtleT47XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEaWN0aW9uYXJ5PFQsIFRLZXk+Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIDEpO1xuICAgICAgICB0aGlzLl9pbmRpY2VzID0gVmVjdG9yLm5ldyhkYXRhLmNsb25lKHRoaXMudHlwZS5pbmRpY2VzKSk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgaW5kaWNlcygpIHsgcmV0dXJuIHRoaXMuX2luZGljZXM7IH1cbiAgICBwdWJsaWMgZ2V0IGRpY3Rpb25hcnkoKSB7IHJldHVybiB0aGlzLnR5cGUuZGljdGlvbmFyeVZlY3RvcjsgfVxuICAgIHB1YmxpYyBnZXRLZXkoaW5kZXg6IG51bWJlcik6IFRLZXlbJ1RWYWx1ZSddIHwgbnVsbCB7IHJldHVybiB0aGlzLmluZGljZXMuZ2V0KGluZGV4KTsgfVxuICAgIHB1YmxpYyBnZXRWYWx1ZShrZXk6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuZ2V0KGtleSk7IH1cbiAgICBwdWJsaWMgaXNWYWxpZChpbmRleDogbnVtYmVyKSB7IHJldHVybiB0aGlzLmluZGljZXMuaXNWYWxpZChpbmRleCk7IH1cbiAgICBwdWJsaWMgcmV2ZXJzZUxvb2t1cCh2YWx1ZTogVCkgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmluZGV4T2YodmFsdWUpOyB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeBinaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemViaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQTJCO0lBQ2xFLFlBQVksSUFBMkI7UUFDbkMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvZml4ZWRzaXplYmluYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgRml4ZWRTaXplQmluYXJ5IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBGaXhlZFNpemVCaW5hcnlWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPEZpeGVkU2l6ZUJpbmFyeT4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Rml4ZWRTaXplQmluYXJ5Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5ieXRlV2lkdGgpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeListVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemVsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxtQkFBOEMsU0FBUSxVQUE0QjtJQUMzRixZQUFZLElBQTRCO1FBQ3BDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2ZpeGVkc2l6ZWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRml4ZWRTaXplTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxGaXhlZFNpemVMaXN0PFQ+PiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxGaXhlZFNpemVMaXN0PFQ+Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5saXN0U2l6ZSk7XG4gICAgfVxufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float16, Float32, Float64 } from '../type';\nexport class FloatVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\nexport class Float16Vector extends FloatVector {\n}\nexport class Float32Vector extends FloatVector {\n}\nexport class Float64Vector extends FloatVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9mbG9hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxXQUFxQyxTQUFRLFVBQWE7SUFDbkUsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBa0IsSUFBaUI7UUFDakQsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEtBQUssV0FBVyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUYsS0FBSyxZQUFZLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvRixLQUFLLFlBQVksQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxhQUFjLFNBQVEsV0FBb0I7Q0FBRztBQUMxRCxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQW9CO0NBQUc7QUFDMUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxXQUFvQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9mbG9hdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBGbG9hdCwgRmxvYXQxNiwgRmxvYXQzMiwgRmxvYXQ2NCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRmxvYXRWZWN0b3I8VCBleHRlbmRzIEZsb2F0ID0gRmxvYXQ+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBGbG9hdD4oZGF0YTogVFsnVEFycmF5J10pIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFVpbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkZsb2F0KG5ldyBGbG9hdDE2KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIEZsb2F0MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5GbG9hdChuZXcgRmxvYXQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBGbG9hdDY0QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuRmxvYXQobmV3IEZsb2F0NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlY29nbml6ZWQgRmxvYXQgZGF0YScpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb2F0MTZWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDE2PiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0MzJWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDMyPiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0NjRWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDY0PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class IntervalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class IntervalDayTimeVector extends IntervalVector {\n}\nexport class IntervalYearMonthVector extends IntervalVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9pbnRlcnZhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFHckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sY0FBOEMsU0FBUSxVQUFhO0lBQzVFLFlBQVksSUFBYTtRQUNyQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsY0FBK0I7Q0FBRztBQUM3RSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsY0FBaUM7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50ZXJ2YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBJbnRlcnZhbCwgSW50ZXJ2YWxEYXlUaW1lLCBJbnRlcnZhbFllYXJNb250aCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxWZWN0b3I8VCBleHRlbmRzIEludGVydmFsID0gSW50ZXJ2YWw+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIGRhdGEudHlwZS51bml0ICsgMSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxEYXlUaW1lVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxEYXlUaW1lPiB7fVxuZXhwb3J0IGNsYXNzIEludGVydmFsWWVhck1vbnRoVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxZZWFyTW9udGg+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nexport class IntVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n    /** @nocollapse */\n    static from(data, is64) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n}\nexport class Int8Vector extends IntVector {\n}\nexport class Int16Vector extends IntVector {\n}\nexport class Int32Vector extends IntVector {\n}\nexport class Int64Vector extends IntVector {\n}\nexport class Uint8Vector extends IntVector {\n}\nexport class Uint16Vector extends IntVector {\n}\nexport class Uint32Vector extends IntVector {\n}\nexport class Uint64Vector extends IntVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzRixLQUFLLFdBQVcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzlGO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FJSjtBQUVELE1BQU0sT0FBTyxVQUFXLFNBQVEsU0FBZTtDQUFHO0FBQ2xELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFDcEQsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFnQjtDQUFHO0FBQ3BELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFDdEQsTUFBTSxPQUFPLFlBQWEsU0FBUSxTQUFpQjtDQUFHO0FBQ3RELE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBaUI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJbnQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBJbnRWZWN0b3I8VCBleHRlbmRzIEludCA9IEludD4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIEludD4oZGF0YTogVFsnVEFycmF5J10pOiBWPFQ+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgSW50MzIgfCBVaW50MzI+KGRhdGE6IFRbJ1RBcnJheSddLCBpczY0OiB0cnVlKTogVjxUPjtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogYW55LCBpczY0PzogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXM2NCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBJbnQ2NCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpXG4gICAgICAgICAgICAgICAgOiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGRhdGEuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgSW50OEFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBJbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50MTYoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgSW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IEludDMyKCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQ4QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MTZBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQxNigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBJbnQgZGF0YScpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFQ+KSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHVuZGVmaW5lZCwgZGF0YS50eXBlLmJpdFdpZHRoIDw9IDMyID8gMSA6IDIpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludDhWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8SW50OD4ge31cbmV4cG9ydCBjbGFzcyBJbnQxNlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQxNj4ge31cbmV4cG9ydCBjbGFzcyBJbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQzMj4ge31cbmV4cG9ydCBjbGFzcyBJbnQ2NFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQ2ND4ge31cbmV4cG9ydCBjbGFzcyBVaW50OFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50OD4ge31cbmV4cG9ydCBjbGFzcyBVaW50MTZWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8VWludDE2PiB7fVxuZXhwb3J0IGNsYXNzIFVpbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50MzI+IHt9XG5leHBvcnQgY2xhc3MgVWludDY0VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPFVpbnQ2ND4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class ListVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFxQyxTQUFRLFVBQW1CO0NBQUciLCJmaWxlIjoidmVjdG9yL2xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxMaXN0PFQ+PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Struct } from '../type';\nexport class MapVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], true);\n    }\n    asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpELE1BQU0sT0FBTyxTQUF1RCxTQUFRLFVBQW1CO0lBQS9GOztRQUNXLGFBQVEsR0FBVyxHQUFHLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUl6RSxDQUFDO0lBSFUsUUFBUTtRQUNYLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL21hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuL3Jvdyc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTWFwXywgU3RydWN0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBNYXBWZWN0b3I8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBCYXNlVmVjdG9yPE1hcF88VD4+IHtcbiAgICBwdWJsaWMgcm93UHJveHk6IFJvdzxUPiA9IFJvdy5uZXc8VD4odGhpcy50eXBlLmNoaWxkcmVuIHx8IFtdLCB0cnVlKTtcbiAgICBwdWJsaWMgYXNTdHJ1Y3QoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KHRoaXMuZGF0YS5jbG9uZShuZXcgU3RydWN0KHRoaXMudHlwZS5jaGlsZHJlbikpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class NullVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9udWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxVQUFXLFNBQVEsVUFBZ0I7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvbnVsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBOdWxsIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNsYXNzIE51bGxWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPE51bGw+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimestampVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector {\n}\nexport class TimestampMillisecondVector extends TimestampVector {\n}\nexport class TimestampMicrosecondVector extends TimestampVector {\n}\nexport class TimestampNanosecondVector extends TimestampVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lc3RhbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLGVBQWlELFNBQVEsVUFBYTtJQUMvRSxZQUFZLElBQWE7UUFDckIsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBQ0QsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWdDO0NBQUc7QUFDOUUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGVBQW9DO0NBQUciLCJmaWxlIjoidmVjdG9yL3RpbWVzdGFtcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcFZlY3RvcjxUIGV4dGVuZHMgVGltZXN0YW1wID0gVGltZXN0YW1wPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCAyKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZXN0YW1wU2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcFNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWNyb3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBOYW5vc2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcE5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimeVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.bitWidth <= 32 ? 1 : 2);\n    }\n}\nexport class TimeSecondVector extends TimeVector {\n}\nexport class TimeMillisecondVector extends TimeVector {\n}\nexport class TimeMicrosecondVector extends TimeVector {\n}\nexport class TimeNanosecondVector extends TimeVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFrQyxTQUFRLFVBQWE7SUFDaEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RCxDQUFDO0NBQ0o7QUFDRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBc0I7Q0FBRztBQUMvRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBMEI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvdGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWUsIFRpbWVTZWNvbmQsIFRpbWVNaWxsaXNlY29uZCwgVGltZU1pY3Jvc2Vjb25kLCBUaW1lTmFub3NlY29uZCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgVGltZVZlY3RvcjxUIGV4dGVuZHMgVGltZSA9IFRpbWU+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIGRhdGEudHlwZS5iaXRXaWR0aCA8PSAzMiA/IDEgOiAyKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZVNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZVNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWlsbGlzZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWljcm9zZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTmFub3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZU5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class UnionVector extends BaseVector {\n    get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\nexport class DenseUnionVector extends UnionVector {\n    get valueOffsets() { return this.data.valueOffsets; }\n}\nexport class SparseUnionVector extends UnionVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91bmlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sV0FBcUMsU0FBUSxVQUFhO0lBQ25FLElBQVcsa0JBQWtCLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztDQUMzRTtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUF1QjtJQUN6RCxJQUFXLFlBQVksS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBYSxDQUFDLENBQUMsQ0FBQztDQUNoRTtBQUVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUF3QjtDQUFHIiwiZmlsZSI6InZlY3Rvci91bmlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFVuaW9uLCBEZW5zZVVuaW9uLCBTcGFyc2VVbmlvbn0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBVbmlvblZlY3RvcjxUIGV4dGVuZHMgVW5pb24gPSBVbmlvbj4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgZ2V0IHR5cGVJZFRvQ2hpbGRJbmRleCgpIHsgcmV0dXJuIHRoaXMudHlwZS50eXBlSWRUb0NoaWxkSW5kZXg7IH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxEZW5zZVVuaW9uPiB7XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzLmRhdGEudmFsdWVPZmZzZXRzITsgfVxufVxuXG5leHBvcnQgY2xhc3MgU3BhcnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxTcGFyc2VVbmlvbj4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport const encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new TextEncoder('utf-8'));\nexport class SetVisitor extends Visitor {\n}\nconst setEpochMsToSeconds = (data, index, epochMs) => { data[index] = (epochMs / 1000) | 0; };\nconst setEpochMsToDays = (data, index, epochMs) => { data[index] = (epochMs / 86400000) | 0; };\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs / 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000) / 4294967296) | 0;\n};\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs / 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000000) / 4294967296) | 0;\n};\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\nconst setBool = ({ offset, values }, index, val) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n};\nconst setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };\nconst setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\nconst setNumeric = ({ stride, values }, index, value) => { values[stride * index] = value; };\nconst setFloat16 = ({ stride, values }, index, value) => { values[stride * index] = (value * 32767) + 32767; };\nconst setNumericX2 = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\nconst setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\nconst setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\nconst setUtf8 = ({ values, valueOffsets }, index, value) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\nconst setInt = (vector, index, value) => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector, index, value)\n        : setNumericX2(vector, index, value);\n};\nconst setFloat = (vector, index, value) => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector, index, value)\n        : setFloat16(vector, index, value);\n};\nconst getDate = (vector, index, value) => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\nconst setTimestampSecond = ({ values }, index, value) => setEpochMsToSeconds(values, index * 2, value);\nconst setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\nconst setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\nconst setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\nconst setTimestamp = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);\n    }\n};\nconst setTimeSecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\nconst setTimeMillisecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\nconst setTimeMicrosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTimeNanosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTime = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);\n    }\n};\nconst setDecimal = ({ values }, index, value) => { values.set(value.subarray(0, 4), 4 * index); };\nconst setList = (vector, index, value) => {\n    const values = vector.getChildAt(0);\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\nconst setNested = (vector, index, value) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\nconst setUnion = (vector, index, value) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector, index, value) :\n        setSparseUnion(vector, index, value);\n};\nconst setDenseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\nconst setSparseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\nconst setDictionary = (vector, index, value) => {\n    return vector.dictionary.set(vector.indices.get(index), value);\n};\nconst setIntervalValue = (vector, index, value) => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\nconst setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };\nconst setFixedSizeList = (vector, index, value) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(++idx));\n    }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = getDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setNested;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setNested;\nexport const instance = new SetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../visitor/set';\nexport class Utf8Vector extends BaseVector {\n    /** @nocollapse */\n    static from(values) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => ((!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91dGY4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFnQjtJQUM1QyxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWdCO1FBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQ2pELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxPQUFPLENBQ3ZFLEVBQUUsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFDTSxRQUFRO1FBQ1gsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvdXRmOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBCaW5hcnksIFV0ZjggfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB7IGVuY29kZVV0ZjggfSBmcm9tICcuLi92aXNpdG9yL3NldCc7XG5cbmV4cG9ydCBjbGFzcyBVdGY4VmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxVdGY4PiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZhbHVlczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVuY29kZVV0ZjgodmFsdWVzLmpvaW4oJycpKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHZhbHVlcy5yZWR1Y2UoKG9mZnNldHMsIHN0ciwgaWR4KSA9PiAoXG4gICAgICAgICAgICAoIShvZmZzZXRzW2lkeCArIDFdID0gb2Zmc2V0c1tpZHhdICsgc3RyLmxlbmd0aCkgfHwgdHJ1ZSkgJiYgb2Zmc2V0c1xuICAgICAgICApLCBuZXcgVWludDMyQXJyYXkodmFsdWVzLmxlbmd0aCArIDEpKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5VdGY4KG5ldyBVdGY4KCksIDAsIGxlbmd0aCwgMCwgbnVsbCwgb2Zmc2V0cywgZGF0YSkpO1xuICAgIH1cbiAgICBwdWJsaWMgYXNCaW5hcnkoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KHRoaXMuZGF0YS5jbG9uZShuZXcgQmluYXJ5KCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License,  Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, \n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND,  either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { ChunkedVector } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELHFEQUFxRDtBQUNyRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDhEQUE4RDtBQUM5RCw4REFBOEQ7QUFDOUQsMERBQTBEO0FBQzFELDZEQUE2RDtBQUM3RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1RixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUksT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLDBCQUEwQixFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hKLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDMUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDIiwiZmlsZSI6InZlY3Rvci9hbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCAgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmV4cG9ydCB7IFJvdyB9IGZyb20gJy4vcm93JztcbmV4cG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5leHBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmV4cG9ydCB7IEJpbmFyeVZlY3RvciB9IGZyb20gJy4vYmluYXJ5JztcbmV4cG9ydCB7IEJvb2xWZWN0b3IgfSBmcm9tICcuL2Jvb2wnO1xuZXhwb3J0IHsgQ2h1bmtlZFZlY3RvciB9IGZyb20gJy4vY2h1bmtlZCc7XG5leHBvcnQgeyBEYXRlVmVjdG9yLCBEYXRlRGF5VmVjdG9yLCBEYXRlTWlsbGlzZWNvbmRWZWN0b3IgfSBmcm9tICcuL2RhdGUnO1xuZXhwb3J0IHsgRGVjaW1hbFZlY3RvciB9IGZyb20gJy4vZGVjaW1hbCc7XG5leHBvcnQgeyBEaWN0aW9uYXJ5VmVjdG9yIH0gZnJvbSAnLi9kaWN0aW9uYXJ5JztcbmV4cG9ydCB7IEZpeGVkU2l6ZUJpbmFyeVZlY3RvciB9IGZyb20gJy4vZml4ZWRzaXplYmluYXJ5JztcbmV4cG9ydCB7IEZpeGVkU2l6ZUxpc3RWZWN0b3IgfSBmcm9tICcuL2ZpeGVkc2l6ZWxpc3QnO1xuZXhwb3J0IHsgRmxvYXRWZWN0b3IsIEZsb2F0MTZWZWN0b3IsIEZsb2F0MzJWZWN0b3IsIEZsb2F0NjRWZWN0b3IgfSBmcm9tICcuL2Zsb2F0JztcbmV4cG9ydCB7IEludGVydmFsVmVjdG9yLCBJbnRlcnZhbERheVRpbWVWZWN0b3IsIEludGVydmFsWWVhck1vbnRoVmVjdG9yIH0gZnJvbSAnLi9pbnRlcnZhbCc7XG5leHBvcnQgeyBJbnRWZWN0b3IsIEludDhWZWN0b3IsIEludDE2VmVjdG9yLCBJbnQzMlZlY3RvciwgSW50NjRWZWN0b3IsIFVpbnQ4VmVjdG9yLCBVaW50MTZWZWN0b3IsIFVpbnQzMlZlY3RvciwgVWludDY0VmVjdG9yIH0gZnJvbSAnLi9pbnQnO1xuZXhwb3J0IHsgTGlzdFZlY3RvciB9IGZyb20gJy4vbGlzdCc7XG5leHBvcnQgeyBNYXBWZWN0b3IgfSBmcm9tICcuL21hcCc7XG5leHBvcnQgeyBOdWxsVmVjdG9yIH0gZnJvbSAnLi9udWxsJztcbmV4cG9ydCB7IFN0cnVjdFZlY3RvciB9IGZyb20gJy4vc3RydWN0JztcbmV4cG9ydCB7IFRpbWVzdGFtcFZlY3RvciwgVGltZXN0YW1wU2Vjb25kVmVjdG9yLCBUaW1lc3RhbXBNaWxsaXNlY29uZFZlY3RvciwgVGltZXN0YW1wTWljcm9zZWNvbmRWZWN0b3IsIFRpbWVzdGFtcE5hbm9zZWNvbmRWZWN0b3IgfSBmcm9tICcuL3RpbWVzdGFtcCc7XG5leHBvcnQgeyBUaW1lVmVjdG9yLCBUaW1lU2Vjb25kVmVjdG9yLCBUaW1lTWlsbGlzZWNvbmRWZWN0b3IsIFRpbWVNaWNyb3NlY29uZFZlY3RvciwgVGltZU5hbm9zZWNvbmRWZWN0b3IgfSBmcm9tICcuL3RpbWUnO1xuZXhwb3J0IHsgVW5pb25WZWN0b3IsIERlbnNlVW5pb25WZWN0b3IsIFNwYXJzZVVuaW9uVmVjdG9yIH0gZnJvbSAnLi91bmlvbic7XG5leHBvcnQgeyBVdGY4VmVjdG9yIH0gZnJvbSAnLi91dGY4JztcbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TextDecoder } from 'text-encoding-utf-8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport const decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new TextDecoder('utf-8'));\nexport class GetVisitor extends Visitor {\n}\nconst epochSecondsToMs = (data, index) => 1000 * data[index];\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\nconst epochMillisecondsToDate = (epochMs) => new Date(epochMs);\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\nconst getNull = (_vector, _index) => null;\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null;\n};\nconst getBool = ({ offset, values }, index) => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\nconst getDateDay = ({ values }, index) => epochDaysToDate(values, index);\nconst getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);\nconst getNumeric = ({ stride, values }, index) => values[stride * index];\nconst getFloat16 = ({ stride, values }, index) => (values[stride * index] - 32767) / 32767;\nconst getNumericX2 = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\nconst getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\nconst getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);\nconst getUtf8 = ({ values, valueOffsets }, index) => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null;\n};\nconst getInt = (vector, index) => (vector.type.bitWidth < 64\n    ? getNumeric(vector, index)\n    : getNumericX2(vector, index));\nconst getFloat = (vector, index) => (vector.type.precision !== Precision.HALF\n    ? getNumeric(vector, index)\n    : getFloat16(vector, index));\nconst getDate = (vector, index) => (vector.type.unit === DateUnit.DAY\n    ? getDateDay(vector, index)\n    : getDateMillisecond(vector, index));\nconst getTimestampSecond = ({ values }, index) => epochSecondsToMs(values, index * 2);\nconst getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);\nconst getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);\nconst getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);\nconst getTimestamp = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(vector, index);\n    }\n};\nconst getTimeSecond = ({ values, stride }, index) => values[stride * index];\nconst getTimeMillisecond = ({ values, stride }, index) => values[stride * index];\nconst getTimeMicrosecond = ({ values }, index) => values.subarray(2 * index, 2 * index + 1);\nconst getTimeNanosecond = ({ values }, index) => values.subarray(2 * index, 2 * index + 1);\nconst getTime = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(vector, index);\n    }\n};\nconst getDecimal = ({ values }, index) => values.subarray(4 * index, 4 * (index + 1));\nconst getList = (vector, index) => {\n    const child = vector.getChildAt(0), { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]);\n};\nconst getNested = (vector, index) => {\n    return vector.rowProxy.bind(vector, index);\n};\nconst getUnion = (vector, index) => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector, index) :\n        getSparseUnion(vector, index);\n};\nconst getDenseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\nconst getSparseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\nconst getDictionary = (vector, index) => {\n    return vector.dictionary.get(vector.indices.get(index));\n};\nconst getInterval = (vector, index) => (vector.type.unit === IntervalUnit.DAY_TIME)\n    ? getIntervalDayTime(vector, index)\n    : getIntervalYearMonth(vector, index);\nconst getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * index + 1);\nconst getIntervalYearMonth = ({ values }, index) => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\nconst getFixedSizeList = (vector, index) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getNumericX2;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getNumericX2;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getNested;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getNested;\nexport const instance = new GetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { getBool, iterateBits } from '../util/bit';\nexport class IndexOfVisitor extends Visitor {\n}\nfunction nullIndexOf(vector, searchElement, fromIndex = -1) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? fromIndex : -1;\n}\nfunction indexOfNull(vector, fromIndex) {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\nfunction valueIndexOf(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (vector.get(i) === searchElement) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction dateIndexOf(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const valueOfDate = searchElement.valueOf();\n    for (let d, i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if ((d = vector.get(i)) && d.valueOf() === valueOfDate) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction dictionaryIndexOf(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const { dictionary, indices } = vector;\n    // First find the dictionary key for the desired value...\n    const key = dictionary.indexOf(searchElement);\n    // ... then find the first occurence of that key in indices\n    return key === -1 ? -1 : indices.indexOf(key, fromIndex);\n}\nfunction arrayIndexOf(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\nfunction listIndexOf(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const getSearchElement = (Array.isArray(searchElement) || ArrayBuffer.isView(searchElement))\n        ? (i) => searchElement[i]\n        : (i) => searchElement.get(i);\n    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x.get(j) !== getSearchElement(j)) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\nfunction indexOfNested(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    searching: for (let x = null, j = 0, i = (fromIndex || 0) - 1, n = vector.length, k = searchElement.length; ++i < n;) {\n        if ((x = vector.get(i)) && (j = x.length) === k) {\n            while (--j > -1) {\n                if (x[j] !== searchElement[j]) {\n                    continue searching;\n                }\n            }\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = valueIndexOf;\nIndexOfVisitor.prototype.visitInt = valueIndexOf;\nIndexOfVisitor.prototype.visitInt8 = valueIndexOf;\nIndexOfVisitor.prototype.visitInt16 = valueIndexOf;\nIndexOfVisitor.prototype.visitInt32 = valueIndexOf;\nIndexOfVisitor.prototype.visitInt64 = arrayIndexOf;\nIndexOfVisitor.prototype.visitUint8 = valueIndexOf;\nIndexOfVisitor.prototype.visitUint16 = valueIndexOf;\nIndexOfVisitor.prototype.visitUint32 = valueIndexOf;\nIndexOfVisitor.prototype.visitUint64 = arrayIndexOf;\nIndexOfVisitor.prototype.visitFloat = valueIndexOf;\nIndexOfVisitor.prototype.visitFloat16 = valueIndexOf;\nIndexOfVisitor.prototype.visitFloat32 = valueIndexOf;\nIndexOfVisitor.prototype.visitFloat64 = valueIndexOf;\nIndexOfVisitor.prototype.visitUtf8 = valueIndexOf;\nIndexOfVisitor.prototype.visitBinary = arrayIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeBinary = arrayIndexOf;\nIndexOfVisitor.prototype.visitDate = dateIndexOf;\nIndexOfVisitor.prototype.visitDateDay = dateIndexOf;\nIndexOfVisitor.prototype.visitDateMillisecond = dateIndexOf;\nIndexOfVisitor.prototype.visitTimestamp = valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampSecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMillisecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimestampNanosecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTime = valueIndexOf;\nIndexOfVisitor.prototype.visitTimeSecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMillisecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimeMicrosecond = valueIndexOf;\nIndexOfVisitor.prototype.visitTimeNanosecond = valueIndexOf;\nIndexOfVisitor.prototype.visitDecimal = arrayIndexOf;\nIndexOfVisitor.prototype.visitList = listIndexOf;\nIndexOfVisitor.prototype.visitStruct = indexOfNested;\nIndexOfVisitor.prototype.visitUnion = valueIndexOf;\nIndexOfVisitor.prototype.visitDenseUnion = valueIndexOf;\nIndexOfVisitor.prototype.visitSparseUnion = valueIndexOf;\nIndexOfVisitor.prototype.visitDictionary = dictionaryIndexOf;\nIndexOfVisitor.prototype.visitInterval = valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalDayTime = valueIndexOf;\nIndexOfVisitor.prototype.visitIntervalYearMonth = valueIndexOf;\nIndexOfVisitor.prototype.visitFixedSizeList = listIndexOf;\nIndexOfVisitor.prototype.visitMap = indexOfNested;\nexport const instance = new IndexOfVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nexport class IteratorVisitor extends Visitor {\n}\nfunction nullableIterator(vector) {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, (vec, idx, nullByte, nullBit) => ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null);\n}\nfunction vectorIterator(vector) {\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator(vector);\n    }\n    const { type, length } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && ((type.TType === Type.Timestamp) ||\n        (type.TType === Type.Int && type.bitWidth !== 64) ||\n        (type.TType === Type.Time && type.bitWidth !== 64) ||\n        (type.TType === Type.Float && type.precision > 0 /* Precision.HALF */))) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\nexport const instance = new IteratorVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nexport class ToArrayVisitor extends Visitor {\n}\nfunction arrayOfVector(vector) {\n    const { type, length, stride } = vector;\n    // Fast case, return subarray if possible\n    switch (type.TType) {\n        case Type.Int:\n        case Type.Decimal:\n        case Type.Time:\n        case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return type.precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)];\n}\nToArrayVisitor.prototype.visitNull = arrayOfVector;\nToArrayVisitor.prototype.visitBool = arrayOfVector;\nToArrayVisitor.prototype.visitInt = arrayOfVector;\nToArrayVisitor.prototype.visitInt8 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16 = arrayOfVector;\nToArrayVisitor.prototype.visitInt32 = arrayOfVector;\nToArrayVisitor.prototype.visitInt64 = arrayOfVector;\nToArrayVisitor.prototype.visitUint8 = arrayOfVector;\nToArrayVisitor.prototype.visitUint16 = arrayOfVector;\nToArrayVisitor.prototype.visitUint32 = arrayOfVector;\nToArrayVisitor.prototype.visitUint64 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64 = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;\nToArrayVisitor.prototype.visitDate = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTime = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal = arrayOfVector;\nToArrayVisitor.prototype.visitList = arrayOfVector;\nToArrayVisitor.prototype.visitStruct = arrayOfVector;\nToArrayVisitor.prototype.visitUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary = arrayOfVector;\nToArrayVisitor.prototype.visitInterval = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;\nToArrayVisitor.prototype.visitMap = arrayOfVector;\nexport const instance = new ToArrayVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TimeUnit } from '../enum';\nconst sum = (x, y) => x + y;\nconst variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;\nexport class ByteWidthVisitor extends Visitor {\n    visitNull(____) { return 0; }\n    visitInt(type) { return type.bitWidth / 8; }\n    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitBool(____) { return 1 / 8; }\n    visitDecimal(____) { return 16; }\n    visitDate(type) { return (type.unit + 1) * 4; }\n    visitTime(type) { return type.bitWidth / 8; }\n    visitTimestamp(type) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    visitInterval(type) { return (type.unit + 1) * 4; }\n    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitFixedSizeBinary(type) { return type.byteWidth; }\n    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitDictionary(type) { return this.visit(type.indices); }\n    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }\n    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\nexport const instance = new ByteWidthVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport * as vecs from '../vector/all';\nexport class GetVectorConstructor extends Visitor {\n    visitNull() { return vecs.NullVector; }\n    visitBool() { return vecs.BoolVector; }\n    visitInt() { return vecs.IntVector; }\n    visitInt8() { return vecs.Int8Vector; }\n    visitInt16() { return vecs.Int16Vector; }\n    visitInt32() { return vecs.Int32Vector; }\n    visitInt64() { return vecs.Int64Vector; }\n    visitUint8() { return vecs.Uint8Vector; }\n    visitUint16() { return vecs.Uint16Vector; }\n    visitUint32() { return vecs.Uint32Vector; }\n    visitUint64() { return vecs.Uint64Vector; }\n    visitFloat() { return vecs.FloatVector; }\n    visitFloat16() { return vecs.Float16Vector; }\n    visitFloat32() { return vecs.Float32Vector; }\n    visitFloat64() { return vecs.Float64Vector; }\n    visitUtf8() { return vecs.Utf8Vector; }\n    visitBinary() { return vecs.BinaryVector; }\n    visitFixedSizeBinary() { return vecs.FixedSizeBinaryVector; }\n    visitDate() { return vecs.DateVector; }\n    visitDateDay() { return vecs.DateDayVector; }\n    visitDateMillisecond() { return vecs.DateMillisecondVector; }\n    visitTimestamp() { return vecs.TimestampVector; }\n    visitTimestampSecond() { return vecs.TimestampSecondVector; }\n    visitTimestampMillisecond() { return vecs.TimestampMillisecondVector; }\n    visitTimestampMicrosecond() { return vecs.TimestampMicrosecondVector; }\n    visitTimestampNanosecond() { return vecs.TimestampNanosecondVector; }\n    visitTime() { return vecs.TimeVector; }\n    visitTimeSecond() { return vecs.TimeSecondVector; }\n    visitTimeMillisecond() { return vecs.TimeMillisecondVector; }\n    visitTimeMicrosecond() { return vecs.TimeMicrosecondVector; }\n    visitTimeNanosecond() { return vecs.TimeNanosecondVector; }\n    visitDecimal() { return vecs.DecimalVector; }\n    visitList() { return vecs.ListVector; }\n    visitStruct() { return vecs.StructVector; }\n    visitUnion() { return vecs.UnionVector; }\n    visitDenseUnion() { return vecs.DenseUnionVector; }\n    visitSparseUnion() { return vecs.SparseUnionVector; }\n    visitDictionary() { return vecs.DictionaryVector; }\n    visitInterval() { return vecs.IntervalVector; }\n    visitIntervalDayTime() { return vecs.IntervalDayTimeVector; }\n    visitIntervalYearMonth() { return vecs.IntervalYearMonthVector; }\n    visitFixedSizeList() { return vecs.FixedSizeListVector; }\n    visitMap() { return vecs.MapVector; }\n}\nexport const instance = new GetVectorConstructor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Row } from './all';\nexport { Vector } from './all';\nexport { BaseVector } from './all';\nexport { BinaryVector } from './all';\nexport { BoolVector } from './all';\nexport { ChunkedVector } from './all';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './all';\nexport { DecimalVector } from './all';\nexport { DictionaryVector } from './all';\nexport { FixedSizeBinaryVector } from './all';\nexport { FixedSizeListVector } from './all';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './all';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './all';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './all';\nexport { ListVector } from './all';\nexport { MapVector } from './all';\nexport { NullVector } from './all';\nexport { StructVector } from './all';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './all';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './all';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './all';\nexport { Utf8Vector } from './all';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\nVector.new = newVector;\nfunction newVector(data, ...args) {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nBaseVector.prototype.get = function baseVectorGet(index) {\n    return getVisitor.visit(this, index);\n};\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n    return setVisitor.visit(this, index, value);\n};\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\nBaseVector.prototype.toArray = function baseVectorToArray() {\n    return toArrayVisitor.visit(this);\n};\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n    return byteWidthVisitor.visit(this.type);\n};\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n    return iteratorVisitor.visit(this);\n};\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(Type)\n    .filter((TType) => TType !== Type.NONE && TType !== Type[Type.NONE])\n    .map((T) => Type[T]).filter((T) => typeof T === 'number')\n    .forEach((TType) => {\n    let typeIds;\n    switch (TType) {\n        case Type['Int']:\n            typeIds = [Type['Int8'], Type['Int16'], Type['Int32'], Type['Int64'], Type['Uint8'], Type['Uint16'], Type['Uint32'], Type['Uint64']];\n            break;\n        case Type['Float']:\n            typeIds = [Type['Float16'], Type['Float32'], Type['Float64']];\n            break;\n        case Type['Date']:\n            typeIds = [Type['DateDay'], Type['DateMillisecond']];\n            break;\n        case Type['Time']:\n            typeIds = [Type['TimeSecond'], Type['TimeMillisecond'], Type['TimeMicrosecond'], Type['TimeNanosecond']];\n            break;\n        case Type['Timestamp']:\n            typeIds = [Type['TimestampSecond'], Type['TimestampMillisecond'], Type['TimestampMicrosecond'], Type['TimestampNanosecond']];\n            break;\n        case Type['Interval']:\n            typeIds = [Type['IntervalDayTime'], Type['IntervalYearMonth']];\n            break;\n        case Type['Union']:\n            typeIds = [Type['DenseUnion'], Type['SparseUnion']];\n            break;\n        default:\n            typeIds = [TType];\n            break;\n    }\n    typeIds.forEach((TType) => {\n        const VectorCtor = getVectorConstructor.visit(TType);\n        VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(TType));\n        VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(TType));\n        VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(TType));\n        VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(TType));\n        VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(TType));\n        VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(TType));\n    });\n});\nfunction partial0(visit) {\n    return function () { return visit(this); };\n}\nfunction partial1(visit) {\n    return function (a) { return visit(this, a); };\n}\nfunction partial2(visit) {\n    return function (a, b) { return visit(this, a, b); };\n}\nfunction wrapNullableSet(fn) {\n    return function (i, a) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n// @ts-ignore\nfunction bindBaseVectorDataAccessors(data) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, this);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, this);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, this);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, this);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, this);\n    if (this.nullCount > 0) {\n        this['set'] = wrapNullableSet(this['set']);\n    }\n    Vector.prototype.bindDataAccessors.call(this, data);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { ChunkedVector } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport class Table {\n    constructor(...args) {\n        // List of inner Vectors, possibly spanning batches\n        this._columns = [];\n        let schema = null;\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n        let batches = args.reduce(function flatten(xs, x) {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof RecordBatch);\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n        this._schema = schema;\n        this._batches = batches;\n        this._batchesUnion = batches.length == 0\n            ? new RecordBatch(schema, 0, [])\n            : batches.length === 1 ? batches[0]\n                : ChunkedVector.concat(...batches);\n        this._length = this.batchesUnion.length;\n        this._numCols = this.schema.fields.length;\n    }\n    /** @nocollapse */\n    static empty() { return new Table(new Schema([]), []); }\n    /** @nocollapse */\n    static from(source) {\n        if (!source) {\n            return Table.empty();\n        }\n        let reader = RecordBatchReader.from(source);\n        if (isPromise(reader)) {\n            return (() => tslib_1.__awaiter(this, void 0, void 0, function* () { return yield Table.from(yield reader); }))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);\n        }\n        return ((opening) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            const reader = yield opening;\n            const schema = reader.schema;\n            const batches = [];\n            if (schema) {\n                try {\n                    for (var reader_1 = tslib_1.__asyncValues(reader), reader_1_1; reader_1_1 = yield reader_1.next(), !reader_1_1.done;) {\n                        let batch = reader_1_1.value;\n                        batches.push(batch);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (reader_1_1 && !reader_1_1.done && (_a = reader_1.return)) yield _a.call(reader_1);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                return new Table(schema, batches);\n            }\n            return Table.empty();\n        }))(reader.open());\n    }\n    /** @nocollapse */\n    static fromAsync(source) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            return yield Table.from(source);\n        });\n    }\n    /** @nocollapse */\n    static fromVectors(vectors, names) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n    /** @nocollapse */\n    static fromStruct(struct) {\n        const schema = new Schema(struct.type.children);\n        const chunks = (struct instanceof ChunkedVector ? struct.chunks : [struct]);\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n    get schema() { return this._schema; }\n    get length() { return this._length; }\n    get numCols() { return this._numCols; }\n    get batches() { return this._batches; }\n    get batchesUnion() { return this._batchesUnion; }\n    get(index) {\n        return this.batchesUnion.get(index);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnAt(index) {\n        if (index < 0 || index >= this.numCols) {\n            return null;\n        }\n        if (this.batches.length === 1) {\n            return this.batches[0].getChildAt(index);\n        }\n        return new Column(this.schema.fields[index], this.batches.map((b) => b.getChildAt(index)));\n    }\n    getColumnIndex(name) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]();\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this.batches).toUint8Array(true);\n    }\n    count() {\n        return this.length;\n    }\n    select(...columnNames) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\nexport class Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\nexport class Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\nexport class Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n}\nexport class Predicate {\n    and(...expr) { return new And(this, ...expr); }\n    or(...expr) { return new Or(this, ...expr); }\n    not() { return new Not(this); }\n}\nexport class ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\nexport class CombinationPredicate extends Predicate {\n    constructor(...children) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\nexport class And extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ands\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.every((p) => p(idx, batch));\n    }\n}\nexport class Or extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ors\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.some((p) => p(idx, batch));\n    }\n}\nexport class Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\nexport class LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\nexport class GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\nexport class Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\nexport class CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexport function lit(v) { return new Literal(v); }\nexport function col(n) { return new Col(n); }\nexport function and(...p) { return new And(...p); }\nexport function or(...p) { return new Or(...p); }\nexport function custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbXB1dGUvcHJlZGljYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxzQkFBc0IsQ0FBQztBQUt4RCxNQUFNLE9BQWdCLEtBQUs7SUFDdkIsRUFBRSxDQUFDLEtBQW1CO1FBQ2xCLElBQUksQ0FBQyxDQUFDLEtBQUssWUFBWSxLQUFLLENBQUMsRUFBRTtZQUFFLEtBQUssR0FBRyxJQUFJLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztTQUFFO1FBQzlELE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxFQUFFLENBQUMsS0FBbUI7UUFDbEIsSUFBSSxDQUFDLENBQUMsS0FBSyxZQUFZLEtBQUssQ0FBQyxFQUFFO1lBQUUsS0FBSyxHQUFHLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQUU7UUFDOUQsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7SUFDakMsQ0FBQztJQUNELEVBQUUsQ0FBQyxLQUFtQjtRQUNsQixJQUFJLENBQUMsQ0FBQyxLQUFLLFlBQVksS0FBSyxDQUFDLEVBQUU7WUFBRSxLQUFLLEdBQUcsSUFBSSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7U0FBRTtRQUM5RCxPQUFPLElBQUksSUFBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNqQyxDQUFDO0lBQ0QsRUFBRSxDQUFDLEtBQW1CO1FBQ2xCLE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ25DLENBQUM7SUFDRCxFQUFFLENBQUMsS0FBbUI7UUFDbEIsT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDbkMsQ0FBQztJQUNELEVBQUUsQ0FBQyxLQUFtQjtRQUNsQixPQUFPLElBQUksR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNuQyxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sT0FBZ0IsU0FBUSxLQUFRO0lBQ3pDLFlBQW1CLENBQUk7UUFBSSxLQUFLLEVBQUUsQ0FBQztRQUFoQixNQUFDLEdBQUQsQ0FBQyxDQUFHO0lBQWEsQ0FBQztDQUN4QztBQUVELE1BQU0sT0FBTyxHQUFZLFNBQVEsS0FBUTtJQU1yQyxZQUFtQixJQUFZO1FBQUksS0FBSyxFQUFFLENBQUM7UUFBeEIsU0FBSSxHQUFKLElBQUksQ0FBUTtJQUFhLENBQUM7SUFDN0MsSUFBSSxDQUFDLEtBQWtCO1FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFO1lBQ2QsMkRBQTJEO1lBQzNELHFFQUFxRTtZQUNyRSxJQUFJLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1lBQ2pCLE1BQU0sTUFBTSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1lBQ25DLEtBQUssSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFDLEVBQUUsRUFBRSxHQUFHLEdBQUcsTUFBTSxDQUFDLE1BQU0sR0FBRztnQkFDdkMsSUFBSSxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUU7b0JBQ2hDLElBQUksQ0FBQyxNQUFNLEdBQUcsR0FBRyxDQUFDO29CQUNsQixNQUFNO2lCQUNUO2FBQ0o7WUFDRCxJQUFJLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxFQUFFO2dCQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsdUJBQXVCLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDO2FBQUU7U0FDakY7UUFDRCxJQUFJLENBQUMsTUFBTSxHQUFHLEtBQUssQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDO1FBQzdDLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUM3QyxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQWdCLFNBQVM7SUFFM0IsR0FBRyxDQUFDLEdBQUcsSUFBaUIsSUFBUyxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksRUFBRSxHQUFHLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNqRSxFQUFFLENBQUMsR0FBRyxJQUFpQixJQUFRLE9BQU8sSUFBSSxFQUFFLENBQUMsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlELEdBQUcsS0FBZ0IsT0FBTyxJQUFJLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDN0M7QUFFRCxNQUFNLE9BQWdCLG1CQUE0QixTQUFRLFNBQVM7SUFDL0QsWUFBNEIsSUFBYyxFQUFrQixLQUFlO1FBQ3ZFLEtBQUssRUFBRSxDQUFDO1FBRGdCLFNBQUksR0FBSixJQUFJLENBQVU7UUFBa0IsVUFBSyxHQUFMLEtBQUssQ0FBVTtJQUUzRSxDQUFDO0lBRUQsSUFBSSxDQUFDLEtBQWtCO1FBQ25CLElBQUksSUFBSSxDQUFDLElBQUksWUFBWSxPQUFPLEVBQUU7WUFDOUIsSUFBSSxJQUFJLENBQUMsS0FBSyxZQUFZLE9BQU8sRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUN6RDtpQkFBTSxFQUFFLGlCQUFpQjtnQkFFdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxLQUFZLENBQUMsQ0FBQzthQUNoRTtTQUNKO2FBQU0sRUFBRSxnQkFBZ0I7WUFDckIsSUFBSSxJQUFJLENBQUMsS0FBSyxZQUFZLE9BQU8sRUFBRTtnQkFDL0IsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBVyxFQUFFLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQzthQUNoRTtpQkFBTSxFQUFFLGlCQUFpQjtnQkFDdEIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxJQUFJLENBQUMsSUFBVyxFQUFFLElBQUksQ0FBQyxLQUFZLENBQUMsQ0FBQzthQUN2RTtTQUNKO0lBQ0wsQ0FBQztDQU1KO0FBRUQsTUFBTSxPQUFnQixvQkFBcUIsU0FBUSxTQUFTO0lBRXhELFlBQVksR0FBRyxRQUFxQjtRQUNoQyxLQUFLLEVBQUUsQ0FBQztRQUNSLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzdCLENBQUM7Q0FDSjtBQUNELG1FQUFtRTtBQUM1RCxvQkFBb0IsQ0FBQyxTQUFVLENBQUMsUUFBUSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxvQkFBb0I7QUFFekYsTUFBTSxPQUFPLEdBQUksU0FBUSxvQkFBb0I7SUFDekMsWUFBWSxHQUFHLFFBQXFCO1FBQ2hDLG1CQUFtQjtRQUNuQixRQUFRLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEtBQWtCLEVBQUUsQ0FBWSxFQUFlLEVBQUU7WUFDekUsT0FBTyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsWUFBWSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzFELENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQTtRQUNOLEtBQUssQ0FBQyxHQUFHLFFBQVEsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7SUFDRCxJQUFJLENBQUMsS0FBa0I7UUFDbkIsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN0RCxPQUFPLENBQUMsR0FBVyxFQUFFLEtBQWtCLEVBQUUsRUFBRSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUNsRixDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sRUFBRyxTQUFRLG9CQUFvQjtJQUN4QyxZQUFZLEdBQUcsUUFBcUI7UUFDaEMsa0JBQWtCO1FBQ2xCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUMsS0FBa0IsRUFBRSxDQUFZLEVBQWUsRUFBRTtZQUN6RSxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDekQsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO1FBQ04sS0FBSyxDQUFDLEdBQUcsUUFBUSxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUNELElBQUksQ0FBQyxLQUFrQjtRQUNuQixNQUFNLEtBQUssR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3RELE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBa0IsRUFBRSxFQUFFLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxNQUFPLFNBQVEsbUJBQW1CO0lBS2pDLFdBQVcsQ0FBQyxNQUFtQixFQUFFLElBQWEsRUFBRSxLQUFjO1FBQ3BFLE1BQU0sSUFBSSxHQUFZLElBQUksQ0FBQyxDQUFDLElBQUksS0FBSyxDQUFDLENBQUMsQ0FBQztRQUN4QyxPQUFPLEdBQUcsRUFBRSxDQUFDLElBQUksQ0FBQztJQUN0QixDQUFDO0lBRVMsV0FBVyxDQUFDLEtBQWtCLEVBQUUsSUFBUyxFQUFFLEtBQVU7UUFDM0QsTUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNuQyxNQUFNLFVBQVUsR0FBRyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sQ0FBQyxHQUFXLEVBQUUsS0FBa0IsRUFBRSxFQUFFLENBQUMsU0FBUyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsSUFBSSxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBQ2hHLENBQUM7SUFFUyxXQUFXLENBQUMsS0FBa0IsRUFBRSxHQUFRLEVBQUUsR0FBWTtRQUM1RCxNQUFNLFFBQVEsR0FBRyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2pDLElBQUksR0FBRyxDQUFDLE1BQU0sWUFBWSxnQkFBZ0IsRUFBRTtZQUN4QyxJQUFJLEdBQVEsQ0FBQztZQUNiLE1BQU0sTUFBTSxHQUFHLEdBQUcsQ0FBQyxNQUEwQixDQUFDO1lBQzlDLElBQUksTUFBTSxDQUFDLFVBQVUsS0FBSyxJQUFJLENBQUMsY0FBYyxFQUFFO2dCQUMzQyxHQUFHLEdBQUcsTUFBTSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ2xDLElBQUksQ0FBQyxjQUFjLEdBQUcsTUFBTSxDQUFDLFVBQVUsQ0FBQztnQkFDeEMsSUFBSSxDQUFDLE9BQU8sR0FBRyxHQUFHLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0gsR0FBRyxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUM7YUFDdEI7WUFFRCxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDWiw0REFBNEQ7Z0JBQzVELFFBQVE7Z0JBQ1IsNkRBQTZEO2dCQUM3RCwrREFBK0Q7Z0JBQy9ELDBCQUEwQjtnQkFDMUIsT0FBTyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0gsT0FBTyxDQUFDLEdBQVcsRUFBRSxFQUFFO29CQUNuQixPQUFPLE1BQU0sQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssR0FBRyxDQUFDO2dCQUN0QyxDQUFDLENBQUM7YUFDTDtTQUNKO2FBQU07WUFDSCxPQUFPLENBQUMsR0FBVyxFQUFFLElBQWlCLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztTQUMzRTtJQUNMLENBQUM7SUFFUyxXQUFXLENBQUMsS0FBa0IsRUFBRSxHQUFZLEVBQUUsR0FBUTtRQUM1RCx1QkFBdUI7UUFDdkIsT0FBTyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUM7SUFDN0MsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLElBQUssU0FBUSxtQkFBbUI7SUFDL0IsV0FBVyxDQUFDLE1BQW1CLEVBQUUsSUFBYSxFQUFFLEtBQWM7UUFDcEUsTUFBTSxJQUFJLEdBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFUyxXQUFXLENBQUMsS0FBa0IsRUFBRSxJQUFTLEVBQUUsS0FBVTtRQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFrQixFQUFFLEdBQVEsRUFBRSxHQUFZO1FBQzVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFrQixFQUFFLEdBQVksRUFBRSxHQUFRO1FBQzVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUUsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLElBQUssU0FBUSxtQkFBbUI7SUFDL0IsV0FBVyxDQUFDLE1BQW1CLEVBQUUsSUFBYSxFQUFFLEtBQWM7UUFDcEUsTUFBTSxJQUFJLEdBQVksSUFBSSxDQUFDLENBQUMsSUFBSSxLQUFLLENBQUMsQ0FBQyxDQUFDO1FBQ3hDLE9BQU8sR0FBRyxFQUFFLENBQUMsSUFBSSxDQUFDO0lBQ3RCLENBQUM7SUFFUyxXQUFXLENBQUMsS0FBa0IsRUFBRSxJQUFTLEVBQUUsS0FBVTtRQUMzRCxNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ25DLE1BQU0sVUFBVSxHQUFHLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDckMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxTQUFTLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLFVBQVUsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDN0YsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFrQixFQUFFLEdBQVEsRUFBRSxHQUFZO1FBQzVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxRQUFRLENBQUMsR0FBRyxFQUFFLElBQUksQ0FBQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQUVTLFdBQVcsQ0FBQyxLQUFrQixFQUFFLEdBQVksRUFBRSxHQUFRO1FBQzVELE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUM7UUFDakMsT0FBTyxDQUFDLEdBQVcsRUFBRSxJQUFpQixFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxJQUFJLFFBQVEsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7SUFDNUUsQ0FBQztDQUNKO0FBRUQsTUFBTSxPQUFPLEdBQUksU0FBUSxTQUFTO0lBQzlCLFlBQTRCLEtBQWdCO1FBQ3hDLEtBQUssRUFBRSxDQUFDO1FBRGdCLFVBQUssR0FBTCxLQUFLLENBQVc7SUFFNUMsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFrQjtRQUNuQixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUNwQyxPQUFPLENBQUMsR0FBVyxFQUFFLEtBQWtCLEVBQUUsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNsRSxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8sZUFBZ0IsU0FBUSxTQUFTO0lBQzFDLFlBQW9CLElBQW1CLEVBQVUsS0FBbUM7UUFDaEYsS0FBSyxFQUFFLENBQUM7UUFEUSxTQUFJLEdBQUosSUFBSSxDQUFlO1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBOEI7SUFFcEYsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFrQjtRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQU0sSUFBZ0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFTLElBQWMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLENBQWMsSUFBUyxPQUFPLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFjLElBQVEsT0FBTyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRSxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQW1CLEVBQUUsSUFBa0M7SUFDMUUsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsImZpbGUiOiJjb21wdXRlL3ByZWRpY2F0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5VmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yL2RpY3Rpb25hcnknO1xuXG5leHBvcnQgdHlwZSBWYWx1ZUZ1bmM8VD4gPSAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBUIHwgbnVsbDtcbmV4cG9ydCB0eXBlIFByZWRpY2F0ZUZ1bmMgPSAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBib29sZWFuO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWU8VD4ge1xuICAgIGVxKG90aGVyOiBWYWx1ZTxUPiB8IFQpOiBQcmVkaWNhdGUge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFZhbHVlKSkgeyBvdGhlciA9IG5ldyBMaXRlcmFsKG90aGVyKTsgfVxuICAgICAgICByZXR1cm4gbmV3IEVxdWFscyh0aGlzLCBvdGhlcik7XG4gICAgfVxuICAgIGxlKG90aGVyOiBWYWx1ZTxUPiB8IFQpOiBQcmVkaWNhdGUge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFZhbHVlKSkgeyBvdGhlciA9IG5ldyBMaXRlcmFsKG90aGVyKTsgfVxuICAgICAgICByZXR1cm4gbmV3IExUZXEodGhpcywgb3RoZXIpO1xuICAgIH1cbiAgICBnZShvdGhlcjogVmFsdWU8VD4gfCBUKTogUHJlZGljYXRlIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBWYWx1ZSkpIHsgb3RoZXIgPSBuZXcgTGl0ZXJhbChvdGhlcik7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBHVGVxKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgbHQob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMuZ2Uob3RoZXIpKTtcbiAgICB9XG4gICAgZ3Qob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMubGUob3RoZXIpKTtcbiAgICB9XG4gICAgbmUob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMuZXEob3RoZXIpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMaXRlcmFsPFQ9IGFueT4gZXh0ZW5kcyBWYWx1ZTxUPiB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHY6IFQpIHsgc3VwZXIoKTsgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sPFQ9IGFueT4gZXh0ZW5kcyBWYWx1ZTxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1YmxpYyB2ZWN0b3I6IFZlY3RvcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGNvbGlkeDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZykgeyBzdXBlcigpOyB9XG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpOiAoaWR4OiBudW1iZXIsIGJhdGNoPzogUmVjb3JkQmF0Y2gpID0+IGFueSB7XG4gICAgICAgIGlmICghdGhpcy5jb2xpZHgpIHtcbiAgICAgICAgICAgIC8vIEFzc3VtZSBjb2x1bW4gaW5kZXggZG9lc24ndCBjaGFuZ2UgYmV0d2VlbiBjYWxscyB0byBiaW5kXG4gICAgICAgICAgICAvL3RoaXMuY29saWR4ID0gY29scy5maW5kSW5kZXgodiA9PiB2Lm5hbWUuaW5kZXhPZih0aGlzLm5hbWUpICE9IC0xKTtcbiAgICAgICAgICAgIHRoaXMuY29saWR4ID0gLTE7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBiYXRjaC5zY2hlbWEuZmllbGRzO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gLTE7ICsraWR4IDwgZmllbGRzLmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2lkeF0ubmFtZSA9PT0gdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29saWR4ID0gaWR4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xpZHggPCAwKSB7IHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGJpbmQgQ29sIFwiJHt0aGlzLm5hbWV9XCJgKTsgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmVjdG9yID0gYmF0Y2guZ2V0Q2hpbGRBdCh0aGlzLmNvbGlkeCkhO1xuICAgICAgICByZXR1cm4gdGhpcy52ZWN0b3IuZ2V0LmJpbmQodGhpcy52ZWN0b3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByZWRpY2F0ZSB7XG4gICAgYWJzdHJhY3QgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpOiBQcmVkaWNhdGVGdW5jO1xuICAgIGFuZCguLi5leHByOiBQcmVkaWNhdGVbXSk6IEFuZCB7IHJldHVybiBuZXcgQW5kKHRoaXMsIC4uLmV4cHIpOyB9XG4gICAgb3IoLi4uZXhwcjogUHJlZGljYXRlW10pOiBPciB7IHJldHVybiBuZXcgT3IodGhpcywgLi4uZXhwcik7IH1cbiAgICBub3QoKTogUHJlZGljYXRlIHsgcmV0dXJuIG5ldyBOb3QodGhpcyk7IH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBhcmlzb25QcmVkaWNhdGU8VD0gYW55PiBleHRlbmRzIFByZWRpY2F0ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGxlZnQ6IFZhbHVlPFQ+LCBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IFZhbHVlPFQ+KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5kTGl0TGl0KGJhdGNoLCB0aGlzLmxlZnQsIHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcmlnaHQgaXMgYSBDb2xcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5kTGl0Q29sKGJhdGNoLCB0aGlzLmxlZnQsIHRoaXMucmlnaHQgYXMgQ29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBpcyBhIENvbFxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHQgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRDb2xMaXQoYmF0Y2gsIHRoaXMubGVmdCBhcyBDb2wsIHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcmlnaHQgaXMgYSBDb2xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZENvbENvbChiYXRjaCwgdGhpcy5sZWZ0IGFzIENvbCwgdGhpcy5yaWdodCBhcyBDb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kTGl0TGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgbGVmdDogTGl0ZXJhbCwgcmlnaHQ6IExpdGVyYWwpOiBQcmVkaWNhdGVGdW5jO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfYmluZENvbENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IENvbCwgcmlnaHQ6IENvbCk6IFByZWRpY2F0ZUZ1bmM7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kQ29sTGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgY29sOiBDb2wsIGxpdDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmM7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kTGl0Q29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGl0OiBMaXRlcmFsLCBjb2w6IENvbCk6IFByZWRpY2F0ZUZ1bmM7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21iaW5hdGlvblByZWRpY2F0ZSBleHRlbmRzIFByZWRpY2F0ZSB7XG4gICAgcmVhZG9ubHkgY2hpbGRyZW46IFByZWRpY2F0ZVtdXG4gICAgY29uc3RydWN0b3IoLi4uY2hpbGRyZW46IFByZWRpY2F0ZVtdKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB9XG59XG4vLyBhZGQgY2hpbGRyZW4gdG8gcHJvdG95cGUgc28gaXQgZG9lc24ndCBnZXQgbWFuZ2xlZCBpbiBlczIwMTUvdW1kXG4oPGFueT4gQ29tYmluYXRpb25QcmVkaWNhdGUucHJvdG90eXBlKS5jaGlsZHJlbiA9IE9iamVjdC5mcmVlemUoW10pOyAvLyBmcmVlemUgZm9yIHNhZmV0eVxuXG5leHBvcnQgY2xhc3MgQW5kIGV4dGVuZHMgQ29tYmluYXRpb25QcmVkaWNhdGUge1xuICAgIGNvbnN0cnVjdG9yKC4uLmNoaWxkcmVuOiBQcmVkaWNhdGVbXSkge1xuICAgICAgICAvLyBGbGF0dGVuIGFueSBBbmRzXG4gICAgICAgIGNoaWxkcmVuID0gY2hpbGRyZW4ucmVkdWNlKChhY2N1bTogUHJlZGljYXRlW10sIHA6IFByZWRpY2F0ZSk6IFByZWRpY2F0ZVtdID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bS5jb25jYXQocCBpbnN0YW5jZW9mIEFuZCA/IHAuY2hpbGRyZW4gOiBwKVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgc3VwZXIoLi4uY2hpbGRyZW4pO1xuICAgIH1cbiAgICBiaW5kKGJhdGNoOiBSZWNvcmRCYXRjaCkge1xuICAgICAgICBjb25zdCBib3VuZCA9IHRoaXMuY2hpbGRyZW4ubWFwKChwKSA9PiBwLmJpbmQoYmF0Y2gpKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgYmF0Y2g6IFJlY29yZEJhdGNoKSA9PiBib3VuZC5ldmVyeSgocCkgPT4gcChpZHgsIGJhdGNoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3IgZXh0ZW5kcyBDb21iaW5hdGlvblByZWRpY2F0ZSB7XG4gICAgY29uc3RydWN0b3IoLi4uY2hpbGRyZW46IFByZWRpY2F0ZVtdKSB7XG4gICAgICAgIC8vIEZsYXR0ZW4gYW55IE9yc1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLnJlZHVjZSgoYWNjdW06IFByZWRpY2F0ZVtdLCBwOiBQcmVkaWNhdGUpOiBQcmVkaWNhdGVbXSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW0uY29uY2F0KHAgaW5zdGFuY2VvZiBPciA/IHAuY2hpbGRyZW4gOiBwKVxuICAgICAgICB9LCBbXSlcbiAgICAgICAgc3VwZXIoLi4uY2hpbGRyZW4pO1xuICAgIH1cbiAgICBiaW5kKGJhdGNoOiBSZWNvcmRCYXRjaCkge1xuICAgICAgICBjb25zdCBib3VuZCA9IHRoaXMuY2hpbGRyZW4ubWFwKChwKSA9PiBwLmJpbmQoYmF0Y2gpKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgYmF0Y2g6IFJlY29yZEJhdGNoKSA9PiBib3VuZC5zb21lKChwKSA9PiBwKGlkeCwgYmF0Y2gpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBFcXVhbHMgZXh0ZW5kcyBDb21wYXJpc29uUHJlZGljYXRlIHtcbiAgICAvLyBIZWxwZXJzIHVzZWQgdG8gY2FjaGUgZGljdGlvbmFyeSByZXZlcnNlIGxvb2t1cHMgYmV0d2VlbiBjYWxscyB0byBiaW5kXG4gICAgcHJpdmF0ZSBsYXN0RGljdGlvbmFyeTogVmVjdG9yfHVuZGVmaW5lZDtcbiAgICBwcml2YXRlIGxhc3RLZXk6IG51bWJlcnx1bmRlZmluZWQ7XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRMaXRMaXQoX2JhdGNoOiBSZWNvcmRCYXRjaCwgbGVmdDogTGl0ZXJhbCwgcmlnaHQ6IExpdGVyYWwpOiBQcmVkaWNhdGVGdW5jIHtcbiAgICAgICAgY29uc3QgcnRybjogYm9vbGVhbiA9IGxlZnQudiA9PSByaWdodC52O1xuICAgICAgICByZXR1cm4gKCkgPT4gcnRybjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRDb2xDb2woYmF0Y2g6IFJlY29yZEJhdGNoLCBsZWZ0OiBDb2wsIHJpZ2h0OiBDb2wpOiBQcmVkaWNhdGVGdW5jIHtcbiAgICAgICAgY29uc3QgbGVmdF9mdW5jID0gbGVmdC5iaW5kKGJhdGNoKTtcbiAgICAgICAgY29uc3QgcmlnaHRfZnVuYyA9IHJpZ2h0LmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBiYXRjaDogUmVjb3JkQmF0Y2gpID0+IGxlZnRfZnVuYyhpZHgsIGJhdGNoKSA9PSByaWdodF9mdW5jKGlkeCwgYmF0Y2gpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYmluZENvbExpdChiYXRjaDogUmVjb3JkQmF0Y2gsIGNvbDogQ29sLCBsaXQ6IExpdGVyYWwpOiBQcmVkaWNhdGVGdW5jIHtcbiAgICAgICAgY29uc3QgY29sX2Z1bmMgPSBjb2wuYmluZChiYXRjaCk7XG4gICAgICAgIGlmIChjb2wudmVjdG9yIGluc3RhbmNlb2YgRGljdGlvbmFyeVZlY3Rvcikge1xuICAgICAgICAgICAgbGV0IGtleTogYW55O1xuICAgICAgICAgICAgY29uc3QgdmVjdG9yID0gY29sLnZlY3RvciBhcyBEaWN0aW9uYXJ5VmVjdG9yO1xuICAgICAgICAgICAgaWYgKHZlY3Rvci5kaWN0aW9uYXJ5ICE9PSB0aGlzLmxhc3REaWN0aW9uYXJ5KSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdmVjdG9yLnJldmVyc2VMb29rdXAobGl0LnYpO1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdERpY3Rpb25hcnkgPSB2ZWN0b3IuZGljdGlvbmFyeTtcbiAgICAgICAgICAgICAgICB0aGlzLmxhc3RLZXkgPSBrZXk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGtleSA9IHRoaXMubGFzdEtleTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGtleSA9PT0gLTEpIHtcbiAgICAgICAgICAgICAgICAvLyB0aGUgdmFsdWUgZG9lc24ndCBleGlzdCBpbiB0aGUgZGljdGlvbmFyeSAtIGFsd2F5cyByZXR1cm5cbiAgICAgICAgICAgICAgICAvLyBmYWxzZVxuICAgICAgICAgICAgICAgIC8vIFRPRE86IHNwZWNpYWwtY2FzZSBvZiBQcmVkaWNhdGVGdW5jIHRoYXQgZW5jYXBzdWxhdGVzIHRoaXNcbiAgICAgICAgICAgICAgICAvLyBcImFsd2F5cyBmYWxzZVwiIGJlaGF2aW9yLiBUaGF0IHdheSBmaWx0ZXJpbmcgb3BlcmF0aW9ucyBkb24ndFxuICAgICAgICAgICAgICAgIC8vIGhhdmUgdG8gYm90aGVyIGNoZWNraW5nXG4gICAgICAgICAgICAgICAgcmV0dXJuICgpID0+IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB2ZWN0b3IuZ2V0S2V5KGlkeCkgPT09IGtleTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGNvbF9mdW5jKGlkeCwgY29scykgPT0gbGl0LnY7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRMaXRDb2woYmF0Y2g6IFJlY29yZEJhdGNoLCBsaXQ6IExpdGVyYWwsIGNvbDogQ29sKSB7XG4gICAgICAgIC8vIEVxdWFscyBpcyBjb211dGF0aXZlXG4gICAgICAgIHJldHVybiB0aGlzLl9iaW5kQ29sTGl0KGJhdGNoLCBjb2wsIGxpdCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTFRlcSBleHRlbmRzIENvbXBhcmlzb25QcmVkaWNhdGUge1xuICAgIHByb3RlY3RlZCBfYmluZExpdExpdChfYmF0Y2g6IFJlY29yZEJhdGNoLCBsZWZ0OiBMaXRlcmFsLCByaWdodDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBydHJuOiBib29sZWFuID0gbGVmdC52IDw9IHJpZ2h0LnY7XG4gICAgICAgIHJldHVybiAoKSA9PiBydHJuO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYmluZENvbENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IENvbCwgcmlnaHQ6IENvbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBsZWZ0X2Z1bmMgPSBsZWZ0LmJpbmQoYmF0Y2gpO1xuICAgICAgICBjb25zdCByaWdodF9mdW5jID0gcmlnaHQuYmluZChiYXRjaCk7XG4gICAgICAgIHJldHVybiAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBsZWZ0X2Z1bmMoaWR4LCBjb2xzKSA8PSByaWdodF9mdW5jKGlkeCwgY29scyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kQ29sTGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgY29sOiBDb2wsIGxpdDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBjb2xfZnVuYyA9IGNvbC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGNvbF9mdW5jKGlkeCwgY29scykgPD0gbGl0LnY7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kTGl0Q29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGl0OiBMaXRlcmFsLCBjb2w6IENvbCkge1xuICAgICAgICBjb25zdCBjb2xfZnVuYyA9IGNvbC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGxpdC52IDw9IGNvbF9mdW5jKGlkeCwgY29scyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgR1RlcSBleHRlbmRzIENvbXBhcmlzb25QcmVkaWNhdGUge1xuICAgIHByb3RlY3RlZCBfYmluZExpdExpdChfYmF0Y2g6IFJlY29yZEJhdGNoLCBsZWZ0OiBMaXRlcmFsLCByaWdodDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBydHJuOiBib29sZWFuID0gbGVmdC52ID49IHJpZ2h0LnY7XG4gICAgICAgIHJldHVybiAoKSA9PiBydHJuO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYmluZENvbENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IENvbCwgcmlnaHQ6IENvbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBsZWZ0X2Z1bmMgPSBsZWZ0LmJpbmQoYmF0Y2gpO1xuICAgICAgICBjb25zdCByaWdodF9mdW5jID0gcmlnaHQuYmluZChiYXRjaCk7XG4gICAgICAgIHJldHVybiAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBsZWZ0X2Z1bmMoaWR4LCBjb2xzKSA+PSByaWdodF9mdW5jKGlkeCwgY29scyk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kQ29sTGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgY29sOiBDb2wsIGxpdDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBjb2xfZnVuYyA9IGNvbC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGNvbF9mdW5jKGlkeCwgY29scykgPj0gbGl0LnY7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kTGl0Q29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGl0OiBMaXRlcmFsLCBjb2w6IENvbCkge1xuICAgICAgICBjb25zdCBjb2xfZnVuYyA9IGNvbC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGxpdC52ID49IGNvbF9mdW5jKGlkeCwgY29scyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgTm90IGV4dGVuZHMgUHJlZGljYXRlIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgcmVhZG9ubHkgY2hpbGQ6IFByZWRpY2F0ZSkge1xuICAgICAgICBzdXBlcigpO1xuICAgIH1cblxuICAgIGJpbmQoYmF0Y2g6IFJlY29yZEJhdGNoKSB7XG4gICAgICAgIGNvbnN0IGZ1bmMgPSB0aGlzLmNoaWxkLmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBiYXRjaDogUmVjb3JkQmF0Y2gpID0+ICFmdW5jKGlkeCwgYmF0Y2gpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEN1c3RvbVByZWRpY2F0ZSBleHRlbmRzIFByZWRpY2F0ZSB7XG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBuZXh0OiBQcmVkaWNhdGVGdW5jLCBwcml2YXRlIGJpbmRfOiAoYmF0Y2g6IFJlY29yZEJhdGNoKSA9PiB2b2lkKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpIHtcbiAgICAgICAgdGhpcy5iaW5kXyhiYXRjaCk7XG4gICAgICAgIHJldHVybiB0aGlzLm5leHQ7XG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGl0KHY6IGFueSk6IFZhbHVlPGFueT4geyByZXR1cm4gbmV3IExpdGVyYWwodik7IH1cbmV4cG9ydCBmdW5jdGlvbiBjb2wobjogc3RyaW5nKTogQ29sPGFueT4geyByZXR1cm4gbmV3IENvbChuKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGFuZCguLi5wOiBQcmVkaWNhdGVbXSk6IEFuZCB7IHJldHVybiBuZXcgQW5kKC4uLnApOyB9XG5leHBvcnQgZnVuY3Rpb24gb3IoLi4ucDogUHJlZGljYXRlW10pOiBPciB7IHJldHVybiBuZXcgT3IoLi4ucCk7IH1cbmV4cG9ydCBmdW5jdGlvbiBjdXN0b20obmV4dDogUHJlZGljYXRlRnVuYywgYmluZDogKGJhdGNoOiBSZWNvcmRCYXRjaCkgPT4gdm9pZCkge1xuICAgIHJldHVybiBuZXcgQ3VzdG9tUHJlZGljYXRlKG5leHQsIGJpbmQpO1xufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { Table } from '../table';\nimport { DataType } from '../type';\nTable.prototype.scan = tableScan;\nTable.prototype.filter = tableFilter;\nTable.prototype.countBy = tableCountBy;\nexport class Dataframe extends Table {\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nexport class CountByResult extends Table {\n    constructor(values, counts) {\n        const schema = new Schema([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nexport class FilteredDataFrame {\n    constructor(batches, predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    *[Symbol.iterator]() {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    yield batch.get(index);\n                }\n            }\n        }\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, this.predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nfunction tableScan(next, bind) {\n    return new Dataframe(this.batches).scan(next, bind);\n}\nfunction tableFilter(predicate) {\n    return new Dataframe(this.batches).filter(predicate);\n}\nfunction tableCountBy(name) {\n    return new Dataframe(this.batches).countBy(name);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport { DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, } from './type';\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport { Row, Vector, BaseVector, BinaryVector, BoolVector, ChunkedVector, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, } from './vector/index';\nexport { ByteStream, AsyncByteStream, AsyncByteQueue } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { Dataframe, FilteredDataFrame, CountByResult } from './compute/dataframe';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as predicate from './compute/predicate';\nexport { predicate };\nexport const util = Object.assign({}, util_int_, util_bit_, util_buffer_);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { isIterable, isAsyncIterable } from './util/compat';\nimport { AsyncByteStream, AsyncByteQueue } from './io/stream';\nstreamAdapters.toReadableDOMStream = toReadableDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType, Data, DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, Table, Column, Schema, Field, Visitor, Vector, BaseVector, BinaryVector, BoolVector, ChunkedVector, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, ByteStream, AsyncByteStream, AsyncByteQueue, RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader, RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, MessageReader, AsyncMessageReader, JSONMessageReader, Message, RecordBatch, Dataframe, FilteredDataFrame, CountByResult, predicate, util } from './Arrow';\nfunction recordBatchReaderThroughDOMStream() {\n    const through = new AsyncByteQueue();\n    let reader = null;\n    const readable = new ReadableStream({\n        cancel() {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield through.close(); });\n        },\n        start(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield next(controller, reader || (reader = yield open())); });\n        },\n        pull(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { reader ? yield next(controller, reader) : controller.close(); });\n        }\n    });\n    return { writable: new WritableStream(through), readable };\n    function open() {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            return yield (yield RecordBatchReader.from(through)).open();\n        });\n    }\n    function next(controller, reader) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let size = controller.desiredSize;\n            let r = null;\n            while (!(r = yield reader.next()).done) {\n                controller.enqueue(r.value);\n                if (size != null && --size <= 0) {\n                    return;\n                }\n            }\n            controller.close();\n        });\n    }\n}\nfunction recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n    const through = new AsyncByteQueue();\n    const writer = new this().reset(through);\n    const reader = new AsyncByteStream(through);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        cancel() {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield through.close(); });\n        },\n        pull(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield next(controller); });\n        },\n        start(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield next(controller); });\n        },\n    }, readableStrategy);\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n    function next(controller) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let buf = null;\n            let size = controller.desiredSize;\n            while (buf = yield reader.read(size || null)) {\n                // Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n                controller.enqueue((buf.buffer.byteLength !== 0) ? buf : buf.slice());\n                if (size != null && (size -= buf.byteLength) <= 0) {\n                    return;\n                }\n            }\n            controller.close();\n        });\n    }\n}\nfunction toReadableDOMStream(source, options) {\n    if (isAsyncIterable(source)) {\n        return asyncIterableAsReadableDOMStream(source, options);\n    }\n    if (isIterable(source)) {\n        return iterableAsReadableDOMStream(source, options);\n    }\n    throw new Error(`toReadableDOMStream() must be called with an Iterable or AsyncIterable`);\n}\nfunction iterableAsReadableDOMStream(source, options) {\n    let it = null;\n    return new ReadableStream(Object.assign({}, options, { start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); } }));\n    function next(controller, it) {\n        let size = controller.desiredSize;\n        let r = null;\n        while ((size == null || size-- > 0) && !(r = it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\nfunction asyncIterableAsReadableDOMStream(source, options) {\n    let it = null;\n    return new ReadableStream(Object.assign({}, options, { start(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { yield next(controller, it || (it = source[Symbol.asyncIterator]())); });\n        },\n        pull(controller) {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { it ? (yield next(controller, it)) : controller.close(); });\n        },\n        cancel() {\n            return tslib_1.__awaiter(this, void 0, void 0, function* () { (it && (it.return && (yield it.return())) || true) && (it = null); });\n        } }));\n    function next(controller, it) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            let size = controller.desiredSize;\n            let r = null;\n            while ((size == null || size-- > 0) && !(r = yield it.next()).done) {\n                controller.enqueue(r.value);\n            }\n            r && r.done && controller.close();\n        });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import * as exports0 from './Arrow.dom.js';\nimport * as exports1 from './util/int.js';\nimport * as exports2 from './compute/predicate.js';;\nObject.assign(arguments[0], exports0);"]}