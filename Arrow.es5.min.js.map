{"version":3,"sources":["node_modules/flatbuffers/js/flatbuffers.mjs"," [synthetic:base] "," [synthetic:es6/util/arrayiterator] "," [synthetic:util/defines] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:es6/generator_engine] ","targets/es5/cls/io/adapters.js"," [synthetic:util/polyfill] "," [synthetic:es6/promise/promise] "," [synthetic:es6/promise/finally] "," [synthetic:es6/execute_async_generator] "," [synthetic:es6/util/makeasynciterator] "," [synthetic:es6/async_generator_wrapper] ","targets/es5/cls/fb/Schema.js","node_modules/text-encoding-utf-8/src/encoding.js","targets/es5/cls/util/utf8.js","targets/es5/cls/io/interfaces.js","targets/es5/cls/util/compat.js","targets/es5/cls/util/buffer.js","targets/es5/cls/vector.js","targets/es5/cls/ipc/metadata/message.js","targets/es5/cls/fb/Message.js","targets/es5/cls/enum.js","targets/es5/cls/fb/File.js","targets/es5/cls/type.js","targets/es5/cls/schema.js","targets/es5/cls/ipc/metadata/file.js","targets/es5/cls/util/bit.js","targets/es5/cls/data.js","targets/es5/cls/util/pretty.js","targets/es5/cls/vector/row.js","targets/es5/cls/util/vector.js","targets/es5/cls/vector/chunked.js","targets/es5/cls/column.js","targets/es5/cls/vector/base.js","targets/es5/cls/vector/binary.js","targets/es5/cls/vector/bool.js","targets/es5/cls/util/int.js","targets/es5/cls/vector/date.js","targets/es5/cls/vector/decimal.js","targets/es5/cls/vector/dictionary.js","targets/es5/cls/vector/fixedsizebinary.js","targets/es5/cls/vector/fixedsizelist.js","targets/es5/cls/vector/float.js","targets/es5/cls/vector/interval.js","targets/es5/cls/vector/int.js","targets/es5/cls/vector/list.js","targets/es5/cls/vector/map.js","targets/es5/cls/vector/null.js","targets/es5/cls/vector/struct.js","targets/es5/cls/vector/timestamp.js","targets/es5/cls/vector/time.js","targets/es5/cls/vector/union.js","targets/es5/cls/vector/utf8.js","targets/es5/cls/visitor.js","targets/es5/cls/visitor/get.js","targets/es5/cls/visitor/set.js","targets/es5/cls/visitor/indexof.js","targets/es5/cls/visitor/iterator.js","targets/es5/cls/visitor/toarray.js","targets/es5/cls/visitor/bytewidth.js","targets/es5/cls/visitor/vectorctor.js","targets/es5/cls/vector/index.js","targets/es5/cls/visitor/typeassembler.js","targets/es5/cls/ipc/metadata/json.js","targets/es5/cls/io/stream.js","targets/es5/cls/io/file.js","targets/es5/cls/ipc/message.js","targets/es5/cls/visitor/vectorassembler.js","targets/es5/cls/visitor/jsontypeassembler.js","targets/es5/cls/visitor/jsonvectorassembler.js","targets/es5/cls/ipc/writer.js","targets/es5/cls/table.js","targets/es5/cls/recordbatch.js","targets/es5/cls/visitor/vectorloader.js","targets/es5/cls/ipc/reader.js","targets/es5/cls/ipc/whatwg/iterable.js","targets/es5/cls/compute/predicate.js","targets/es5/cls/compute/dataframe.js","targets/es5/cls/Arrow.js","targets/es5/cls/Arrow.dom.js","targets/es5/cls/ipc/whatwg/reader.js","targets/es5/cls/ipc/whatwg/writer.js","targets/es5/cls/Arrow.dom.cls.js"],"names":["$jscomp.generator.Context","$jscomp.generator.Engine_","$jscomp.generator.Generator_","$jscomp.AsyncIteratorFromSyncWrapper","$jscomp.AsyncGeneratorWrapper$ExecutionQueue_","$jscomp.AsyncGeneratorWrapper$ExecutionNode_","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT","$jscomp.AsyncGeneratorWrapper$ExecutionFrame_","$jscomp.AsyncGeneratorWrapper","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.RETURN","$jscomp.AsyncGeneratorWrapper$ActionRecord","$jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW","$jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_STAR","$jscomp.AsyncGeneratorWrapper$ActionEnum.AWAIT_VALUE","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32","Int32Array","Float32Array","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32.buffer","buffer","Float64Array","Uint16Array","Uint8Array","flatbuffers.Long","low","high","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long","prototype","equals","flatbuffers.Long.prototype.equals","other","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long.ZERO","flatbuffers.Builder","bb","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","flatbuffers.Builder.prototype.asUint8Array","bytes","subarray","position","offset","flatbuffers.Builder.prototype.prep","size","additional_bytes","align_size","bytes_","length","old_buf_size","Error","new_buf_size","nbb","setPosition","set","pad","flatbuffers.Builder.prototype.pad","byte_size","i","writeInt8","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder.prototype","flatbuffers.Builder.prototype.writeInt8","value","writeInt16","flatbuffers.Builder.prototype.writeInt16","writeInt32","flatbuffers.Builder.prototype.writeInt32","writeInt64","flatbuffers.Builder.prototype.writeInt64","flatbuffers.Builder.prototype.addInt16","prep","flatbuffers.Builder.prototype.addFieldInt8","voffset","defaultValue","addInt8","slot","flatbuffers.Builder.prototype.addFieldInt16","addInt16","flatbuffers.Builder.prototype.addFieldInt32","addInt32","flatbuffers.Builder.prototype.addFieldInt64","addInt64","flatbuffers.Builder.prototype.addFieldOffset","addOffset","flatbuffers.Builder.prototype.notNested","flatbuffers.Builder.prototype.slot","flatbuffers.Builder.prototype.offset","flatbuffers.Builder.prototype.addOffset","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_INT","flatbuffers.Builder.prototype.startObject","numfields","notNested","flatbuffers.Builder.prototype.endObject","vtableloc","trimmed_size","len","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_SHORT","standard_fields","existing_vtable","vt1","vt2","readInt16","j","push","finish","flatbuffers.Builder.prototype.finish","root_table","opt_file_identifier","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.FILE_IDENTIFIER_LENGTH","charCodeAt","flatbuffers.Builder.prototype.startVector","elem_size","num_elems","alignment","flatbuffers.Builder.prototype.endVector","flatbuffers.Builder.prototype.createString","s","utf8","a","b","codePoint","startVector","endVector","createLong","flatbuffers.Builder.prototype.createLong","flatbuffers.ByteBuffer","position_","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer.prototype","flatbuffers.ByteBuffer.prototype.bytes","flatbuffers.ByteBuffer.prototype.position","flatbuffers.ByteBuffer.prototype.setPosition","flatbuffers.ByteBuffer.prototype.readUint8","flatbuffers.ByteBuffer.prototype.readInt16","readUint16","readInt32","flatbuffers.ByteBuffer.prototype.readInt32","flatbuffers.ByteBuffer.prototype.readInt64","flatbuffers.ByteBuffer.prototype.writeInt8","flatbuffers.ByteBuffer.prototype.writeInt16","flatbuffers.ByteBuffer.prototype.writeInt32","flatbuffers.ByteBuffer.prototype.writeInt64","flatbuffers.ByteBuffer.prototype.__offset","bb_pos","vtable_offset","flatbuffers.ByteBuffer.prototype.__union","t","flatbuffers.ByteBuffer.prototype.__string","opt_encoding","result","UTF8_BYTES","readUint8","c","d","String","fromCharCode","flatbuffers.ByteBuffer.prototype.__indirect","flatbuffers.ByteBuffer.prototype.__vector","flatbuffers.ByteBuffer.prototype.__vector_len","flatbuffers.ByteBuffer.prototype.createLong","ToDictionary","o","undefined","Object","TypeError","Stream","tokens","slice","call","endOfStream","read","shift","end_of_stream","prepend","token","Array","isArray","unshift","pop","decoderError","fatal","TextDecoder","encoding","options","toLowerCase","DEFAULT_ENCODING","_BOMseen","_streaming","_decoder","_fatal","_ignoreBOM","defineProperty","decode","input","ArrayBuffer","byteOffset","byteLength","UTF8Decoder","input_stream","code_points","handler","finished","apply","indexOf","cp","TextEncoder","_encoder","encode","opt_string","UTF8Encoder","string","n","u","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","this.handler","stream","bite","min","max","code_point","count","decodeUtf8","decoder","NodeBuffer","Buffer","toUint8Array","from","toString","bind","TextDecoderPolyfill","encodeUtf8","encoder","TextEncoderPolyfill","ITERATOR_DONE","freeze","done","constructor","ArrowJSON","_json","schema","batches","dictionaries","ReadableInterop","tee","_getDOMStream","pipe","writable","_getNodeStream","_nodeStream","toNodeStream","pipeTo","pipeThrough","duplex","_DOMStream","toDOMStream","AsyncQueue","_values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","cancel","reason","return","write","_ensureOpen","resolve","abort","_error","error","reject","close","Symbol","asyncIterator","?.prototype","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toDOMStream","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toNodeStream","throw","_","next","peek","closed","isFunction","x","isObject","isPromise","then","isIterable","iterator","isAsyncIterable","isArrowJSON","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","collapseContiguousByteRanges","chunks","y","xOffset","yOffset","yLen","xLen","splice","memcpy","target","source","targetByteOffset","sourceByteLength","targetByteLength","dst","src","Math","toArrayBufferView","ArrayBufferViewCtor","BYTES_PER_ELEMENT","isView","pump","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toArrayBufferViewAsyncIterator","emit","exports","joinUint8Arrays","index","numChunks","chunksLen","reduce","Infinity","sliced","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","fromIterable","threw","cmd","bufferLength","e","isNaN","fromAsyncIterable","fromDOMStream","AdaptiveByteReader","defaultReader","byobReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","releaseLock","catch","mode","readFromBYOBReader","readInto","onEvent","event","fromNodeStream","byteRange","cleanup","events","err","evt","fn","destroy","race","map","isFinite","Vector","org","apache","arrow","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","getRootAsNull","obj","startNull","builder","startObject","endNull","endObject","Struct_","getRootAsStruct_","startStruct_","endStruct_","List","getRootAsList","startList","endList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","Map","getRootAsMap","keysSorted","startMap","addKeysSorted","addFieldInt8","endMap","Union","getRootAsUnion","Sparse","typeIds","__vector","typeIdsArray","__vector_len","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startTypeIdsVector","numElems","endUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","Binary","getRootAsBinary","startBinary","endBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","Time","getRootAsTime","startTime","endTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","VectorLayout","getRootAsVectorLayout","type","OFFSET","startVectorLayout","addType","endVectorLayout","KeyValue","getRootAsKeyValue","key","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","NONE","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","startChildrenVector","addLayout","layoutOffset","createLayoutVector","startLayoutVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","createBuffer","Schema","getRootAsSchema","fields","fieldsLength","startSchema","addEndianness","platformIsLittleEndian","endianness","_Endianness","Little","Big","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","module$targets$es5$cls$fb$Schema.org","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Schema","MessageHeader","FieldNode","nullCount","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Buffer","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","Message","getRootAsMessage","version","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion.V1","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","module$targets$es5$cls$fb$Message.org","ArrowType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Type","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DateUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.TimeUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Precision","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.UnionMode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.VectorType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.IntervalUnit","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.MessageHeader","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion","module$targets$es5$cls$enum.Type","Footer","getRootAsFooter","Block","dictionariesLength","recordBatches","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","metaDataLength","createBlock","module$targets$es5$cls$fb$File.org","DataType","_children","isNull","typeId","module$targets$es5$cls$enum.Type.Null","isInt","module$targets$es5$cls$enum.Type.Int","isFloat","module$targets$es5$cls$enum.Type.Float","Float","isBinary","module$targets$es5$cls$enum.Type.Binary","isUtf8","module$targets$es5$cls$enum.Type.Utf8","isBool","module$targets$es5$cls$enum.Type.Bool","isDecimal","module$targets$es5$cls$enum.Type.Decimal","isDate","module$targets$es5$cls$enum.Type.Date","isTime","module$targets$es5$cls$enum.Type.Time","isTimestamp","module$targets$es5$cls$enum.Type.Timestamp","isInterval","module$targets$es5$cls$enum.Type.Interval","isList","module$targets$es5$cls$enum.Type.List","isStruct","module$targets$es5$cls$enum.Type.Struct","Struct","isUnion","module$targets$es5$cls$enum.Type.Union","isFixedSizeBinary","module$targets$es5$cls$enum.Type.FixedSizeBinary","isFixedSizeList","module$targets$es5$cls$enum.Type.FixedSizeList","isMap","module$targets$es5$cls$enum.Type.Map","isDictionary","module$targets$es5$cls$enum.Type.Dictionary","Dictionary","module$targets$es5$cls$enum.Type.NONE","toStringTag","proto","ArrayType","Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","_precision","SINGLE","DOUBLE","Float16","Float32","Float64","_scale","Date_","_unit","DateDay","DAY","DateMillisecond","Time_","TimeSecond","TimeMillisecond","TimeMicrosecond","MICROSECOND","TimeNanosecond","NANOSECOND","Timestamp_","_timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","Interval_","IntervalDayTime","DAY_TIME","IntervalYearMonth","child","valueType","valueField","f","join","Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","idx","create","DenseUnion","Dense","SparseUnion","_byteWidth","_listSize","Map_","_keysSorted","getId","atomicDictionaryId","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_dictionaryVector","_id","v","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","_dictionaries","_dictionaryFields","vectors","names","select","columnNames","xs","filter","_name","_type","_nullable","field","get","has","_Block","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Block","_Footer","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Footer","Footer_","dictionaryBatches","V4","_recordBatches","_dictionaryBatches","buf","footer","OffHeapFooter","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder","numRecordBatches","reverse","forEach","rb","FileBlock","numDictionaries","db","dictionaryBatchesOffset","asUint8Array","block","getRecordBatch","getDictionaryBatch","_footer","fileBlock","getBool","_data","_index","byte","bit","getBit","packBools","values","iterateBits","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","setBool","truncateBitmap","bitmap","alignedSize","Data","childData","_buffers","_offset","floor","_length","assign","_nullCount","_childData","clone","sliceBuffers","sliceChildren","BufferType","TYPE","sliceData","sliceOffsets","DATA","nullBitmap","VALIDITY","valueOffsetsOrChildData","kUnknownNullCount","valueToString","JSON","stringify","columnDescriptor","enumerable","configurable","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","Row","fieldsAreEnumerable","columnIndex","_bindGetter","new","schemaOrFields","keys","colIndex","getChildAt","bound","toJSON","getOwnPropertyNames","props","prop","tmp","createElementComparator","search","valueOfSearch","valueOf","fns","C","clampIndex","adjust","clampRange","end","Chunked","offsets","_chunks","_chunkOffsets","_numChildren","flatten","concat","chunk","others","_sliceInternal","columns","vector","vec","mid","isValid","isValidInternal","getInternal","element","self","indexOfInternal","toArray","arraySet","typedSet","chunkIndex","fromIndex","start","found","slices","chunkOffsets","chunkLength","chunkOffset","numChildren","stride","Column","_field","column","BaseVector","_stride","_bindDataAccessors","val","VectorName","BinaryVector","asUtf8","BoolVector","intAsHex","kPowersOfTen","BaseInt64","_times","L","R","product","carryBit16","_plus","lessThan","greaterThan","hex","times","plus","out_buffer","fromString","fromNumber","num","str","out","posn","group","kInt32DecimalDigits","parseInt","substr","multiple","convertArray","multiply","left","right","rtrn","add","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums","DateVector","IntUtil","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","reverseLookup","getKey","getValue","setKey","setValue","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Number","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","arguments","rowProxy","asStruct","NullVector","StructVector","asMap","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","Utf8Vector","asBinary","Visitor","visitMany","node","visit","args","getVisitFn","throwIfNotFound","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","dtype","inferDType","module$targets$es5$cls$enum.Type.Int8","visitInt8","module$targets$es5$cls$enum.Type.Int16","visitInt16","module$targets$es5$cls$enum.Type.Int32","visitInt32","module$targets$es5$cls$enum.Type.Int64","visitInt64","module$targets$es5$cls$enum.Type.Uint8","visitUint8","module$targets$es5$cls$enum.Type.Uint16","visitUint16","module$targets$es5$cls$enum.Type.Uint32","visitUint32","module$targets$es5$cls$enum.Type.Uint64","visitUint64","module$targets$es5$cls$enum.Type.Float16","visitFloat16","module$targets$es5$cls$enum.Type.Float32","visitFloat32","module$targets$es5$cls$enum.Type.Float64","visitFloat64","module$targets$es5$cls$enum.Type.DateDay","visitDateDay","module$targets$es5$cls$enum.Type.DateMillisecond","visitDateMillisecond","module$targets$es5$cls$enum.Type.TimestampSecond","visitTimestampSecond","module$targets$es5$cls$enum.Type.TimestampMillisecond","visitTimestampMillisecond","module$targets$es5$cls$enum.Type.TimestampMicrosecond","visitTimestampMicrosecond","module$targets$es5$cls$enum.Type.TimestampNanosecond","visitTimestampNanosecond","module$targets$es5$cls$enum.Type.TimeSecond","visitTimeSecond","module$targets$es5$cls$enum.Type.TimeMillisecond","visitTimeMillisecond","module$targets$es5$cls$enum.Type.TimeMicrosecond","visitTimeMicrosecond","module$targets$es5$cls$enum.Type.TimeNanosecond","visitTimeNanosecond","module$targets$es5$cls$enum.Type.DenseUnion","visitDenseUnion","module$targets$es5$cls$enum.Type.SparseUnion","visitSparseUnion","module$targets$es5$cls$enum.Type.IntervalDayTime","visitIntervalDayTime","module$targets$es5$cls$enum.Type.IntervalYearMonth","visitIntervalYearMonth","Visitor.prototype","GetVisitor","epochMillisecondsLongToMs","getVariableWidthBytes","getDateDay","getDateMillisecond","epochMs","getNumeric","getFloat16","getNumericX2","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","GetVisitor.prototype","getNull","getInt","getFloat","getUtf8","getBinary","getFixedSizeBinary","getDate","getTimestamp","getTime","getDecimal","getList","getUnion","getDictionary","getInterval","getFixedSizeList","instance","SetVisitor","setVariableWidthBytes","setDateDay","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","SetVisitor.prototype","setInt","setFloat","setUtf8","setBinary","setFixedSizeBinary","setTimestamp","setTime","setDecimal","setList","setUnion","setDictionary","setIntervalValue","setFixedSizeList","IndexOfVisitor","indexOfValue","searchElement","compare","indexOfUnion","IndexOfVisitor.prototype","nullIndexOf","IteratorVisitor","nullableIterator","getFn","getVisitor","nullByte","nullBit","vectorIterator","IteratorVisitor.prototype","ToArrayVisitor","arrayOfVector","iteratorVisitor","ToArrayVisitor.prototype","variableWidthColumnErrorMessage","ByteWidthVisitor","visitFields","GetVectorConstructor","newVector","getVectorConstructor","BaseVector.prototype","BaseVector.prototype.get","BaseVector.prototype.set","setVisitor","BaseVector.prototype.indexOf","indexOfVisitor","BaseVector.prototype.toArray","toArrayVisitor","getByteWidth","BaseVector.prototype.getByteWidth","byteWidthVisitor","bindBaseVectorDataAccessors","T","VectorCtor","partial1","partial2","partial0","wrapNullable1","wrapNullableSet","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Null","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Int","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FloatingPoint","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Binary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Bool","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Utf8","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Decimal","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Date","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Time","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Timestamp","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Interval","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.List","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Struct_","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Union","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeBinary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeList","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Map","TypeAssembler","super","createString","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","schemaFieldsFromJSON","_schema","Boolean","fromJSON","fieldChildrenFromJSON","fieldNodes","nullCountFromJSON","BufferRegion","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","_Field","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Field","_Schema","_Buffer","_Message","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.Message","_KeyValue","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.KeyValue","_FieldNode","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.FieldNode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Endianness","_RecordBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.RecordBatch","_DictionaryBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.DictionaryBatch","_version","_headerType","body","_createHeader","this._createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","_nodes","_isDelta","encodeField","decodeField","fieldFromJSON","dictMeta","dictType","dictField","encodeSchema","decodeSchema","schemaFromJSON","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","dictionaryBatchFromJSON","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","v3Compat","decodeFieldChildren","decodeIndexType","decodeFieldType","entry","fieldOffsets","fieldsVectorOffset","metadataOffset","k","typeAssembler","childOffsets","childrenVectorOffset","recordBatch","nodesVectorOffset","b_","buffersVectorOffset","dictionaryBatch","setInt16","AsyncByteQueue","sync","ByteStream","ByteStreamSource","AsyncByteStream","AsyncByteStreamSource","RandomAccessFile","readAt","getInt32","seek","nBytes","AsyncRandomAccessFile","file","_handle","_pending","stat","bytesRead","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","readMessage","readMessageBody","readSchema","throwIfNull","PADDING","metadataLength","AsyncMessageReader","JSONMessageReader","_body","_dictionaryIndex","_batchIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","VectorAssembler","_byteLength","_bufferRegions","assemble","RangeError","addBuffer","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","VectorAssembler.prototype","assembleBoolVector","assembleUnion","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","childIndex","childLength","JSONTypeAssembler","JSONVectorAssembler","bigNumsToStrings","binaryToString","octets","toUpperCase","digits","RecordBatchWriter","_position","_started","_sink","_dictionaryBlocks","_recordBatchBlocks","_autoDestroy","autoDestroy","throughNode","throughDOM","writeAll","writeAllAsync","reset","sink","objectMode","_writeFooter","_writeSchema","Table","_writeRecordBatch","_writeMessage","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeDictionaries","records","_writeBodyBuffers","_writeDictionaryBatch","padding","RecordBatchStreamWriter","RecordBatchFileWriter","_writeMagic","RecordBatchJSONWriter","fieldToJSON","writer","assembler","empty","RecordBatchReader","isSync","open","opening","fromAsync","fromVectors","fromStruct","struct","getColumnAt","getColumn","getColumnIndex","findIndex","serialize","numCols","numRows","childNames","structData","VectorLoader","buffersIndex","nodesIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","JSONVectorLoader","sources","binaryDataFromJSON","joined","impl","_impl","isAsync","isFile","isStream","readRecordBatch","RecordBatchStreamReader","RecordBatchJSONReaderImpl","fromFileHandle","fromAsyncByteStream","fromByteStream","readAll","readAllSync","readAllAsync","AsyncRecordBatchStreamReader","RecordBatchFileReader","AsyncRecordBatchFileReader","RecordBatchReaderImpl","_recordBatchIndex","_loadRecordBatch","_loadVectors","_loadDictionaryBatch","types","RecordBatchStreamReaderImpl","_reader","shouldAutoDestroy","_readNextMessageAndValidate","AsyncRecordBatchStreamReaderImpl","RecordBatchFileReaderImpl","_readFooter","_readDictionaryBatch","AsyncRecordBatchFileReaderImpl","rest","iterableAsReadableDOMStream","controller","desiredSize","bm","enqueue","hwm","highWaterMark","ReadableStream","pull","asyncIterableAsReadableDOMStream","Value","eq","Literal","Equals","le","LTeq","ge","GTeq","lt","Not","gt","ne","Col","colidx","Predicate","and","And","expr","or","Or","not","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","every","some","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","cols","func","CustomPredicate","bind_","custom","countBy","Table.prototype.countBy","DataFrame","scan","Table.prototype.scan","Table.prototype.filter","predicate","FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","log","counts","CountsArrayType","CountByResult","_predicate","util","util_int_","util_bit_","util_buffer_","util_vector_","recordBatchReaderThroughDOMStream","writableStrategy","readableStrategy","queue","readable","WritableStream","recordBatchWriterThroughDOMStream","exports0"],"mappings":"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","file":"Arrow.js","sourcesContent":["/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer';\n/** @ignore */\nexport default {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromDOMStream(source) {\n        return pump(fromDOMStream(source));\n    },\n    fromNodeStream(stream) {\n        return pump(fromNodeStream(stream));\n    },\n    // @ts-ignore\n    toDOMStream(source, options) {\n        throw new Error(`\"toDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toNodeStream(source, options) {\n        throw new Error(`\"toNodeStream\" not available in this environment`);\n    },\n};\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\n/** @ignore */\nasync function* fromAsyncIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\n/** @ignore */\nasync function* fromDOMStream(source) {\n    let done = false, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield null);\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    }\n    finally {\n        (threw === false) ? (await it['cancel']())\n            : source['locked'] && it.releaseLock();\n    }\n}\n/** @ignore */\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.byobReader = null;\n        this.defaultReader = null;\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        }\n        catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n    async cancel(reason) {\n        const { reader, source } = this;\n        reader && (await reader['cancel'](reason));\n        source && (source['locked'] && this.releaseLock());\n    }\n    async read(size) {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result));\n        return result;\n    }\n    getDefaultReader() {\n        if (this.byobReader) {\n            this.releaseLock();\n        }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.defaultReader);\n    }\n    getBYOBReader() {\n        if (this.defaultReader) {\n            this.releaseLock();\n        }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.byobReader);\n    }\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    async readFromBYOBReader(size) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\n/** @ignore */\nasync function readInto(reader, buffer, offset, size) {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\n/** @ignore */\nconst onEvent = (stream, event) => {\n    let handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\n/** @ignore */\nasync function* fromNodeStream(stream) {\n    let events = [];\n    let event = 'error';\n    let done = false, err = null;\n    let cmd, size, bufferLength = 0;\n    let buffers = [], buffer;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield null);\n    // ignore stdin if it's a TTY\n    if (stream['isTTY']) {\n        return yield new Uint8Array(0);\n    }\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n        do {\n            events[2] = onEvent(stream, 'readable');\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') {\n                break;\n            }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                }\n                else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n    function cleanup(events, err) {\n        buffer = buffers = null;\n        return new Promise(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            try {\n                // Some stream implementations don't call the destroy callback,\n                // because it's really a node-internal API. Just calling `destroy`\n                // here should be enough to conform to the ReadableStream contract\n                const destroy = stream['destroy'];\n                destroy && destroy.call(stream, err);\n                err = undefined;\n            }\n            catch (e) {\n                err = e || err;\n            }\n            finally {\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n",null,null,null,null,null,null,"/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * @enum\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let VectorType;\n                (function (VectorType) {\n                    /**\n                     * used in List type, Dense Union and variable length primitive types (String, Binary)\n                     */\n                    VectorType[VectorType[\"OFFSET\"] = 0] = \"OFFSET\";\n                    /**\n                     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n                     */\n                    VectorType[VectorType[\"DATA\"] = 1] = \"DATA\";\n                    /**\n                     * Bit vector indicating if each value is null\n                     */\n                    VectorType[VectorType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n                    /**\n                     * Type vector used in Union type\n                     */\n                    VectorType[VectorType[\"TYPE\"] = 3] = \"TYPE\";\n                })(VectorType = flatbuf.VectorType || (flatbuf.VectorType = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Null}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Null=} obj\n                     * @returns {Null}\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Struct_}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Struct_=} obj\n                     * @returns {Struct_}\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {List}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {List=} obj\n                     * @returns {List}\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeList}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeList=} obj\n                     * @returns {FixedSizeList}\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns {number}\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Map}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Map=} obj\n                     * @returns {Map}\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns {boolean}\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Union}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Union=} obj\n                     * @returns {Union}\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.UnionMode}\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param {number} index\n                     * @returns {number}\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {Int32Array}\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<number>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Int}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Int=} obj\n                     * @returns {Int}\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FloatingPoint}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FloatingPoint=} obj\n                     * @returns {FloatingPoint}\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Precision}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Precision} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Utf8}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Utf8=} obj\n                     * @returns {Utf8}\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Binary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Binary=} obj\n                     * @returns {Binary}\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeBinary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeBinary=} obj\n                     * @returns {FixedSizeBinary}\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns {number}\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Bool}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Bool=} obj\n                     * @returns {Bool}\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Decimal}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Decimal=} obj\n                     * @returns {Decimal}\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns {number}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns {number}\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Date}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Date=} obj\n                     * @returns {Date}\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.DateUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Time}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Time=} obj\n                     * @returns {Time}\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Timestamp}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Timestamp=} obj\n                     * @returns {Timestamp}\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Interval}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Interval=} obj\n                     * @returns {Interval}\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class VectorLayout {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {VectorLayout}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {VectorLayout=} obj\n                     * @returns {VectorLayout}\n                     */\n                    static getRootAsVectorLayout(bb, obj) {\n                        return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n                     *\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * the purpose of the vector\n                     *\n                     * @returns {org.apache.arrow.flatbuf.VectorType}\n                     */\n                    type() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startVectorLayout(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt16(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.VectorType} type\n                     */\n                    static addType(builder, type) {\n                        builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endVectorLayout(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.VectorLayout = VectorLayout;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {KeyValue}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {KeyValue=} obj\n                     * @returns {KeyValue}\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryEncoding}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryEncoding=} obj\n                     * @returns {DictionaryEncoding}\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param {org.apache.arrow.flatbuf.Int=} obj\n                     * @returns {org.apache.arrow.flatbuf.Int|null}\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns {boolean}\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Field}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Field=} obj\n                     * @returns {Field}\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Type}\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n                     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * layout of buffers produced for this type (as derived from the Type)\n                     * does not include children\n                     * each recordbatch will return instances of those Buffers.\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n                     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n                     */\n                    layout(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    layoutLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Type} typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} layoutOffset\n                     */\n                    static addLayout(builder, layoutOffset) {\n                        builder.addFieldOffset(6, layoutOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createLayoutVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startLayoutVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(7, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Buffer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {flatbuffers.Long} length\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Schema}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Schema=} obj\n                     * @returns {Schema}\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns {org.apache.arrow.flatbuf.Endianness}\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from './buffer';\nimport { TextDecoder as TextDecoderPolyfill, TextEncoder as TextEncoderPolyfill, } from 'text-encoding-utf-8';\n/** @ignore */\nexport const decodeUtf8 = ((decoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? decoder.decode.bind(decoder) : (input) => {\n        const { buffer, byteOffset, length } = toUint8Array(input);\n        return NodeBuffer.from(buffer, byteOffset, length).toString();\n    };\n})(new (typeof TextDecoder !== 'undefined' ? TextDecoder : TextDecoderPolyfill)());\n/** @ignore */\nexport const encodeUtf8 = ((encoder) => {\n    /** @suppress {missingRequire} */\n    const NodeBuffer = typeof Buffer !== 'undefined' ? Buffer : null;\n    return !NodeBuffer ? encoder.encode.bind(encoder) :\n        (input = '') => toUint8Array(NodeBuffer.from(input, 'utf8'));\n})(new (typeof TextEncoder !== 'undefined' ? TextEncoder : TextEncoderPolyfill)());\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvdXRmOC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4QyxPQUFPLEVBQ0gsV0FBVyxJQUFJLG1CQUFtQixFQUNsQyxXQUFXLElBQUksbUJBQW1CLEdBQ3JDLE1BQU0scUJBQXFCLENBQUM7QUFFN0IsY0FBYztBQUNkLE1BQU0sQ0FBQyxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLEVBQUU7SUFDbkMsaUNBQWlDO0lBQ2pDLE1BQU0sVUFBVSxHQUFHLE9BQU8sTUFBTSxLQUFLLFdBQVcsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7SUFDakUsT0FBTyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBd0MsRUFBRSxFQUFFO1FBQzdGLE1BQU0sRUFBRSxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsQ0FBQztRQUMzRCxPQUFPLFVBQVUsQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLFVBQVUsRUFBRSxNQUFNLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztJQUNsRSxDQUFDLENBQUM7QUFDTixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDO0FBRW5GLGNBQWM7QUFDZCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO0lBQ25DLGlDQUFpQztJQUNqQyxNQUFNLFVBQVUsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ2pFLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUM7UUFDL0MsQ0FBQyxLQUFLLEdBQUcsRUFBRSxFQUFFLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQztBQUNyRSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxXQUFXLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLG1CQUFtQixDQUFDLEVBQUUsQ0FBQyxDQUFDIiwiZmlsZSI6InV0aWwvdXRmOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXkgfSBmcm9tICcuL2J1ZmZlcic7XG5pbXBvcnQge1xuICAgIFRleHREZWNvZGVyIGFzIFRleHREZWNvZGVyUG9seWZpbGwsXG4gICAgVGV4dEVuY29kZXIgYXMgVGV4dEVuY29kZXJQb2x5ZmlsbCxcbn0gZnJvbSAndGV4dC1lbmNvZGluZy11dGYtOCc7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY29uc3QgZGVjb2RlVXRmOCA9ICgoZGVjb2RlcikgPT4ge1xuICAgIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuICAgIGNvbnN0IE5vZGVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IEJ1ZmZlciA6IG51bGw7XG4gICAgcmV0dXJuICFOb2RlQnVmZmVyID8gZGVjb2Rlci5kZWNvZGUuYmluZChkZWNvZGVyKSA6IChpbnB1dDogQXJyYXlCdWZmZXJMaWtlIHwgQXJyYXlCdWZmZXJWaWV3KSA9PiB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGggfSA9IHRvVWludDhBcnJheShpbnB1dCk7XG4gICAgICAgIHJldHVybiBOb2RlQnVmZmVyLmZyb20oYnVmZmVyLCBieXRlT2Zmc2V0LCBsZW5ndGgpLnRvU3RyaW5nKCk7XG4gICAgfTtcbn0pKG5ldyAodHlwZW9mIFRleHREZWNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHREZWNvZGVyIDogVGV4dERlY29kZXJQb2x5ZmlsbCkoKSk7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY29uc3QgZW5jb2RlVXRmOCA9ICgoZW5jb2RlcikgPT4ge1xuICAgIC8qKiBAc3VwcHJlc3Mge21pc3NpbmdSZXF1aXJlfSAqL1xuICAgIGNvbnN0IE5vZGVCdWZmZXIgPSB0eXBlb2YgQnVmZmVyICE9PSAndW5kZWZpbmVkJyA/IEJ1ZmZlciA6IG51bGw7XG4gICAgcmV0dXJuICFOb2RlQnVmZmVyID8gZW5jb2Rlci5lbmNvZGUuYmluZChlbmNvZGVyKSA6XG4gICAgICAgIChpbnB1dCA9ICcnKSA9PiB0b1VpbnQ4QXJyYXkoTm9kZUJ1ZmZlci5mcm9tKGlucHV0LCAndXRmOCcpKTtcbn0pKG5ldyAodHlwZW9mIFRleHRFbmNvZGVyICE9PSAndW5kZWZpbmVkJyA/IFRleHRFbmNvZGVyIDogVGV4dEVuY29kZXJQb2x5ZmlsbCkoKSk7XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\n/** @ignore */\nexport const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });\n/** @ignore */\nexport class ArrowJSON {\n    // @ts-ignore\n    constructor(_json) {\n        this._json = _json;\n    }\n    get schema() { return this._json['schema']; }\n    get batches() { return (this._json['batches'] || []); }\n    get dictionaries() { return (this._json['dictionaries'] || []); }\n}\n/** @ignore */\nexport class ReadableInterop {\n    tee() {\n        return this._getDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) { return this._getDOMStream().pipeTo(writable, options); }\n    pipeThrough(duplex, options) {\n        return this._getDOMStream().pipeThrough(duplex, options);\n    }\n    _getDOMStream() {\n        return this._DOMStream || (this._DOMStream = this.toDOMStream());\n    }\n    _getNodeStream() {\n        return this._nodeStream || (this._nodeStream = this.toNodeStream());\n    }\n}\n/** @ignore */\nexport class AsyncQueue extends ReadableInterop {\n    constructor() {\n        super();\n        this._values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    get closed() { return this._closedPromise; }\n    async cancel(reason) { await this.return(reason); }\n    write(value) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this._values.push(value))\n                : (this.resolvers.shift().resolve({ done: false, value }));\n        }\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift().reject({ done: true, value }));\n        }\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift().resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    toDOMStream(options) {\n        return streamAdapters.toDOMStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    toNodeStream(options) {\n        return streamAdapters.toNodeStream((this._closedPromiseResolve || this._error)\n            ? this\n            : this._values, options);\n    }\n    async throw(_) { await this.abort(_); return ITERATOR_DONE; }\n    async return(_) { await this.close(); return ITERATOR_DONE; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    next(..._args) {\n        if (this._values.length > 0) {\n            return Promise.resolve({ done: false, value: this._values.shift() });\n        }\n        else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        }\n        else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this} is closed`);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ReadableInterop } from '../io/interfaces';\n/** @ignore */ const isNumber = (x) => typeof x === 'number';\n/** @ignore */ const isBoolean = (x) => typeof x === 'boolean';\n/** @ignore */ const isFunction = (x) => typeof x === 'function';\n/** @ignore */\nexport const isObject = (x) => x != null && Object(x) === x;\n/** @ignore */\nexport const isPromise = (x) => {\n    return isObject(x) && isFunction(x.then);\n};\n/** @ignore */\nexport const isObservable = (x) => {\n    return isObject(x) && isFunction(x.subscribe);\n};\n/** @ignore */\nexport const isIterable = (x) => {\n    return isObject(x) && isFunction(x[Symbol.iterator]);\n};\n/** @ignore */\nexport const isAsyncIterable = (x) => {\n    return isObject(x) && isFunction(x[Symbol.asyncIterator]);\n};\n/** @ignore */\nexport const isArrowJSON = (x) => {\n    return isObject(x) && isObject(x['schema']);\n};\n/** @ignore */\nexport const isArrayLike = (x) => {\n    return isObject(x) && isNumber(x['length']);\n};\n/** @ignore */\nexport const isIteratorResult = (x) => {\n    return isObject(x) && ('done' in x) && ('value' in x);\n};\n/** @ignore */\nexport const isUnderlyingSink = (x) => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['close']) &&\n        isFunction(x['start']) &&\n        isFunction(x['write']);\n};\n/** @ignore */\nexport const isFileHandle = (x) => {\n    return isObject(x) && isFunction(x['stat']) && isNumber(x['fd']);\n};\n/** @ignore */\nexport const isFSReadStream = (x) => {\n    return isReadableNodeStream(x) && isNumber(x['bytesRead']);\n};\n/** @ignore */\nexport const isFetchResponse = (x) => {\n    return isObject(x) && isReadableDOMStream(x['body']);\n};\n/** @ignore */\nexport const isWritableDOMStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['abort']) &&\n        isFunction(x['getWriter']) &&\n        !(x instanceof ReadableInterop);\n};\n/** @ignore */\nexport const isReadableDOMStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['tee']) &&\n        isFunction(x['cancel']) &&\n        isFunction(x['pipeTo']) &&\n        isFunction(x['getReader']) &&\n        !(x instanceof ReadableInterop);\n};\n/** @ignore */\nexport const isWritableNodeStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['end']) &&\n        isFunction(x['write']) &&\n        isBoolean(x['writable']) &&\n        !(x instanceof ReadableInterop);\n};\n/** @ignore */\nexport const isReadableNodeStream = (x) => {\n    return isObject(x) &&\n        isFunction(x['read']) &&\n        isFunction(x['pipe']) &&\n        isBoolean(x['readable']) &&\n        !(x instanceof ReadableInterop);\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { encodeUtf8 } from '../util/utf8';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\n/** @ignore */\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\n/** @ignore */\nfunction collapseContiguousByteRanges(chunks) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            continue;\n        }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            continue;\n        }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n/** @ignore */\nexport function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n/** @ignore */\nexport function joinUint8Arrays(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, numChunks = chunks.length;\n    let chunksLen = chunks.reduce((x, y) => x + y.byteLength, 0);\n    let source, sliced, buffer;\n    let length = Math.min(chunksLen, typeof size === 'number' ? size : Infinity);\n    while (++index < numChunks) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            }\n            else if (sliced.length === source.length) {\n                index++;\n            }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n/** @ignore */\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n    let value = isIteratorResult(input) ? input.value : input;\n    if (!value) {\n        return new ArrayBufferViewCtor(0);\n    }\n    if (typeof value === 'string') {\n        value = encodeUtf8(value);\n    }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value.constructor === ArrayBufferViewCtor ? value :\n            // Node's `Buffer` class passes the `instanceof Uint8Array` check, but we need\n            // a real Uint8Array, since Buffer#slice isn't the same as Uint8Array#slice :/\n            new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n    }\n    if (value instanceof ArrayBuffer) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof SharedArrayBuf) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof ByteBuffer) {\n        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n    }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */ export const toInt8Array = (input) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input) => toArrayBufferView(Uint8ClampedArray, input);\n/** @ignore */\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n    const wrap = function* (x) { yield x; };\n    const buffers = (typeof source === 'string') ? wrap(source)\n        : (ArrayBuffer.isView(source)) ? wrap(source)\n            : (source instanceof ArrayBuffer) ? wrap(source)\n                : (source instanceof SharedArrayBuf) ? wrap(source)\n                    : !isIterable(source) ? wrap(source) : source;\n    yield* pump((function* (it) {\n        let r = null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n/** @ignore */ export const toInt8ArrayIterator = (input) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n    const wrap = async function* (x) { yield await x; };\n    const emit = async function* (source) {\n        yield* pump((function* (it) {\n            let r = null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n    const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n        : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n            : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                    : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                        : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                            : source; // otherwise if AsyncIterable, use it\n    yield* pump((async function* (it) {\n        let r = null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport class Vector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUErQnJCLE1BQU0sT0FBZ0IsTUFBTTtDQW9CM0IiLCJmaWxlIjoidmVjdG9yLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuL2RhdGEnO1xuaW1wb3J0IHsgRGF0YVR5cGUgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgQ2h1bmtlZCB9IGZyb20gJy4vdmVjdG9yL2NodW5rZWQnO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGludGVyZmFjZSBDbG9uYWJsZTxSIGV4dGVuZHMgVmVjdG9yPiB7XG4gICAgY2xvbmUoLi4uYXJnczogYW55W10pOiBSO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGludGVyZmFjZSBTbGljZWFibGU8UiBleHRlbmRzIFZlY3Rvcj4ge1xuICAgIHNsaWNlKGJlZ2luPzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBSO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGludGVyZmFjZSBBcHBsaWNhdGl2ZTxUIGV4dGVuZHMgRGF0YVR5cGUsIFIgZXh0ZW5kcyBDaHVua2VkPiB7XG4gICAgY29uY2F0KC4uLm90aGVyczogVmVjdG9yPFQ+W10pOiBSO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+XG4gICAgZXh0ZW5kcyBDbG9uYWJsZTxWZWN0b3I8VD4+LFxuICAgICAgICAgICAgU2xpY2VhYmxlPFZlY3RvcjxUPj4sXG4gICAgICAgICAgICBBcHBsaWNhdGl2ZTxULCBDaHVua2VkPFQ+PiB7XG5cbiAgICByZWFkb25seSBUVHlwZTogVFsnVFR5cGUnXTtcbiAgICByZWFkb25seSBUQXJyYXk6IFRbJ1RBcnJheSddO1xuICAgIHJlYWRvbmx5IFRWYWx1ZTogVFsnVFZhbHVlJ107XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBWZWN0b3I8VCBleHRlbmRzIERhdGFUeXBlID0gYW55PiBpbXBsZW1lbnRzIEl0ZXJhYmxlPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IGRhdGE6IERhdGE8VD47XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHR5cGU6IFQ7XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHR5cGVJZDogVFsnVFR5cGUnXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IHN0cmlkZTogbnVtYmVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBudWxsQ291bnQ6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgbnVtQ2hpbGRyZW46IG51bWJlcjtcblxuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBBcnJheVR5cGU6IFRbJ0FycmF5VHlwZSddO1xuXG4gICAgcHVibGljIGFic3RyYWN0IGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW47XG4gICAgcHVibGljIGFic3RyYWN0IGdldChpbmRleDogbnVtYmVyKTogVFsnVFZhbHVlJ10gfCBudWxsO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddIHwgbnVsbCk6IHZvaWQ7XG4gICAgcHVibGljIGFic3RyYWN0IGluZGV4T2YodmFsdWU6IFRbJ1RWYWx1ZSddIHwgbnVsbCwgZnJvbUluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFRbJ1RWYWx1ZSddIHwgbnVsbD47XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgdG9BcnJheSgpOiBUWydUQXJyYXknXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0Q2hpbGRBdDxSIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+KGluZGV4OiBudW1iZXIpOiBWZWN0b3I8Uj4gfCBudWxsO1xufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\n/** @ignore */\nexport class Message {\n    constructor(bodyLength, version, headerType, header) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static fromJSON(msg, headerType) {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static encode(message) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header());\n        }\n        else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header());\n        }\n        else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header());\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */\n    static from(header, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() { return this.headerType; }\n    get version() { return this._version; }\n    get headerType() { return this._headerType; }\n    get bodyLength() { return this._bodyLength; }\n    header() { return this._createHeader(); }\n    isSchema() { return this.headerType === MessageHeader.Schema; }\n    isRecordBatch() { return this.headerType === MessageHeader.RecordBatch; }\n    isDictionaryBatch() { return this.headerType === MessageHeader.DictionaryBatch; }\n}\n/** @ignore */\nexport class RecordBatch {\n    get nodes() { return this._nodes; }\n    get length() { return this._length; }\n    get buffers() { return this._buffers; }\n    constructor(length, nodes, buffers) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n/** @ignore */\nexport class DictionaryBatch {\n    get id() { return this._id; }\n    get data() { return this._data; }\n    get isDelta() { return this._isDelta; }\n    get length() { return this.data.length; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n    constructor(data, id, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n/** @ignore */\nexport class BufferRegion {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n/** @ignore */\nexport class FieldNode {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\nfunction messageHeaderFromJSON(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nfunction decodeMessageHeader(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema()));\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\n/** @ignore */\nfunction decodeSchema(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\n/** @ignore */\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\n/** @ignore */\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\n/** @ignore */\nfunction decodeBufferRegion(b) {\n    return new BufferRegion(b.offset(), b.length());\n}\n/** @ignore */\nfunction decodeFieldNode(f) {\n    return new FieldNode(f.length(), f.nullCount());\n}\n/** @ignore */\nfunction decodeFieldNodes(batch) {\n    return Array.from({ length: batch.nodesLength() }, (_, i) => batch.nodes(i)).filter(Boolean).map(FieldNode.decode);\n}\n/** @ignore */\nfunction decodeBuffers(batch, version) {\n    return Array.from({ length: batch.buffersLength() }, (_, i) => batch.buffers(i)).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\n/** @ignore */\nfunction v3Compat(version, decode) {\n    return (buffer, i) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\n/** @ignore */\nfunction decodeSchemaFields(schema, dictionaries, dictionaryFields) {\n    return Array.from({ length: schema.fieldsLength() }, (_, i) => schema.fields(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n/** @ignore */\nfunction decodeFieldChildren(field, dictionaries, dictionaryFields) {\n    return Array.from({ length: field.childrenLength() }, (_, i) => field.children(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\n/** @ignore */\nfunction decodeField(f, dictionaries, dictionaryFields) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\n/** @ignore */\nfunction decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\n/** @ignore */\nfunction decodeIndexType(_type) {\n    return new Int(_type.isSigned(), _type.bitWidth());\n}\n/** @ignore */\nfunction decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch (typeId) {\n        case Type.NONE: return new DataType();\n        case Type.Null: return new Null();\n        case Type.Binary: return new Binary();\n        case Type.Utf8: return new Utf8();\n        case Type.Bool: return new Bool();\n        case Type.List: return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n            return new Time(t.unit(), t.bitWidth());\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\n/** @ignore */\nfunction encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n    if (metadataOffset !== -1) {\n        _Schema.addCustomMetadata(b, metadataOffset);\n    }\n    return _Schema.endSchema(b);\n}\n/** @ignore */\nfunction encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    let type = field.type;\n    let typeId = field.typeId;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b);\n    }\n    else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b);\n        typeOffset = typeAssembler.visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) {\n        _Field.addName(b, nameOffset);\n    }\n    if (dictionaryOffset !== -1) {\n        _Field.addDictionary(b, dictionaryOffset);\n    }\n    if (metadataOffset !== -1) {\n        _Field.addCustomMetadata(b, metadataOffset);\n    }\n    return _Field.endField(b);\n}\n/** @ignore */\nfunction encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n    const nodesVectorOffset = b.endVector();\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n    const buffersVectorOffset = b.endVector();\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\n/** @ignore */\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\n/** @ignore */\nfunction encodeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\n/** @ignore */\nfunction encodeBufferRegion(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\n/** @ignore */\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FieldNode}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     * @param {flatbuffers.Long} null_count\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {RecordBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {RecordBatch=} obj\n                     * @returns {RecordBatch}\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n                     * @returns {org.apache.arrow.flatbuf.FieldNode}\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n                     * @returns {org.apache.arrow.flatbuf.Buffer}\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryBatch=} obj\n                     * @returns {DictionaryBatch}\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns {boolean}\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Message}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Message=} obj\n                     * @returns {Message}\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nexport var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport var Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(Type || (Type = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Footer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Footer=} obj\n                     * @returns {Footer}\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.Schema=} obj\n                     * @returns {org.apache.arrow.flatbuf.Schema|null}\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Block}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns {number}\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {number} metaDataLength\n                     * @param {flatbuffers.Long} bodyLength\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';\nexport class DataType {\n    constructor(_children) {\n        this._children = _children;\n    }\n    /** @nocollapse */ static isNull(x) { return x && x.typeId === Type.Null; }\n    /** @nocollapse */ static isInt(x) { return x && x.typeId === Type.Int; }\n    /** @nocollapse */ static isFloat(x) { return x && x.typeId === Type.Float; }\n    /** @nocollapse */ static isBinary(x) { return x && x.typeId === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x) { return x && x.typeId === Type.Utf8; }\n    /** @nocollapse */ static isBool(x) { return x && x.typeId === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x) { return x && x.typeId === Type.Decimal; }\n    /** @nocollapse */ static isDate(x) { return x && x.typeId === Type.Date; }\n    /** @nocollapse */ static isTime(x) { return x && x.typeId === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x) { return x && x.typeId === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x) { return x && x.typeId === Type.Interval; }\n    /** @nocollapse */ static isList(x) { return x && x.typeId === Type.List; }\n    /** @nocollapse */ static isStruct(x) { return x && x.typeId === Type.Struct; }\n    /** @nocollapse */ static isUnion(x) { return x && x.typeId === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x) { return x && x.typeId === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x) { return x && x.typeId === Type.Map; }\n    /** @nocollapse */ static isDictionary(x) { return x && x.typeId === Type.Dictionary; }\n    get children() { return this._children; }\n    get typeId() { return Type.NONE; }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexport class Null extends DataType {\n    toString() { return `Null`; }\n    get typeId() { return Type.Null; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nclass Int_ extends DataType {\n    constructor(_isSigned, _bitWidth) {\n        super();\n        this._isSigned = _isSigned;\n        this._bitWidth = _bitWidth;\n    }\n    get typeId() { return Type.Int; }\n    get isSigned() { return this._isSigned; }\n    get bitWidth() { return this._bitWidth; }\n    get ArrayType() {\n        switch (this._bitWidth) {\n            case 8: return (this._isSigned ? Int8Array : Uint8Array);\n            case 16: return (this._isSigned ? Int16Array : Uint16Array);\n            case 32: return (this._isSigned ? Int32Array : Uint32Array);\n            case 64: return (this._isSigned ? Int32Array : Uint32Array);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n}\nInt_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\nexport class Int8 extends Int_ {\n    constructor() { super(true, 8); }\n}\nexport class Int16 extends Int_ {\n    constructor() { super(true, 16); }\n}\nexport class Int32 extends Int_ {\n    constructor() { super(true, 32); }\n}\nexport class Int64 extends Int_ {\n    constructor() { super(true, 64); }\n}\nexport class Uint8 extends Int_ {\n    constructor() { super(false, 8); }\n}\nexport class Uint16 extends Int_ {\n    constructor() { super(false, 16); }\n}\nexport class Uint32 extends Int_ {\n    constructor() { super(false, 32); }\n}\nexport class Uint64 extends Int_ {\n    constructor() { super(false, 64); }\n}\nexport class Float extends DataType {\n    constructor(_precision) {\n        super();\n        this._precision = _precision;\n    }\n    get typeId() { return Type.Float; }\n    get precision() { return this._precision; }\n    // @ts-ignore\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Binary; }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexport class Utf8 extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Utf8; }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexport class Bool extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Bool; }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexport class Decimal extends DataType {\n    constructor(_scale, _precision) {\n        super();\n        this._scale = _scale;\n        this._precision = _precision;\n    }\n    get typeId() { return Type.Decimal; }\n    get scale() { return this._scale; }\n    get precision() { return this._precision; }\n    toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexport class Date_ extends DataType {\n    constructor(_unit) {\n        super();\n        this._unit = _unit;\n    }\n    get typeId() { return Type.Date; }\n    get unit() { return this._unit; }\n    toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexport class DateDay extends Date_ {\n    constructor() { super(DateUnit.DAY); }\n}\nexport class DateMillisecond extends Date_ {\n    constructor() { super(DateUnit.MILLISECOND); }\n}\nclass Time_ extends DataType {\n    constructor(_unit, _bitWidth) {\n        super();\n        this._unit = _unit;\n        this._bitWidth = _bitWidth;\n    }\n    get typeId() { return Type.Time; }\n    get unit() { return this._unit; }\n    get bitWidth() { return this._bitWidth; }\n    toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n}\nTime_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\nexport class TimeSecond extends Time_ {\n    constructor() { super(TimeUnit.SECOND, 32); }\n}\nexport class TimeMillisecond extends Time_ {\n    constructor() { super(TimeUnit.MILLISECOND, 32); }\n}\nexport class TimeMicrosecond extends Time_ {\n    constructor() { super(TimeUnit.MICROSECOND, 64); }\n}\nexport class TimeNanosecond extends Time_ {\n    constructor() { super(TimeUnit.NANOSECOND, 64); }\n}\nclass Timestamp_ extends DataType {\n    constructor(_unit, _timezone) {\n        super();\n        this._unit = _unit;\n        this._timezone = _timezone;\n    }\n    get typeId() { return Type.Timestamp; }\n    get unit() { return this._unit; }\n    get timezone() { return this._timezone; }\n    toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n}\nTimestamp_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\nexport class TimestampSecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.SECOND, timezone); }\n}\nexport class TimestampMillisecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MILLISECOND, timezone); }\n}\nexport class TimestampMicrosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MICROSECOND, timezone); }\n}\nexport class TimestampNanosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.NANOSECOND, timezone); }\n}\nclass Interval_ extends DataType {\n    constructor(_unit) {\n        super();\n        this._unit = _unit;\n    }\n    get typeId() { return Type.Interval; }\n    get unit() { return this._unit; }\n    toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n}\nInterval_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\nexport class IntervalDayTime extends Interval_ {\n    constructor() { super(IntervalUnit.DAY_TIME); }\n}\nexport class IntervalYearMonth extends Interval_ {\n    constructor() { super(IntervalUnit.YEAR_MONTH); }\n}\nexport class List extends DataType {\n    constructor(child) {\n        super([child]);\n    }\n    get typeId() { return Type.List; }\n    toString() { return `List<${this.valueType}>`; }\n    get children() { return this._children; }\n    get valueType() { return this._children[0].type; }\n    get valueField() { return this._children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexport class Struct extends DataType {\n    constructor(_children) {\n        super(_children);\n        this._children = _children;\n    }\n    get typeId() { return Type.Struct; }\n    get children() { return this._children; }\n    toString() { return `Struct<[${this._children.map((f) => f.type).join(`, `)}]>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nclass Union_ extends DataType {\n    constructor(_mode, _typeIds, _children) {\n        super(_children);\n        this._mode = _mode;\n        this._children = _children;\n        this._typeIds = _typeIds = Int32Array.from(_typeIds);\n        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null));\n    }\n    get typeId() { return Type.Union; }\n    get mode() { return this._mode; }\n    get typeIds() { return this._typeIds; }\n    get children() { return this._children; }\n    get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this._children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\nUnion_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\nexport class DenseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\nexport class SparseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\nexport class FixedSizeBinary extends DataType {\n    constructor(_byteWidth) {\n        super();\n        this._byteWidth = _byteWidth;\n    }\n    get typeId() { return Type.FixedSizeBinary; }\n    get byteWidth() { return this._byteWidth; }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexport class FixedSizeList extends DataType {\n    constructor(_listSize, child) {\n        super([child]);\n        this._listSize = _listSize;\n    }\n    get typeId() { return Type.FixedSizeList; }\n    get listSize() { return this._listSize; }\n    get children() { return this._children; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexport class Map_ extends DataType {\n    constructor(_children, _keysSorted = false) {\n        super(_children);\n        this._children = _children;\n        this._keysSorted = _keysSorted;\n    }\n    get typeId() { return Type.Map; }\n    get children() { return this._children; }\n    get keysSorted() { return this._keysSorted; }\n    toString() { return `Map<{${this._children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\n/** @ignore */\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered, dictionaryVector) {\n        super();\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this._dictionaryVector = dictionaryVector;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    set dictionaryVector(v) { this._dictionaryVector = v; }\n    get dictionaryVector() { return this._dictionaryVector; }\n    get typeId() { return Type.Dictionary; }\n    get id() { return this._id; }\n    get indices() { return this._indices; }\n    get dictionary() { return this._dictionary; }\n    get isOrdered() { return this._isOrdered; }\n    set children(_) { }\n    get children() { return this.dictionary.children; }\n    get valueType() { return this.dictionary; }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nexport class Schema {\n    constructor(fields, metadata, dictionaries, dictionaryFields) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new Schema(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n    get fields() { return this._fields; }\n    get metadata() { return this._metadata; }\n    get dictionaries() { return this._dictionaries; }\n    get dictionaryFields() { return this._dictionaryFields; }\n    select(...columnNames) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n}\nSchema[Symbol.toStringTag] = ((prototype) => {\n    prototype._metadata = Object.freeze(new Map());\n    return 'Schema';\n})(Schema.prototype);\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    get type() { return this._type; }\n    get name() { return this._name; }\n    get nullable() { return this._nullable; }\n    get metadata() { return this._metadata; }\n    get typeId() { return this._type.typeId; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    get indices() {\n        return DataType.isDictionary(this._type) ? this._type.indices : this._type;\n    }\n    toString() { return `${this.name}: ${this.type}`; }\n}\n/** @ignore */\nfunction generateDictionaryMap(fields, dictionaries, dictionaryFields) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id).push(field);\n            }\n            else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n    return { dictionaries, dictionaryFields };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* tslint:disable:class-name */\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\n/** @ignore */\nclass Footer_ {\n    constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema());\n        return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n    static encode(footer) {\n        const b = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n        const dictionaryBatchesOffset = b.endVector();\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() { return this._recordBatches.length; }\n    get numDictionaries() { return this._dictionaryBatches.length; }\n    *recordBatches() {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    *dictionaryBatches() {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    getRecordBatch(index) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\nexport { Footer_ as Footer };\n/** @ignore */\nclass OffHeapFooter extends Footer_ {\n    constructor(schema, _footer) {\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    get numDictionaries() { return this._footer.dictionariesLength(); }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nexport class FileBlock {\n    /** @nocollapse */\n    static decode(block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n    static encode(b, fileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\n/** @ignore */\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\n/** @ignore */\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n/** @ignore */\nexport function truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n/** @ignore */\nexport function packBools(values) {\n    let n = 0, i = 0;\n    let xs = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do {\n            xs[i] = 0;\n        } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n/** @ignore */\nexport function* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/** @ignore */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\n/** @ignore */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n/** @ignore */\nexport function popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { VectorType as BufferType, UnionMode } from './enum';\n/** @ignore */ export const kUnknownNullCount = -1;\n/** @ignore */\nexport class Data {\n    constructor(type, offset, length, nullCount, buffers, childData) {\n        this._buffers = [];\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers);\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data);\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get offset() { return this._offset; }\n    get typeId() { return this._type.typeId; }\n    get childData() { return this._childData; }\n    get ArrayType() { return this._type.ArrayType; }\n    get buffers() { return this._buffers; }\n    get values() { return this._buffers[BufferType.DATA]; }\n    get typeIds() { return this._buffers[BufferType.TYPE]; }\n    get nullBitmap() { return this._buffers[BufferType.VALIDITY]; }\n    get valueOffsets() { return this._buffers[BufferType.OFFSET]; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this._buffers[BufferType.VALIDITY])) {\n            this._nullCount = nullCount = this._length - popcnt_bit_range(nullBitmap, this._offset, this._offset + this._length);\n        }\n        return nullCount;\n    }\n    clone(type, offset = this._offset, length = this._length, nullCount = this._nullCount, buffers = this._buffers, childData = this._childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n    slice(offset, length) {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone(this._type, this._offset + offset, length, nullCount, buffers, childData);\n    }\n    sliceBuffers(offset, length) {\n        let arr, buffers = Object.assign([], this._buffers);\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n    sliceChildren(offset, length) {\n        // Only slice children if this isn't variable width data\n        if (!this._buffers[BufferType.OFFSET]) {\n            return this._childData.map((child) => child.slice(offset, length));\n        }\n        return this._childData;\n    }\n    sliceData(data, offset, length) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this._type.typeId === 6 ? data : data.subarray(offset, offset + length);\n    }\n    sliceOffsets(valueOffsets, offset, length) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    static Null(type, offset, length, nullCount, nullBitmap) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    static Int(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Dictionary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Float(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Bool(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Date(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Time(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Interval(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    static FixedSizeList(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    static Struct(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Map(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildData, childData) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        };\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nexport function valueToString(x) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHJldHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixjQUFjO0FBQ2QsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFNO0lBQ2hDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25HLENBQUMiLCJmaWxlIjoidXRpbC9wcmV0dHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBmdW5jdGlvbiB2YWx1ZVRvU3RyaW5nKHg6IGFueSkge1xuICAgIHJldHVybiB0eXBlb2YgeCA9PT0gJ3N0cmluZycgPyBgXCIke3h9XCJgIDogQXJyYXlCdWZmZXIuaXNWaWV3KHgpID8gYFske3h9XWAgOiBKU09OLnN0cmluZ2lmeSh4KTtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\n/** @ignore */ const columnDescriptor = { enumerable: true, configurable: false, get: () => { } };\n/** @ignore */ const lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\n/** @ignore */ const rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null };\n/** @ignore */ const rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null };\n/** @ignore */ const row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\n/** @ignore */\nexport class Row {\n    constructor(fields, fieldsAreEnumerable) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null;\n        });\n    }\n    /** @nocollapse */\n    static new(schemaOrFields, fieldsAreEnumerable = false) {\n        let schema, fields;\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        }\n        else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row(fields, fieldsAreEnumerable);\n    }\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    _bindGetter(colIndex) {\n        return function () {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    get(key) { return this[key]; }\n    bind(parent, rowIndex) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound;\n    }\n    toJSON() {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = this[prop]) && props || props;\n            }, {});\n    }\n    toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = valueToString(this[prop])) && props || props;\n            }, {});\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Row } from '../vector/row';\n/** @ignore */\nexport function clampIndex(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\n/** @ignore */\nlet tmp;\n/** @ignore */\nexport function clampRange(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\n/** @ignore */\nexport function createElementComparator(search) {\n    // Compare primitives\n    if (search == null || typeof search !== 'object') {\n        return (value) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        const valueOfSearch = search.valueOf();\n        return (value) => value instanceof Date ? (value.valueOf() === valueOfSearch) : false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search) || ArrayBuffer.isView(search)) {\n        const n = search.length;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[i]);\n        }\n        return (value) => {\n            if (!value || value.length !== n) {\n                return false;\n            }\n            // Handle the case where the search element is an Array, but the\n            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n            if ((value instanceof Row) || (value instanceof Vector)) {\n                for (let i = -1, n = value.length; ++i < n;) {\n                    if (!(fns[i](value.get(i)))) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            for (let i = -1, n = value.length; ++i < n;) {\n                if (!(fns[i](value[i]))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // Compare Rows and Vectors\n    if ((search instanceof Row) || (search instanceof Vector)) {\n        const n = search.length;\n        const C = search.constructor;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search.get(i));\n        }\n        return (value) => {\n            if (!(value instanceof C)) {\n                return false;\n            }\n            if (!(value.length === n)) {\n                return false;\n            }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        const n = keys.length;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[keys[i]]);\n        }\n        return (value) => {\n            if (!value || typeof value !== 'object') {\n                return false;\n            }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value[keys[i]]))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // No valid comparator\n    return () => false;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { clampRange } from '../util/vector';\nimport { DataType } from '../type';\n/** @ignore */\nexport class Chunked extends Vector {\n    constructor(type, chunks = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._nullCount = -1;\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n    /** @nocollapse */\n    static flatten(...vectors) {\n        return vectors.reduce(function flatten(xs, x) {\n            return x instanceof Chunked ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof Vector);\n    }\n    /** @nocollapse */\n    static concat(...chunks) {\n        return new Chunked(chunks[0].type, Chunked.flatten(...chunks));\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get typeId() { return this._type.typeId; }\n    get data() {\n        return this._chunks[0] ? this._chunks[0].data : null;\n    }\n    get ArrayType() { return this._type.ArrayType; }\n    get numChildren() { return this._numChildren; }\n    get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n    get indices() {\n        if (DataType.isDictionary(this._type)) {\n            if (!this._indices) {\n                const chunks = this._chunks;\n                this._indices = (chunks.length === 1\n                    ? chunks[0].indices\n                    : Chunked.concat(...chunks.map((x) => x.indices)));\n            }\n            return this._indices;\n        }\n        return null;\n    }\n    get dictionary() {\n        if (DataType.isDictionary(this._type)) {\n            return this._type.dictionaryVector;\n        }\n        return null;\n    }\n    *[Symbol.iterator]() {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n    clone(chunks = this._chunks) {\n        return new Chunked(this._type, chunks);\n    }\n    concat(...others) {\n        return this.clone(Chunked.flatten(this, ...others));\n    }\n    slice(begin, end) {\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this._numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let child, field, chunks;\n        if (child = columns[index]) {\n            return child;\n        }\n        if (field = (this._type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Chunked(field.type, chunks));\n            }\n        }\n        return null;\n    }\n    search(index, then) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0) {\n            return null;\n        }\n        if (idx >= offsets[rhs]) {\n            return null;\n        }\n        if (rhs <= 1) {\n            return then ? then(this, 0, idx) : [0, idx];\n        }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n    isValid(index) {\n        return !!this.search(index, this.isValidInternal);\n    }\n    get(index) {\n        return this.search(index, this.getInternal);\n    }\n    set(index, value) {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n    indexOf(element, offset) {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n    toArray() {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) {\n            return new ArrayType(0);\n        }\n        if (n <= 1) {\n            return chunks[0].toArray();\n        }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n    getInternal({ _chunks }, i, j) { return _chunks[i].get(j); }\n    isValidInternal({ _chunks }, i, j) { return _chunks[i].isValid(j); }\n    indexOfInternal({ _chunks }, chunkIndex, fromIndex, element) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n    _sliceInternal(self, offset, length) {\n        const slices = [];\n        const { chunks, _chunkOffsets: chunkOffsets } = self;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) {\n                continue;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end));\n        }\n        return self.clone(slices);\n    }\n}\n/** @ignore */\nfunction calculateOffsets(vectors) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\n/** @ignore */\nconst typedSet = (src, dst, offset) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\n/** @ignore */\nconst arraySet = (src, dst, offset) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Chunked } from './vector/chunked';\nexport class Column extends Chunked {\n    constructor(field, vectors = [], offsets) {\n        super(field.type, Chunked.flatten(...vectors), offsets);\n        this._field = field;\n    }\n    get field() { return this._field; }\n    get name() { return this._field.name; }\n    clone(chunks = this._chunks) {\n        return new Column(this._field, chunks);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let column, field, chunks;\n        if (column = columns[index]) {\n            return column;\n        }\n        if (field = (this.type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column(field, chunks));\n            }\n        }\n        return null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsT0FBTyxFQUFFLE9BQU8sRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBVTNDLE1BQU0sT0FBTyxNQUNULFNBQVEsT0FBVTtJQUtsQixZQUFZLEtBQWUsRUFBRSxVQUF1QixFQUFFLEVBQUUsT0FBcUI7UUFDekUsS0FBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLE9BQU8sQ0FBQyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ3hELElBQUksQ0FBQyxNQUFNLEdBQUcsS0FBSyxDQUFDO0lBQ3hCLENBQUM7SUFLRCxJQUFXLEtBQUssS0FBSyxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzFDLElBQVcsSUFBSSxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBRXZDLEtBQUssQ0FBQyxNQUFNLEdBQUcsSUFBSSxDQUFDLE9BQU87UUFDOUIsT0FBTyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLENBQUM7SUFFTSxVQUFVLENBQTJCLEtBQWE7UUFFckQsSUFBSSxLQUFLLEdBQUcsQ0FBQyxJQUFJLEtBQUssSUFBSSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQUUsT0FBTyxJQUFJLENBQUM7U0FBRTtRQUU1RCxJQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsU0FBUyxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxFQUFFLENBQUMsQ0FBQztRQUN0RCxJQUFJLE1BQWlCLEVBQUUsS0FBZSxFQUFFLE1BQW1CLENBQUM7UUFFNUQsSUFBSSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1lBQUUsT0FBTyxNQUFNLENBQUM7U0FBRTtRQUMvQyxJQUFJLEtBQUssR0FBSSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsQ0FBQyxDQUFDLEtBQUssQ0FBYyxFQUFFO1lBQ3pELE1BQU0sR0FBRyxJQUFJLENBQUMsT0FBTztpQkFDaEIsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFJLEtBQUssQ0FBQyxDQUFDO2lCQUM1QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQW9CLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7WUFDcEQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUMxRDtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwiZmlsZSI6ImNvbHVtbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IENodW5rZWQgfSBmcm9tICcuL3ZlY3Rvci9jaHVua2VkJztcbmltcG9ydCB7IENsb25hYmxlLCBTbGljZWFibGUsIEFwcGxpY2F0aXZlIH0gZnJvbSAnLi92ZWN0b3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIENvbHVtbjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IHtcbiAgICB0eXBlSWQ6IFRbJ1RUeXBlJ107XG4gICAgY29uY2F0KC4uLm90aGVyczogVmVjdG9yPFQ+W10pOiBDb2x1bW48VD47XG4gICAgc2xpY2UoYmVnaW4/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IENvbHVtbjxUPjtcbiAgICBjbG9uZShjaHVua3M/OiBWZWN0b3I8VD5bXSwgb2Zmc2V0cz86IFVpbnQzMkFycmF5KTogQ29sdW1uPFQ+O1xufVxuXG5leHBvcnQgY2xhc3MgQ29sdW1uPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT5cbiAgICBleHRlbmRzIENodW5rZWQ8VD5cbiAgICBpbXBsZW1lbnRzIENsb25hYmxlPENvbHVtbjxUPj4sXG4gICAgICAgICAgICAgICBTbGljZWFibGU8Q29sdW1uPFQ+PixcbiAgICAgICAgICAgICAgIEFwcGxpY2F0aXZlPFQsIENvbHVtbjxUPj4ge1xuXG4gICAgY29uc3RydWN0b3IoZmllbGQ6IEZpZWxkPFQ+LCB2ZWN0b3JzOiBWZWN0b3I8VD5bXSA9IFtdLCBvZmZzZXRzPzogVWludDMyQXJyYXkpIHtcbiAgICAgICAgc3VwZXIoZmllbGQudHlwZSwgQ2h1bmtlZC5mbGF0dGVuKC4uLnZlY3RvcnMpLCBvZmZzZXRzKTtcbiAgICAgICAgdGhpcy5fZmllbGQgPSBmaWVsZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2ZpZWxkOiBGaWVsZDxUPjtcbiAgICBwcm90ZWN0ZWQgX2NoaWxkcmVuPzogQ29sdW1uW107XG5cbiAgICBwdWJsaWMgZ2V0IGZpZWxkKCkgeyByZXR1cm4gdGhpcy5fZmllbGQ7IH1cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLl9maWVsZC5uYW1lOyB9XG5cbiAgICBwdWJsaWMgY2xvbmUoY2h1bmtzID0gdGhpcy5fY2h1bmtzKSB7XG4gICAgICAgIHJldHVybiBuZXcgQ29sdW1uKHRoaXMuX2ZpZWxkLCBjaHVua3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4oaW5kZXg6IG51bWJlcik6IENvbHVtbjxSPiB8IG51bGwge1xuXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5udW1DaGlsZHJlbikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGxldCBjb2x1bW5zID0gdGhpcy5fY2hpbGRyZW4gfHwgKHRoaXMuX2NoaWxkcmVuID0gW10pO1xuICAgICAgICBsZXQgY29sdW1uOiBDb2x1bW48Uj4sIGZpZWxkOiBGaWVsZDxSPiwgY2h1bmtzOiBWZWN0b3I8Uj5bXTtcblxuICAgICAgICBpZiAoY29sdW1uID0gY29sdW1uc1tpbmRleF0pIHsgcmV0dXJuIGNvbHVtbjsgfVxuICAgICAgICBpZiAoZmllbGQgPSAoKHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSlbaW5kZXhdIGFzIEZpZWxkPFI+KSkge1xuICAgICAgICAgICAgY2h1bmtzID0gdGhpcy5fY2h1bmtzXG4gICAgICAgICAgICAgICAgLm1hcCgodmVjdG9yKSA9PiB2ZWN0b3IuZ2V0Q2hpbGRBdDxSPihpbmRleCkpXG4gICAgICAgICAgICAgICAgLmZpbHRlcigodmVjKTogdmVjIGlzIFZlY3RvcjxSPiA9PiB2ZWMgIT0gbnVsbCk7XG4gICAgICAgICAgICBpZiAoY2h1bmtzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gKGNvbHVtbnNbaW5kZXhdID0gbmV3IENvbHVtbjxSPihmaWVsZCwgY2h1bmtzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Chunked } from './chunked';\nimport { clampRange } from '../util/vector';\nexport class BaseVector extends Vector {\n    constructor(data, children, stride) {\n        super();\n        this._stride = 1;\n        this._numChildren = 0;\n        this._children = children;\n        this._numChildren = data.childData.length;\n        this._bindDataAccessors(this._data = data);\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n    get data() { return this._data; }\n    get stride() { return this._stride; }\n    get numChildren() { return this._numChildren; }\n    get type() { return this._data.type; }\n    get typeId() { return this._data.typeId; }\n    get length() { return this._data.length; }\n    get offset() { return this._data.offset; }\n    get nullCount() { return this._data.nullCount; }\n    get VectorName() { return this.constructor.name; }\n    get ArrayType() { return this._data.ArrayType; }\n    get values() { return this._data.values; }\n    get typeIds() { return this._data.typeIds; }\n    get nullBitmap() { return this._data.nullBitmap; }\n    get valueOffsets() { return this._data.valueOffsets; }\n    get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n    clone(data, children = this._children, stride = this._stride) {\n        return Vector.new(data, children, stride);\n    }\n    concat(...others) {\n        return Chunked.concat(this, ...others);\n    }\n    slice(begin, end) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this._sliceInternal);\n    }\n    isValid(index) {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren ? null : ((this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new(this._data.childData[index])));\n    }\n    // @ts-ignore\n    toJSON() { return [...this]; }\n    _sliceInternal(self, offset, length) {\n        const stride = self.stride;\n        return self.clone(self.data.slice(offset * stride, (length - offset) * stride));\n    }\n    // @ts-ignore\n    _bindDataAccessors(data) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Utf8 } from '../type';\nexport class BinaryVector extends BaseVector {\n    asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9iaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQVUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXZDLE1BQU0sT0FBTyxZQUFhLFNBQVEsVUFBa0I7SUFDekMsTUFBTTtRQUNULE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2JpbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBCaW5hcnksIFV0ZjggfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIEJpbmFyeVZlY3RvciBleHRlbmRzIEJhc2VWZWN0b3I8QmluYXJ5PiB7XG4gICAgcHVibGljIGFzVXRmOCgpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBVdGY4KCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\nexport class BoolVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        let length = 0, bitmap = packBools(function* () {\n            for (let x of data) {\n                length++;\n                yield x;\n            }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9ib29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFnQjtJQUM1QyxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXVCO1FBQ3RDLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUN4QyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFBRSxNQUFNLEVBQUUsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQzthQUFFO1FBQzlDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvYm9vbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCb29sIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBwYWNrQm9vbHMgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5cbmV4cG9ydCBjbGFzcyBCb29sVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxCb29sPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEl0ZXJhYmxlPGJvb2xlYW4+KSB7XG4gICAgICAgIGxldCBsZW5ndGggPSAwLCBiaXRtYXAgPSBwYWNrQm9vbHMoZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgeCBvZiBkYXRhKSB7IGxlbmd0aCsrOyB5aWVsZCB4OyB9XG4gICAgICAgIH0oKSk7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuQm9vbChuZXcgQm9vbCgpLCAwLCBsZW5ndGgsIDAsIG51bGwsIGJpdG1hcCkpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/** @ignore */\nconst carryBit16 = 1 << 16;\n/** @ignore */\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\n/** @ignore */\nconst kInt32DecimalDigits = 8;\n/** @ignore */\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(4)) {\n        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { DateDay, DateMillisecond } from '../type';\nexport class DateVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n    /** @nocollapse */\n    static from(data, unit = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\nexport class DateDayVector extends DateVector {\n}\nexport class DateMillisecondVector extends DateVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBUyxPQUFPLEVBQUUsZUFBZSxFQUFHLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxVQUFvQyxTQUFRLFVBQWE7SUFlbEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFoQkQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBb0MsSUFBWSxFQUFFLE9BQWtCLFFBQVEsQ0FBQyxXQUFXO1FBQ3RHLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDaEY7WUFDRCxLQUFLLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDeEY7U0FDSjtRQUNELE1BQU0sSUFBSSxTQUFTLENBQUMsMkJBQTJCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUlKO0FBQ0QsTUFBTSxPQUFPLGFBQWMsU0FBUSxVQUFtQjtDQUFHO0FBQ3pELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUEyQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9kYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRlVW5pdCB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBJbnRVdGlsIGZyb20gJy4uL3V0aWwvaW50JztcbmltcG9ydCB7IERhdGVfLCBEYXRlRGF5LCBEYXRlTWlsbGlzZWNvbmQgIH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVmVjdG9yPFQgZXh0ZW5kcyBEYXRlXyA9IERhdGVfPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgRGF0ZV8gPSBEYXRlTWlsbGlzZWNvbmQ+KGRhdGE6IERhdGVbXSwgdW5pdDogVFsndW5pdCddID0gRGF0ZVVuaXQuTUlMTElTRUNPTkQpIHtcbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0LkRBWToge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IEludDMyQXJyYXkuZnJvbShkYXRhLm1hcCgoZCkgPT4gZC52YWx1ZU9mKCkgLyA4NjQwMDAwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuRGF0ZShuZXcgRGF0ZURheSgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgdmFsdWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0Lk1JTExJU0VDT05EOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gSW50VXRpbC5JbnQ2NC5jb252ZXJ0QXJyYXkoZGF0YS5tYXAoKGQpID0+IGQudmFsdWVPZigpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5EYXRlKG5ldyBEYXRlTWlsbGlzZWNvbmQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIHZhbHVlcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCBkYXRlIHVuaXQgXCIke0RhdGVVbml0W3VuaXRdfVwiYCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCBkYXRhLnR5cGUudW5pdCArIDEpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEYXRlRGF5VmVjdG9yIGV4dGVuZHMgRGF0ZVZlY3RvcjxEYXRlRGF5PiB7fVxuZXhwb3J0IGNsYXNzIERhdGVNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIERhdGVWZWN0b3I8RGF0ZU1pbGxpc2Vjb25kPiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class DecimalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 4);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kZWNpbWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBbUI7SUFDbEQsWUFBWSxJQUFtQjtRQUMzQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2RlY2ltYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgRGVjaW1hbCB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBEZWNpbWFsVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxEZWNpbWFsPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEZWNpbWFsPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIDQpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Dictionary } from '../type';\nexport class DictionaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    /** @nocollapse */\n    static from(values, indices, keys) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    // protected _bindDataAccessors() {}\n    get indices() { return this._indices; }\n    get dictionary() { return this._data.type.dictionaryVector; }\n    isValid(index) { return this._indices.isValid(index); }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n    getKey(idx) { return this._indices.get(idx); }\n    getValue(key) { return this.dictionary.get(key); }\n    setKey(idx, key) { return this._indices.set(idx, key); }\n    setValue(key, value) { return this.dictionary.set(key, value); }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxPQUFPLEVBQVksVUFBVSxFQUFTLE1BQU0sU0FBUyxDQUFDO0FBRXRELE1BQU0sT0FBTyxnQkFBdUUsU0FBUSxVQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFaRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUNkLE1BQWlCLEVBQUUsT0FBYSxFQUNoQyxJQUF3QztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQU1ELG9DQUFvQztJQUNwQyxJQUFXLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDO0lBQzlDLElBQVcsVUFBVSxLQUFLLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQzdELE9BQU8sQ0FBQyxLQUFhLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDL0QsYUFBYSxDQUFDLEtBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNsRSxNQUFNLENBQUMsR0FBVyxJQUEyQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM3RSxRQUFRLENBQUMsR0FBVyxJQUF3QixPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUM5RSxNQUFNLENBQUMsR0FBVyxFQUFFLEdBQTBCLElBQUksT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3ZGLFFBQVEsQ0FBQyxHQUFXLEVBQUUsS0FBeUIsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsR0FBRyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdEciLCJmaWxlIjoidmVjdG9yL2RpY3Rpb25hcnkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFYgfSBmcm9tICcuLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IERhdGFUeXBlLCBEaWN0aW9uYXJ5LCBUS2V5cyB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeVZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnksIFRLZXkgZXh0ZW5kcyBUS2V5cyA9IFRLZXlzPiBleHRlbmRzIEJhc2VWZWN0b3I8RGljdGlvbmFyeTxULCBUS2V5Pj4ge1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgRGF0YVR5cGU8YW55PiwgVEtleSBleHRlbmRzIFRLZXlzID0gVEtleXM+KFxuICAgICAgICB2YWx1ZXM6IFZlY3RvcjxUPiwgaW5kaWNlczogVEtleSxcbiAgICAgICAga2V5czogQXJyYXlMaWtlPG51bWJlcj4gfCBUS2V5WydUQXJyYXknXVxuICAgICkge1xuICAgICAgICBjb25zdCB0eXBlID0gbmV3IERpY3Rpb25hcnkodmFsdWVzLnR5cGUsIGluZGljZXMsIG51bGwsIG51bGwsIHZhbHVlcyk7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuRGljdGlvbmFyeSh0eXBlLCAwLCBrZXlzLmxlbmd0aCwgMCwgbnVsbCwga2V5cykpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2luZGljZXM6IFY8VEtleT47XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEaWN0aW9uYXJ5PFQsIFRLZXk+Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIDEpO1xuICAgICAgICB0aGlzLl9pbmRpY2VzID0gVmVjdG9yLm5ldyhkYXRhLmNsb25lKHRoaXMudHlwZS5pbmRpY2VzKSk7XG4gICAgfVxuICAgIC8vIHByb3RlY3RlZCBfYmluZERhdGFBY2Nlc3NvcnMoKSB7fVxuICAgIHB1YmxpYyBnZXQgaW5kaWNlcygpIHsgcmV0dXJuIHRoaXMuX2luZGljZXM7IH1cbiAgICBwdWJsaWMgZ2V0IGRpY3Rpb25hcnkoKSB7IHJldHVybiB0aGlzLl9kYXRhLnR5cGUuZGljdGlvbmFyeVZlY3RvcjsgfVxuICAgIHB1YmxpYyBpc1ZhbGlkKGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIHRoaXMuX2luZGljZXMuaXNWYWxpZChpbmRleCk7IH1cbiAgICBwdWJsaWMgcmV2ZXJzZUxvb2t1cCh2YWx1ZTogVCkgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmluZGV4T2YodmFsdWUpOyB9XG4gICAgcHVibGljIGdldEtleShpZHg6IG51bWJlcik6IFRLZXlbJ1RWYWx1ZSddIHwgbnVsbCB7IHJldHVybiB0aGlzLl9pbmRpY2VzLmdldChpZHgpOyB9XG4gICAgcHVibGljIGdldFZhbHVlKGtleTogbnVtYmVyKTogVFsnVFZhbHVlJ10gfCBudWxsIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5nZXQoa2V5KTsgfVxuICAgIHB1YmxpYyBzZXRLZXkoaWR4OiBudW1iZXIsIGtleTogVEtleVsnVFZhbHVlJ10gfCBudWxsKSB7IHJldHVybiB0aGlzLl9pbmRpY2VzLnNldChpZHgsIGtleSk7IH1cbiAgICBwdWJsaWMgc2V0VmFsdWUoa2V5OiBudW1iZXIsIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwpIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5zZXQoa2V5LCB2YWx1ZSk7IH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeBinaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemViaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQTJCO0lBQ2xFLFlBQVksSUFBMkI7UUFDbkMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvZml4ZWRzaXplYmluYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgRml4ZWRTaXplQmluYXJ5IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBGaXhlZFNpemVCaW5hcnlWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPEZpeGVkU2l6ZUJpbmFyeT4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Rml4ZWRTaXplQmluYXJ5Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5ieXRlV2lkdGgpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeListVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemVsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxtQkFBOEMsU0FBUSxVQUE0QjtJQUMzRixZQUFZLElBQTRCO1FBQ3BDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2ZpeGVkc2l6ZWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRml4ZWRTaXplTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxGaXhlZFNpemVMaXN0PFQ+PiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxGaXhlZFNpemVMaXN0PFQ+Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5saXN0U2l6ZSk7XG4gICAgfVxufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float16, Float32, Float64 } from '../type';\nexport class FloatVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\nexport class Float16Vector extends FloatVector {\n}\nexport class Float32Vector extends FloatVector {\n}\nexport class Float64Vector extends FloatVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9mbG9hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxXQUFxQyxTQUFRLFVBQWE7SUFDbkUsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBa0IsSUFBaUI7UUFDakQsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEtBQUssV0FBVyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUYsS0FBSyxZQUFZLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvRixLQUFLLFlBQVksQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxhQUFjLFNBQVEsV0FBb0I7Q0FBRztBQUMxRCxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQW9CO0NBQUc7QUFDMUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxXQUFvQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9mbG9hdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBGbG9hdCwgRmxvYXQxNiwgRmxvYXQzMiwgRmxvYXQ2NCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRmxvYXRWZWN0b3I8VCBleHRlbmRzIEZsb2F0ID0gRmxvYXQ+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBGbG9hdD4oZGF0YTogVFsnVEFycmF5J10pIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFVpbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkZsb2F0KG5ldyBGbG9hdDE2KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIEZsb2F0MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5GbG9hdChuZXcgRmxvYXQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBGbG9hdDY0QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuRmxvYXQobmV3IEZsb2F0NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlY29nbml6ZWQgRmxvYXQgZGF0YScpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb2F0MTZWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDE2PiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0MzJWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDMyPiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0NjRWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDY0PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class IntervalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class IntervalDayTimeVector extends IntervalVector {\n}\nexport class IntervalYearMonthVector extends IntervalVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9pbnRlcnZhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFHckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sY0FBOEMsU0FBUSxVQUFhO0lBQzVFLFlBQVksSUFBYTtRQUNyQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsY0FBK0I7Q0FBRztBQUM3RSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsY0FBaUM7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50ZXJ2YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBJbnRlcnZhbCwgSW50ZXJ2YWxEYXlUaW1lLCBJbnRlcnZhbFllYXJNb250aCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxWZWN0b3I8VCBleHRlbmRzIEludGVydmFsID0gSW50ZXJ2YWw+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIGRhdGEudHlwZS51bml0ICsgMSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxEYXlUaW1lVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxEYXlUaW1lPiB7fVxuZXhwb3J0IGNsYXNzIEludGVydmFsWWVhck1vbnRoVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxZZWFyTW9udGg+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nexport class IntVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n    /** @nocollapse */\n    static from(data, is64) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n}\nexport class Int8Vector extends IntVector {\n}\nexport class Int16Vector extends IntVector {\n}\nexport class Int32Vector extends IntVector {\n}\nexport class Int64Vector extends IntVector {\n}\nexport class Uint8Vector extends IntVector {\n}\nexport class Uint16Vector extends IntVector {\n}\nexport class Uint32Vector extends IntVector {\n}\nexport class Uint64Vector extends IntVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzRixLQUFLLFdBQVcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzlGO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FJSjtBQUVELE1BQU0sT0FBTyxVQUFXLFNBQVEsU0FBZTtDQUFHO0FBQ2xELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFDcEQsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFnQjtDQUFHO0FBQ3BELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFDdEQsTUFBTSxPQUFPLFlBQWEsU0FBUSxTQUFpQjtDQUFHO0FBQ3RELE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBaUI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJbnQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBJbnRWZWN0b3I8VCBleHRlbmRzIEludCA9IEludD4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIEludD4oZGF0YTogVFsnVEFycmF5J10pOiBWPFQ+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgSW50MzIgfCBVaW50MzI+KGRhdGE6IFRbJ1RBcnJheSddLCBpczY0OiB0cnVlKTogVjxUPjtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogYW55LCBpczY0PzogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXM2NCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBJbnQ2NCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpXG4gICAgICAgICAgICAgICAgOiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGRhdGEuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgSW50OEFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBJbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50MTYoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgSW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IEludDMyKCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQ4QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MTZBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQxNigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBJbnQgZGF0YScpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFQ+KSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHVuZGVmaW5lZCwgMSArIE51bWJlcihkYXRhLnR5cGUuYml0V2lkdGggPiAzMikpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludDhWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8SW50OD4ge31cbmV4cG9ydCBjbGFzcyBJbnQxNlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQxNj4ge31cbmV4cG9ydCBjbGFzcyBJbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQzMj4ge31cbmV4cG9ydCBjbGFzcyBJbnQ2NFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQ2ND4ge31cbmV4cG9ydCBjbGFzcyBVaW50OFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50OD4ge31cbmV4cG9ydCBjbGFzcyBVaW50MTZWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8VWludDE2PiB7fVxuZXhwb3J0IGNsYXNzIFVpbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50MzI+IHt9XG5leHBvcnQgY2xhc3MgVWludDY0VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPFVpbnQ2ND4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class ListVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFxQyxTQUFRLFVBQW1CO0NBQUciLCJmaWxlIjoidmVjdG9yL2xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxMaXN0PFQ+PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Struct } from '../type';\nexport class MapVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], true);\n    }\n    asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpELE1BQU0sT0FBTyxTQUF1RCxTQUFRLFVBQW1CO0lBQS9GOztRQUNXLGFBQVEsR0FBVyxHQUFHLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUl6RSxDQUFDO0lBSFUsUUFBUTtRQUNYLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL21hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuL3Jvdyc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTWFwXywgU3RydWN0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBNYXBWZWN0b3I8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBCYXNlVmVjdG9yPE1hcF88VD4+IHtcbiAgICBwdWJsaWMgcm93UHJveHk6IFJvdzxUPiA9IFJvdy5uZXc8VD4odGhpcy50eXBlLmNoaWxkcmVuIHx8IFtdLCB0cnVlKTtcbiAgICBwdWJsaWMgYXNTdHJ1Y3QoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KHRoaXMuZGF0YS5jbG9uZShuZXcgU3RydWN0KHRoaXMudHlwZS5jaGlsZHJlbikpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class NullVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9udWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxVQUFXLFNBQVEsVUFBZ0I7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvbnVsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBOdWxsIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNsYXNzIE51bGxWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPE51bGw+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Map_ } from '../type';\nexport class StructVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], false);\n    }\n    asMap(keysSorted = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBWSxJQUFJLEVBQVUsTUFBTSxTQUFTLENBQUM7QUFFakQsTUFBTSxPQUFPLFlBQTBELFNBQVEsVUFBcUI7SUFBcEc7O1FBQ1csYUFBUSxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBSTFFLENBQUM7SUFIVSxLQUFLLENBQUMsYUFBc0IsS0FBSztRQUNwQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3Ivc3RydWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFJvdyB9IGZyb20gJy4vcm93JztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IERhdGFUeXBlLCBNYXBfLCBTdHJ1Y3QgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFN0cnVjdFZlY3RvcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIEJhc2VWZWN0b3I8U3RydWN0PFQ+PiB7XG4gICAgcHVibGljIHJvd1Byb3h5OiBSb3c8VD4gPSBSb3cubmV3PFQ+KHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSwgZmFsc2UpO1xuICAgIHB1YmxpYyBhc01hcChrZXlzU29ydGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBNYXBfKHRoaXMudHlwZS5jaGlsZHJlbiwga2V5c1NvcnRlZCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimestampVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector {\n}\nexport class TimestampMillisecondVector extends TimestampVector {\n}\nexport class TimestampMicrosecondVector extends TimestampVector {\n}\nexport class TimestampNanosecondVector extends TimestampVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lc3RhbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLGVBQWlELFNBQVEsVUFBYTtJQUMvRSxZQUFZLElBQWE7UUFDckIsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBQ0QsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWdDO0NBQUc7QUFDOUUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGVBQW9DO0NBQUciLCJmaWxlIjoidmVjdG9yL3RpbWVzdGFtcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcFZlY3RvcjxUIGV4dGVuZHMgVGltZXN0YW1wID0gVGltZXN0YW1wPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCAyKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZXN0YW1wU2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcFNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWNyb3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBOYW5vc2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcE5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimeVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\nexport class TimeSecondVector extends TimeVector {\n}\nexport class TimeMillisecondVector extends TimeVector {\n}\nexport class TimeMicrosecondVector extends TimeVector {\n}\nexport class TimeNanosecondVector extends TimeVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFrQyxTQUFRLFVBQWE7SUFDaEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0o7QUFDRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBc0I7Q0FBRztBQUMvRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBMEI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvdGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWUsIFRpbWVTZWNvbmQsIFRpbWVNaWxsaXNlY29uZCwgVGltZU1pY3Jvc2Vjb25kLCBUaW1lTmFub3NlY29uZCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgVGltZVZlY3RvcjxUIGV4dGVuZHMgVGltZSA9IFRpbWU+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIDEgKyBOdW1iZXIoZGF0YS50eXBlLmJpdFdpZHRoID4gMzIpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZVNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZVNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWlsbGlzZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWljcm9zZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTmFub3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZU5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class UnionVector extends BaseVector {\n    get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\nexport class DenseUnionVector extends UnionVector {\n    get valueOffsets() { return this.data.valueOffsets; }\n}\nexport class SparseUnionVector extends UnionVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91bmlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sV0FBcUMsU0FBUSxVQUFhO0lBQ25FLElBQVcsa0JBQWtCLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztDQUMzRTtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUF1QjtJQUN6RCxJQUFXLFlBQVksS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBYSxDQUFDLENBQUMsQ0FBQztDQUNoRTtBQUVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUF3QjtDQUFHIiwiZmlsZSI6InZlY3Rvci91bmlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFVuaW9uLCBEZW5zZVVuaW9uLCBTcGFyc2VVbmlvbn0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBVbmlvblZlY3RvcjxUIGV4dGVuZHMgVW5pb24gPSBVbmlvbj4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgZ2V0IHR5cGVJZFRvQ2hpbGRJbmRleCgpIHsgcmV0dXJuIHRoaXMudHlwZS50eXBlSWRUb0NoaWxkSW5kZXg7IH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxEZW5zZVVuaW9uPiB7XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzLmRhdGEudmFsdWVPZmZzZXRzITsgfVxufVxuXG5leHBvcnQgY2xhc3MgU3BhcnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxTcGFyc2VVbmlvbj4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../util/utf8';\nexport class Utf8Vector extends BaseVector {\n    /** @nocollapse */\n    static from(values) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => ((!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91dGY4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBRTFDLE1BQU0sT0FBTyxVQUFXLFNBQVEsVUFBZ0I7SUFDNUMsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFnQjtRQUMvQixNQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBQzdCLE1BQU0sSUFBSSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsTUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLE9BQU8sRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUUsQ0FBQyxDQUNqRCxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxDQUFDLElBQUksSUFBSSxDQUFDLElBQUksT0FBTyxDQUN2RSxFQUFFLElBQUksV0FBVyxDQUFDLE1BQU0sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUN2QyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxPQUFPLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztJQUNoRixDQUFDO0lBQ00sUUFBUTtRQUNYLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNyRCxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL3V0ZjguanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgQmluYXJ5LCBVdGY4IH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBlbmNvZGVVdGY4IH0gZnJvbSAnLi4vdXRpbC91dGY4JztcblxuZXhwb3J0IGNsYXNzIFV0ZjhWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPFV0Zjg+IHtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb20odmFsdWVzOiBzdHJpbmdbXSkge1xuICAgICAgICBjb25zdCBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoO1xuICAgICAgICBjb25zdCBkYXRhID0gZW5jb2RlVXRmOCh2YWx1ZXMuam9pbignJykpO1xuICAgICAgICBjb25zdCBvZmZzZXRzID0gdmFsdWVzLnJlZHVjZSgob2Zmc2V0cywgc3RyLCBpZHgpID0+IChcbiAgICAgICAgICAgICghKG9mZnNldHNbaWR4ICsgMV0gPSBvZmZzZXRzW2lkeF0gKyBzdHIubGVuZ3RoKSB8fCB0cnVlKSAmJiBvZmZzZXRzXG4gICAgICAgICksIG5ldyBVaW50MzJBcnJheSh2YWx1ZXMubGVuZ3RoICsgMSkpO1xuICAgICAgICByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLlV0ZjgobmV3IFV0ZjgoKSwgMCwgbGVuZ3RoLCAwLCBudWxsLCBvZmZzZXRzLCBkYXRhKSk7XG4gICAgfVxuICAgIHB1YmxpYyBhc0JpbmFyeSgpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBCaW5hcnkoKSkpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, } from './type';\nexport class Visitor {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    visit(node, ...args) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) { return null; }\n    visitBool(_node, ..._args) { return null; }\n    visitInt(_node, ..._args) { return null; }\n    visitFloat(_node, ..._args) { return null; }\n    visitUtf8(_node, ..._args) { return null; }\n    visitBinary(_node, ..._args) { return null; }\n    visitFixedSizeBinary(_node, ..._args) { return null; }\n    visitDate(_node, ..._args) { return null; }\n    visitTimestamp(_node, ..._args) { return null; }\n    visitTime(_node, ..._args) { return null; }\n    visitDecimal(_node, ..._args) { return null; }\n    visitList(_node, ..._args) { return null; }\n    visitStruct(_node, ..._args) { return null; }\n    visitUnion(_node, ..._args) { return null; }\n    visitDictionary(_node, ..._args) { return null; }\n    visitInterval(_node, ..._args) { return null; }\n    visitFixedSizeList(_node, ..._args) { return null; }\n    visitMap(_node, ..._args) { return null; }\n}\n/** @ignore */\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n    let fn = null;\n    let dtype = Type.NONE;\n    // tslint:disable\n    if (node instanceof Data) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof Vector) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof DataType) {\n        dtype = inferDType(node);\n    }\n    else if (typeof (dtype = node) !== 'number') {\n        dtype = Type[node];\n    }\n    switch (dtype) {\n        case Type.Null:\n            fn = visitor.visitNull;\n            break;\n        case Type.Bool:\n            fn = visitor.visitBool;\n            break;\n        case Type.Int:\n            fn = visitor.visitInt;\n            break;\n        case Type.Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case Type.Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case Type.Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case Type.Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case Type.Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case Type.Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case Type.Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case Type.Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case Type.Float:\n            fn = visitor.visitFloat;\n            break;\n        case Type.Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case Type.Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case Type.Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case Type.Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case Type.Binary:\n            fn = visitor.visitBinary;\n            break;\n        case Type.FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case Type.Date:\n            fn = visitor.visitDate;\n            break;\n        case Type.DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case Type.DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case Type.Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case Type.TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case Type.Time:\n            fn = visitor.visitTime;\n            break;\n        case Type.TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case Type.TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case Type.TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case Type.TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case Type.Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case Type.List:\n            fn = visitor.visitList;\n            break;\n        case Type.Struct:\n            fn = visitor.visitStruct;\n            break;\n        case Type.Union:\n            fn = visitor.visitUnion;\n            break;\n        case Type.DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case Type.SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case Type.Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case Type.Interval:\n            fn = visitor.visitInterval;\n            break;\n        case Type.IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case Type.IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case Type.FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case Type.Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === 'function')\n        return fn;\n    if (!throwIfNotFound)\n        return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\n/** @ignore */\nfunction inferDType(type) {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = type;\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch (type.precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch (type.unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch (type.unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch (type.mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n// Add these here so they're picked up by the externs creator\n// in the build, and closure-compiler doesn't minify them away\nVisitor.prototype.visitInt8 = null;\nVisitor.prototype.visitInt16 = null;\nVisitor.prototype.visitInt32 = null;\nVisitor.prototype.visitInt64 = null;\nVisitor.prototype.visitUint8 = null;\nVisitor.prototype.visitUint16 = null;\nVisitor.prototype.visitUint32 = null;\nVisitor.prototype.visitUint64 = null;\nVisitor.prototype.visitFloat16 = null;\nVisitor.prototype.visitFloat32 = null;\nVisitor.prototype.visitFloat64 = null;\nVisitor.prototype.visitDateDay = null;\nVisitor.prototype.visitDateMillisecond = null;\nVisitor.prototype.visitTimestampSecond = null;\nVisitor.prototype.visitTimestampMillisecond = null;\nVisitor.prototype.visitTimestampMicrosecond = null;\nVisitor.prototype.visitTimestampNanosecond = null;\nVisitor.prototype.visitTimeSecond = null;\nVisitor.prototype.visitTimeMillisecond = null;\nVisitor.prototype.visitTimeMicrosecond = null;\nVisitor.prototype.visitTimeNanosecond = null;\nVisitor.prototype.visitDenseUnion = null;\nVisitor.prototype.visitSparseUnion = null;\nVisitor.prototype.visitIntervalDayTime = null;\nVisitor.prototype.visitIntervalYearMonth = null;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { decodeUtf8 } from '../util/utf8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport class GetVisitor extends Visitor {\n}\n/** @ignore */ const epochDaysToMs = (data, index) => 86400000 * data[index];\n/** @ignore */ const epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\n/** @ignore */ const epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\n/** @ignore */ const epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\n/** @ignore */ const epochMillisecondsToDate = (epochMs) => new Date(epochMs);\n/** @ignore */ const epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// /** @ignore */ const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// /** @ignore */ const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\n/** @ignore */ const epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\n/** @ignore */\nconst getNull = (_vector, _index) => null;\n/** @ignore */\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null;\n};\n/** @ignore */\nconst getBool = ({ offset, values }, index) => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\n/** @ignore */\nconst getDateDay = ({ values }, index) => epochDaysToDate(values, index);\n/** @ignore */\nconst getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);\n/** @ignore */\nconst getNumeric = ({ stride, values }, index) => values[stride * index];\n/** @ignore */\nconst getFloat16 = ({ stride, values }, index) => (values[stride * index] - 32767) / 32767;\n/** @ignore */\nconst getNumericX2 = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\n/** @ignore */\nconst getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);\n/** @ignore */\nconst getUtf8 = ({ values, valueOffsets }, index) => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null;\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInt = (vector, index) => (vector.type.bitWidth < 64\n    ? getNumeric(vector, index)\n    : getNumericX2(vector, index));\n/* istanbul ignore next */\n/** @ignore */\nconst getFloat = (vector, index) => (vector.type.precision !== Precision.HALF\n    ? getNumeric(vector, index)\n    : getFloat16(vector, index));\n/* istanbul ignore next */\n/** @ignore */\nconst getDate = (vector, index) => (vector.type.unit === DateUnit.DAY\n    ? getDateDay(vector, index)\n    : getDateMillisecond(vector, index));\n/** @ignore */\nconst getTimestampSecond = ({ values }, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);\n/** @ignore */\nconst getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);\n/* istanbul ignore next */\n/** @ignore */\nconst getTimestamp = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(vector, index);\n    }\n};\n/** @ignore */\nconst getTimeSecond = ({ values, stride }, index) => values[stride * index];\n/** @ignore */\nconst getTimeMillisecond = ({ values, stride }, index) => values[stride * index];\n/** @ignore */\nconst getTimeMicrosecond = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getTimeNanosecond = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\n/* istanbul ignore next */\n/** @ignore */\nconst getTime = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(vector, index);\n    }\n};\n/** @ignore */\nconst getDecimal = ({ values }, index) => values.subarray(4 * index, 4 * (index + 1));\n/** @ignore */\nconst getList = (vector, index) => {\n    const child = vector.getChildAt(0), { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]);\n};\n/** @ignore */\nconst getNested = (vector, index) => {\n    return vector.rowProxy.bind(vector, index);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getUnion = (vector, index) => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector, index) :\n        getSparseUnion(vector, index);\n};\n/** @ignore */\nconst getDenseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\n/** @ignore */\nconst getSparseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\n/** @ignore */\nconst getDictionary = (vector, index) => {\n    return vector.getValue(vector.getKey(index));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst getInterval = (vector, index) => (vector.type.unit === IntervalUnit.DAY_TIME)\n    ? getIntervalDayTime(vector, index)\n    : getIntervalYearMonth(vector, index);\n/** @ignore */\nconst getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\n/** @ignore */\nconst getIntervalYearMonth = ({ values }, index) => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\n/** @ignore */\nconst getFixedSizeList = (vector, index) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getNumericX2;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getNumericX2;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getNested;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getNested;\nexport const instance = new GetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { encodeUtf8 } from '../util/utf8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport class SetVisitor extends Visitor {\n}\n/** @ignore */\nconst setEpochMsToDays = (data, index, epochMs) => { data[index] = (epochMs / 86400000) | 0; };\n/** @ignore */\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs * 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs * 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs * 1000000) / 4294967296) | 0;\n};\n/** @ignore */\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\n/** @ignore */\nconst setBool = ({ offset, values }, index, val) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n};\n/** @ignore */\nconst setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };\n/** @ignore */\nconst setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\n/** @ignore */\nconst setNumeric = ({ stride, values }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setFloat16 = ({ stride, values }, index, value) => { values[stride * index] = (value * 32767) + 32767; };\n/** @ignore */\nconst setNumericX2 = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\n/** @ignore */\nconst setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\n/** @ignore */\nconst setUtf8 = ({ values, valueOffsets }, index, value) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setInt = (vector, index, value) => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector, index, value)\n        : setNumericX2(vector, index, value);\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setFloat = (vector, index, value) => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector, index, value)\n        : setFloat16(vector, index, value);\n};\n/* istanbul ignore next */\nconst getDate = (vector, index, value) => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\n/** @ignore */\nconst setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\n/** @ignore */\nconst setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\n/** @ignore */\nconst setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\n/* istanbul ignore next */\n/** @ignore */\nconst setTimestamp = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);\n    }\n};\n/** @ignore */\nconst setTimeSecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMillisecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\n/** @ignore */\nconst setTimeMicrosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setTimeNanosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/* istanbul ignore next */\n/** @ignore */\nconst setTime = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);\n    }\n};\n/** @ignore */\nconst setDecimal = ({ values }, index, value) => { values.set(value.subarray(0, 4), 4 * index); };\n/** @ignore */\nconst setList = (vector, index, value) => {\n    const values = vector.getChildAt(0);\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\n/** @ignore */\nconst setNested = (vector, index, value) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setUnion = (vector, index, value) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector, index, value) :\n        setSparseUnion(vector, index, value);\n};\n/** @ignore */\nconst setDenseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\n/** @ignore */\nconst setSparseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\n/** @ignore */\nconst setDictionary = (vector, index, value) => {\n    const key = vector.getKey(index);\n    if (key !== null) {\n        vector.setValue(key, value);\n    }\n};\n/* istanbul ignore next */\n/** @ignore */\nconst setIntervalValue = (vector, index, value) => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\n/** @ignore */\nconst setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\n/** @ignore */\nconst setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };\n/** @ignore */\nconst setFixedSizeList = (vector, index, value) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(idx));\n    }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = getDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setNested;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setNested;\nexport const instance = new SetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nexport class IndexOfVisitor extends Visitor {\n}\n/** @ignore */\nfunction nullIndexOf(vector, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\n/** @ignore */\nfunction indexOfNull(vector, fromIndex) {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfValue(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\n/** @ignore */\nfunction indexOfUnion(vector, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\nexport const instance = new IndexOfVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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Q2xFLGNBQWMsQ0FBQyxTQUFTLENBQUMsVUFBVSxHQUFrQixZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxlQUFlLEdBQWEsWUFBWSxDQUFDO0FBQ2xFLGNBQWMsQ0FBQyxTQUFTLENBQUMsZ0JBQWdCLEdBQVksWUFBWSxDQUFDO0FBQ2xFLGNBQWMsQ0FBQyxTQUFTLENBQUMsZUFBZSxHQUFhLFlBQVksQ0FBQztBQUNsRSxjQUFjLENBQUMsU0FBUyxDQUFDLGFBQWEsR0FBZSxZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxvQkFBb0IsR0FBUSxZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxzQkFBc0IsR0FBTSxZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxrQkFBa0IsR0FBVSxZQUFZLENBQUM7QUFDbEUsY0FBYyxDQUFDLFNBQVMsQ0FBQyxRQUFRLEdBQW9CLFlBQVksQ0FBQztBQUVsRSxNQUFNLENBQUMsTUFBTSxRQUFRLEdBQUcsSUFBSSxjQUFjLEVBQUUsQ0FBQyIsImZpbGUiOiJ2aXNpdG9yL2luZGV4b2YuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVHlwZSB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgVmlzaXRvciB9IGZyb20gJy4uL3Zpc2l0b3InO1xuaW1wb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBnZXRCb29sLCBpdGVyYXRlQml0cyB9IGZyb20gJy4uL3V0aWwvYml0JztcbmltcG9ydCB7IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yIH0gZnJvbSAnLi4vdXRpbC92ZWN0b3InO1xuaW1wb3J0IHtcbiAgICBEYXRhVHlwZSwgRGljdGlvbmFyeSxcbiAgICBCb29sLCBOdWxsLCBVdGY4LCBCaW5hcnksIERlY2ltYWwsIEZpeGVkU2l6ZUJpbmFyeSwgTGlzdCwgRml4ZWRTaXplTGlzdCwgTWFwXywgU3RydWN0LFxuICAgIEZsb2F0LCBGbG9hdDE2LCBGbG9hdDMyLCBGbG9hdDY0LFxuICAgIEludCwgVWludDgsIFVpbnQxNiwgVWludDMyLCBVaW50NjQsIEludDgsIEludDE2LCBJbnQzMiwgSW50NjQsXG4gICAgRGF0ZV8sIERhdGVEYXksIERhdGVNaWxsaXNlY29uZCxcbiAgICBJbnRlcnZhbCwgSW50ZXJ2YWxEYXlUaW1lLCBJbnRlcnZhbFllYXJNb250aCxcbiAgICBUaW1lLCBUaW1lU2Vjb25kLCBUaW1lTWlsbGlzZWNvbmQsIFRpbWVNaWNyb3NlY29uZCwgVGltZU5hbm9zZWNvbmQsXG4gICAgVGltZXN0YW1wLCBUaW1lc3RhbXBTZWNvbmQsIFRpbWVzdGFtcE1pbGxpc2Vjb25kLCBUaW1lc3RhbXBNaWNyb3NlY29uZCwgVGltZXN0YW1wTmFub3NlY29uZCxcbiAgICBVbmlvbiwgRGVuc2VVbmlvbiwgU3BhcnNlVW5pb24sXG59IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEluZGV4T2ZWaXNpdG9yIGV4dGVuZHMgVmlzaXRvciB7XG4gICAgdmlzaXRNYW55IDxUIGV4dGVuZHMgVmVjdG9yPiAgKG5vZGVzOiBUW10sIHZhbHVlczogKFRbJ1RWYWx1ZSddIHwgbnVsbClbXSwgaW5kaWNlczogKG51bWJlciB8IHVuZGVmaW5lZClbXSk6IG51bWJlcltdO1xuICAgIHZpc2l0ICAgICA8VCBleHRlbmRzIFZlY3Rvcj4gIChub2RlOiBULCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlciAgICAgICAgICAgICk6IG51bWJlcjtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBUeXBlPiAgICAobm9kZTogVCAgICAgICAgICk6ICh2ZWN0b3I6IFZlY3RvcjxUPiwgdmFsdWU6IFZlY3RvcjxUPlsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIGdldFZpc2l0Rm48VCBleHRlbmRzIERhdGFUeXBlPihub2RlOiBWZWN0b3I8VD4gKTogKHZlY3RvcjogVmVjdG9yPFQ+LCB2YWx1ZTogICAgICAgICBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKSA9PiBudW1iZXI7XG4gICAgZ2V0VmlzaXRGbjxUIGV4dGVuZHMgRGF0YVR5cGU+KG5vZGU6IERhdGE8VD4gICApOiAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiAgICAgICAgIFRbJ1RWYWx1ZSddIHwgbnVsbCwgaW5kZXg/OiBudW1iZXIpID0+IG51bWJlcjtcbiAgICBnZXRWaXNpdEZuPFQgZXh0ZW5kcyBEYXRhVHlwZT4obm9kZTogVCAgICAgICAgICk6ICh2ZWN0b3I6IFZlY3RvcjxUPiwgdmFsdWU6ICAgICAgICAgVFsnVFZhbHVlJ10gfCBudWxsLCBpbmRleD86IG51bWJlcikgPT4gbnVtYmVyO1xuICAgIHZpc2l0TnVsbCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBOdWxsPiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0Qm9vbCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBCb29sPiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50ICAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQ+ICAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50OCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQ4PiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50MTYgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQxNj4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50MzIgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQzMj4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50NjQgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnQ2ND4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VWludDggICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50OD4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VWludDE2ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50MTY+ICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VWludDMyICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50MzI+ICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VWludDY0ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVaW50NjQ+ICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RmxvYXQgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdD4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RmxvYXQxNiAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdDE2PiAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RmxvYXQzMiAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdDMyPiAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RmxvYXQ2NCAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBGbG9hdDY0PiAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VXRmOCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVdGY4PiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0QmluYXJ5ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBCaW5hcnk+ICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0Rml4ZWRTaXplQmluYXJ5ICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVCaW5hcnk+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGF0ZSAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBEYXRlXz4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGF0ZURheSAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBEYXRlRGF5PiAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGF0ZU1pbGxpc2Vjb25kICAgICAgPFQgZXh0ZW5kcyBEYXRlTWlsbGlzZWNvbmQ+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZXN0YW1wICAgICAgICAgICAgPFQgZXh0ZW5kcyBUaW1lc3RhbXA+ICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZXN0YW1wU2Vjb25kICAgICAgPFQgZXh0ZW5kcyBUaW1lc3RhbXBTZWNvbmQ+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZXN0YW1wTWlsbGlzZWNvbmQgPFQgZXh0ZW5kcyBUaW1lc3RhbXBNaWxsaXNlY29uZD4odmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZXN0YW1wTWljcm9zZWNvbmQgPFQgZXh0ZW5kcyBUaW1lc3RhbXBNaWNyb3NlY29uZD4odmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZXN0YW1wTmFub3NlY29uZCAgPFQgZXh0ZW5kcyBUaW1lc3RhbXBOYW5vc2Vjb25kPiAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZSAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBUaW1lPiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZVNlY29uZCAgICAgICAgICAgPFQgZXh0ZW5kcyBUaW1lU2Vjb25kPiAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZU1pbGxpc2Vjb25kICAgICAgPFQgZXh0ZW5kcyBUaW1lTWlsbGlzZWNvbmQ+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZU1pY3Jvc2Vjb25kICAgICAgPFQgZXh0ZW5kcyBUaW1lTWljcm9zZWNvbmQ+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VGltZU5hbm9zZWNvbmQgICAgICAgPFQgZXh0ZW5kcyBUaW1lTmFub3NlY29uZD4gICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGVjaW1hbCAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBEZWNpbWFsPiAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0TGlzdCAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBMaXN0PiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0U3RydWN0ICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBTdHJ1Y3Q+ICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0VW5pb24gICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBVbmlvbj4gICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGVuc2VVbmlvbiAgICAgICAgICAgPFQgZXh0ZW5kcyBEZW5zZVVuaW9uPiAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0U3BhcnNlVW5pb24gICAgICAgICAgPFQgZXh0ZW5kcyBTcGFyc2VVbmlvbj4gICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0RGljdGlvbmFyeSAgICAgICAgICAgPFQgZXh0ZW5kcyBEaWN0aW9uYXJ5PiAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50ZXJ2YWwgICAgICAgICAgICAgPFQgZXh0ZW5kcyBJbnRlcnZhbD4gICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50ZXJ2YWxEYXlUaW1lICAgICAgPFQgZXh0ZW5kcyBJbnRlcnZhbERheVRpbWU+ICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0SW50ZXJ2YWxZZWFyTW9udGggICAgPFQgZXh0ZW5kcyBJbnRlcnZhbFllYXJNb250aD4gICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0Rml4ZWRTaXplTGlzdCAgICAgICAgPFQgZXh0ZW5kcyBGaXhlZFNpemVMaXN0PiAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xuICAgIHZpc2l0TWFwICAgICAgICAgICAgICAgICAgPFQgZXh0ZW5kcyBNYXBfPiAgICAgICAgICAgICAgICAodmVjdG9yOiBWZWN0b3I8VD4sIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwsIGluZGV4PzogbnVtYmVyKTogbnVtYmVyO1xufVxuXG5leHBvcnQgY2xhc3MgSW5kZXhPZlZpc2l0b3IgZXh0ZW5kcyBWaXNpdG9yIHtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIG51bGxJbmRleE9mKHZlY3RvcjogVmVjdG9yPE51bGw+LCBzZWFyY2hFbGVtZW50PzogbnVsbCkge1xuICAgIC8vIGlmIHlvdSdyZSBsb29raW5nIGZvciBudWxscyBhbmQgdGhlIHZlY3RvciBpc24ndCBlbXB0eSwgd2UndmUgZ290ICdlbSFcbiAgICByZXR1cm4gc2VhcmNoRWxlbWVudCA9PT0gbnVsbCAmJiB2ZWN0b3IubGVuZ3RoID4gMCA/IDAgOiAtMTtcbn1cblxuLyoqIEBpZ25vcmUgKi9cbmZ1bmN0aW9uIGluZGV4T2ZOdWxsPFQgZXh0ZW5kcyBEYXRhVHlwZT4odmVjdG9yOiBWZWN0b3I8VD4sIGZyb21JbmRleD86IG51bWJlcik6IG51bWJlciB7XG4gICAgY29uc3QgeyBudWxsQml0bWFwIH0gPSB2ZWN0b3I7XG4gICAgaWYgKCFudWxsQml0bWFwIHx8IHZlY3Rvci5udWxsQ291bnQgPD0gMCkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IGlzVmFsaWQgb2YgaXRlcmF0ZUJpdHMobnVsbEJpdG1hcCwgdmVjdG9yLmRhdGEub2Zmc2V0ICsgKGZyb21JbmRleCB8fCAwKSwgdmVjdG9yLmxlbmd0aCwgbnVsbEJpdG1hcCwgZ2V0Qm9vbCkpIHtcbiAgICAgICAgaWYgKCFpc1ZhbGlkKSB7IHJldHVybiBpOyB9XG4gICAgICAgICsraTtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG4vKiogQGlnbm9yZSAqL1xuZnVuY3Rpb24gaW5kZXhPZlZhbHVlPFQgZXh0ZW5kcyBEYXRhVHlwZT4odmVjdG9yOiBWZWN0b3I8VD4sIHNlYXJjaEVsZW1lbnQ/OiBUWydUVmFsdWUnXSB8IG51bGwsIGZyb21JbmRleD86IG51bWJlcik6IG51bWJlciB7XG4gICAgaWYgKHNlYXJjaEVsZW1lbnQgPT09IHVuZGVmaW5lZCkgeyByZXR1cm4gLTE7IH1cbiAgICBpZiAoc2VhcmNoRWxlbWVudCA9PT0gbnVsbCkgeyByZXR1cm4gaW5kZXhPZk51bGwodmVjdG9yLCBmcm9tSW5kZXgpOyB9XG4gICAgY29uc3QgY29tcGFyZSA9IGNyZWF0ZUVsZW1lbnRDb21wYXJhdG9yKHNlYXJjaEVsZW1lbnQpO1xuICAgIGZvciAobGV0IGkgPSAoZnJvbUluZGV4IHx8IDApIC0gMSwgbiA9IHZlY3Rvci5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChjb21wYXJlKHZlY3Rvci5nZXQoaSkpKSB7XG4gICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTE7XG59XG5cbi8qKiBAaWdub3JlICovXG5mdW5jdGlvbiBpbmRleE9mVW5pb248VCBleHRlbmRzIERhdGFUeXBlPih2ZWN0b3I6IFZlY3RvcjxUPiwgc2VhcmNoRWxlbWVudD86IFRbJ1RWYWx1ZSddIHwgbnVsbCwgZnJvbUluZGV4PzogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAvLyBVbmlvbnMgYXJlIHNwZWNpYWwgLS0gdGhleSBkbyBoYXZlIGEgbnVsbEJpdG1hcCwgYnV0IHNvIGNhbiB0aGVpciBjaGlsZHJlbi5cbiAgICAvLyBJZiB0aGUgc2VhcmNoRWxlbWVudCBpcyBudWxsLCB3ZSBkb24ndCBrbm93IHdoZXRoZXIgaXQgY2FtZSBmcm9tIHRoZSBVbmlvbidzXG4gICAgLy8gYml0bWFwIG9yIG9uZSBvZiBpdHMgY2hpbGRyZW5zJy4gU28gd2UgZG9uJ3QgaW50ZXJyb2dhdGUgdGhlIFVuaW9uJ3MgYml0bWFwLFxuICAgIC8vIHNpbmNlIHRoYXQgd2lsbCByZXBvcnQgdGhlIHdyb25nIGluZGV4IGlmIGEgY2hpbGQgaGFzIGEgbnVsbCBiZWZvcmUgdGhlIFVuaW9uLlxuICAgIGNvbnN0IGNvbXBhcmUgPSBjcmVhdGVFbGVtZW50Q29tcGFyYXRvcihzZWFyY2hFbGVtZW50KTtcbiAgICBmb3IgKGxldCBpID0gKGZyb21JbmRleCB8fCAwKSAtIDEsIG4gPSB2ZWN0b3IubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICBpZiAoY29tcGFyZSh2ZWN0b3IuZ2V0KGkpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuXG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXROdWxsICAgICAgICAgICAgICAgICA9ICBudWxsSW5kZXhPZjtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEJvb2wgICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50ICAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnQ4ICAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEludDE2ICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50MzIgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnQ2NCAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFVpbnQ4ICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VWludDE2ICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRVaW50MzIgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFVpbnQ2NCAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RmxvYXQgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRGbG9hdDE2ICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEZsb2F0MzIgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RmxvYXQ2NCAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRVdGY4ICAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEJpbmFyeSAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0Rml4ZWRTaXplQmluYXJ5ICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXREYXRlICAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdERhdGVEYXkgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RGF0ZU1pbGxpc2Vjb25kICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lc3RhbXAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcFNlY29uZCAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZXN0YW1wTWlsbGlzZWNvbmQgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lc3RhbXBNaWNyb3NlY29uZCA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWVzdGFtcE5hbm9zZWNvbmQgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZSAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lU2Vjb25kICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFRpbWVNaWxsaXNlY29uZCAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0VGltZU1pY3Jvc2Vjb25kICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRUaW1lTmFub3NlY29uZCAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdERlY2ltYWwgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0TGlzdCAgICAgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRTdHJ1Y3QgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdFVuaW9uICAgICAgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0RGVuc2VVbmlvbiAgICAgICAgICAgPSBpbmRleE9mVW5pb247XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRTcGFyc2VVbmlvbiAgICAgICAgICA9IGluZGV4T2ZVbmlvbjtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdERpY3Rpb25hcnkgICAgICAgICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0SW50ZXJ2YWwgICAgICAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRJbnRlcnZhbERheVRpbWUgICAgICA9IGluZGV4T2ZWYWx1ZTtcbkluZGV4T2ZWaXNpdG9yLnByb3RvdHlwZS52aXNpdEludGVydmFsWWVhck1vbnRoICAgID0gaW5kZXhPZlZhbHVlO1xuSW5kZXhPZlZpc2l0b3IucHJvdG90eXBlLnZpc2l0Rml4ZWRTaXplTGlzdCAgICAgICAgPSBpbmRleE9mVmFsdWU7XG5JbmRleE9mVmlzaXRvci5wcm90b3R5cGUudmlzaXRNYXAgICAgICAgICAgICAgICAgICA9IGluZGV4T2ZWYWx1ZTtcblxuZXhwb3J0IGNvbnN0IGluc3RhbmNlID0gbmV3IEluZGV4T2ZWaXNpdG9yKCk7XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nexport class IteratorVisitor extends Visitor {\n}\n/** @ignore */\nfunction nullableIterator(vector) {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, (vec, idx, nullByte, nullBit) => ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null);\n}\n/** @ignore */\nfunction vectorIterator(vector) {\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator(vector);\n    }\n    const { type, typeId, length } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && ((typeId === Type.Timestamp) ||\n        (typeId === Type.Int && type.bitWidth !== 64) ||\n        (typeId === Type.Time && type.bitWidth !== 64) ||\n        (typeId === Type.Float && type.precision > 0 /* Precision.HALF */))) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\nexport const instance = new IteratorVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nexport class ToArrayVisitor extends Visitor {\n}\n/** @ignore */\nfunction arrayOfVector(vector) {\n    const { type, length, stride } = vector;\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Decimal:\n        case Type.Time:\n        case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return type.precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)];\n}\nToArrayVisitor.prototype.visitNull = arrayOfVector;\nToArrayVisitor.prototype.visitBool = arrayOfVector;\nToArrayVisitor.prototype.visitInt = arrayOfVector;\nToArrayVisitor.prototype.visitInt8 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16 = arrayOfVector;\nToArrayVisitor.prototype.visitInt32 = arrayOfVector;\nToArrayVisitor.prototype.visitInt64 = arrayOfVector;\nToArrayVisitor.prototype.visitUint8 = arrayOfVector;\nToArrayVisitor.prototype.visitUint16 = arrayOfVector;\nToArrayVisitor.prototype.visitUint32 = arrayOfVector;\nToArrayVisitor.prototype.visitUint64 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64 = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;\nToArrayVisitor.prototype.visitDate = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTime = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal = arrayOfVector;\nToArrayVisitor.prototype.visitList = arrayOfVector;\nToArrayVisitor.prototype.visitStruct = arrayOfVector;\nToArrayVisitor.prototype.visitUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary = arrayOfVector;\nToArrayVisitor.prototype.visitInterval = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;\nToArrayVisitor.prototype.visitMap = arrayOfVector;\nexport const instance = new ToArrayVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/* istanbul ignore file */\nimport { Visitor } from '../visitor';\nimport { TimeUnit } from '../enum';\n/** @ignore */ const sum = (x, y) => x + y;\n/** @ignore */ const variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;\nexport class ByteWidthVisitor extends Visitor {\n    visitNull(____) { return 0; }\n    visitInt(type) { return type.bitWidth / 8; }\n    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitBool(____) { return 1 / 8; }\n    visitDecimal(____) { return 16; }\n    visitDate(type) { return (type.unit + 1) * 4; }\n    visitTime(type) { return type.bitWidth / 8; }\n    visitTimestamp(type) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    visitInterval(type) { return (type.unit + 1) * 4; }\n    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitFixedSizeBinary(type) { return type.byteWidth; }\n    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitDictionary(type) { return this.visit(type.indices); }\n    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }\n    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\nexport const instance = new ByteWidthVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { BinaryVector } from '../vector/binary';\nimport { BoolVector } from '../vector/bool';\nimport { DateVector, DateDayVector, DateMillisecondVector } from '../vector/date';\nimport { DecimalVector } from '../vector/decimal';\nimport { DictionaryVector } from '../vector/dictionary';\nimport { FixedSizeBinaryVector } from '../vector/fixedsizebinary';\nimport { FixedSizeListVector } from '../vector/fixedsizelist';\nimport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from '../vector/float';\nimport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from '../vector/interval';\nimport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from '../vector/int';\nimport { ListVector } from '../vector/list';\nimport { MapVector } from '../vector/map';\nimport { NullVector } from '../vector/null';\nimport { StructVector } from '../vector/struct';\nimport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from '../vector/timestamp';\nimport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from '../vector/time';\nimport { UnionVector, DenseUnionVector, SparseUnionVector } from '../vector/union';\nimport { Utf8Vector } from '../vector/utf8';\nexport class GetVectorConstructor extends Visitor {\n    visitNull() { return NullVector; }\n    visitBool() { return BoolVector; }\n    visitInt() { return IntVector; }\n    visitInt8() { return Int8Vector; }\n    visitInt16() { return Int16Vector; }\n    visitInt32() { return Int32Vector; }\n    visitInt64() { return Int64Vector; }\n    visitUint8() { return Uint8Vector; }\n    visitUint16() { return Uint16Vector; }\n    visitUint32() { return Uint32Vector; }\n    visitUint64() { return Uint64Vector; }\n    visitFloat() { return FloatVector; }\n    visitFloat16() { return Float16Vector; }\n    visitFloat32() { return Float32Vector; }\n    visitFloat64() { return Float64Vector; }\n    visitUtf8() { return Utf8Vector; }\n    visitBinary() { return BinaryVector; }\n    visitFixedSizeBinary() { return FixedSizeBinaryVector; }\n    visitDate() { return DateVector; }\n    visitDateDay() { return DateDayVector; }\n    visitDateMillisecond() { return DateMillisecondVector; }\n    visitTimestamp() { return TimestampVector; }\n    visitTimestampSecond() { return TimestampSecondVector; }\n    visitTimestampMillisecond() { return TimestampMillisecondVector; }\n    visitTimestampMicrosecond() { return TimestampMicrosecondVector; }\n    visitTimestampNanosecond() { return TimestampNanosecondVector; }\n    visitTime() { return TimeVector; }\n    visitTimeSecond() { return TimeSecondVector; }\n    visitTimeMillisecond() { return TimeMillisecondVector; }\n    visitTimeMicrosecond() { return TimeMicrosecondVector; }\n    visitTimeNanosecond() { return TimeNanosecondVector; }\n    visitDecimal() { return DecimalVector; }\n    visitList() { return ListVector; }\n    visitStruct() { return StructVector; }\n    visitUnion() { return UnionVector; }\n    visitDenseUnion() { return DenseUnionVector; }\n    visitSparseUnion() { return SparseUnionVector; }\n    visitDictionary() { return DictionaryVector; }\n    visitInterval() { return IntervalVector; }\n    visitIntervalDayTime() { return IntervalDayTimeVector; }\n    visitIntervalYearMonth() { return IntervalYearMonthVector; }\n    visitFixedSizeList() { return FixedSizeListVector; }\n    visitMap() { return MapVector; }\n}\nexport const instance = new GetVectorConstructor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { Chunked } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\nVector.new = newVector;\n/** @ignore */\nfunction newVector(data, ...args) {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nBaseVector.prototype.get = function baseVectorGet(index) {\n    return getVisitor.visit(this, index);\n};\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n    return setVisitor.visit(this, index, value);\n};\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\nBaseVector.prototype.toArray = function baseVectorToArray() {\n    return toArrayVisitor.visit(this);\n};\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n    return byteWidthVisitor.visit(this.type);\n};\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n    return iteratorVisitor.visit(this);\n};\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(Type)\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T) => Type[T]).filter((T) => typeof T === 'number')\n    .forEach((typeId) => {\n    let typeIds;\n    switch (typeId) {\n        case Type.Int:\n            typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64];\n            break;\n        case Type.Float:\n            typeIds = [Type.Float16, Type.Float32, Type.Float64];\n            break;\n        case Type.Date:\n            typeIds = [Type.DateDay, Type.DateMillisecond];\n            break;\n        case Type.Time:\n            typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond];\n            break;\n        case Type.Timestamp:\n            typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond];\n            break;\n        case Type.Interval:\n            typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth];\n            break;\n        case Type.Union:\n            typeIds = [Type.DenseUnion, Type.SparseUnion];\n            break;\n        default:\n            typeIds = [typeId];\n            break;\n    }\n    typeIds.forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n});\n/** @ignore */\nfunction partial0(visit) {\n    return function () { return visit(this); };\n}\n/** @ignore */\nfunction partial1(visit) {\n    return function (a) { return visit(this, a); };\n}\n/** @ignore */\nfunction partial2(visit) {\n    return function (a, b) { return visit(this, a, b); };\n}\n/** @ignore */\nfunction wrapNullable1(fn) {\n    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\n/** @ignore */\nfunction wrapNullableSet(fn) {\n    return function (i, a) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n/** @ignore */\nfunction bindBaseVectorDataAccessors() {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, this);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, this);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, this);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, this);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, this);\n    if (this.nullCount > 0) {\n        this['get'] = wrapNullable1(this['get']);\n        this['set'] = wrapNullableSet(this['set']);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\nexport class TypeAssembler extends Visitor {\n    visit(node, builder) {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    visitInt(node, b) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    visitFloat(node, b) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    visitBool(_node, b) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    visitUtf8(_node, b) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    visitDate(node, b) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    visitTime(node, b) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    visitList(_node, b) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    visitStruct(_node, b) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    visitUnion(node, b) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\nexport const instance = new TypeAssembler();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Schema, Field } from '../../schema';\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\n/** @ignore */\nexport function schemaFromJSON(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    return new Schema(schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields), customMetadataFromJSON(_schema['customMetadata']), dictionaries, dictionaryFields);\n}\n/** @ignore */\nexport function recordBatchFromJSON(b) {\n    return new RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\n/** @ignore */\nexport function dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\n/** @ignore */\nfunction schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields) {\n    return (_schema['fields'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n/** @ignore */\nfunction fieldChildrenFromJSON(_field, dictionaries, dictionaryFields) {\n    return (_field['children'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\n/** @ignore */\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldNode(column['count'], nullCountFromJSON(column['VALIDITY'])),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\n/** @ignore */\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\n/** @ignore */\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\n/** @ignore */\nexport function fieldFromJSON(_field, dictionaries, dictionaryFields) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\n/** @ignore */\nfunction customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\n/** @ignore */\nfunction indexTypeFromJSON(_type) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\n/** @ignore */\nfunction typeFromJSON(f, children) {\n    const typeId = f['type']['name'];\n    switch (typeId) {\n        case 'NONE': return new DataType();\n        case 'null': return new Null();\n        case 'binary': return new Binary();\n        case 'utf8': return new Utf8();\n        case 'bool': return new Bool();\n        case 'list': return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n        case 'struct_': return new Struct(children || []);\n    }\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth']);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']]);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']]);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']], t['bitWidth']);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']], t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']]);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']], (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { decodeUtf8 } from '../util/utf8';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/** @ignore */\nexport class AsyncByteQueue extends AsyncQueue {\n    write(value) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value);\n        }\n    }\n    toString(sync = false) {\n        return sync\n            ? decodeUtf8(this.toUint8Array(true))\n            : this.toUint8Array(false).then(decodeUtf8);\n    }\n    toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this._values.slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n/** @ignore */\nexport class ByteStream {\n    constructor(source) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    [Symbol.iterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/** @ignore */\nexport class AsyncByteStream {\n    constructor(source) {\n        if (source instanceof AsyncByteStream) {\n            this.source = source.source;\n        }\n        else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromNodeStream(source));\n        }\n        else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source.body));\n        }\n        else if (isIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        }\n        else if (isPromise(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isAsyncIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableDOMStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromDOMStream(source));\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    get closed() { return this.source.closed; }\n    cancel(reason) { return this.source.cancel(reason); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/** @ignore */\nclass ByteStreamSource {\n    constructor(source) {\n        this.source = source;\n    }\n    cancel(reason) { this.return(reason); }\n    peek(size) { return this.next(size, 'peek').value; }\n    read(size) { return this.next(size, 'read').value; }\n    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }\n    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\n/** @ignore */\nclass AsyncByteStreamSource {\n    constructor(source) {\n        this.source = source;\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    async cancel(reason) { await this.return(reason); }\n    get closed() { return this._closedPromise; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    async next(size, cmd = 'read') { return (await this.source.next({ cmd, size })); }\n    async throw(value) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    async return(value) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\nimport { toUint8Array } from '../util/buffer';\n/** @ignore */\nexport class RandomAccessFile extends ByteStream {\n    constructor(buffer, byteLength) {\n        super();\n        this.position = 0;\n        this.buffer = toUint8Array(buffer);\n        this.size = typeof byteLength === 'undefined' ? this.buffer.byteLength : byteLength;\n    }\n    readInt32(position) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() { this.buffer && (this.buffer = null); }\n    throw(value) { this.close(); return { done: true, value }; }\n    return(value) { this.close(); return { done: true, value }; }\n}\n/** @ignore */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    constructor(file, byteLength) {\n        super();\n        this.position = 0;\n        this._handle = file;\n        if (typeof byteLength === 'number') {\n            this.size = byteLength;\n        }\n        else {\n            this._pending = (async () => {\n                delete this._pending;\n                this.size = (await file.stat()).size;\n            })();\n        }\n    }\n    async readInt32(position) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    async seek(position) {\n        this._pending && await this._pending;\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    async read(nBytes) {\n        this._pending && await this._pending;\n        const { _handle: file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    async readAt(position, nBytes) {\n        this._pending && await this._pending;\n        const { _handle: file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    async close() { const f = this._handle; this._handle = null; f && await f.close(); }\n    async throw(value) { await this.close(); return { done: true, value }; }\n    async return(value) { await this.close(); return { done: true, value }; }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\n/** @ignore */ const invalidMessageType = (type) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\n/** @ignore */ const nullMessage = (type) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\n/** @ignore */ const invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\n/** @ignore */ const invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\n/** @ignore */\nexport class MessageReader {\n    constructor(source) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0));\n        return { done: len <= 0, value: len };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n/** @ignore */\nexport class AsyncMessageReader {\n    constructor(source, byteLength) {\n        this.source = source instanceof AsyncByteStream ? source\n            : isFileHandle(source)\n                ? new AsyncRandomAccessFile(source, byteLength)\n                : new AsyncByteStream(source);\n    }\n    [Symbol.asyncIterator]() { return this; }\n    async next() {\n        let r;\n        if ((r = await this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = await this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    async throw(value) { return await this.source.throw(value); }\n    async return(value) { return await this.source.return(value); }\n    async readMessage(type) {\n        let r;\n        if ((r = await this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    async readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // 1. Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        // 2. Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n        return /* 1. */ (buf.byteOffset % 8 === 0) &&\n            /* 2. */ (buf.byteOffset + buf.byteLength) <= buf.buffer.byteLength ? buf : buf.slice();\n    }\n    async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    async readMetadataLength() {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0));\n        return { done: len <= 0, value: len };\n    }\n    async readMetadata(metadataLength) {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\n/** @ignore */\nexport class JSONMessageReader extends MessageReader {\n    constructor(source) {\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\n/** @ignore */\nexport const PADDING = 4;\n/** @ignore */\nexport const MAGIC_STR = 'ARROW1';\n/** @ignore */\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\n/** @ignore */\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\n/** @ignore */\nexport const magicLength = MAGIC.length;\n/** @ignore */\nexport const magicAndPadding = magicLength + PADDING;\n/** @ignore */\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType, } from '../type';\nexport class VectorAssembler extends Visitor {\n    constructor() {\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */\n    static assemble(...args) {\n        const vectors = args.reduce(function flatten(xs, x) {\n            if (Array.isArray(x)) {\n                return x.reduce(flatten, xs);\n            }\n            if (!(x instanceof RecordBatch)) {\n                return [...xs, x];\n            }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i))];\n        }, []).filter((x) => x instanceof Vector);\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n    visit(vector) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                /* istanbul ignore next */\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullV) { return this; }\n    visitDictionary(vector) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n    get nodes() { return this._nodes; }\n    get buffers() { return this._buffers; }\n    get byteLength() { return this._byteLength; }\n    get bufferRegions() { return this._bufferRegions; }\n}\n/** @ignore */\nfunction addBuffer(values) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\n/** @ignore */\nfunction assembleUnion(vector) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    }\n    else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        }\n        else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\n/** @ignore */\nfunction assembleBoolVector(vector) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate the\n    // values as bools and re-pack them into a Uint8Array. This code isn't\n    // reachable unless you're trying to manipulate the Data internals,\n    // we we're only doing this for safety.\n    /* istanbul ignore next */\n    return addBuffer.call(this, packBools(vector));\n}\n/** @ignore */\nfunction assembleFlatVector(vector) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\n/** @ignore */\nfunction assembleFlatListVector(vector) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\n/** @ignore */\nfunction assembleListVector(vector) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0));\n}\n/** @ignore */\nfunction assembleNestedVector(vector) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleNestedVector;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { ArrowType, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from '../enum';\nexport class JSONTypeAssembler extends Visitor {\n    visit(node) {\n        return node == null ? undefined : super.visit(node);\n    }\n    visitNull({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitInt({ typeId, bitWidth, isSigned }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'bitWidth': bitWidth, 'isSigned': isSigned };\n    }\n    visitFloat({ typeId, precision }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'precision': Precision[precision] };\n    }\n    visitBinary({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitBool({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitUtf8({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitDecimal({ typeId, scale, precision }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'scale': scale, 'precision': precision };\n    }\n    visitDate({ typeId, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': DateUnit[unit] };\n    }\n    visitTime({ typeId, unit, bitWidth }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], bitWidth };\n    }\n    visitTimestamp({ typeId, timezone, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': TimeUnit[unit], timezone };\n    }\n    visitInterval({ typeId, unit }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'unit': IntervalUnit[unit] };\n    }\n    visitList({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitStruct({ typeId }) {\n        return { 'name': ArrowType[typeId].toLowerCase() };\n    }\n    visitUnion({ typeId, mode, typeIds }) {\n        return {\n            'name': ArrowType[typeId].toLowerCase(),\n            'mode': UnionMode[mode],\n            'typeIds': [...typeIds]\n        };\n    }\n    visitDictionary(node) {\n        return this.visit(node.dictionary);\n    }\n    visitFixedSizeBinary({ typeId, byteWidth }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'byteWidth': byteWidth };\n    }\n    visitFixedSizeList({ typeId, listSize }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'listSize': listSize };\n    }\n    visitMap({ typeId, keysSorted }) {\n        return { 'name': ArrowType[typeId].toLowerCase(), 'keysSorted': keysSorted };\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from '../column';\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { RecordBatch } from '../recordbatch';\nimport { VectorType as BufferType } from '../enum';\nimport { UnionMode, DateUnit, TimeUnit } from '../enum';\nimport { iterateBits, getBit, getBool } from '../util/bit';\nimport { DataType, } from '../type';\nexport class JSONVectorAssembler extends Visitor {\n    /** @nocollapse */\n    static assemble(...args) {\n        const vectors = args.reduce(function flatten(xs, x) {\n            if (Array.isArray(x)) {\n                return x.reduce(flatten, xs);\n            }\n            if (!(x instanceof RecordBatch)) {\n                return [...xs, x];\n            }\n            return xs.concat(x.schema.fields.map((f, i) => new Column(f, [x.getChildAt(i)])));\n        }, []).filter((x) => x instanceof Column);\n        return new JSONVectorAssembler().visitMany(vectors);\n    }\n    visit(column) {\n        const { data, name, length } = column;\n        const { offset, nullCount, nullBitmap } = data;\n        const buffers = { ...data.buffers, [BufferType.VALIDITY]: undefined };\n        const type = DataType.isDictionary(column.type) ? column.type.indices : column.type;\n        return {\n            'name': name,\n            'count': length,\n            'VALIDITY': nullCount <= 0\n                ? Array.from({ length }, () => 1)\n                : [...iterateBits(nullBitmap, offset, length, null, getBit)],\n            ...super.visit(Vector.new(data.clone(type, offset, length, 0, buffers)))\n        };\n    }\n    visitNull() { return {}; }\n    visitBool({ values, offset, length }) {\n        return { 'DATA': [...iterateBits(values, offset, length, null, getBool)] };\n    }\n    visitInt(vector) {\n        return {\n            'DATA': vector.type.bitWidth < 64\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitFloat(vector) {\n        return { 'DATA': [...vector.values] };\n    }\n    visitUtf8(vector) {\n        return { 'DATA': [...vector], 'OFFSET': [...vector.valueOffsets] };\n    }\n    visitBinary(vector) {\n        return { 'DATA': [...binaryToString(vector)], OFFSET: [...vector.valueOffsets] };\n    }\n    visitFixedSizeBinary(vector) {\n        return { 'DATA': [...binaryToString(vector)] };\n    }\n    visitDate(vector) {\n        return {\n            'DATA': vector.type.unit === DateUnit.DAY\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitTimestamp(vector) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 2)] };\n    }\n    visitTime(vector) {\n        return {\n            'DATA': vector.type.unit < TimeUnit.MICROSECOND\n                ? [...vector.values]\n                : [...bigNumsToStrings(vector.values, 2)]\n        };\n    }\n    visitDecimal(vector) {\n        return { 'DATA': [...bigNumsToStrings(vector.values, 4)] };\n    }\n    visitList(vector) {\n        return {\n            'OFFSET': [...vector.valueOffsets],\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitStruct(vector) {\n        return {\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitUnion(vector) {\n        return {\n            'TYPE': [...vector.typeIds],\n            'OFFSET': vector.type.mode === UnionMode.Dense ? [...vector.valueOffsets] : undefined,\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitInterval(vector) {\n        return { 'DATA': [...vector.values] };\n    }\n    visitFixedSizeList(vector) {\n        return {\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n        };\n    }\n    visitMap(vector) {\n        return {\n            'children': vector.type.children.map((f, i) => this.visit(new Column(f, [vector.getChildAt(i)])))\n        };\n    }\n}\n/** @ignore */\nfunction* binaryToString(vector) {\n    for (const octets of vector) {\n        yield octets.reduce((str, byte) => {\n            return `${str}${('0' + (byte & 0xFF).toString(16)).slice(-2)}`;\n        }, '').toUpperCase();\n    }\n}\n/** @ignore */\nfunction* bigNumsToStrings(values, stride) {\n    for (let i = -1, n = values.length / stride; ++i < n;) {\n        yield bignumToString(values.subarray((i + 0) * stride, (i + 1) * stride));\n    }\n}\n/** @ignore */\nfunction bignumToString({ buffer, byteOffset, length }) {\n    let digits = '', i = -1;\n    let r = new Uint32Array(2);\n    let a = new Uint16Array(buffer, byteOffset, length * 2);\n    let b = new Uint32Array((a = new Uint16Array(a).reverse()).buffer);\n    let n = a.length - 1;\n    do {\n        for (r[0] = a[i = 0]; i < n;) {\n            a[i++] = r[1] = r[0] / 10;\n            r[0] = ((r[0] - r[1] * 10) << 16) + a[i];\n        }\n        a[i] = r[1] = r[0] / 10;\n        r[0] = r[0] - r[1] * 10;\n        digits = `${r[0]}${digits}`;\n    } while (b[0] || b[1] || b[2] || b[3]);\n    return digits ? digits : `0`;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { MAGIC } from './message';\nimport { Column } from '../column';\nimport { Field } from '../schema';\nimport { Chunked } from '../vector/chunked';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { DataType } from '../type';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { JSONTypeAssembler } from '../visitor/jsontypeassembler';\nimport { JSONVectorAssembler } from '../visitor/jsonvectorassembler';\nimport { toUint8Array } from '../util/buffer';\nimport { ReadableInterop } from '../io/interfaces';\nimport { isPromise, isAsyncIterable, isWritableDOMStream, isWritableNodeStream } from '../util/compat';\nexport class RecordBatchWriter extends ReadableInterop {\n    constructor(options) {\n        super();\n        this._position = 0;\n        this._started = false;\n        // @ts-ignore\n        this._sink = new AsyncByteQueue();\n        this._schema = null;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        this._autoDestroy = options && (typeof options.autoDestroy === 'boolean') ? options.autoDestroy : true;\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toString(sync = false) {\n        return this._sink.toString(sync);\n    }\n    toUint8Array(sync = false) {\n        return this._sink.toUint8Array(sync);\n    }\n    writeAll(input) {\n        if (isPromise(input)) {\n            return input.then((x) => this.writeAll(x));\n        }\n        else if (isAsyncIterable(input)) {\n            return writeAllAsync(this, input);\n        }\n        return writeAll(this, input);\n    }\n    get closed() { return this._sink.closed; }\n    [Symbol.asyncIterator]() { return this._sink[Symbol.asyncIterator](); }\n    toDOMStream(options) { return this._sink.toDOMStream(options); }\n    toNodeStream(options) { return this._sink.toNodeStream(options); }\n    close() {\n        return this.reset()._sink.close();\n    }\n    abort(reason) {\n        return this.reset()._sink.abort(reason);\n    }\n    finish() {\n        this._autoDestroy ? this.close() : this.reset(this._sink, this._schema);\n        return this;\n    }\n    reset(sink = this._sink, schema = null) {\n        if ((sink === this._sink) || (sink instanceof AsyncByteQueue)) {\n            this._sink = sink;\n        }\n        else {\n            this._sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toDOMStream({ type: 'bytes' }).pipeTo(sink);\n            }\n            else if (sink && isWritableNodeStream(sink)) {\n                this.toNodeStream({ objectMode: false }).pipe(sink);\n            }\n        }\n        if (this._started && this._schema) {\n            this._writeFooter();\n        }\n        this._started = false;\n        this._dictionaryBlocks = [];\n        this._recordBatchBlocks = [];\n        if (!schema || (schema !== this._schema)) {\n            if (schema === null) {\n                this._position = 0;\n                this._schema = null;\n            }\n            else {\n                this._started = true;\n                this._schema = schema;\n                this._writeSchema(schema);\n            }\n        }\n        return this;\n    }\n    write(chunk) {\n        let schema;\n        if (!this._sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        else if (!chunk || !(schema = chunk.schema)) {\n            return this.finish() && undefined;\n        }\n        else if (schema !== this._schema) {\n            if (this._started && this._autoDestroy) {\n                return this.close();\n            }\n            this.reset(this._sink, schema);\n        }\n        (chunk instanceof Table)\n            ? this.writeAll(chunk.chunks)\n            : this._writeRecordBatch(chunk);\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this._recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this._dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this._position));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) {\n            this._write(buffer);\n        }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(chunk) {\n        if (this._started) {\n            const buffer = toUint8Array(chunk);\n            if (buffer && buffer.byteLength > 0) {\n                this._sink.write(buffer);\n                this._position += buffer.byteLength;\n            }\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n    _writeFooter() {\n        return this._writePadding(4); // eos bytes\n    }\n    _writeMagic() {\n        return this._write(MAGIC);\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(new Uint8Array(nBytes)) : this;\n    }\n    _writeRecordBatch(records) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n    _writeDictionaries(dictionaryFields) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof Chunked)) {\n                this._writeDictionaryBatch(vector, id, false);\n            }\n            else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\n/** @ignore */\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(input, options) {\n        return new RecordBatchStreamWriter(options).writeAll(input);\n    }\n}\n/** @ignore */\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n    /** @nocollapse */\n    static writeAll(input) {\n        return new RecordBatchFileWriter().writeAll(input);\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n    _writeFooter() {\n        const buffer = Footer.encode(new Footer(this._schema, MetadataVersion.V4, this._recordBatchBlocks, this._dictionaryBlocks));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n}\n/** @ignore */\nexport class RecordBatchJSONWriter extends RecordBatchWriter {\n    constructor() {\n        super();\n        this._autoDestroy = true;\n    }\n    /** @nocollapse */\n    static writeAll(input) {\n        return new RecordBatchJSONWriter().writeAll(input);\n    }\n    _writeMessage() { return this; }\n    _writeSchema(schema) {\n        return this._write(`{\\n  \"schema\": ${JSON.stringify({ fields: schema.fields.map(fieldToJSON) }, null, 2)}`)._writeDictionaries(schema.dictionaryFields);\n    }\n    _writeDictionaries(dictionaryFields) {\n        this._write(`,\\n  \"dictionaries\": [\\n`);\n        super._writeDictionaries(dictionaryFields);\n        return this._write(`\\n  ]`);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        this._write(this._dictionaryBlocks.length === 0 ? `    ` : `,\\n    `);\n        this._write(`${dictionaryBatchToJSON(this._schema, dictionary, id, isDelta)}`);\n        this._dictionaryBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    _writeRecordBatch(records) {\n        this._write(this._recordBatchBlocks.length === 0\n            ? `,\\n  \"batches\": [\\n    `\n            : `,\\n    `);\n        this._write(`${recordBatchToJSON(records)}`);\n        this._recordBatchBlocks.push(new FileBlock(0, 0, 0));\n        return this;\n    }\n    close() {\n        if (this._recordBatchBlocks.length > 0) {\n            this._write(`\\n  ]`);\n        }\n        if (this._schema) {\n            this._write(`\\n}`);\n        }\n        return super.close();\n    }\n}\n/** @ignore */\nfunction writeAll(writer, input) {\n    const chunks = (input instanceof Table) ? input.chunks : input;\n    for (const batch of chunks) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n/** @ignore */\nasync function writeAllAsync(writer, batches) {\n    for await (const batch of batches) {\n        writer.write(batch);\n    }\n    return writer.finish();\n}\n/** @ignore */\nfunction fieldToJSON({ name, type, nullable }) {\n    const assembler = new JSONTypeAssembler();\n    return {\n        'name': name, 'nullable': nullable,\n        'type': assembler.visit(type),\n        'children': (type.children || []).map(fieldToJSON),\n        'dictionary': !DataType.isDictionary(type) ? undefined : {\n            'id': type.id,\n            'isOrdered': type.isOrdered,\n            'indexType': assembler.visit(type.indices)\n        }\n    };\n}\n/** @ignore */\nfunction dictionaryBatchToJSON(schema, dictionary, id, isDelta = false) {\n    const f = schema.dictionaryFields.get(id)[0];\n    const field = new Field(f.name, f.type.dictionary, f.nullable, f.metadata);\n    const columns = JSONVectorAssembler.assemble(new Column(field, [dictionary]));\n    return JSON.stringify({\n        'id': id,\n        'isDelta': isDelta,\n        'data': {\n            'count': dictionary.length,\n            'columns': columns\n        }\n    }, null, 2);\n}\n/** @ignore */\nfunction recordBatchToJSON(records) {\n    return JSON.stringify({\n        'count': records.length,\n        'columns': JSONVectorAssembler.assemble(records)\n    }, null, 2);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { Chunked } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport class Table extends Chunked {\n    constructor(...args) {\n        let schema = null;\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n        let chunks = args.reduce(function flatten(xs, x) {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof RecordBatch);\n        if (!schema && !(schema = chunks[0] && chunks[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch');\n        }\n        if (!chunks[0]) {\n            chunks[0] = new RecordBatch(schema, 0, []);\n        }\n        super(chunks[0].type, chunks);\n        this._schema = schema;\n        this._chunks = chunks;\n    }\n    /** @nocollapse */\n    static empty() { return new Table(new Schema([]), []); }\n    /** @nocollapse */\n    static from(source) {\n        if (!source) {\n            return Table.empty();\n        }\n        let reader = RecordBatchReader.from(source);\n        if (isPromise(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n    /** @nocollapse */\n    static async fromAsync(source) {\n        return await Table.from(source);\n    }\n    /** @nocollapse */\n    static fromVectors(vectors, names) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n    /** @nocollapse */\n    static fromStruct(struct) {\n        const schema = new Schema(struct.type.children);\n        const chunks = (struct instanceof Chunked ? struct.chunks : [struct]);\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n    get schema() { return this._schema; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get numCols() { return this._numChildren; }\n    clone(chunks = this._chunks) {\n        return new Table(this._schema, chunks);\n    }\n    getColumnAt(index) {\n        return this.getChildAt(index);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnIndex(name) {\n        return this._schema.fields.findIndex((f) => f.name === name);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let schema = this._schema;\n        let column, field, chunks;\n        let columns = this._children || (this._children = []);\n        if (column = columns[index]) {\n            return column;\n        }\n        if (field = (schema.fields || [])[index]) {\n            chunks = this._chunks\n                .map((chunk) => chunk.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column(field, chunks));\n            }\n        }\n        return null;\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this._chunks).toUint8Array(true);\n    }\n    count() {\n        return this._length;\n    }\n    select(...columnNames) {\n        return new Table(this._chunks.map((batch) => batch.select(...columnNames)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Table } from './table';\nimport { Schema } from './schema';\nimport { Struct } from './type';\nimport { StructVector } from './vector/struct';\nimport { Chunked } from './vector/chunked';\nexport class RecordBatch extends StructVector {\n    constructor(...args) {\n        let schema = args[0];\n        let data;\n        let children;\n        if (typeof args[1] === 'number') {\n            const fields = schema.fields;\n            const [, numRows, childData] = args;\n            data = Data.Struct(new Struct(fields), 0, numRows, 0, null, childData);\n        }\n        else {\n            [, data, children] = args;\n        }\n        super(data, children);\n        this._schema = schema;\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new RecordBatch(Schema.from(vectors, names), vectors.reduce((len, vec) => Math.max(len, vec.length), 0), vectors);\n    }\n    clone(data, children = this._children) {\n        return new RecordBatch(this._schema, data, children);\n    }\n    concat(...others) {\n        const schema = this._schema, chunks = Chunked.flatten(this, ...others);\n        return new Table(schema, chunks.map(({ data }) => new RecordBatch(schema, data)));\n    }\n    get schema() { return this._schema; }\n    get numCols() { return this._schema.fields.length; }\n    select(...columnNames) {\n        const fields = this._schema.fields;\n        const schema = this._schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});\n        const childData = this._data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch(schema, structData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUssT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztJQUM1QyxJQUFXLE9BQU8sS0FBSyxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFFcEQsTUFBTSxDQUEwQixHQUFHLFdBQWdCO1FBQ3RELE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDO1FBQ25DLE1BQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLEdBQUcsV0FBVyxDQUFDLENBQUM7UUFDbkQsTUFBTSxVQUFVLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBUSxFQUFFLENBQUMsQ0FBQztRQUNqRixNQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7UUFDcEYsTUFBTSxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztRQUM5RixPQUFPLElBQUksV0FBVyxDQUFxQixNQUFNLEVBQUUsVUFBOEMsQ0FBQyxDQUFDO0lBQ3ZHLENBQUM7Q0FDSiIsImZpbGUiOiJyZWNvcmRiYXRjaC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IFRhYmxlIH0gZnJvbSAnLi90YWJsZSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvcic7XG5pbXBvcnQgeyBTY2hlbWEsIEZpZWxkIH0gZnJvbSAnLi9zY2hlbWEnO1xuaW1wb3J0IHsgRGF0YVR5cGUsIFN0cnVjdCB9IGZyb20gJy4vdHlwZSc7XG5pbXBvcnQgeyBTdHJ1Y3RWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvci9zdHJ1Y3QnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFZUeXBlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IENodW5rZWQgfSBmcm9tICcuL3ZlY3Rvci9jaHVua2VkJztcbmltcG9ydCB7IENsb25hYmxlLCBTbGljZWFibGUsIEFwcGxpY2F0aXZlIH0gZnJvbSAnLi92ZWN0b3InO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJlY29yZEJhdGNoPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IHtcbiAgICBjb25jYXQoLi4ub3RoZXJzOiBWZWN0b3I8U3RydWN0PFQ+PltdKTogVGFibGU8VD47XG4gICAgc2xpY2UoYmVnaW4/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IFJlY29yZEJhdGNoPFQ+O1xuICAgIGNsb25lKGRhdGE6IERhdGE8U3RydWN0PFQ+PiwgY2hpbGRyZW4/OiBWZWN0b3JbXSk6IFJlY29yZEJhdGNoPFQ+O1xufVxuXG5leHBvcnQgY2xhc3MgUmVjb3JkQmF0Y2g8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT5cbiAgICBleHRlbmRzIFN0cnVjdFZlY3RvcjxUPlxuICAgIGltcGxlbWVudHMgQ2xvbmFibGU8UmVjb3JkQmF0Y2g8VD4+LFxuICAgICAgICAgICAgICAgU2xpY2VhYmxlPFJlY29yZEJhdGNoPFQ+PixcbiAgICAgICAgICAgICAgIEFwcGxpY2F0aXZlPFN0cnVjdDxUPiwgVGFibGU8VD4+IHtcblxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pih2ZWN0b3JzOiBWVHlwZTxUW2tleW9mIFRdPltdLCBuYW1lczogKGtleW9mIFQpW10gPSBbXSkge1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoKFxuICAgICAgICAgICAgU2NoZW1hLmZyb20odmVjdG9ycywgbmFtZXMpLFxuICAgICAgICAgICAgdmVjdG9ycy5yZWR1Y2UoKGxlbiwgdmVjKSA9PiBNYXRoLm1heChsZW4sIHZlYy5sZW5ndGgpLCAwKSxcbiAgICAgICAgICAgIHZlY3RvcnNcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX3NjaGVtYTogU2NoZW1hO1xuXG4gICAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWE8VD4sIG51bVJvd3M6IG51bWJlciwgY2hpbGREYXRhOiAoRGF0YSB8IFZlY3RvcilbXSk7XG4gICAgY29uc3RydWN0b3Ioc2NoZW1hOiBTY2hlbWE8VD4sIGRhdGE6IERhdGE8U3RydWN0PFQ+PiwgY2hpbGRyZW4/OiBWZWN0b3JbXSk7XG4gICAgY29uc3RydWN0b3IoLi4uYXJnczogYW55W10pIHtcbiAgICAgICAgbGV0IHNjaGVtYSA9IGFyZ3NbMF07XG4gICAgICAgIGxldCBkYXRhOiBEYXRhPFN0cnVjdDxUPj47XG4gICAgICAgIGxldCBjaGlsZHJlbjogVmVjdG9yW10gfCB1bmRlZmluZWQ7XG4gICAgICAgIGlmICh0eXBlb2YgYXJnc1sxXSA9PT0gJ251bWJlcicpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpZWxkcyA9IHNjaGVtYS5maWVsZHMgYXMgRmllbGQ8VFtrZXlvZiBUXT5bXTtcbiAgICAgICAgICAgIGNvbnN0IFssIG51bVJvd3MsIGNoaWxkRGF0YV0gPSBhcmdzIGFzIFtTY2hlbWE8VD4sIG51bWJlciwgRGF0YVtdXTtcbiAgICAgICAgICAgIGRhdGEgPSBEYXRhLlN0cnVjdChuZXcgU3RydWN0PFQ+KGZpZWxkcyksIDAsIG51bVJvd3MsIDAsIG51bGwsIGNoaWxkRGF0YSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBbLCBkYXRhLCBjaGlsZHJlbl0gPSAoYXJncyBhcyBbU2NoZW1hPFQ+LCBEYXRhPFN0cnVjdDxUPj4sIFZlY3RvcltdP10pO1xuICAgICAgICB9XG4gICAgICAgIHN1cGVyKGRhdGEsIGNoaWxkcmVuKTtcbiAgICAgICAgdGhpcy5fc2NoZW1hID0gc2NoZW1hO1xuICAgIH1cblxuICAgIHB1YmxpYyBjbG9uZShkYXRhOiBEYXRhPFN0cnVjdDxUPj4sIGNoaWxkcmVuID0gdGhpcy5fY2hpbGRyZW4pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaDxUPih0aGlzLl9zY2hlbWEsIGRhdGEsIGNoaWxkcmVuKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgY29uY2F0KC4uLm90aGVyczogVmVjdG9yPFN0cnVjdDxUPj5bXSk6IFRhYmxlPFQ+IHtcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fc2NoZW1hLCBjaHVua3MgPSBDaHVua2VkLmZsYXR0ZW4odGhpcywgLi4ub3RoZXJzKTtcbiAgICAgICAgcmV0dXJuIG5ldyBUYWJsZShzY2hlbWEsIGNodW5rcy5tYXAoKHsgZGF0YSB9KSA9PiBuZXcgUmVjb3JkQmF0Y2goc2NoZW1hLCBkYXRhKSkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgc2NoZW1hKCkgeyByZXR1cm4gdGhpcy5fc2NoZW1hOyB9XG4gICAgcHVibGljIGdldCBudW1Db2xzKCkgeyByZXR1cm4gdGhpcy5fc2NoZW1hLmZpZWxkcy5sZW5ndGg7IH1cblxuICAgIHB1YmxpYyBzZWxlY3Q8SyBleHRlbmRzIGtleW9mIFQgPSBhbnk+KC4uLmNvbHVtbk5hbWVzOiBLW10pIHtcbiAgICAgICAgY29uc3QgZmllbGRzID0gdGhpcy5fc2NoZW1hLmZpZWxkcztcbiAgICAgICAgY29uc3Qgc2NoZW1hID0gdGhpcy5fc2NoZW1hLnNlbGVjdCguLi5jb2x1bW5OYW1lcyk7XG4gICAgICAgIGNvbnN0IGNoaWxkTmFtZXMgPSBjb2x1bW5OYW1lcy5yZWR1Y2UoKHhzLCB4KSA9PiAoeHNbeF0gPSB0cnVlKSAmJiB4cywgPGFueT4ge30pO1xuICAgICAgICBjb25zdCBjaGlsZERhdGEgPSB0aGlzLl9kYXRhLmNoaWxkRGF0YS5maWx0ZXIoKF8sIGkpID0+IGNoaWxkTmFtZXNbZmllbGRzW2ldLm5hbWVdKTtcbiAgICAgICAgY29uc3Qgc3RydWN0RGF0YSA9IERhdGEuU3RydWN0KG5ldyBTdHJ1Y3Qoc2NoZW1hLmZpZWxkcyksIDAsIHRoaXMubGVuZ3RoLCAwLCBudWxsLCBjaGlsZERhdGEpO1xuICAgICAgICByZXR1cm4gbmV3IFJlY29yZEJhdGNoPHsgW1AgaW4gS106IFRbUF0gfT4oc2NoZW1hLCBzdHJ1Y3REYXRhIGFzIERhdGE8U3RydWN0PHsgW1AgaW4gS106IFRbUF0gfT4+KTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { encodeUtf8 } from '../util/utf8';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nexport class VectorLoader extends Visitor {\n    constructor(bytes, nodes, buffers) {\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n    visit(node) {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n    visitNull(type, { length, nullCount } = this.nextFieldNode()) { return Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount)); }\n    visitBool(type, { length, nullCount } = this.nextFieldNode()) { return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitInt(type, { length, nullCount } = this.nextFieldNode()) { return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFloat(type, { length, nullCount } = this.nextFieldNode()) { return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitUtf8(type, { length, nullCount } = this.nextFieldNode()) { return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDate(type, { length, nullCount } = this.nextFieldNode()) { return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) { return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTime(type, { length, nullCount } = this.nextFieldNode()) { return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDecimal(type, { length, nullCount } = this.nextFieldNode()) { return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitList(type, { length, nullCount } = this.nextFieldNode()) { return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0])); }\n    visitStruct(type, { length, nullCount } = this.nextFieldNode()) { return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    visitUnion(type) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type); }\n    visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children)); }\n    visitDictionary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices)); }\n    visitInterval(type, { length, nullCount } = this.nextFieldNode()) { return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0])); }\n    visitMap(type, { length, nullCount } = this.nextFieldNode()) { return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\nexport class JSONVectorLoader extends VectorLoader {\n    constructor(sources, nodes, buffers) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, this.sources[offset]));\n    }\n    readData(type, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n        }\n        else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset]);\n        }\n        else if (DataType.isBool(type)) {\n            return packBools(sources[offset]);\n        }\n        else if (DataType.isUtf8(type)) {\n            return encodeUtf8(sources[offset].join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\n/** @ignore */\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { RecordBatch } from '../recordbatch';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ITERATOR_DONE, ReadableInterop, } from '../io/interfaces';\nimport { MessageReader, AsyncMessageReader, JSONMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding } from './message';\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult, isArrowJSON, isFileHandle, isFetchResponse, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nexport class RecordBatchReader extends ReadableInterop {\n    constructor(impl) {\n        super();\n        this._impl = impl;\n    }\n    get closed() { return this._impl.closed; }\n    get schema() { return this._impl.schema; }\n    get autoDestroy() { return this._impl.autoDestroy; }\n    get dictionaries() { return this._impl.dictionaries; }\n    get numDictionaries() { return this._impl.numDictionaries; }\n    get numRecordBatches() { return this._impl.numRecordBatches; }\n    get footer() { return this._impl.isFile() ? this._impl.footer : null; }\n    isSync() { return this._impl.isSync(); }\n    isAsync() { return this._impl.isAsync(); }\n    isFile() { return this._impl.isFile(); }\n    isStream() { return this._impl.isStream(); }\n    next() {\n        return this._impl.next();\n    }\n    throw(value) {\n        return this._impl.throw(value);\n    }\n    return(value) {\n        return this._impl.return(value);\n    }\n    cancel() {\n        return this._impl.cancel();\n    }\n    reset(schema) {\n        this._impl.reset(schema);\n        return this;\n    }\n    open(options) {\n        const opening = this._impl.open(options);\n        return isPromise(opening) ? opening.then(() => this) : this;\n    }\n    readRecordBatch(index) {\n        return this._impl.isFile() ? this._impl.readRecordBatch(index) : null;\n    }\n    [Symbol.iterator]() {\n        return this._impl[Symbol.iterator]();\n    }\n    [Symbol.asyncIterator]() {\n        return this._impl[Symbol.asyncIterator]();\n    }\n    toDOMStream() {\n        return streamAdapters.toDOMStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }));\n    }\n    toNodeStream() {\n        return streamAdapters.toNodeStream((this.isSync()\n            ? { [Symbol.iterator]: () => this }\n            : { [Symbol.asyncIterator]: () => this }), { objectMode: true });\n    }\n    /** @nocollapse */\n    // @ts-ignore\n    static throughNode(options) {\n        throw new Error(`\"throughNode\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static throughDOM(\n    // @ts-ignore\n    writableStrategy, \n    // @ts-ignore\n    readableStrategy) {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static from(source) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        }\n        else if (isArrowJSON(source)) {\n            return fromArrowJSON(source);\n        }\n        else if (isFileHandle(source)) {\n            return fromFileHandle(source);\n        }\n        else if (isPromise(source)) {\n            return (async () => await RecordBatchReader.from(await source))();\n        }\n        else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return fromAsyncByteStream(new AsyncByteStream(source));\n        }\n        return fromByteStream(new ByteStream(source));\n    }\n    /** @nocollapse */\n    static readAll(source) {\n        if (source instanceof RecordBatchReader) {\n            return source.isSync() ? readAllSync(source) : readAllAsync(source);\n        }\n        else if (isArrowJSON(source) || ArrayBuffer.isView(source) || isIterable(source) || isIteratorResult(source)) {\n            return readAllSync(source);\n        }\n        return readAllAsync(source);\n    }\n}\n//\n// Since TS is a structural type system, we define the following subclass stubs\n// so that concrete types exist to associate with with the interfaces below.\n//\n// The implementation for each RecordBatchReader is hidden away in the set of\n// `RecordBatchReaderImpl` classes in the second half of this file. This allows\n// us to export a single RecordBatchReader class, and swap out the impl based\n// on the io primitives or underlying arrow (JSON, file, or stream) at runtime.\n//\n// Async/await makes our job a bit harder, since it forces everything to be\n// either fully sync or fully async. This is why the logic for the reader impls\n// has been duplicated into both sync and async variants. Since the RBR\n// delegates to its impl, an RBR with an AsyncRecordBatchFileReaderImpl for\n// example will return async/await-friendly Promises, but one with a (sync)\n// RecordBatchStreamReaderImpl will always return values. Nothing should be\n// different about their logic, aside from the async handling. This is also why\n// this code looks highly structured, as it should be nearly identical and easy\n// to follow.\n//\n/** @ignore */\nexport class RecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    [Symbol.iterator]() { return this._impl[Symbol.iterator](); }\n    async *[Symbol.asyncIterator]() { yield* this[Symbol.iterator](); }\n}\n/** @ignore */\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n    [Symbol.asyncIterator]() { return this._impl[Symbol.asyncIterator](); }\n}\n/** @ignore */\nexport class RecordBatchFileReader extends RecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\n/** @ignore */\nexport class AsyncRecordBatchFileReader extends AsyncRecordBatchStreamReader {\n    constructor(_impl) {\n        super(_impl);\n        this._impl = _impl;\n    }\n}\n/** @ignore */\nclass RecordBatchReaderImpl {\n    constructor(dictionaries = new Map()) {\n        this.closed = false;\n        this.autoDestroy = true;\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() { return this._dictionaryIndex; }\n    get numRecordBatches() { return this._recordBatchIndex; }\n    isSync() { return false; }\n    isAsync() { return false; }\n    isFile() { return false; }\n    isStream() { return false; }\n    reset(schema) {\n        this._dictionaryIndex = 0;\n        this._recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n            const type = schema.dictionaries.get(id);\n            const vector = (isDelta ? dictionaries.get(id).concat(Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0]));\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n            return vector;\n        }\n        return dictionaries.get(id);\n    }\n    _loadVectors(header, body, types) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n/** @ignore */\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = !isArrowJSON(source)\n            ? new MessageReader(this._handle = source)\n            : new JSONMessageReader(this._handle = source);\n    }\n    isSync() { return true; }\n    isStream() { return true; }\n    [Symbol.iterator]() {\n        return this;\n    }\n    cancel() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    open(options) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = this._reader.readSchema()))) {\n                this.cancel();\n            }\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message, { _reader: reader } = this;\n        while (message = this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    _readNextMessageAndValidate(type) {\n        return this._reader.readMessage(type);\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImpl {\n    constructor(source, dictionaries) {\n        super(dictionaries);\n        this._reader = new AsyncMessageReader(this._handle = source);\n    }\n    isAsync() { return true; }\n    isStream() { return true; }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async cancel() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset()._reader.return();\n            this._reader = null;\n            this.dictionaries = null;\n        }\n    }\n    async open(options) {\n        if (!this.closed) {\n            this.autoDestroy = shouldAutoDestroy(this, options);\n            if (!(this.schema || (this.schema = (await this._reader.readSchema())))) {\n                await this.cancel();\n            }\n        }\n        return this;\n    }\n    async throw(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    async return(value) {\n        if (!this.closed && this.autoDestroy && (this.closed = true)) {\n            return await this.reset()._reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    async next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message, { _reader: reader } = this;\n        while (message = await this._readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this._recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this._dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    async _readNextMessageAndValidate(type) {\n        return await this._reader.readMessage(type);\n    }\n}\n/** @ignore */\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source instanceof RandomAccessFile ? source : new RandomAccessFile(source), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isSync() { return true; }\n    isFile() { return true; }\n    open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return super.open(options);\n    }\n    readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this._footer) {\n            this.open();\n        }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    _readDictionaryBatch(index) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && this._handle.seek(block.offset)) {\n            const message = this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    _readFooter() {\n        const { _handle } = this;\n        const offset = _handle.size - magicAndPadding;\n        const length = _handle.readInt32(offset);\n        const buffer = _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    _readNextMessageAndValidate(type) {\n        if (!this._footer) {\n            this.open();\n        }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer && this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && this._handle.seek(block.offset)) {\n                return this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n    constructor(source, ...rest) {\n        const byteLength = typeof rest[0] !== 'number' ? rest.shift() : undefined;\n        const dictionaries = rest[0] instanceof Map ? rest.shift() : undefined;\n        super(source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength), dictionaries);\n    }\n    get footer() { return this._footer; }\n    get numDictionaries() { return this._footer ? this._footer.numDictionaries : 0; }\n    get numRecordBatches() { return this._footer ? this._footer.numRecordBatches : 0; }\n    isFile() { return true; }\n    isAsync() { return true; }\n    async open(options) {\n        if (!this.closed && !this._footer) {\n            this.schema = (this._footer = await this._readFooter()).schema;\n            for (const block of this._footer.dictionaryBatches()) {\n                block && await this._readDictionaryBatch(this._dictionaryIndex++);\n            }\n        }\n        return await super.open(options);\n    }\n    async readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this._footer) {\n            await this.open();\n        }\n        const block = this._footer && this._footer.getRecordBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    async _readDictionaryBatch(index) {\n        const block = this._footer && this._footer.getDictionaryBatch(index);\n        if (block && (await this._handle.seek(block.offset))) {\n            const message = await this._reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this._reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    async _readFooter() {\n        const { _handle } = this;\n        _handle._pending && await _handle._pending;\n        const offset = _handle.size - magicAndPadding;\n        const length = await _handle.readInt32(offset);\n        const buffer = await _handle.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    async _readNextMessageAndValidate(type) {\n        if (!this._footer) {\n            await this.open();\n        }\n        if (this._footer && this._recordBatchIndex < this.numRecordBatches) {\n            const block = this._footer.getRecordBatch(this._recordBatchIndex);\n            if (block && await this._handle.seek(block.offset)) {\n                return await this._reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\n/** @ignore */\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(source, dictionaries) {\n        super(source, dictionaries);\n    }\n    _loadVectors(header, body, types) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n//\n// Define some helper functions and static implementations down here. There's\n// a bit of branching in the static methods that can lead to the same routines\n// being executed, so we've broken those out here for readability.\n//\n/** @ignore */\nfunction shouldAutoDestroy(self, options) {\n    return options && (typeof options['autoDestroy'] === 'boolean') ? options['autoDestroy'] : self['autoDestroy'];\n}\n/** @ignore */\nfunction* readAllSync(source) {\n    const reader = RecordBatchReader.from(source);\n    try {\n        if (!reader.open({ autoDestroy: false }).closed) {\n            do {\n                yield reader;\n            } while (!(reader.reset().open()).closed);\n        }\n    }\n    finally {\n        reader.cancel();\n    }\n}\n/** @ignore */\nasync function* readAllAsync(source) {\n    const reader = await RecordBatchReader.from(source);\n    try {\n        if (!(await reader.open({ autoDestroy: false })).closed) {\n            do {\n                yield reader;\n            } while (!(await reader.reset().open()).closed);\n        }\n    }\n    finally {\n        await reader.cancel();\n    }\n}\n/** @ignore */\nfunction fromArrowJSON(source) {\n    return new RecordBatchStreamReader(new RecordBatchJSONReaderImpl(source));\n}\n/** @ignore */\nfunction fromByteStream(source) {\n    const bytes = source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(source.read()))\n        : new RecordBatchStreamReader(new RecordBatchStreamReaderImpl(function* () { }()));\n}\n/** @ignore */\nasync function fromAsyncByteStream(source) {\n    const bytes = await source.peek((magicLength + 7) & ~7);\n    return bytes && bytes.byteLength >= 4 ? !checkForMagicArrowString(bytes)\n        ? new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(source))\n        : new RecordBatchFileReader(new RecordBatchFileReaderImpl(await source.read()))\n        : new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(async function* () { }()));\n}\n/** @ignore */\nasync function fromFileHandle(source) {\n    const { size } = await source.stat();\n    const file = new AsyncRandomAccessFile(source, size);\n    if (size >= magicX2AndPadding) {\n        if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n            return new AsyncRecordBatchFileReader(new AsyncRecordBatchFileReaderImpl(file));\n        }\n    }\n    return new AsyncRecordBatchStreamReader(new AsyncRecordBatchStreamReaderImpl(file));\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array } from '../../util/buffer';\nimport { isIterable, isAsyncIterable } from '../../util/compat';\n/** @ignore */\nexport function toDOMStream(source, options) {\n    if (isAsyncIterable(source)) {\n        return asyncIterableAsReadableDOMStream(source, options);\n    }\n    if (isIterable(source)) {\n        return iterableAsReadableDOMStream(source, options);\n    }\n    /* istanbul ignore next */\n    throw new Error(`toDOMStream() must be called with an Iterable or AsyncIterable`);\n}\n/** @ignore */\nfunction iterableAsReadableDOMStream(source, options) {\n    let it = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n    return new ReadableStream({\n        ...options,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n    function next(controller, it) {\n        let buf;\n        let r = null;\n        let size = controller.desiredSize || null;\n        while (!(r = it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n/** @ignore */\nfunction asyncIterableAsReadableDOMStream(source, options) {\n    let it = null;\n    const bm = (options && options.type === 'bytes') || false;\n    const hwm = options && options.highWaterMark || (2 ** 24);\n    return new ReadableStream({\n        ...options,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    }, { highWaterMark: bm ? hwm : undefined, ...options });\n    async function next(controller, it) {\n        let buf;\n        let r = null;\n        let size = controller.desiredSize || null;\n        while (!(r = await it.next(bm ? size : null)).done) {\n            if (ArrayBuffer.isView(r.value) && (buf = toUint8Array(r.value))) {\n                size != null && bm && (size = size - buf.byteLength + 1);\n                r.value = buf;\n            }\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\n/** @ignore */\nexport class Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\n/** @ignore */\nexport class Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\n/** @ignore */\nexport class Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n}\n/** @ignore */\nexport class Predicate {\n    and(...expr) { return new And(this, ...expr); }\n    or(...expr) { return new Or(this, ...expr); }\n    not() { return new Not(this); }\n}\n/** @ignore */\nexport class ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\n/** @ignore */\nexport class CombinationPredicate extends Predicate {\n    constructor(...children) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\n/** @ignore */\nexport class And extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ands\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.every((p) => p(idx, batch));\n    }\n}\n/** @ignore */\nexport class Or extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ors\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.some((p) => p(idx, batch));\n    }\n}\n/** @ignore */\nexport class Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\n/** @ignore */\nexport class LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\n/** @ignore */\nexport class GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\n/** @ignore */\nexport class Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\n/** @ignore */\nexport class CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexport function lit(v) { return new Literal(v); }\nexport function col(n) { return new Col(n); }\nexport function and(...p) { return new And(...p); }\nexport function or(...p) { return new Or(...p); }\nexport function custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Table } from '../table';\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { DataType } from '../type';\nTable.prototype.countBy = function (name) { return new DataFrame(this.chunks).countBy(name); };\nTable.prototype.scan = function (next, bind) { return new DataFrame(this.chunks).scan(next, bind); };\nTable.prototype.filter = function (predicate) { return new DataFrame(this.chunks).filter(predicate); };\nexport class DataFrame extends Table {\n    filter(predicate) {\n        return new FilteredDataFrame(this.chunks, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.chunks, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    countBy(name) {\n        const batches = this.chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nexport class CountByResult extends Table {\n    constructor(values, counts) {\n        const schema = new Schema([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nexport class FilteredDataFrame extends DataFrame {\n    constructor(batches, predicate) {\n        super(batches);\n        this._predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    *[Symbol.iterator]() {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this._chunks;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this._predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    yield batch.get(index);\n                }\n            }\n        }\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this._chunks, this._predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this._chunks, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this._predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport { DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, } from './type';\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport { Row, Vector, BaseVector, BinaryVector, BoolVector, Chunked, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, } from './vector/index';\nexport { ByteStream, AsyncByteStream, AsyncByteQueue } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { DataFrame, FilteredDataFrame, CountByResult } from './compute/dataframe';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { toDOMStream } from './ipc/whatwg/iterable';\nimport { recordBatchReaderThroughDOMStream } from './ipc/whatwg/reader';\nimport { recordBatchWriterThroughDOMStream } from './ipc/whatwg/writer';\nstreamAdapters.toDOMStream = toDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType, Data, DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, Table, Column, Schema, Field, Visitor, Vector, BaseVector, BinaryVector, BoolVector, Chunked, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, ByteStream, AsyncByteStream, AsyncByteQueue, RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader, RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, RecordBatchJSONWriter, MessageReader, AsyncMessageReader, JSONMessageReader, Message, RecordBatch, DataFrame, FilteredDataFrame, CountByResult, predicate, util } from './Arrow';\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUMzQyxpQkFBaUIsRUFBRSxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSwwQkFBMEIsRUFBRSw0QkFBNEIsRUFDM0gsaUJBQWlCLEVBQUUscUJBQXFCLEVBQUUsdUJBQXVCLEVBQUUscUJBQXFCLEVBQ3hGLGFBQWEsRUFBRSxrQkFBa0IsRUFBRSxpQkFBaUIsRUFDcEQsT0FBTyxFQUNQLFdBQVcsRUFFWCxTQUFTLEVBQUUsaUJBQWlCLEVBQUUsYUFBYSxFQUMzQyxTQUFTLEVBQ1QsSUFBSSxFQUNQLE1BQU0sU0FBUyxDQUFDIiwiZmlsZSI6IkFycm93LmRvbS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgc3RyZWFtQWRhcHRlcnMgZnJvbSAnLi9pby9hZGFwdGVycyc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaFJlYWRlciB9IGZyb20gJy4vaXBjL3JlYWRlcic7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaFdyaXRlciB9IGZyb20gJy4vaXBjL3dyaXRlcic7XG5pbXBvcnQgeyB0b0RPTVN0cmVhbSB9IGZyb20gJy4vaXBjL3doYXR3Zy9pdGVyYWJsZSc7XG5pbXBvcnQgeyByZWNvcmRCYXRjaFJlYWRlclRocm91Z2hET01TdHJlYW0gfSBmcm9tICcuL2lwYy93aGF0d2cvcmVhZGVyJztcbmltcG9ydCB7IHJlY29yZEJhdGNoV3JpdGVyVGhyb3VnaERPTVN0cmVhbSB9IGZyb20gJy4vaXBjL3doYXR3Zy93cml0ZXInO1xuXG5zdHJlYW1BZGFwdGVycy50b0RPTVN0cmVhbSA9IHRvRE9NU3RyZWFtO1xuUmVjb3JkQmF0Y2hSZWFkZXJbJ3Rocm91Z2hET00nXSA9IHJlY29yZEJhdGNoUmVhZGVyVGhyb3VnaERPTVN0cmVhbTtcblJlY29yZEJhdGNoV3JpdGVyWyd0aHJvdWdoRE9NJ10gPSByZWNvcmRCYXRjaFdyaXRlclRocm91Z2hET01TdHJlYW07XG5cbmV4cG9ydCB7XG4gICAgQXJyb3dUeXBlLCBEYXRlVW5pdCwgSW50ZXJ2YWxVbml0LCBNZXNzYWdlSGVhZGVyLCBNZXRhZGF0YVZlcnNpb24sIFByZWNpc2lvbiwgVGltZVVuaXQsIFR5cGUsIFVuaW9uTW9kZSwgVmVjdG9yVHlwZSxcbiAgICBEYXRhLFxuICAgIERhdGFUeXBlLFxuICAgIE51bGwsXG4gICAgQm9vbCxcbiAgICBJbnQsIEludDgsIEludDE2LCBJbnQzMiwgSW50NjQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LFxuICAgIEZsb2F0LCBGbG9hdDE2LCBGbG9hdDMyLCBGbG9hdDY0LFxuICAgIFV0ZjgsXG4gICAgQmluYXJ5LFxuICAgIEZpeGVkU2l6ZUJpbmFyeSxcbiAgICBEYXRlXywgRGF0ZURheSwgRGF0ZU1pbGxpc2Vjb25kLFxuICAgIFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQsXG4gICAgVGltZSwgVGltZVNlY29uZCwgVGltZU1pbGxpc2Vjb25kLCBUaW1lTWljcm9zZWNvbmQsIFRpbWVOYW5vc2Vjb25kLFxuICAgIERlY2ltYWwsXG4gICAgTGlzdCxcbiAgICBTdHJ1Y3QsXG4gICAgVW5pb24sIERlbnNlVW5pb24sIFNwYXJzZVVuaW9uLFxuICAgIERpY3Rpb25hcnksXG4gICAgSW50ZXJ2YWwsIEludGVydmFsRGF5VGltZSwgSW50ZXJ2YWxZZWFyTW9udGgsXG4gICAgRml4ZWRTaXplTGlzdCxcbiAgICBNYXBfLFxuICAgIFRhYmxlLFxuICAgIENvbHVtbixcbiAgICBTY2hlbWEsIEZpZWxkLFxuICAgIFZpc2l0b3IsXG4gICAgVmVjdG9yLFxuICAgIEJhc2VWZWN0b3IsXG4gICAgQmluYXJ5VmVjdG9yLFxuICAgIEJvb2xWZWN0b3IsXG4gICAgQ2h1bmtlZCxcbiAgICBEYXRlVmVjdG9yLCBEYXRlRGF5VmVjdG9yLCBEYXRlTWlsbGlzZWNvbmRWZWN0b3IsXG4gICAgRGVjaW1hbFZlY3RvcixcbiAgICBEaWN0aW9uYXJ5VmVjdG9yLFxuICAgIEZpeGVkU2l6ZUJpbmFyeVZlY3RvcixcbiAgICBGaXhlZFNpemVMaXN0VmVjdG9yLFxuICAgIEZsb2F0VmVjdG9yLCBGbG9hdDE2VmVjdG9yLCBGbG9hdDMyVmVjdG9yLCBGbG9hdDY0VmVjdG9yLFxuICAgIEludGVydmFsVmVjdG9yLCBJbnRlcnZhbERheVRpbWVWZWN0b3IsIEludGVydmFsWWVhck1vbnRoVmVjdG9yLFxuICAgIEludFZlY3RvciwgSW50OFZlY3RvciwgSW50MTZWZWN0b3IsIEludDMyVmVjdG9yLCBJbnQ2NFZlY3RvciwgVWludDhWZWN0b3IsIFVpbnQxNlZlY3RvciwgVWludDMyVmVjdG9yLCBVaW50NjRWZWN0b3IsXG4gICAgTGlzdFZlY3RvcixcbiAgICBNYXBWZWN0b3IsXG4gICAgTnVsbFZlY3RvcixcbiAgICBTdHJ1Y3RWZWN0b3IsXG4gICAgVGltZXN0YW1wVmVjdG9yLCBUaW1lc3RhbXBTZWNvbmRWZWN0b3IsIFRpbWVzdGFtcE1pbGxpc2Vjb25kVmVjdG9yLCBUaW1lc3RhbXBNaWNyb3NlY29uZFZlY3RvciwgVGltZXN0YW1wTmFub3NlY29uZFZlY3RvcixcbiAgICBUaW1lVmVjdG9yLCBUaW1lU2Vjb25kVmVjdG9yLCBUaW1lTWlsbGlzZWNvbmRWZWN0b3IsIFRpbWVNaWNyb3NlY29uZFZlY3RvciwgVGltZU5hbm9zZWNvbmRWZWN0b3IsXG4gICAgVW5pb25WZWN0b3IsIERlbnNlVW5pb25WZWN0b3IsIFNwYXJzZVVuaW9uVmVjdG9yLFxuICAgIFV0ZjhWZWN0b3IsXG4gICAgQnl0ZVN0cmVhbSwgQXN5bmNCeXRlU3RyZWFtLCBBc3luY0J5dGVRdWV1ZSwgUmVhZGFibGVTb3VyY2UsIFdyaXRhYmxlU2luayxcbiAgICBSZWNvcmRCYXRjaFJlYWRlciwgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyLCBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlciwgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXIsIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXIsXG4gICAgUmVjb3JkQmF0Y2hXcml0ZXIsIFJlY29yZEJhdGNoRmlsZVdyaXRlciwgUmVjb3JkQmF0Y2hTdHJlYW1Xcml0ZXIsIFJlY29yZEJhdGNoSlNPTldyaXRlcixcbiAgICBNZXNzYWdlUmVhZGVyLCBBc3luY01lc3NhZ2VSZWFkZXIsIEpTT05NZXNzYWdlUmVhZGVyLFxuICAgIE1lc3NhZ2UsXG4gICAgUmVjb3JkQmF0Y2gsXG4gICAgQXJyb3dKU09OTGlrZSwgRmlsZUhhbmRsZSwgUmVhZGFibGUsIFdyaXRhYmxlLCBSZWFkYWJsZVdyaXRhYmxlLCBSZWFkYWJsZURPTVN0cmVhbU9wdGlvbnMsXG4gICAgRGF0YUZyYW1lLCBGaWx0ZXJlZERhdGFGcmFtZSwgQ291bnRCeVJlc3VsdCwgQmluZEZ1bmMsIE5leHRGdW5jLFxuICAgIHByZWRpY2F0ZSxcbiAgICB1dGlsXG59IGZyb20gJy4vQXJyb3cnO1xuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteQueue } from '../../io/stream';\nimport { RecordBatchReader } from '../../ipc/reader';\n/** @ignore */\nexport function recordBatchReaderThroughDOMStream(writableStrategy, readableStrategy) {\n    const queue = new AsyncByteQueue();\n    let reader = null;\n    const readable = new ReadableStream({\n        async cancel() { await queue.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n    return { writable: new WritableStream(queue, { 'highWaterMark': 2 ** 14, ...writableStrategy }), readable };\n    async function open() {\n        return await (await RecordBatchReader.from(queue)).open(readableStrategy);\n    }\n    async function next(controller, reader) {\n        let size = controller.desiredSize;\n        let r = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93aGF0d2cvcmVhZGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDakQsT0FBTyxFQUFFLGlCQUFpQixFQUFFLE1BQU0sa0JBQWtCLENBQUM7QUFFckQsY0FBYztBQUNkLE1BQU0sVUFBVSxpQ0FBaUMsQ0FBOEMsZ0JBQTRDLEVBQUUsZ0JBQTJDO0lBRXBMLE1BQU0sS0FBSyxHQUFHLElBQUksY0FBYyxFQUFFLENBQUM7SUFDbkMsSUFBSSxNQUFNLEdBQWdDLElBQUksQ0FBQztJQUUvQyxNQUFNLFFBQVEsR0FBRyxJQUFJLGNBQWMsQ0FBaUI7UUFDaEQsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLEtBQUssQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkMsS0FBSyxDQUFDLEtBQUssQ0FBQyxVQUFVLElBQUksTUFBTSxJQUFJLENBQUMsVUFBVSxFQUFFLE1BQU0sSUFBSSxDQUFDLE1BQU0sR0FBRyxNQUFNLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDdEYsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxVQUFVLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUM7S0FDM0YsQ0FBQyxDQUFDO0lBRUgsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLGNBQWMsQ0FBQyxLQUFLLEVBQUUsRUFBRSxlQUFlLEVBQUUsQ0FBQyxJQUFJLEVBQUUsRUFBRSxHQUFHLGdCQUFnQixFQUFFLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUU1RyxLQUFLLFVBQVUsSUFBSTtRQUNmLE9BQU8sTUFBTSxDQUFDLE1BQU0saUJBQWlCLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDOUUsQ0FBQztJQUVELEtBQUssVUFBVSxJQUFJLENBQUMsVUFBMkQsRUFBRSxNQUE0QjtRQUN6RyxJQUFJLElBQUksR0FBRyxVQUFVLENBQUMsV0FBVyxDQUFDO1FBQ2xDLElBQUksQ0FBQyxHQUEwQyxJQUFJLENBQUM7UUFDcEQsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLE1BQU0sTUFBTSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsSUFBSSxFQUFFO1lBQ3BDLFVBQVUsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQzVCLElBQUksSUFBSSxJQUFJLElBQUksSUFBSSxFQUFFLElBQUksSUFBSSxDQUFDLEVBQUU7Z0JBQzdCLE9BQU87YUFDVjtTQUNKO1FBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6ImlwYy93aGF0d2cvcmVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaCB9IGZyb20gJy4uLy4uL3JlY29yZGJhdGNoJztcbmltcG9ydCB7IEFzeW5jQnl0ZVF1ZXVlIH0gZnJvbSAnLi4vLi4vaW8vc3RyZWFtJztcbmltcG9ydCB7IFJlY29yZEJhdGNoUmVhZGVyIH0gZnJvbSAnLi4vLi4vaXBjL3JlYWRlcic7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgZnVuY3Rpb24gcmVjb3JkQmF0Y2hSZWFkZXJUaHJvdWdoRE9NU3RyZWFtPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHdyaXRhYmxlU3RyYXRlZ3k/OiBCeXRlTGVuZ3RoUXVldWluZ1N0cmF0ZWd5LCByZWFkYWJsZVN0cmF0ZWd5PzogeyBhdXRvRGVzdHJveTogYm9vbGVhbiB9KSB7XG5cbiAgICBjb25zdCBxdWV1ZSA9IG5ldyBBc3luY0J5dGVRdWV1ZSgpO1xuICAgIGxldCByZWFkZXI6IFJlY29yZEJhdGNoUmVhZGVyPFQ+IHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbTxSZWNvcmRCYXRjaDxUPj4oe1xuICAgICAgICBhc3luYyBjYW5jZWwoKSB7IGF3YWl0IHF1ZXVlLmNsb3NlKCk7IH0sXG4gICAgICAgIGFzeW5jIHN0YXJ0KGNvbnRyb2xsZXIpIHsgYXdhaXQgbmV4dChjb250cm9sbGVyLCByZWFkZXIgfHwgKHJlYWRlciA9IGF3YWl0IG9wZW4oKSkpOyB9LFxuICAgICAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHsgcmVhZGVyID8gYXdhaXQgbmV4dChjb250cm9sbGVyLCByZWFkZXIpIDogY29udHJvbGxlci5jbG9zZSgpOyB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyB3cml0YWJsZTogbmV3IFdyaXRhYmxlU3RyZWFtKHF1ZXVlLCB7ICdoaWdoV2F0ZXJNYXJrJzogMiAqKiAxNCwgLi4ud3JpdGFibGVTdHJhdGVneSB9KSwgcmVhZGFibGUgfTtcblxuICAgIGFzeW5jIGZ1bmN0aW9uIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiBhd2FpdCAoYXdhaXQgUmVjb3JkQmF0Y2hSZWFkZXIuZnJvbShxdWV1ZSkpLm9wZW4ocmVhZGFibGVTdHJhdGVneSk7XG4gICAgfVxuXG4gICAgYXN5bmMgZnVuY3Rpb24gbmV4dChjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyPFJlY29yZEJhdGNoPFQ+PiwgcmVhZGVyOiBSZWNvcmRCYXRjaFJlYWRlcjxUPikge1xuICAgICAgICBsZXQgc2l6ZSA9IGNvbnRyb2xsZXIuZGVzaXJlZFNpemU7XG4gICAgICAgIGxldCByOiBJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4gfCBudWxsID0gbnVsbDtcbiAgICAgICAgd2hpbGUgKCEociA9IGF3YWl0IHJlYWRlci5uZXh0KCkpLmRvbmUpIHtcbiAgICAgICAgICAgIGNvbnRyb2xsZXIuZW5xdWV1ZShyLnZhbHVlKTtcbiAgICAgICAgICAgIGlmIChzaXplICE9IG51bGwgJiYgLS1zaXplIDw9IDApIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY29udHJvbGxlci5jbG9zZSgpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { AsyncByteStream } from '../../io/stream';\n/** @ignore */\nexport function recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n    const writer = new this(writableStrategy);\n    const reader = new AsyncByteStream(writer);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await reader.cancel(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, { 'highWaterMark': 2 ** 14, ...readableStrategy });\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n    async function next(controller) {\n        let buf = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            controller.enqueue(buf);\n            if (size != null && (size -= buf.byteLength) <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93aGF0d2cvd3JpdGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFHbEQsY0FBYztBQUNkLE1BQU0sVUFBVSxpQ0FBaUMsQ0FFN0MsZ0JBQTZFLEVBQzdFLGdCQUF5RDtJQUd6RCxNQUFNLE1BQU0sR0FBRyxJQUFJLElBQUksQ0FBSSxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzdDLE1BQU0sTUFBTSxHQUFHLElBQUksZUFBZSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQzNDLE1BQU0sUUFBUSxHQUFHLElBQUksY0FBYyxDQUFDO1FBQ2hDLElBQUksRUFBRSxPQUFPO1FBQ2IsS0FBSyxDQUFDLE1BQU0sS0FBSyxNQUFNLE1BQU0sQ0FBQyxNQUFNLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDekMsS0FBSyxDQUFDLElBQUksQ0FBQyxVQUFVLElBQUksTUFBTSxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2xELEtBQUssQ0FBQyxLQUFLLENBQUMsVUFBVSxJQUFJLE1BQU0sSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztLQUN0RCxFQUFFLEVBQUUsZUFBZSxFQUFFLENBQUMsSUFBSSxFQUFFLEVBQUUsR0FBRyxnQkFBZ0IsRUFBRSxDQUFDLENBQUM7SUFFdEQsT0FBTyxFQUFFLFFBQVEsRUFBRSxJQUFJLGNBQWMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxRQUFRLEVBQUUsQ0FBQztJQUU1RSxLQUFLLFVBQVUsSUFBSSxDQUFDLFVBQXVEO1FBQ3ZFLElBQUksR0FBRyxHQUFzQixJQUFJLENBQUM7UUFDbEMsSUFBSSxJQUFJLEdBQUcsVUFBVSxDQUFDLFdBQVcsQ0FBQztRQUNsQyxPQUFPLEdBQUcsR0FBRyxNQUFNLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxJQUFJLElBQUksQ0FBQyxFQUFFO1lBQzFDLFVBQVUsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7WUFDeEIsSUFBSSxJQUFJLElBQUksSUFBSSxJQUFJLENBQUMsSUFBSSxJQUFJLEdBQUcsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEVBQUU7Z0JBQUUsT0FBTzthQUFFO1NBQ2pFO1FBQ0QsVUFBVSxDQUFDLEtBQUssRUFBRSxDQUFDO0lBQ3ZCLENBQUM7QUFDTCxDQUFDIiwiZmlsZSI6ImlwYy93aGF0d2cvd3JpdGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaCB9IGZyb20gJy4uLy4uL3JlY29yZGJhdGNoJztcbmltcG9ydCB7IEFzeW5jQnl0ZVN0cmVhbSB9IGZyb20gJy4uLy4uL2lvL3N0cmVhbSc7XG5pbXBvcnQgeyBSZWNvcmRCYXRjaFdyaXRlciB9IGZyb20gJy4uLy4uL2lwYy93cml0ZXInO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJlY29yZEJhdGNoV3JpdGVyVGhyb3VnaERPTVN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PihcbiAgICB0aGlzOiB0eXBlb2YgUmVjb3JkQmF0Y2hXcml0ZXIsXG4gICAgd3JpdGFibGVTdHJhdGVneT86IFF1ZXVpbmdTdHJhdGVneTxSZWNvcmRCYXRjaDxUPj4gJiB7IGF1dG9EZXN0cm95OiBib29sZWFuIH0sXG4gICAgcmVhZGFibGVTdHJhdGVneT86IHsgaGlnaFdhdGVyTWFyaz86IG51bWJlciwgc2l6ZT86IGFueSB9XG4pIHtcblxuICAgIGNvbnN0IHdyaXRlciA9IG5ldyB0aGlzPFQ+KHdyaXRhYmxlU3RyYXRlZ3kpO1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBBc3luY0J5dGVTdHJlYW0od3JpdGVyKTtcbiAgICBjb25zdCByZWFkYWJsZSA9IG5ldyBSZWFkYWJsZVN0cmVhbSh7XG4gICAgICAgIHR5cGU6ICdieXRlcycsXG4gICAgICAgIGFzeW5jIGNhbmNlbCgpIHsgYXdhaXQgcmVhZGVyLmNhbmNlbCgpOyB9LFxuICAgICAgICBhc3luYyBwdWxsKGNvbnRyb2xsZXIpIHsgYXdhaXQgbmV4dChjb250cm9sbGVyKTsgfSxcbiAgICAgICAgYXN5bmMgc3RhcnQoY29udHJvbGxlcikgeyBhd2FpdCBuZXh0KGNvbnRyb2xsZXIpOyB9LFxuICAgIH0sIHsgJ2hpZ2hXYXRlck1hcmsnOiAyICoqIDE0LCAuLi5yZWFkYWJsZVN0cmF0ZWd5IH0pO1xuXG4gICAgcmV0dXJuIHsgd3JpdGFibGU6IG5ldyBXcml0YWJsZVN0cmVhbSh3cml0ZXIsIHdyaXRhYmxlU3RyYXRlZ3kpLCByZWFkYWJsZSB9O1xuXG4gICAgYXN5bmMgZnVuY3Rpb24gbmV4dChjb250cm9sbGVyOiBSZWFkYWJsZVN0cmVhbURlZmF1bHRDb250cm9sbGVyPFVpbnQ4QXJyYXk+KSB7XG4gICAgICAgIGxldCBidWY6IFVpbnQ4QXJyYXkgfCBudWxsID0gbnVsbDtcbiAgICAgICAgbGV0IHNpemUgPSBjb250cm9sbGVyLmRlc2lyZWRTaXplO1xuICAgICAgICB3aGlsZSAoYnVmID0gYXdhaXQgcmVhZGVyLnJlYWQoc2l6ZSB8fCBudWxsKSkge1xuICAgICAgICAgICAgY29udHJvbGxlci5lbnF1ZXVlKGJ1Zik7XG4gICAgICAgICAgICBpZiAoc2l6ZSAhPSBudWxsICYmIChzaXplIC09IGJ1Zi5ieXRlTGVuZ3RoKSA8PSAwKSB7IHJldHVybjsgfVxuICAgICAgICB9XG4gICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcbiAgICB9XG59XG4iXX0=\n","import * as exports0 from './Arrow.dom.js';\nimport * as exports1 from './util/int.js';\nimport * as exports2 from './compute/predicate.js';\nObject.assign(arguments[0], exports0);"]}