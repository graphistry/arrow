{"version":3,"sources":["targets/es5/cls/fb/Schema.js"," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:es6/generator_engine] ","node_modules/flatbuffers/js/flatbuffers.mjs","targets/es5/cls/ipc/writer/binary.js","targets/es5/cls/fb/Message.js","targets/es5/cls/util/bit.js","targets/es5/cls/ipc/metadata.js","targets/es5/cls/visitor.js","targets/es5/cls/type.js","targets/es5/cls/data.js","targets/es5/cls/vector/chunked.js","targets/es5/cls/vector/validity.js","targets/es5/cls/vector/dictionary.js","node_modules/text-encoding-utf-8/src/encoding.js","targets/es5/cls/vector/list.js","targets/es5/cls/util/pretty.js","targets/es5/cls/recordbatch.js","targets/es5/cls/vector/nested.js","targets/es5/cls/vector.js","targets/es5/cls/vector/flat.js","targets/es5/cls/util/int.js","node_modules/tslib/tslib.es6.js","targets/es5/cls/util/node.js","targets/es5/cls/vector/view.js","targets/es5/cls/predicate.js","targets/es5/cls/ipc/reader/vector.js","targets/es5/cls/ipc/reader/json.js","targets/es5/cls/ipc/magic.js","targets/es5/cls/ipc/reader/node.js","targets/es5/cls/fb/File.js","targets/es5/cls/ipc/reader/binary.js","targets/es5/cls/ipc/reader/arrow.js","targets/es5/cls/ipc/writer/arrow.js","targets/es5/cls/table.js","targets/es5/cls/Arrow.js","targets/es5/cls/util/compat.js"],"names":["$jscomp.defineProperty","$jscomp.global","$jscomp.initSymbol","$jscomp.Symbol","$jscomp.SYMBOL_PREFIX","$jscomp.arrayIterator","$jscomp.initSymbolIterator","$jscomp.initSymbolAsyncIterator","$jscomp.iteratorPrototype","$jscomp.objectCreate","$jscomp.setPrototypeOf","$jscomp.generator.Context","$jscomp.makeIterator","$jscomp.generator.ensureIteratorResultIsObject_","$jscomp.generator.Engine_","$jscomp.generator.Generator_","org","apache","arrow","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","constructor","Null","bb_pos","__init","i","bb","getRootAsNull","obj","readInt32","position","startNull","builder","startObject","endNull","endObject","Struct_","getRootAsStruct_","startStruct_","endStruct_","List","getRootAsList","startList","endList","FixedSizeList","getRootAsFixedSizeList","listSize","offset","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","Map","getRootAsMap","keysSorted","bytes_","startMap","addKeysSorted","addFieldInt8","endMap","Union","getRootAsUnion","mode","readInt16","Sparse","typeIds","index","__vector","typeIdsArray","Int32Array","bytes","buffer","byteOffset","__vector_len","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startVector","length","prep","writeInt32","value","endVector","startTypeIdsVector","numElems","endUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","Binary","getRootAsBinary","startBinary","endBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","Time","getRootAsTime","startTime","endTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","VectorLayout","getRootAsVectorLayout","type","OFFSET","startVectorLayout","addType","endVectorLayout","KeyValue","getRootAsKeyValue","key","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","createLong","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","Field","getRootAsField","name","nullable","typeType","NONE","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","addOffset","startChildrenVector","addLayout","layoutOffset","createLayoutVector","startLayoutVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","Buffer","createBuffer","writeInt64","Schema","getRootAsSchema","fields","fieldsLength","startSchema","addEndianness","platformIsLittleEndian","endianness","_Endianness","Little","Big","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","finish","module$targets$es5$cls$fb$Schema.org","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Schema","MessageHeader","FieldNode","nullCount","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","buffers","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Buffer","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","Message","getRootAsMessage","version","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion.V1","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","module$targets$es5$cls$fb$Message.org","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32","Float32Array","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32.buffer","Float64Array","Uint16Array","Uint8Array","flatbuffers.Long","low","high","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long","prototype","equals","flatbuffers.Long.prototype.equals","other","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long.ZERO","flatbuffers.Builder","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","flatbuffers.Builder.prototype.asUint8Array","subarray","flatbuffers.Builder.prototype.prep","size","additional_bytes","align_size","old_buf_size","Error","new_buf_size","nbb","setPosition","set","pad","flatbuffers.Builder.prototype.pad","byte_size","writeInt8","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder.prototype","flatbuffers.Builder.prototype.writeInt8","writeInt16","flatbuffers.Builder.prototype.writeInt16","flatbuffers.Builder.prototype.writeInt32","flatbuffers.Builder.prototype.writeInt64","flatbuffers.Builder.prototype.addInt16","flatbuffers.Builder.prototype.addFieldInt8","voffset","defaultValue","addInt8","slot","flatbuffers.Builder.prototype.addFieldInt16","addInt16","flatbuffers.Builder.prototype.addFieldInt32","addInt32","flatbuffers.Builder.prototype.addFieldInt64","addInt64","flatbuffers.Builder.prototype.addFieldOffset","flatbuffers.Builder.prototype.notNested","flatbuffers.Builder.prototype.slot","flatbuffers.Builder.prototype.offset","flatbuffers.Builder.prototype.addOffset","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_INT","flatbuffers.Builder.prototype.startObject","numfields","notNested","flatbuffers.Builder.prototype.endObject","vtableloc","trimmed_size","len","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_SHORT","standard_fields","existing_vtable","vt1","vt2","j","push","flatbuffers.Builder.prototype.finish","root_table","opt_file_identifier","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.FILE_IDENTIFIER_LENGTH","charCodeAt","flatbuffers.Builder.prototype.startVector","elem_size","num_elems","alignment","flatbuffers.Builder.prototype.endVector","flatbuffers.Builder.prototype.createString","s","utf8","a","b","codePoint","flatbuffers.Builder.prototype.createLong","flatbuffers.ByteBuffer","position_","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer.prototype","flatbuffers.ByteBuffer.prototype.bytes","flatbuffers.ByteBuffer.prototype.position","flatbuffers.ByteBuffer.prototype.setPosition","flatbuffers.ByteBuffer.prototype.readUint8","flatbuffers.ByteBuffer.prototype.readInt16","readUint16","flatbuffers.ByteBuffer.prototype.readInt32","flatbuffers.ByteBuffer.prototype.readInt64","flatbuffers.ByteBuffer.prototype.writeInt8","flatbuffers.ByteBuffer.prototype.writeInt16","flatbuffers.ByteBuffer.prototype.writeInt32","flatbuffers.ByteBuffer.prototype.writeInt64","flatbuffers.ByteBuffer.prototype.__offset","vtable_offset","flatbuffers.ByteBuffer.prototype.__union","t","flatbuffers.ByteBuffer.prototype.__string","opt_encoding","result","UTF8_BYTES","readUint8","c","d","String","fromCharCode","flatbuffers.ByteBuffer.prototype.__indirect","flatbuffers.ByteBuffer.prototype.__vector","flatbuffers.ByteBuffer.prototype.__vector_len","flatbuffers.ByteBuffer.prototype.createLong","align","getBool","_data","_index","byte","bit","getBit","setBool","packBools","values","n","xs","iterateBits","begin","context","get","byteIndex","remaining","$jscomp.generator.createGenerator","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","cnt","pos","view","DataView","byteLength","popcnt_uint32","getUint32","getUint16","getUint8","uint32","Footer","dictionaryBatches","recordBatches","schema","FileBlock","metaDataLength","RecordBatchMetadata","reduce","$jscomp.inherits","$jscomp.global.Object.defineProperties","DictionaryBatch$$module$targets$es5$cls$ipc$metadata.atomicDictionaryId","BufferMetadata","FieldMetadata","TypeVisitor","visit","acceptTypeVisitor","visitMany","types","map","visitTypeInline","visitor","TType","module$targets$es5$cls$type.Type.Null","visitNull","module$targets$es5$cls$type.Type.Int","visitInt","module$targets$es5$cls$type.Type.Float","Float","visitFloat","module$targets$es5$cls$type.Type.Binary","visitBinary","module$targets$es5$cls$type.Type.Utf8","visitUtf8","module$targets$es5$cls$type.Type.Bool","visitBool","module$targets$es5$cls$type.Type.Decimal","visitDecimal","module$targets$es5$cls$type.Type.Date","visitDate","module$targets$es5$cls$type.Type.Time","visitTime","module$targets$es5$cls$type.Type.Timestamp","visitTimestamp","module$targets$es5$cls$type.Type.Interval","visitInterval","module$targets$es5$cls$type.Type.List","visitList","module$targets$es5$cls$type.Type.Struct","Struct","visitStruct","module$targets$es5$cls$type.Type.Union","visitUnion","module$targets$es5$cls$type.Type.FixedSizeBinary","visitFixedSizeBinary","module$targets$es5$cls$type.Type.FixedSizeList","visitFixedSizeList","module$targets$es5$cls$type.Type.Map","visitMap","module$targets$es5$cls$type.Type.Dictionary","Dictionary","visitDictionary","VectorVisitor","vector","acceptVectorVisitor","vectors","ArrowType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Type","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DateUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.TimeUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Precision","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.UnionMode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.VectorType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.IntervalUnit","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.MessageHeader","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion","metadata","dictionaries","V4","from","v","select","namesToKeep","x","Object","create","newDictFields","newFields","filter","f","forEach","dictId","_bodyLength","_headerType","toStringTag","Symbol","toString","typeId","indices","DataType$$module$targets$es5$cls$type.isDictionary","DataType","isInt","isBinary","isUtf8","isBool","isDecimal","isDate","isTime","isTimestamp","isFixedSizeBinary","isDictionary","TypeVisitor$$module$targets$es5$cls$visitor.visitTypeInline","proto","ArrayType","Array","Int8Array","Int16Array","Uint32Array","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","SINGLE","DOUBLE","Float16","Float32","Float64","Date_","valueType","join","DenseUnion","Dense","SparseUnion","Map_","getId","module$targets$es5$cls$type.Type","toTypedArray","ArrayBuffer","isView","BYTES_PER_ELEMENT","BaseData","Math","floor","max","_nullCount","clone","slice","sliceInternal","arr","TYPE","sliceData","sliceOffsets","DATA","nullBitmap","VALIDITY","FlatData","BoolData","FlatListData","valueOffsets","DictionaryData","_indices","_dictionary","NestedData","childData","child","SingleNestedData","valueChildData","_valuesData","ListData","UnionData","typeIdToChildIndex","idx","SparseUnionData","DenseUnionData","ChunkedData","chunkVectors","chunkOffsets","_chunkVectors","_chunkOffsets","ChunkedData$$module$targets$es5$cls$data.computeOffsets","vec","chunks","offsets","chunkSlices","childIndex","numChildren","childLength","childOffset","min","computeOffsets","childVectors","childOffsets","ChunkedView","iterator","getChildAt","getChildAt.prototype","_children","Vector$$module$targets$es5$cls$vector.concat.apply","Vector","$jscomp.arrayFromIterable","chunk","isValid.prototype","isValid","mid","get.prototype","set.prototype","toArray.prototype","toArray","numChunks","sources","sourcesLen","source","target","setValues","arraySet","typedArraySet","indexOf.prototype","indexOf","search","dstIdx","srcIdx","srcLen","ValidityView","clone.prototype","nullBitIndex","getNullable","DictionaryView","ToDictionary","o","undefined","TypeError","Stream","tokens","call","endOfStream","read","shift","end_of_stream","token","isArray","decoderError","fatal","TextDecoder","encoding","options","toLowerCase","DEFAULT_ENCODING","_BOMseen","_streaming","_decoder","_fatal","_ignoreBOM","defineProperty","decode","input","UTF8Decoder","input_stream","code_points","handler","finished","apply","cp","TextEncoder","_encoder","encode","opt_string","UTF8Encoder","string","u","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","this.handler","stream","bite","unshift","pop","code_point","count","encoder","bind","decoder","ListViewBase","getList","setList","VariableListViewBase","ListView","createVector","end","FixedSizeListView","BinaryView","Utf8View","decodeUtf8","encodeUtf8","leftPad","str","fill","valueToString","JSON","stringify","NestedView","toJSON.prototype","toJSON","toString.prototype","getNested","setNested","UnionView","self","getChildValue","setChildValue","_valueOffsets","DenseUnionView","StructView","RowProxy","RowView","enumerable","MapView","MapRowView","rowIndex","FlatView","NullView","BoolView","boolBitIndex","PrimitiveView","getValue.prototype","getValue","setValue.prototype","setValue","FixedSizeView","every","Float16View","DateDayView","valueOf","DateMillisecondView","epochMillisecondsLongToMs","epochMs","TimestampDayView","TimestampSecondView","TimestampMillisecondView","TimestampMicrosecondView","TimestampNanosecondView","IntervalYearMonthView","interval","IntervalYearView","IntervalMonthView","nulls","concat","others","Boolean","vecs","chunkedData","total","to","isFinite","slicedData","VectorVisitor$$module$targets$es5$cls$visitor.visitTypeInline","FlatVector","lows","asInt32","highs","stride","int32s","IntVector","ListVectorBase","getValueOffset","getValueLength","NestedVector","_childData","cols","_","NullVector","BoolVector","defaultView","is64","FloatVector","DateVector","DAY","asEpochMilliseconds","DecimalVector","TimeVector","TimestampVector","MICROSECOND","NANOSECOND","IntervalVector","BinaryVector","asUtf8","Utf8Vector","FixedSizeBinaryVector","asBinary","ListVector","FixedSizeListVector","MapVector","asStruct","StructVector","asMap","UnionVector","DictionaryVector","idxs","dict","getKey","reverseLookup","VectorLoader","visitNull.prototype","visitInt.prototype","visitFloat.prototype","visitBinary.prototype","visitUtf8.prototype","visitBool.prototype","visitDecimal.prototype","visitDate.prototype","visitTime.prototype","visitTimestamp.prototype","visitInterval.prototype","visitList.prototype","visitStruct.prototype","visitUnion.prototype","visitFixedSizeBinary.prototype","visitFixedSizeList.prototype","visitMap.prototype","visitDictionary.prototype","intAsHex","kPowersOfTen","BaseInt64","high.prototype","low.prototype","_times","L","R","product","carryBit16","_plus","lessThan.prototype","lessThan","equals.prototype","greaterThan.prototype","greaterThan","hex.prototype","hex","times","plus","multiply","left","right","negate","this_high","other_high","fromString","out_buffer","startsWith","out","posn","group","kInt32DecimalDigits","parseInt","substr","Int128","negate.prototype","times.prototype","L0","L1","L2","L3","R0","R1","R2","R3","Uint64$$module$targets$es5$cls$util$int.multiply","plus.prototype","sums","__awaiter","thisArg","generator","P","throw","Promise","resolve","reject","fulfilled","step","next","e","rejected","done","then","__values","m","__await","__asyncGenerator","_arguments","verb","g","q","resume","r","fulfill","settle","asyncIterator","__asyncDelegator","p","__asyncValues","PipeIterator","error","return","pipe","write","err","res","emit","wait","AsyncPipeIterator","toBufferOrUint8Array","BufferCtor","eval","stdout","exports","Value","eq","eq.prototype","Literal","Equals","le.prototype","le","LTeq","ge.prototype","ge","GTeq","lt.prototype","lt","Not","gt.prototype","gt","ne.prototype","ne","Col","batch","colidx","Predicate","and","And","or","Or","not","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","freeze","accum","bound","some","rtrn","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","func","CustomPredicate","bind_","args","numRows","numCols","Schema$$module$targets$es5$cls$type.from","rowsToString","separator","rowOffset","maxColumnWidths","recordBatchRowsToString","recordBatch","val","row","k","readRecordBatches","messages","message","loader","readRecordBatch","readRecordBatchesAsync","arguments","readRecordBatchesAsync_1","e_1","_a","messages_1","messages_1_1","e_1_1","dictionaryId","dictionaryField","dictionaryDataType","dictionaryVector","has","visitFields","TypeDataLoader","field","visitNullType","getFieldMetadata","readNullBitmap","visitFlatType","visitFlatList","visitBoolType","readData","visitListType","readOffsets","visitNestedType","visitUnionType","readTypeIds","visitFixedSizeListType","getBufferMetadata","readNullBitmap.prototype","readJSON","json","dictionaryFields","fieldsFromJSON","entries","recordBatchFromJSON","JSONDataLoader","flattenDataSources","arrayIterator","column","utf8Encoder","_type","DataType$$module$targets$es5$cls$type.isTimestamp","int64DataFromJSON","DataType$$module$targets$es5$cls$type.isInt","DataType$$module$targets$es5$cls$type.isTime","DataType$$module$targets$es5$cls$type.isDate","DataType$$module$targets$es5$cls$type.isDecimal","decimalDataFromJSON","DataType$$module$targets$es5$cls$type.isBinary","DataType$$module$targets$es5$cls$type.isFixedSizeBinary","binaryDataFromJSON","DataType$$module$targets$es5$cls$type.isBool","DataType$$module$targets$es5$cls$type.isUtf8","Int64$$module$targets$es5$cls$util$int.fromString","Int128$$module$targets$es5$cls$util$int.fromString","joined","fieldNodesFromJSON","buffersFromJSON","fs","keysMeta","dictMeta","dataType","typeFromJSON","intFromJSON","fieldNodes","nullCountFromJSON","validity","namesToTypeMap","floatingPointFromJSON","MAGIC","MAGIC_STR","checkForMagicArrowString","isValidArrowFile","fileLength","footerLength","lengthOffset","magicX2AndPadding","magicLength","magicAndPadding","PADDING","_Message","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.Message","fromReadableStream","fromReadableStream_1","bytesRead","messageLength","_b","_c","grown","getInt32","getRootAsFooter","Block","dictionariesLength","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","createBlock","module$targets$es5$cls$fb$File.org","readBuffers","readMessages","toByteBuffer","readSchema","BinaryDataLoader","readBuffersAsync","readBuffersAsync_1","sources_1","sources_1_1","messageOffset","_Footer","blocks","fieldsFromSchema","footer","readFileMessages","isSchema","readStreamMessages","batches","readMessage","messageFromByteBuffer","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Footer","_Schema","_RecordBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.RecordBatch","_DictionaryBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.DictionaryBatch","_Null","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Null","_Int","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Int","_FloatingPoint","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FloatingPoint","_Binary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Binary","_Bool","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Bool","_Utf8","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Utf8","_Decimal","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Decimal","_Date","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Date","_Time","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Time","_Timestamp","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Timestamp","_Interval","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Interval","_List","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.List","_Struct","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Struct_","_Union","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Union","_FixedSizeBinary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeBinary","_FixedSizeList","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeList","_Map","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Map","recordBatchFromMessage","fieldsFromField","typeFromField","intFromField","parent","entry","floatFromField","parse","readAsync","readAsync_1","readStream","readStream_1","e_2","e_2_1","serializeStream","table","serializeMessage","getColumn","serializeDictionaryBatch","serializeRecordBatch","serializeFile","metadataLength","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder","writeFooter","footerBytes","asUint8Array","setInt32","visitRecordBatch","buffersMeta","rbMeta","rbData","concatBuffersWithMetadata","RecordBatch$$module$targets$es5$cls$recordbatch.from","dbMeta","messageHeaderOffset","writeSchema","writeRecordBatch","metadataBytes","dataByteLength","messageBytes","RecordBatchSerializer","visit.prototype","RangeError","addBuffer","getTruncatedBitmap","visitBoolVector","bitmap","visitFlatVector","visitFlatListVector","visitListVector","visitNestedVector","sliceOffset","maxChildTypeId","childLengths","shiftedOffsets","unshiftedOffsets","getZeroBasedValueOffsets","firstOffset","alignedLength","startOffset","destOffsets","_Block","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Block","_Field","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Field","_Buffer","_KeyValue","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.KeyValue","_FieldNode","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.FieldNode","_DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Endianness","TypeSerializer","node","createString","totalByteLength","realBufferLength","mapReverse","rb","writeBlock","dictionaryBatchesOffset","db","fieldOffsets","writeField","b_","callbackfn","setInt16","concatBuffers","Table","_columns","batchesUnion","union","empty","Table$$module$targets$es5$cls$table.empty","getColumnAt","getColumnIndex","findIndex","filter.prototype","predicate","FilteredDataFrame","scan.prototype","scan","numBatches","batchIndex","countBy.prototype","countBy","count_by","counts","keys","CountByResult","IntVector$$module$targets$es5$cls$vector.from","count.prototype","select.prototype","serialize.prototype","serialize","rowsToString.prototype","tableRowsToString","firstValues","iterators","util","enum_","view_","custom","Arrow","Table$$module$targets$es5$cls$table.from","fromAsync","fromStruct","struct","add","module$targets$es5$cls$type.Type.NONE","module$targets$es5$cls$type.Type.DenseUnion","module$targets$es5$cls$type.Type.SparseUnion","isNull","isFloat","isInterval","isList","isStruct","isUnion","isDenseUnion","isSparseUnion","isFixedSizeList","isMap"],"mappings":"A;;;;;;;;;;;;;;;;;;;;6BAKA,IAAA,CAAA,CC+BAA,GAC4D,UAAxD,EAAsB,MAAO,OAAA,iBAA7B,CACA,MAAA,eADA,CAEA,QAAQ,CAAC,CAAD,CAAS,CAAT,CAAmB,CAAnB,CAA+B,CAOjC,CAAJ,EAAc,KAAA,UAAd,EAAiC,CAAjC,EAA2C,MAAA,UAA3C,GACA,CAAA,CAAO,CAAP,CADA,CACmB,CAAA,MADnB,CAPqC,CDlC3C,CEsCAC,EAb2B,WAAlB,EAAC,MAAO,OAAR,EAAiC,MAAjC,GAa0B,IAb1B,CAa0B,IAb1B,CAEe,WAAlB,EAAC,MAAO,OAAR,EAA2C,IAA3C,EAAiC,MAAjC,CAAmD,MAAnD,CAW6B,IChBd,SAAA,EAAQ,EAAG,CAE9BC,CAAA,CAAqB,QAAQ,EAAG,EAE3BD,EAAA,OAAL,GACEA,CAAA,OADF,CAC6BE,EAD7B,CAJ8B,CAehC,IAAAA,GAAuD,QAAQ,EAAG,CAChE,IAAI,EAAU,CAUd,OAJA,SAAe,CAAC,CAAD,CAAkB,CAC/B,MA9BoBC,gBA8BpB,EAC6B,CAD7B,EACgD,EADhD,EACuD,CAAA,EAFxB,CAP+B,CAAZ,EAoBzB;QAAA,EAAQ,EAAG,CACtCF,CAAA,EACA,KAAI,EAAiBD,CAAA,OAAA,SAChB,EAAL,GACE,CADF,CACmBA,CAAA,OAAA,SADnB,CAEMA,CAAA,OAAA,CAAyB,UAAzB,CAFN,CAK8C,WAA9C,EAAI,MAAO,MAAA,UAAA,CAAgB,CAAhB,CAAX,EACED,EAAA,CACI,KAAA,UADJ,CACqB,CADrB,CACqC,CAC/B,aAAc,CAAA,CADiB,CAE/B,SAAU,CAAA,CAFqB,CAO/B,MAAO,QAAQ,EAAG,CAChB,MAAOK,GAAA,CAAsB,IAAtB,CADS,CAPa,CADrC,CAeFC,EAAA,CAA6B,QAAQ,EAAG,EAxBF,CAgCN,QAAA,GAAQ,EAAG,CAC3CJ,CAAA,EACA,KAAI,EAAsBD,CAAA,OAAA,cACrB,EAAL,GACE,CADF,CACwBA,CAAA,OAAA,cADxB,CAEMA,CAAA,OAAA,CAAyB,eAAzB,CAFN,CAMAM,GAAA,CAAkC,QAAQ,EAAG,EATF,CAmBrB,QAAA,GAAQ,CAAC,CAAD,CAAQ,CACtC,IAAI,EAAQ,CACZ,OAAOC,GAAA,CAA0B,QAAQ,EAAG,CAC1C,MAAI,EAAJ,CAAY,CAAA,OAAZ,CACS,CACL,KAAM,CAAA,CADD,CAEL,MAAO,CAAA,CAAM,CAAA,EAAN,CAFF,CADT,CAMS,CAAC,KAAM,CAAA,CAAP,CAPiC,CAArC,CAF+B;AA0BZ,QAAA,GAAQ,CAAC,CAAD,CAAO,CACzCF,CAAA,EAEI,EAAA,CAAW,CAAC,KAAM,CAAP,CAKf,EAAA,CAASL,CAAA,OAAA,SAAT,CAAA,CAA8C,QAAQ,EAAG,CAAE,MAAO,KAAT,CACzD,OAAyC,EATA,CC7GpB,QAAA,EAAQ,CAAC,CAAD,CAAW,CACxCK,CAAA,EAGAJ,EAAA,EAAAI,EAAA,EAAA,KAAI,EAAqC,CAAD,CAAW,MAAA,SAAX,CACxC,OAAO,EAAA,CAAmB,CAAA,KAAA,CAAsB,CAAtB,CAAnB,CACHD,EAAA,CAA6C,CAA7C,CANoC,CCA1C,IAAAI,GACmD,UAA/C,EAAuB,MAAO,OAAA,OAA9B,CACA,MAAA,OADA,CAEA,QAAQ,CAAC,CAAD,CAAY,CAEP,QAAA,EAAQ,EAAG,EACtB,CAAA,UAAA,CAAiB,CACjB,OAAO,KAAI,CAJO,CAHxB,CCgByB,EAAA;GAAiC,UAAjC,EAAC,MAAO,OAAA,eAAR,CACrB,EAAA,CAAA,MAAA,eADqB,KAAA,CAErB,IAAA,EAvByC,EAAA,CAAA,CAC3C,IAAI,GAAI,CAAC,GAAG,CAAA,CAAJ,CAAR,CACI,GAAI,EACR,IAAI,CACF,EAAA,UAAA,CAAc,EACd,GAAA,CAAO,EAAA,GAAP,OAAA,CAFE,CAGF,MAAO,CAAP,CAAU,EAGZ,EAAA,CAAO,CAAA,CAToC,CAuBzC,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,UAAA,CAAA,CAAA,IAAA,CAAA,UAAA,GAAA,CAAA,CAAA,KAAA,KAAA,SAAA,CAAA,CAAA,CAAA,oBAAA,CAAA,CAAA,MAAA,EAAA,CAAA,CAAA,IAFqB,CAAzB,IAAAC,GAAyB,ECUN;QAAA,EAAQ,CAAC,CAAD,CAAY,CAAZ,CAAwB,CACjD,CAAA,UAAA,CAAsBD,EAAA,CAAqB,CAAA,UAArB,CACL,EAAA,UAAA,YAAA,CAAkC,CACnD,IAAIC,EAAJ,CAGuBA,EACrB,CAAe,CAAf,CAA0B,CAA1B,CAJF,KAQE,KAAK,IAAI,CAAT,GAAc,EAAd,CACE,GAAS,WAAT,EAAI,CAAJ,CAIA,GAAI,MAAA,iBAAJ,CAA6B,CAC3B,IAAI,EAAa,MAAA,yBAAA,CAAgC,CAAhC,CAA4C,CAA5C,CACb,EAAJ,EACE,MAAA,eAAA,CAAsB,CAAtB,CAAiC,CAAjC,CAAoC,CAApC,CAHyB,CAA7B,IAOE,EAAA,CAAU,CAAV,CAAA,CAAe,CAAA,CAAW,CAAX,CAKrB,EAAA,GAAA,CAAwB,CAAA,UA5ByB,CC3BvB,QAAA,EAAQ,CAAC,CAAD,CAAW,CAC7C,GAAI,EAAA,CAAA,WAAoB,MAApB,CAAJ,CAAA,CAGS,CAAA,CAAA,CAAA,CAAA,CAAA,CCET,KAFA,IAAI,CAAJ,CACI,EAAM,EACV,CAAO,CAAC,CAAC,CAAD,CAAK,CAAA,KAAA,EAAL,MAAR,CAAA,CACE,CAAA,KAAA,CAAS,CAAA,MAAT,CAEF,EAAA,CAAO,CDRP,CAAA,MAAA,EAD6C,CEyFG,QAAA,GAAQ,CAAC,CAAD,CAAS,CACjE,GAAI,EAAA,CAAA,WAAkB,OAAlB,CAAJ,CAGA,KAAM,KAAI,SAAJ,CAAc,kBAAd,CAAmC,CAAnC,CAA4C,mBAA5C,CAAN,CAJiE;AAgBvC,QAAA,GAAQ,EAAG,CAQrC,IAAA,GAAA,CAAkB,CAAA,CASlB,KAAA,EAAA,CAAyB,IAQzB,KAAA,EAAA,CAAmB,IAAA,EASnB,KAAA,EAAA,CAAmB,CAqBnB,KAAA,EAAA,CAXA,IAAA,GAWA,CAXqB,CA4CrB,KAAA,GAAA,CAvBA,IAAA,EAuBA,CAvByB,IAjEY,CAmGM,QAAA,GAAQ,CAAR,CAAQ,CAAG,CACtD,GAAI,CAAA,GAAJ,CACE,KAAM,KAAI,SAAJ,CAAc,8BAAd,CAAN,CAEF,CAAA,GAAA,CAAkB,CAAA,CAJoC,CAuCxDC,EAAA,UAAA,GAAA,CAA4C,QAAQ,CAAC,CAAD,CAAQ,CAC1D,IAAA,EAAA,CAAmB,CADuC,CAa5DA,GAAA,UAAA,GAAA,CAA6C,QAAQ,CAAC,CAAD,CAAI,CACvD,IAAA,EAAA,CAAyB,CAAC,GAAW,CAAZ,CAAe,GAAa,CAAA,CAA5B,CACzB,KA3BA,EAAA,CA2BA,IA3BmB,GAAnB,EA2BA,IA3ByC,EAyBc,CAazDA,GAAA,UAAA,OAAA,CAA6C,QAAQ,CAAC,CAAD,CAAQ,CAC3D,IAAA,EAAA,CAAyB,CAAC,OAA8B,CAA/B,CACzB,KAAA,EAAA,CAAmB,IAAA,EAFwC,CA8BjB,SAAA,EAAQ,CAAR,CAAQ,CAAC,CAAD,CAAQ,CAAR,CAAuB,CACzE,CAAA,EAAA,CAAmB,CACnB,OAAO,CAAC,MAAO,CAAR,CAFkE;AAe5B,QAAA,GAAQ,CAAR,CAAQ,CACnD,CADmD,CACzC,CADyC,CAC1B,CACgB,CAAA,CACvCC,CAAA,CAAqB,CAArB,CACU,KAAI,EAAS,CAAA,KAAA,EAC3BC,GAAA,CAAgD,CAAhD,CACA,IAAI,CAAA,KAAJ,CAGE,CAAA,EACA,CADmB,CAAA,MACnB,CAAA,CAAA,EAAA,CAAmB,CAJrB,KAQA,OADA,EAAA,EACO,CADkB,CAClB,CAAA,CAAA,CAAA,CAAA,CAAW,CAAA,MAAX,CAAyB,CAAzB,CAboB,CAwB7BF,EAAA,UAAA,EAAA,CAA6C,QAAQ,CAAC,CAAD,CAAc,CACjE,IAAA,EAAA,CAAmB,CAD8C,CAuBP,SAAA,GAAQ,CAAR,CAAQ,CAChE,CADgE,CAClD,CADkD,CAClC,CAChC,CAAA,GAAA,CAAqB,CACC,KAAA,EAAtB,EAAI,CAAJ,GACE,CAAA,EADF,CACyB,CADzB,CAFgC,CAeoB,QAAA,GAAQ,CAAR,CAAQ,CAAC,CAAD,CAAiB,CAC7E,CAAA,GAAA,CAAqB,CACrB,EAAA,EAAA,CAAuB,CAAvB,EAAyC,CAFoC,CA6BzB,QAAA,GAAQ,CAAR,CAAQ,CACnC,CACzB,CAAA,GAAA,CAA8C,CAChC,KAAI,EACoC,CAAA,EAAD,GAErD,EAAA,EAAA,CAAyB,IACzB,OAAO,EANkB,CAmB6B,QAAA,GAAQ,CAAR,CAAQ,CAC5D,CAD4D,CAC1C,CAD0C,CACtB,CADsB,CACR,CACjD,CAAL,CAMG,CAAA,GAAD,CAAwB,CAAxB,CANF,CAM0C,CAAA,EAN1C,CACE,CAAA,GADF,CAC0B,CAAC,CAAA,EAAD,CAO1B,EAAA,GAAA,CAAqB,CAArB,EAAyC,CACzC,EAAA,EAAA,CAAuB,CAAvB,EAA6C,CAVS,CAuBA,QAAA,GAAQ,CAAR,CAAQ,CAC5D,CAD4D,CAC/C,CAD+C,CACjC,CAiDX,CAAA,CAIb,CAAA,GAAD,OAAA,CAA+B,CAA/B,EAA+C,CAA/C,CAAA,CAAkD,CAAlD,CAGJ,EAFkB,CAElB,CAFqC,CAAA,EAErC,CADI,CAAA,EACJ,EAD8B,CAC9B,EACM,CAAA,GAAJ,CACS,CAvRX,EAsRE,CACS,CAvRQ,GAsRjB,EACS,CAvR8B,EAsRvC,CAmC+B,IAAA,EAA/B,EAAI,CAAA,EAAJ,EACI,CAAA,EADJ,CAC2B,CAAA,EAD3B,EAEE,CAAA,EACA,CADmB,CAAA,EACnB,CAAA,CAAA,EAAA,CAAyB,IAH3B,EAKE,CAAA,EALF,CAKqB,CAAA,EAzCvB,CA4CE,CAAA,EA5CF,CA4CqB,CApGQ;AAwLH,QAAA,GAAQ,CAAC,CAAD,CAAU,CAM5C,IAAA,EAAA,CAAgB,IAAIA,EAOpB,KAAA,GAAA,CAAgB,CAb4B,CA2B9CG,EAAA,UAAA,GAAA,CAA4C,QAAQ,CAAC,CAAD,CAAQ,CAC1D,EAAA,CAAA,IAAA,EAAA,CACA,IAAI,IAAA,EAAA,EAAJ,CACE,MAAO,GAAA,CAAA,IAAA,CACH,IAAA,EAAA,EAAA,KADG,CACmC,CADnC,CAC0C,IAAA,EAAA,GAD1C,CAGT,KAAA,EAAA,GAAA,CAAoB,CAApB,CACA,OAAO,GAAA,CAAA,IAAA,CAPmD,CAmBd,SAAA,GAAQ,CAAR,CAAQ,CAAC,CAAD,CAAQ,CAC5D,EAAA,CAAA,CAAA,EAAA,CACc,KAAI,EAAmB,CAAA,EAAA,EACrC,IAAI,CAAJ,CAOE,MAAO,GAAA,CAAA,CAAA,CAJC,QAAA,EAAY,EAAZ,CAA+B,CAAA,CAAiB,QAAjB,CAA/B,CAC+B,QAAQ,CAAC,CAAD,CAAI,CACV,MAAO,CAAC,MAAO,CAAR,CAAW,KAAM,CAAA,CAAjB,CADG,CAG5C,CAAmC,CAAnC,CAA0C,CAAA,EAAA,OAA1C,CAET,EAAA,EAAA,OAAA,CAAqB,CAArB,CACA,OAAO,GAAA,CAAA,CAAA,CAbqD,CA0B9DA,EAAA,UAAA,GAAA,CAA6C,QAAQ,CAAC,CAAD,CAAY,CAC/D,EAAA,CAAA,IAAA,EAAA,CACA,IAAI,IAAA,EAAA,EAAJ,CACE,MAAO,GAAA,CAAA,IAAA,CACH,IAAA,EAAA,EAAA,CAAgC,OAAhC,CADG,CACuC,CADvC,CAEH,IAAA,EAAA,GAFG,CAIT,KAAA,EAAA,GAAA,CAAqB,CAArB,CACA,OAAO,GAAA,CAAA,IAAA,CARwD,CAuBb;QAAA,GAAQ,CAAR,CAAQ,CACxD,CADwD,CAChD,CADgD,CACzC,CADyC,CAC7B,CAC7B,GAAI,CACY,IAAI,EAAS,CAAA,KAAA,CACU,CAAA,EAAA,EADV,CAEvB,CAFuB,CAG3BD,GAAA,CAAgD,CAAhD,CACA,IAAI,CAAC,CAAA,KAAL,CAEE,MADA,EAAA,EAxgBJ,GAygBW,CAzgBO,CAAA,CAygBP,CAAA,CAIK,KAAI,EAAc,CAAA,MAX9B,CAYF,MAAO,CAAP,CAAU,CAGV,MAFA,EAAA,EAAA,EAEO,CAF2B,IAE3B,CADP,CAAA,EAAA,GAAA,CAAqB,CAArB,CACO,CAAA,EAAA,CAAA,CAAA,CAHG,CAKZ,CAAA,EAAA,EAAA,CAAkC,IAClC,EAAA,KAAA,CAAgB,CAAA,EAAhB,CAA+B,CAA/B,CACA,OAAO,GAAA,CAAA,CAAA,CApBsB,CA+BiB,QAAA,GAAQ,CAAR,CAAQ,CAAG,CACzD,IAAA,CAAO,CAAA,EAAA,EAAP,CAAA,CACE,GAAI,CACY,IAAI,EAAa,CAAA,GAAA,CAAc,CAAA,EAAd,CAC/B,IAAI,CAAJ,CAEE,MADA,EAAA,EAriBN,GAsiBa,CAtiBK,CAAA,CAsiBL,CAAA,CAAC,MAAO,CAAA,MAAR,CAA0B,KAAM,CAAA,CAAhC,CAJP,CAMF,MAAO,CAAP,CAAU,CACV,CAAA,EAAA,EACA,CAD4B,IAAA,EAC5B,CAAA,CAAA,EAAA,GAAA,CAAqB,CAArB,CAFU,CAMd,CAAA,EA9iBA,GAAA,CAAkB,CAAA,CA+iBlB,IAAI,CAAA,EAAA,EAAJ,CAAqC,CACjB,CAAA,CAAmB,CAAA,EAAA,EACrC,EAAA,EAAA,EAAA,CAAkC,IAClC,IAAI,CAAA,GAAJ,CACE,KAAM,EAAA,GAAN,CAEF,MAAO,CAAC,MAAO,CAAA,OAAR,CAAiC,KAAM,CAAA,CAAvC,CAN4B,CAQrC,MAAO,CAAC,MAAyB,IAAA,EAA1B,CAAsC,KAAM,CAAA,CAA5C,CAvBkD;AAsC5B,QAAA,GAAQ,CAAC,CAAD,CAAS,CAE9C,IAAA,KAAA,CAAY,QAAQ,CAAC,CAAD,CAAY,CAC9B,MAAO,EAAA,GAAA,CAAa,CAAb,CADuB,CAKhC,KAAA,MAAA,CAAa,QAAQ,CAAC,CAAD,CAAY,CAC/B,MAAO,EAAA,GAAA,CAAc,CAAd,CADwB,CAKjC,KAAA,OAAA,CAAc,QAAQ,CAAC,CAAD,CAAQ,CAC5B,MAAO,GAAA,CAAA,CAAA,CAAe,CAAf,CADqB,CAI9BP,EAAA,EAGAJ,EAAA,EAAAI,EAAA,EAAA,KAAA,CAAK,MAAA,SAAL,CAAA,CAAwB,QAAQ,EAAG,CACjC,MAAO,KAD0B,CAnBW,CAqCZ,QAAA,EAAQ,CAAC,CAAD,CAAY,CAAZ,CAAqB,CAC7C,CAAA,CACd,IAAIS,EAAJ,CAAiC,IAAID,EAAJ,CAA8B,CAA9B,CAAjC,CAOAJ,GAAJ,EACsDA,EAAD,CAC/C,CAD+C,CACvC,CAAA,UADuC,CAGrD,OAAO,EAbwD,CV91B1D,IAAIM,CAAJ,CA8BJ,GAAAA,CAAA,GAAQA,CAAR,CAAc,EAAd,CA9BI,CA6BS,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CA7BT,CA4BY,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CA5BZ,CA2BkB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CA3BlB,CA0B8B,GAAAA,EAAAC,gBAAA,GAA4BD,EAAAC,gBAA5B,CAAsD,EAAtD,CAbjBA,GAAA,CAAgBA,EAAA,GAAhB,CAAwC,CAAxC,CAAA,CAA6C,IAI7CA,GAAA,CAAgBA,EAAA,GAAhB,CAAwC,CAAxC,CAAA,CAA6C,IAI7CA,GAAA,CAAgBA,EAAA,GAAhB,CAAwC,CAAxC,CAAA,CAA6C,IAI7CA,GAAA,CAAgBA,EAAA,GAAhB,CAAwC,CAAxC,CAAA,CAA6C,IAwB9D;IAAA,GAAAJ,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ4B,GAAAA,EAAAE,UAAA,GAAsBF,EAAAE,UAAtB,CAA0C,EAA1C,CAFXA,GAAA,CAAUA,EAAA,OAAV,CAAgC,CAAhC,CAAA,CAAqC,QACrCA,GAAA,CAAUA,EAAA,MAAV,CAA+B,CAA/B,CAAA,CAAoC,OAyBrD,KAAA,GAAAL,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ4B,GAAAA,EAAAG,UAAA,GAAsBH,EAAAG,UAAtB,CAA0C,EAA1C,CAHXA,GAAA,CAAUA,EAAA,KAAV,CAA8B,CAA9B,CAAA,CAAmC,MACnCA,GAAA,CAAUA,EAAA,OAAV,CAAgC,CAAhC,CAAA,CAAqC,QACrCA,GAAA,CAAUA,EAAA,OAAV,CAAgC,CAAhC,CAAA,CAAqC,QAwBtD,KAAA,GAAAN,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ2B,GAAAA,EAAAI,SAAA,GAAqBJ,EAAAI,SAArB,CAAwC,EAAxC,CAFVA,GAAA,CAASA,EAAA,IAAT,CAA2B,CAA3B,CAAA,CAAgC,KAChCA,GAAA,CAASA,EAAA,YAAT,CAAmC,CAAnC,CAAA,CAAwC,aA0BzD;IAAA,GAAAP,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ2B,GAAAA,EAAAK,SAAA,GAAqBL,EAAAK,SAArB,CAAwC,EAAxC,CAJVA,GAAA,CAASA,EAAA,OAAT,CAA8B,CAA9B,CAAA,CAAmC,QACnCA,GAAA,CAASA,EAAA,YAAT,CAAmC,CAAnC,CAAA,CAAwC,aACxCA,GAAA,CAASA,EAAA,YAAT,CAAmC,CAAnC,CAAA,CAAwC,aACxCA,GAAA,CAASA,EAAA,WAAT,CAAkC,CAAlC,CAAA,CAAuC,YAwBxD,KAAA,GAAAR,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ+B,GAAAA,EAAAM,aAAA,GAAyBN,EAAAM,aAAzB,CAAgD,EAAhD,CAFdA,GAAA,CAAaA,EAAA,WAAb,CAA0C,CAA1C,CAAA,CAA+C,YAC/CA,GAAA,CAAaA,EAAA,SAAb,CAAwC,CAAxC,CAAA,CAA6C,UA4C9D;IAAA,GAAAT,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJuB,EAAAA,EAAAO,KAAA,GAAiBP,EAAAO,KAAjB,CAAgC,EAAhC,CAlBNA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,IAAL,CAAmB,CAAnB,CAAA,CAAwB,KACxBA,EAAA,CAAKA,CAAA,cAAL,CAA6B,CAA7B,CAAA,CAAkC,eAClCA,EAAA,CAAKA,CAAA,OAAL,CAAsB,CAAtB,CAAA,CAA2B,QAC3BA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,QAAL,CAAuB,CAAvB,CAAA,CAA4B,SAC5BA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,UAAL,CAAyB,EAAzB,CAAA,CAA+B,WAC/BA,EAAA,CAAKA,CAAA,SAAL,CAAwB,EAAxB,CAAA,CAA8B,UAC9BA,EAAA,CAAKA,CAAA,KAAL,CAAoB,EAApB,CAAA,CAA0B,MAC1BA,EAAA,CAAKA,CAAA,QAAL,CAAuB,EAAvB,CAAA,CAA6B,SAC7BA,EAAA,CAAKA,CAAA,MAAL,CAAqB,EAArB,CAAA,CAA2B,OAC3BA,EAAA,CAAKA,CAAA,gBAAL,CAA+B,EAA/B,CAAA,CAAqC,iBACrCA;CAAA,CAAKA,CAAA,cAAL,CAA6B,EAA7B,CAAA,CAAmC,eACnCA,EAAA,CAAKA,CAAA,IAAL,CAAmB,EAAnB,CAAA,CAAyB,KAyC1C,KAAA,GAAAV,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ6B,GAAAA,EAAAQ,WAAA,GAAuBR,EAAAQ,WAAvB,CAA4C,EAA5C,CAbZA,GAAA,CAAWA,EAAA,OAAX,CAAkC,CAAlC,CAAA,CAAuC,QAIvCA,GAAA,CAAWA,EAAA,KAAX,CAAgC,CAAhC,CAAA,CAAqC,MAIrCA,GAAA,CAAWA,EAAA,SAAX,CAAoC,CAApC,CAAA,CAAyC,UAIzCA,GAAA,CAAWA,EAAA,KAAX,CAAgC,CAAhC,CAAA,CAAqC,MA2BtD,KAAA,GAAAX,CAAA,GAAQA,CAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJ6B,GAAAA,EAAAS,GAAA,GAAuBT,EAAAS,GAAvB,CAA4C,EAA5C,CAFZA,GAAA,CAAWA,EAAA,OAAX,CAAkC,CAAlC,CAAA,CAAuC,QACvCA,GAAA,CAAWA,EAAA,IAAX,CAA+B,CAA/B,CAAA,CAAoC,KAWvD;SAAS,CAACZ,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEC,EACS,EAAG,CAIV,IAAAC,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPG,EAAAA,GAAPA,CAAAA,QAAoBA,CAACD,CAADC,CAAKC,CAALD,CAAUA,CAC1BA,MAAOH,CAACI,CAADJ,EAAQG,IAAIL,CAAZE,GAAAG,CAAyBE,CAAAF,CAAAD,CAAAC,CAAaD,CAAAI,SAAAH,EAAbA,CAAzBA,CAAuDD,CAAAI,SAAAH,EAAvDA,CAAsED,CAAtEC,CADmBA,CAMvBI,EAAAA,GAAPA,CAAAA,QAAgBA,CAACC,CAADD,CAAUA,CACtBE,CAAAF,CAAAC,CAAAD,CAAoBA,CAApBA,CADsBA,CAOnBG,EAAAA,GAAPA,CAAAA,QAAcA,CAACF,CAADE,CAAUA,CAEpBA,MADaC,EAAAD,CAAAF,CAAAE,CADOA,CAK5BvB,EAAAW,KAAA,CAAeA,CAzCC,CAAnB,CAAD,CA0CaZ,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EA2DC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEe,EACS,EAAG,CAIV,IAAAb,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPa,EAAAA,GAAPA,CAAAA,QAAuBA,CAACX,CAADW,CAAKT,CAALS,CAAUA,CAC7BA,MAAOb,CAACI,CAADJ,EAAQa,IAAID,CAAZZ,GAAAa,CAA4BR,CAAAQ,CAAAX,CAAAW,CAAaX,CAAAI,SAAAO,EAAbA,CAA5BA,CAA0DX,CAAAI,SAAAO,EAA1DA,CAAyEX,CAAzEW,CADsBA,CAM1BC,EAAAA,GAAPA,CAAAA,QAAmBA,CAACN,CAADM,CAAUA,CACzBL,CAAAK,CAAAN,CAAAM,CAAoBA,CAApBA,CADyBA,CAOtBC,EAAAA,GAAPA,CAAAA,QAAiBA,CAACP,CAADO,CAAUA,CAEvBA,MADaJ,EAAAI,CAAAP,CAAAO,CADUA,CAK/B5B,EAAAyB,QAAA,CAAkBA,CAzCF,CAAnB,CAAD,CA0Ca1B,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EAuDC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEmB,EACS,EAAG,CAIV,IAAAjB,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPiB,EAAAA,GAAPA,CAAAA,QAAoBA,CAACf,CAADe,CAAKb,CAALa,CAAUA,CAC1BA,MAAOjB,CAACI,CAADJ,EAAQiB,IAAID,CAAZhB,GAAAiB,CAAyBZ,CAAAY,CAAAf,CAAAe,CAAaf,CAAAI,SAAAW,EAAbA,CAAzBA,CAAuDf,CAAAI,SAAAW,EAAvDA,CAAsEf,CAAtEe,CADmBA,CAMvBC,EAAAA,GAAPA,CAAAA,QAAgBA,CAACV,CAADU,CAAUA,CACtBT,CAAAS,CAAAV,CAAAU,CAAoBA,CAApBA,CADsBA,CAOnBC,EAAAA,GAAPA,CAAAA,QAAcA,CAACX,CAADW,CAAUA,CAEpBA,MADaR,EAAAQ,CAAAX,CAAAW,CADOA,CAK5BhC,EAAA6B,KAAA,CAAeA,CAzCC,CAAnB,CAAD,CA0Ca9B,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EAuDC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEuB,EACS,EAAG,CAIV,IAAArB,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPqB,EAAAA,GAAPA,CAAAA,QAA6BA,CAACnB,CAADmB,CAAKjB,CAALiB,CAAUA,CACnCA,MAAOrB,CAACI,CAADJ,EAAQqB,IAAID,CAAZpB,GAAAqB,CAAkChB,CAAAgB,CAAAnB,CAAAmB,CAAanB,CAAAI,SAAAe,EAAbA,CAAlCA,CAAgEnB,CAAAI,SAAAe,EAAhEA,CAA+EnB,CAA/EmB,CAD4BA,CAQvCC,EAAAA,UAAAA,GAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAIC,EAASC,CAAAF,CAAAA,IAAApB,EAAAoB,CAAiBA,IAAAvB,EAAjBuB,CAA8BA,CAA9BA,CACbA,OAAOC,EAAAD,CAASjB,CAAAiB,CAAAA,IAAApB,EAAAoB,CAAkBA,IAAAvB,EAAlBuB,CAAgCC,CAAhCD,CAATA,CAAmDA,CAFnDA,CAOJG,EAAAA,GAAPA,CAAAA,QAAyBA,CAACjB,CAADiB,CAAUA,CAC/BhB,CAAAgB,CAAAjB,CAAAiB,CAAoBA,CAApBA,CAD+BA,CAO5BC,EAAAA,GAAPA,CAAAA,QAAkBA,CAAClB,CAADkB,CAAUJ,CAAVI,CAAoBA,CAClCC,EAAAD,CAAAlB,CAAAkB,CAAsBA,CAAtBA,CAAyBJ,CAAzBI,CAAmCA,CAAnCA,CADkCA,CAO/BE,EAAAA,GAAPA,CAAAA,QAAuBA,CAACpB,CAADoB,CAAUA,CAE7BA,MADajB,EAAAiB,CAAApB,CAAAoB,CADgBA,CAKrCzC,EAAAiC,cAAA,CAAwBA,CAzDR,CAAnB,CAAD,CA0DalC,CAAAC,EA1Db,GA0D+BD,CAAAC,EA1D/B,CA0D+C,EA1D/C,EAFc,CAAjB,CAAD,CA6DWF,CAAAC,EA7DX,GA6D4BD,CAAAC,EA7D5B,CA6D2C,EA7D3C,EAFe,CAAlB,CAAD,CAgEYF,CAAAC,EAhEZ,GAgE2BD,CAAAC,EAhE3B,CAgEwC,EAhExC,EAFY,CAAf,CAAD,CAmEGD,CAnEH,GAmEWA,CAnEX,CAmEiB,EAnEjB,EAgGC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEgC,EACS,EAAG,CAIV,IAAA9B,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP8B,EAAAA,GAAPA,CAAAA,QAAmBA,CAAC5B,CAAD4B,CAAK1B,CAAL0B,CAAUA,CACzBA,MAAO9B,CAACI,CAADJ,EAAQ8B,IAAID,CAAZ7B,GAAA8B,CAAwBzB,CAAAyB,CAAA5B,CAAA4B,CAAa5B,CAAAI,SAAAwB,EAAbA,CAAxBA,CAAsD5B,CAAAI,SAAAwB,EAAtDA,CAAqE5B,CAArE4B,CADkBA,CAQ7BC,EAAAA,UAAAA,GAAAA,CAAAA,QAAUA,EAAGA,CACTA,IAAIR,EAASC,CAAAO,CAAAA,IAAA7B,EAAA6B,CAAiBA,IAAAhC,EAAjBgC,CAA8BA,CAA9BA,CACbA,OAAOR,EAAAQ,CAASA,CAACA,EAACA,IAAA7B,EWmVjC8B,EAAA,CXnVkDD,IAAAhC,EWmVlD,CXnVgEwB,CWmVhE,CXnVgCQ,EW2UN,EX3UMA,EW2UA,EX3UAA,CAAVA,CAAoDA,CAAAA,CAFlDA,CAONE,EAAAA,GAAPA,CAAAA,QAAeA,CAACzB,CAADyB,CAAUA,CACrBxB,CAAAwB,CAAAzB,CAAAyB,CAAoBA,CAApBA,CADqBA,CAOlBC,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC1B,CAAD0B,CAAUH,CAAVG,CAAsBA,CACtCC,EAAAD,CAAA1B,CAAA0B,CAAqBA,CAArBA,CAAwBA,CAACH,CAAzBG,CAAsCA,CAAtCA,CADsCA,CAOnCE,EAAAA,GAAPA,CAAAA,QAAaA,CAAC5B,CAAD4B,CAAUA,CAEnBA,MADazB,EAAAyB,CAAA5B,CAAA4B,CADMA,CAK3BjD,EAAA0C,IAAA,CAAcA,CAzDE,CAAnB,CAAD,CA0Da3C,CAAAC,EA1Db,GA0D+BD,CAAAC,EA1D/B,CA0D+C,EA1D/C,EAFc,CAAjB,CAAD,CA6DWF,CAAAC,EA7DX,GA6D4BD,CAAAC,EA7D5B,CA6D2C,EA7D3C,EAFe,CAAlB,CAAD,CAgEYF,CAAAC,EAhEZ,GAgE2BD,CAAAC,EAhE3B,CAgEwC,EAhExC,EAFY,CAAf,CAAD,CAmEGD,CAnEH,GAmEWA,CAnEX,CAmEiB,EAnEjB,EA4EC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEwC,EACS,EAAG,CAIV,IAAAtC,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPsC,EAAAA,GAAPA,CAAAA,QAAqBA,CAACpC,CAADoC,CAAKlC,CAALkC,CAAUA,CAC3BA,MAAOtC,CAACI,CAADJ,EAAQsC,IAAID,CAAZrC,GAAAsC,CAA0BjC,CAAAiC,CAAApC,CAAAoC,CAAapC,CAAAI,SAAAgC,EAAbA,CAA1BA,CAAwDpC,CAAAI,SAAAgC,EAAxDA,CAAuEpC,CAAvEoC,CADoBA,CAM/BC,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAIhB,EAASC,CAAAe,CAAAA,IAAArC,EAAAqC,CAAiBA,IAAAxC,EAAjBwC,CAA8BA,CAA9BA,CACbA,OAAOhB,EAAAgB,CAA4DC,EAAAD,CAAAA,IAAArC,EAAAqC,CAAkBA,IAAAxC,EAAlBwC,CAAgChB,CAAhCgB,CAA5DA,CAAuGvD,CAAAC,EAAAC,EAAAC,EAAAE,UAAAoD,OAF3GF,CAQPG,EAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAAQA,CACXA,IAAInB,EAASC,CAAAkB,CAAAA,IAAAxC,EAAAwC,CAAiBA,IAAA3C,EAAjB2C,CAA8BA,CAA9BA,CACbA,OAAOnB,EAAAmB,CAASrC,CAAAqC,CAAAA,IAAAxC,EAAAwC,CAAkBE,EAAAF,CAAAA,IAAAxC,EAAAwC,CAAiBA,IAAA3C,EAAjB2C,CAA+BnB,CAA/BmB,CAAlBA,CAAmEA,CAAnEA,CAA2DC,CAA3DD,CAATA,CAAiFA,CAF7EA,CAcfG,EAAAA,UAAAA,GAAAA,CAAAA,QAAYA,EAAGA,CACXA,IAAItB,EAASC,CAAAqB,CAAAA,IAAA3C,EAAA2C,CAAiBA,IAAA9C,EAAjB8C,CAA8BA,CAA9BA,CACbA,OAAOtB,EAAAsB,CAASA,IAAIC,UAAJD,CAAeA,IAAA3C,EAAA6C,EAAAF,EAAAG,OAAfH;AAAuCA,IAAA3C,EAAA6C,EAAAF,EAAAI,WAAvCJ,CAAoED,EAAAC,CAAAA,IAAA3C,EAAA2C,CAAiBA,IAAA9C,EAAjB8C,CAA+BtB,CAA/BsB,CAApEA,CAA4GK,EAAAL,CAAAA,IAAA3C,EAAA2C,CAAqBA,IAAA9C,EAArB8C,CAAmCtB,CAAnCsB,CAA5GA,CAATA,CAAmKA,IAF/JA,CAORM,EAAAA,GAAPA,CAAAA,QAAiBA,CAAC3C,CAAD2C,CAAUA,CACvB1C,CAAA0C,CAAA3C,CAAA2C,CAAoBA,CAApBA,CADuBA,CAOpBC,EAAAA,GAAPA,CAAAA,QAAcA,CAAC5C,CAAD4C,CAAUb,CAAVa,CAAgBA,CAC1BC,EAAAD,CAAA5C,CAAA4C,CAAsBA,CAAtBA,CAAyBb,CAAzBa,CAA+BpE,CAAAC,EAAAC,EAAAC,EAAAE,UAAAoD,OAA/BW,CAD0BA,CAOvBE,EAAAA,GAAPA,CAAAA,QAAiBA,CAAC9C,CAAD8C,CAAUC,CAAVD,CAAyBA,CACtCE,CAAAF,CAAA9C,CAAA8C,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADsCA,CAQnCG,EAAAA,GAAPA,CAAAA,QAA0BA,CAACjD,CAADiD,CAAUC,CAAVD,CAAgBA,CACtCE,EAAAF,CAAAjD,CAAAiD,CAAoBA,CAApBA,CAAuBC,CAAAE,OAAvBH,CAAoCA,CAApCA,CACAA,KAAKA,IAAIxD,EAAIyD,CAAAE,OAAJ3D,CAAkBwD,CAA3BA,CAAmCA,CAAnCA,EAA8BxD,CAA9BwD,CAAsCxD,CAAAwD,EAAtCA,CAA2CA,CACvCjD,IAAAA,EAAAA,CAAAA,CAAiBiD,EAAAC,CAAAD,CAAKxD,CAALwD,CW7S3CI,GAAA,CAAAA,CAAA,CAAU,CAAV,CAAa,CAAb,CACA,EAAAC,EAAA,CAAgBC,CAAhB,CX2SiEN,CAG3CA,MAAOO,GAAAP,CAAAjD,CAAAiD,CAL+BA,CAWnCQ,EAAAA,GAAPA,CAAAA,QAAyBA,CAACzD,CAADyD,CAAUC,CAAVD,CAAoBA,CACzCN,EAAAM,CAAAzD,CAAAyD,CAAoBA,CAApBA,CAAuBC,CAAvBD,CAAiCA,CAAjCA,CADyCA,CAOtCE,EAAAA,GAAPA,CAAAA,QAAeA,CAAC3D,CAAD2D,CAAUA,CAErBA,MADaxD,EAAAwD,CAAA3D,CAAA2D,CADQA,CAK7BhF,EAAAkD,MAAA,CAAgBA,CAvGA,CAAnB,CAAD,CAwGanD,CAAAC,EAxGb,GAwG+BD,CAAAC,EAxG/B,CAwG+C,EAxG/C,EAFc,CAAjB,CAAD,CA2GWF,CAAAC,EA3GX,GA2G4BD,CAAAC,EA3G5B,CA2G2C,EA3G3C,EAFe,CAAlB,CAAD,CA8GYF,CAAAC,EA9GZ,GA8G2BD,CAAAC,EA9G3B,CA8GwC,EA9GxC,EAFY,CAAf,CAAD,CAiHGD,CAjHH,GAiHWA,CAjHX,CAiHiB,EAjHjB,EAqHC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEuE,EACS,EAAG,CAIV,IAAArE,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPqE,EAAAA,GAAPA,CAAAA,QAAmBA,CAACnE,CAADmE,CAAKjE,CAALiE,CAAUA,CACzBA,MAAOrE,CAACI,CAADJ,EAAQqE,IAAID,CAAZpE,GAAAqE,CAAwBhE,CAAAgE,CAAAnE,CAAAmE,CAAanE,CAAAI,SAAA+D,EAAbA,CAAxBA,CAAsDnE,CAAAI,SAAA+D,EAAtDA,CAAqEnE,CAArEmE,CADkBA,CAM7BC,EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAI/C,EAASC,CAAA8C,CAAAA,IAAApE,EAAAoE,CAAiBA,IAAAvE,EAAjBuE,CAA8BA,CAA9BA,CACbA,OAAO/C,EAAA+C,CAASjE,CAAAiE,CAAAA,IAAApE,EAAAoE,CAAkBA,IAAAvE,EAAlBuE,CAAgC/C,CAAhC+C,CAATA,CAAmDA,CAFnDA,CAOXC,EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAIhD,EAASC,CAAA+C,CAAAA,IAAArE,EAAAqE,CAAiBA,IAAAxE,EAAjBwE,CAA8BA,CAA9BA,CACbA,OAAOhD,EAAAgD,CAASA,CAACA,EAACA,IAAArE,EW6IjC8B,EAAA,CX7IkDuC,IAAAxE,EW6IlD,CX7IgEwB,CW6IhE,CX7IgCgD,EWqIN,EXrIMA,EWqIA,EXrIAA,CAAVA,CAAoDA,CAAAA,CAFpDA,CAOJC,EAAAA,GAAPA,CAAAA,QAAeA,CAAChE,CAADgE,CAAUA,CACrB/D,CAAA+D,CAAAhE,CAAAgE,CAAoBA,CAApBA,CADqBA,CAOlBC,EAAAA,GAAPA,CAAAA,QAAkBA,CAACjE,CAADiE,CAAUH,CAAVG,CAAoBA,CAClC9C,EAAA8C,CAAAjE,CAAAiE,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAAmCA,CAAnCA,CADkCA,CAO/BC,EAAAA,GAAPA,CAAAA,QAAkBA,CAAClE,CAADkE,CAAUH,CAAVG,CAAoBA,CAClCvC,EAAAuC,CAAAlE,CAAAkE,CAAqBA,CAArBA,CAAwBA,CAACH,CAAzBG,CAAoCA,CAApCA,CADkCA,CAO/BC,EAAAA,GAAPA,CAAAA,QAAaA,CAACnE,CAADmE,CAAUA,CAEnBA,MADahE,EAAAgE,CAAAnE,CAAAmE,CADMA,CAK3BxF;CAAAiF,IAAA,CAAcA,CArEE,CAAnB,CAAD,CAsEalF,CAAAC,EAtEb,GAsE+BD,CAAAC,EAtE/B,CAsE+C,EAtE/C,EAFc,CAAjB,CAAD,CAyEWF,CAAAC,EAzEX,GAyE4BD,CAAAC,EAzE5B,CAyE2C,EAzE3C,EAFe,CAAlB,CAAD,CA4EYF,CAAAC,EA5EZ,GA4E2BD,CAAAC,EA5E3B,CA4EwC,EA5ExC,EAFY,CAAf,CAAD,CA+EGD,CA/EH,GA+EWA,CA/EX,CA+EiB,EA/EjB,EAmFC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE+E,EACS,EAAG,CAIV,IAAA7E,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP6E,EAAAA,GAAPA,CAAAA,QAA6BA,CAAC3E,CAAD2E,CAAKzE,CAALyE,CAAUA,CACnCA,MAAO7E,CAACI,CAADJ,EAAQ6E,IAAID,CAAZ5E,GAAA6E,CAAkCxE,CAAAwE,CAAA3E,CAAA2E,CAAa3E,CAAAI,SAAAuE,EAAbA,CAAlCA,CAAgE3E,CAAAI,SAAAuE,EAAhEA,CAA+E3E,CAA/E2E,CAD4BA,CAMvCC,EAAAA,UAAAA,UAAAA,CAAAA,QAASA,EAAGA,CACRA,IAAIvD,EAASC,CAAAsD,CAAAA,IAAA5E,EAAA4E,CAAiBA,IAAA/E,EAAjB+E,CAA8BA,CAA9BA,CACbA,OAAOvD,EAAAuD,CAA4DtC,EAAAsC,CAAAA,IAAA5E,EAAA4E,CAAkBA,IAAA/E,EAAlB+E,CAAgCvD,CAAhCuD,CAA5DA,CAAuG9F,CAAAC,EAAAC,EAAAC,EAAAG,UAAAyF,KAFtGD,CAOLE,EAAAA,GAAPA,CAAAA,QAAyBA,CAACxE,CAADwE,CAAUA,CAC/BvE,CAAAuE,CAAAxE,CAAAwE,CAAoBA,CAApBA,CAD+BA,CAO5BC,EAAAA,GAAPA,CAAAA,QAAmBA,CAACzE,CAADyE,CAAUH,CAAVG,CAAqBA,CACpC5B,EAAA4B,CAAAzE,CAAAyE,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAAoCjG,CAAAC,EAAAC,EAAAC,EAAAG,UAAAyF,KAApCE,CADoCA,CAOjCC,EAAAA,GAAPA,CAAAA,QAAuBA,CAAC1E,CAAD0E,CAAUA,CAE7BA,MADavE,EAAAuE,CAAA1E,CAAA0E,CADgBA,CAKrC/F,EAAAyF,cAAA,CAAwBA,CAvDR,CAAnB,CAAD,CAwDa1F,CAAAC,EAxDb,GAwD+BD,CAAAC,EAxD/B,CAwD+C,EAxD/C,EAFc,CAAjB,CAAD,CA2DWF,CAAAC,EA3DX,GA2D4BD,CAAAC,EA3D5B,CA2D2C,EA3D3C,EAFe,CAAlB,CAAD,CA8DYF,CAAAC,EA9DZ,GA8D2BD,CAAAC,EA9D3B,CA8DwC,EA9DxC,EAFY,CAAf,CAAD,CAiEGD,CAjEH,GAiEWA,CAjEX;AAiEiB,EAjEjB,EAuEC,UAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEsF,EACS,EAAG,CAIV,IAAApF,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPoF,EAAAA,GAAPA,CAAAA,QAAoBA,CAAClF,CAADkF,CAAKhF,CAALgF,CAAUA,CAC1BA,MAAOpF,CAACI,CAADJ,EAAQoF,IAAID,CAAZnF,GAAAoF,CAAyB/E,CAAA+E,CAAAlF,CAAAkF,CAAalF,CAAAI,SAAA8E,EAAbA,CAAzBA,CAAuDlF,CAAAI,SAAA8E,EAAvDA,CAAsElF,CAAtEkF,CADmBA,CAMvBC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAC7E,CAAD6E,CAAUA,CACtB5E,CAAA4E,CAAA7E,CAAA6E,CAAoBA,CAApBA,CADsBA,CAOnBC,EAAAA,GAAPA,CAAAA,QAAcA,CAAC9E,CAAD8E,CAAUA,CAEpBA,MADa3E,EAAA2E,CAAA9E,CAAA8E,CADOA,CAK5BnG,EAAAgG,KAAA,CAAeA,CAzCC,CAAnB,CAAD,CA0CajG,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EAuDC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE0F,EACS,EAAG,CAIV,IAAAxF,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPwF,EAAAA,GAAPA,CAAAA,QAAsBA,CAACtF,CAADsF,CAAKpF,CAALoF,CAAUA,CAC5BA,MAAOxF,CAACI,CAADJ,EAAQwF,IAAID,CAAZvF,GAAAwF,CAA2BnF,CAAAmF,CAAAtF,CAAAsF,CAAatF,CAAAI,SAAAkF,EAAbA,CAA3BA,CAAyDtF,CAAAI,SAAAkF,EAAzDA,CAAwEtF,CAAxEsF,CADqBA,CAMzBC,EAAAA,GAAPA,CAAAA,QAAkBA,CAACjF,CAADiF,CAAUA,CACxBhF,CAAAgF,CAAAjF,CAAAiF,CAAoBA,CAApBA,CADwBA,CAOrBC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAClF,CAADkF,CAAUA,CAEtBA,MADa/E,EAAA+E,CAAAlF,CAAAkF,CADSA,CAK9BvG,EAAAoG,OAAA,CAAiBA,CAzCD,CAAnB,CAAD,CA0CarG,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EAuDC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE8F,EACS,EAAG,CAIV,IAAA5F,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP4F,EAAAA,GAAPA,CAAAA,QAA+BA,CAAC1F,CAAD0F,CAAKxF,CAALwF,CAAUA,CACrCA,MAAO5F,CAACI,CAADJ,EAAQ4F,IAAID,CAAZ3F,GAAA4F,CAAoCvF,CAAAuF,CAAA1F,CAAA0F,CAAa1F,CAAAI,SAAAsF,EAAbA,CAApCA,CAAkE1F,CAAAI,SAAAsF,EAAlEA,CAAiF1F,CAAjF0F,CAD8BA,CAQzCC,EAAAA,UAAAA,GAAAA,CAAAA,QAASA,EAAGA,CACRA,IAAItE,EAASC,CAAAqE,CAAAA,IAAA3F,EAAA2F,CAAiBA,IAAA9F,EAAjB8F,CAA8BA,CAA9BA,CACbA,OAAOtE,EAAAsE,CAASxF,CAAAwF,CAAAA,IAAA3F,EAAA2F,CAAkBA,IAAA9F,EAAlB8F,CAAgCtE,CAAhCsE,CAATA,CAAmDA,CAFlDA,CAOLC,EAAAA,GAAPA,CAAAA,QAA2BA,CAACtF,CAADsF,CAAUA,CACjCrF,CAAAqF,CAAAtF,CAAAsF,CAAoBA,CAApBA,CADiCA,CAO9BC,EAAAA,GAAPA,CAAAA,QAAmBA,CAACvF,CAADuF,CAAUF,CAAVE,CAAqBA,CACpCpE,EAAAoE,CAAAvF,CAAAuF,CAAsBA,CAAtBA,CAAyBF,CAAzBE,CAAoCA,CAApCA,CADoCA,CAOjCC,EAAAA,GAAPA,CAAAA,QAAyBA,CAACxF,CAADwF,CAAUA,CAE/BA,MADarF,EAAAqF,CAAAxF,CAAAwF,CADkBA,CAKvC7G,EAAAwG,gBAAA,CAA0BA,CAzDV,CAAnB,CAAD,CA0DazG,CAAAC,EA1Db,GA0D+BD,CAAAC,EA1D/B,CA0D+C,EA1D/C,EAFc,CAAjB,CAAD,CA6DWF,CAAAC,EA7DX,GA6D4BD,CAAAC,EA7D5B,CA6D2C,EA7D3C,EAFe,CAAlB,CAAD,CAgEYF,CAAAC,EAhEZ,GAgE2BD,CAAAC,EAhE3B,CAgEwC,EAhExC,EAFY,CAAf,CAAD,CAmEGD,CAnEH,GAmEWA,CAnEX,CAmEiB,EAnEjB,EAuEC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEoG,EACS,EAAG,CAIV,IAAAlG,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPkG,EAAAA,GAAPA,CAAAA,QAAoBA,CAAChG,CAADgG,CAAK9F,CAAL8F,CAAUA,CAC1BA,MAAOlG,CAACI,CAADJ,EAAQkG,IAAID,CAAZjG,GAAAkG,CAAyB7F,CAAA6F,CAAAhG,CAAAgG,CAAahG,CAAAI,SAAA4F,EAAbA,CAAzBA,CAAuDhG,CAAAI,SAAA4F,EAAvDA,CAAsEhG,CAAtEgG,CADmBA,CAMvBC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAC3F,CAAD2F,CAAUA,CACtB1F,CAAA0F,CAAA3F,CAAA2F,CAAoBA,CAApBA,CADsBA,CAOnBC,EAAAA,GAAPA,CAAAA,QAAcA,CAAC5F,CAAD4F,CAAUA,CAEpBA,MADazF,EAAAyF,CAAA5F,CAAA4F,CADOA,CAK5BjH,EAAA8G,KAAA,CAAeA,CAzCC,CAAnB,CAAD,CA0Ca/G,CAAAC,EA1Cb,GA0C+BD,CAAAC,EA1C/B,CA0C+C,EA1C/C,EAFc,CAAjB,CAAD,CA6CWF,CAAAC,EA7CX,GA6C4BD,CAAAC,EA7C5B,CA6C2C,EA7C3C,EAFe,CAAlB,CAAD,CAgDYF,CAAAC,EAhDZ,GAgD2BD,CAAAC,EAhD3B,CAgDwC,EAhDxC,EAFY,CAAf,CAAD,CAmDGD,CAnDH,GAmDWA,CAnDX,CAmDiB,EAnDjB,EAuDC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEwG,EACS,EAAG,CAIV,IAAAtG,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPsG,EAAAA,GAAPA,CAAAA,QAAuBA,CAACpG,CAADoG,CAAKlG,CAALkG,CAAUA,CAC7BA,MAAOtG,CAACI,CAADJ,EAAQsG,IAAID,CAAZrG,GAAAsG,CAA4BjG,CAAAiG,CAAApG,CAAAoG,CAAapG,CAAAI,SAAAgG,EAAbA,CAA5BA,CAA0DpG,CAAAI,SAAAgG,EAA1DA,CAAyEpG,CAAzEoG,CADsBA,CAQjCxB,EAAAA,UAAAA,UAAAA,CAAAA,QAASA,EAAGA,CACRA,IAAIvD,EAASC,CAAAsD,CAAAA,IAAA5E,EAAA4E,CAAiBA,IAAA/E,EAAjB+E,CAA8BA,CAA9BA,CACbA,OAAOvD,EAAAuD,CAASzE,CAAAyE,CAAAA,IAAA5E,EAAA4E,CAAkBA,IAAA/E,EAAlB+E,CAAgCvD,CAAhCuD,CAATA,CAAmDA,CAFlDA,CASZyB,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CACJA,IAAIhF,EAASC,CAAA+E,CAAAA,IAAArG,EAAAqG,CAAiBA,IAAAxG,EAAjBwG,CAA8BA,CAA9BA,CACbA,OAAOhF,EAAAgF,CAASlG,CAAAkG,CAAAA,IAAArG,EAAAqG,CAAkBA,IAAAxG,EAAlBwG,CAAgChF,CAAhCgF,CAATA,CAAmDA,CAFtDA,CAODC,EAAAA,GAAPA,CAAAA,QAAmBA,CAAChG,CAADgG,CAAUA,CACzB/F,CAAA+F,CAAAhG,CAAAgG,CAAoBA,CAApBA,CADyBA,CAOtBvB,EAAAA,GAAPA,CAAAA,QAAmBA,CAACzE,CAADyE,CAAUH,CAAVG,CAAqBA,CACpCtD,EAAAsD,CAAAzE,CAAAyE,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAAoCA,CAApCA,CADoCA,CAOjCwB,EAAAA,GAAPA,CAAAA,QAAeA,CAACjG,CAADiG,CAAUF,CAAVE,CAAiBA,CAC5B9E,EAAA8E,CAAAjG,CAAAiG,CAAsBA,CAAtBA,CAAyBF,CAAzBE,CAAgCA,CAAhCA,CAD4BA,CAOzBC,EAAAA,GAAPA,CAAAA,QAAiBA,CAAClG,CAADkG,CAAUA,CAEvBA,MADa/F,EAAA+F,CAAAlG,CAAAkG,CADUA,CAK/BvH,EAAAkH,QAAA;AAAkBA,CAzEF,CAAnB,CAAD,CA0EanH,CAAAC,EA1Eb,GA0E+BD,CAAAC,EA1E/B,CA0E+C,EA1E/C,EAFc,CAAjB,CAAD,CA6EWF,CAAAC,EA7EX,GA6E4BD,CAAAC,EA7E5B,CA6E2C,EA7E3C,EAFe,CAAlB,CAAD,CAgFYF,CAAAC,EAhFZ,GAgF2BD,CAAAC,EAhF3B,CAgFwC,EAhFxC,EAFY,CAAf,CAAD,CAmFGD,CAnFH,GAmFWA,CAnFX,CAmFiB,EAnFjB,EA8FC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE8G,EACS,EAAG,CAIV,IAAA5G,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP4G,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC1G,CAAD0G,CAAKxG,CAALwG,CAAUA,CAC1BA,MAAO5G,CAACI,CAADJ,EAAQ4G,IAAID,CAAZ3G,GAAA4G,CAAyBvG,CAAAuG,CAAA1G,CAAA0G,CAAa1G,CAAAI,SAAAsG,EAAbA,CAAzBA,CAAuD1G,CAAAI,SAAAsG,EAAvDA,CAAsE1G,CAAtE0G,CADmBA,CAM9BC,EAAAA,UAAAA,EAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAItF,EAASC,CAAAqF,CAAAA,IAAA3G,EAAA2G,CAAiBA,IAAA9G,EAAjB8G,CAA8BA,CAA9BA,CACbA,OAAOtF,EAAAsF,CAA2DrE,EAAAqE,CAAAA,IAAA3G,EAAA2G,CAAkBA,IAAA9G,EAAlB8G,CAAgCtF,CAAhCsF,CAA3DA,CAAsG7H,CAAAC,EAAAC,EAAAC,EAAAI,SAAAuH,YAF1GD,CAOAE,EAAAA,GAAPA,CAAAA,QAAgBA,CAACvG,CAADuG,CAAUA,CACtBtG,CAAAsG,CAAAvG,CAAAuG,CAAoBA,CAApBA,CADsBA,CAOnBC,EAAAA,EAAPA,CAAAA,QAAcA,CAACxG,CAADwG,CAAUH,CAAVG,CAAgBA,CAC1B3D,EAAA2D,CAAAxG,CAAAwG,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAA+BhI,CAAAC,EAAAC,EAAAC,EAAAI,SAAAuH,YAA/BE,CAD0BA,CAOvBC,EAAAA,GAAPA,CAAAA,QAAcA,CAACzG,CAADyG,CAAUA,CAEpBA,MADatG,EAAAsG,CAAAzG,CAAAyG,CADOA,CAK5B9H,EAAAwH,KAAA,CAAeA,CAvDC,CAAnB,CAAD,CAwDazH,CAAAC,EAxDb,GAwD+BD,CAAAC,EAxD/B,CAwD+C,EAxD/C,EAFc,CAAjB,CAAD,CA2DWF,CAAAC,EA3DX,GA2D4BD,CAAAC,EA3D5B,CA2D2C,EA3D3C,EAFe,CAAlB,CAAD,CA8DYF,CAAAC,EA9DZ,GA8D2BD,CAAAC,EA9D3B,CA8DwC,EA9DxC,EAFY,CAAf,CAAD,CAiEGD,CAjEH,GAiEWA,CAjEX,CAiEiB,EAjEjB,EAyEC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEqH,EACS,EAAG,CAIV,IAAAnH,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPmH,EAAAA,GAAPA,CAAAA,QAAoBA,CAACjH,CAADiH,CAAK/G,CAAL+G,CAAUA,CAC1BA,MAAOnH,CAACI,CAADJ,EAAQmH,IAAID,CAAZlH,GAAAmH,CAAyB9G,CAAA8G,CAAAjH,CAAAiH,CAAajH,CAAAI,SAAA6G,EAAbA,CAAzBA,CAAuDjH,CAAAI,SAAA6G,EAAvDA,CAAsEjH,CAAtEiH,CADmBA,CAM9BN,EAAAA,UAAAA,EAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAItF,EAASC,CAAAqF,CAAAA,IAAA3G,EAAA2G,CAAiBA,IAAA9G,EAAjB8G,CAA8BA,CAA9BA,CACbA,OAAOtF,EAAAsF,CAA2DrE,EAAAqE,CAAAA,IAAA3G,EAAA2G,CAAkBA,IAAA9G,EAAlB8G,CAAgCtF,CAAhCsF,CAA3DA,CAAsG7H,CAAAC,EAAAC,EAAAC,EAAAK,SAAAsH,YAF1GD,CAOPvC,EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAI/C,EAASC,CAAA8C,CAAAA,IAAApE,EAAAoE,CAAiBA,IAAAvE,EAAjBuE,CAA8BA,CAA9BA,CACbA,OAAO/C,EAAA+C,CAASjE,CAAAiE,CAAAA,IAAApE,EAAAoE,CAAkBA,IAAAvE,EAAlBuE,CAAgC/C,CAAhC+C,CAATA,CAAmDA,EAFnDA,CAOJ8C,EAAAA,UAAPA,CAAAA,QAAgBA,CAAC5G,CAAD4G,CAAUA,CACtB3G,CAAA2G,CAAA5G,CAAA4G,CAAoBA,CAApBA,CADsBA,CAOnBJ,EAAAA,EAAPA,CAAAA,QAAcA,CAACxG,CAADwG,CAAUH,CAAVG,CAAgBA,CAC1B3D,EAAA2D,CAAAxG,CAAAwG,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAA+BhI,CAAAC,EAAAC,EAAAC,EAAAK,SAAAsH,YAA/BE,CAD0BA,CAOvBvC,EAAAA,GAAPA,CAAAA,QAAkBA,CAACjE,CAADiE;AAAUH,CAAVG,CAAoBA,CAClC9C,EAAA8C,CAAAjE,CAAAiE,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAAmCA,EAAnCA,CADkCA,CAO/B4C,EAAAA,QAAPA,CAAAA,QAAcA,CAAC7G,CAAD6G,CAAUA,CAEpBA,MADa1G,EAAA0G,CAAA7G,CAAA6G,CADOA,CAK5BlI,EAAA+H,KAAA,CAAeA,CArEC,CAAnB,CAAD,CAsEahI,CAAAC,EAtEb,GAsE+BD,CAAAC,EAtE/B,CAsE+C,EAtE/C,EAFc,CAAjB,CAAD,CAyEWF,CAAAC,EAzEX,GAyE4BD,CAAAC,EAzE5B,CAyE2C,EAzE3C,EAFe,CAAlB,CAAD,CA4EYF,CAAAC,EA5EZ,GA4E2BD,CAAAC,EA5E3B,CA4EwC,EA5ExC,EAFY,CAAf,CAAD,CA+EGD,CA/EH,GA+EWA,CA/EX,CA+EiB,EA/EjB,EA0FC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEyH,EACS,EAAG,CAIV,IAAAvH,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPuH,EAAAA,GAAPA,CAAAA,QAAyBA,CAACrH,CAADqH,CAAKnH,CAALmH,CAAUA,CAC/BA,MAAOvH,CAACI,CAADJ,EAAQuH,IAAID,CAAZtH,GAAAuH,CAA8BlH,CAAAkH,CAAArH,CAAAqH,CAAarH,CAAAI,SAAAiH,EAAbA,CAA9BA,CAA4DrH,CAAAI,SAAAiH,EAA5DA,CAA2ErH,CAA3EqH,CADwBA,CAMnCV,EAAAA,UAAAA,EAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAItF,EAASC,CAAAqF,CAAAA,IAAA3G,EAAA2G,CAAiBA,IAAA9G,EAAjB8G,CAA8BA,CAA9BA,CACbA,OAAOtF,EAAAsF,CAA2DrE,EAAAqE,CAAAA,IAAA3G,EAAA2G,CAAkBA,IAAA9G,EAAlB8G,CAAgCtF,CAAhCsF,CAA3DA,CAAsG7H,CAAAC,EAAAC,EAAAC,EAAAK,SAAAgI,OAF1GX,CAIPY,EAAAA,UAAAA,GAAAA,CAAAA,QAAQA,CAACC,CAADD,CAAmBA,CACvBA,IAAIlG,EAASC,CAAAiG,CAAAA,IAAAvH,EAAAuH,CAAiBA,IAAA1H,EAAjB0H,CAA8BA,CAA9BA,CACbA,OAAOlG,EAAAkG,CAASE,EAAAF,CAAAA,IAAAvH,EAAAuH,CAAiBA,IAAA1H,EAAjB0H,CAA+BlG,CAA/BkG,CAAuCC,CAAvCD,CAATA,CAAoEA,IAFpDA,CAOpBG,EAAAA,GAAPA,CAAAA,QAAqBA,CAACpH,CAADoH,CAAUA,CAC3BnH,CAAAmH,CAAApH,CAAAoH,CAAoBA,CAApBA,CAD2BA,CAOxBZ,EAAAA,EAAPA,CAAAA,QAAcA,CAACxG,CAADwG,CAAUH,CAAVG,CAAgBA,CAC1B3D,EAAA2D,CAAAxG,CAAAwG,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAA+BhI,CAAAC,EAAAC,EAAAC,EAAAK,SAAAgI,OAA/BR,CAD0BA,CAOvBa,EAAAA,GAAPA,CAAAA,QAAkBA,CAACrH,CAADqH,CAAUC,CAAVD,CAA0BA,CACxCrE,CAAAqE,CAAArH,CAAAqH,CAAuBA,CAAvBA;AAA0BC,CAA1BD,CADwCA,CAOrCE,EAAAA,GAAPA,CAAAA,QAAmBA,CAACvH,CAADuH,CAAUA,CAEzBA,MADapH,EAAAoH,CAAAvH,CAAAuH,CADYA,CAKjC5I,EAAAmI,UAAA,CAAoBA,CAlEJ,CAAnB,CAAD,CAmEapI,CAAAC,EAnEb,GAmE+BD,CAAAC,EAnE/B,CAmE+C,EAnE/C,EAFc,CAAjB,CAAD,CAsEWF,CAAAC,EAtEX,GAsE4BD,CAAAC,EAtE5B,CAsE2C,EAtE3C,EAFe,CAAlB,CAAD,CAyEYF,CAAAC,EAzEZ,GAyE2BD,CAAAC,EAzE3B,CAyEwC,EAzExC,EAFY,CAAf,CAAD,CA4EGD,CA5EH,GA4EWA,CA5EX,CA4EiB,EA5EjB,EAgFC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEmI,EACS,EAAG,CAIV,IAAAjI,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPiI,EAAAA,GAAPA,CAAAA,QAAwBA,CAAC/H,CAAD+H,CAAK7H,CAAL6H,CAAUA,CAC9BA,MAAOjI,CAACI,CAADJ,EAAQiI,IAAID,CAAZhI,GAAAiI,CAA6B5H,CAAA4H,CAAA/H,CAAA+H,CAAa/H,CAAAI,SAAA2H,EAAbA,CAA7BA,CAA2D/H,CAAAI,SAAA2H,EAA3DA,CAA0E/H,CAA1E+H,CADuBA,CAMlCpB,EAAAA,UAAAA,EAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAItF,EAASC,CAAAqF,CAAAA,IAAA3G,EAAA2G,CAAiBA,IAAA9G,EAAjB8G,CAA8BA,CAA9BA,CACbA,OAAOtF,EAAAsF,CAA+DrE,EAAAqE,CAAAA,IAAA3G,EAAA2G,CAAkBA,IAAA9G,EAAlB8G,CAAgCtF,CAAhCsF,CAA/DA,CAA0G7H,CAAAC,EAAAC,EAAAC,EAAAM,aAAAyI,WAF9GrB,CAOAsB,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC3H,CAAD2H,CAAUA,CAC1B1H,CAAA0H,CAAA3H,CAAA2H,CAAoBA,CAApBA,CAD0BA,CAOvBnB,EAAAA,EAAPA,CAAAA,QAAcA,CAACxG,CAADwG,CAAUH,CAAVG,CAAgBA,CAC1B3D,EAAA2D,CAAAxG,CAAAwG,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAA+BhI,CAAAC,EAAAC,EAAAC,EAAAM,aAAAyI,WAA/BlB,CAD0BA,CAOvBoB,EAAAA,GAAPA,CAAAA,QAAkBA,CAAC5H,CAAD4H,CAAUA,CAExBA,MADazH,EAAAyH,CAAA5H,CAAA4H,CADWA,CAKhCjJ,EAAA6I,SAAA,CAAmBA,CAvDH,CAAnB,CAAD,CAwDa9I,CAAAC,EAxDb,GAwD+BD,CAAAC,EAxD/B,CAwD+C,EAxD/C,EAFc,CAAjB,CAAD,CA2DWF,CAAAC,EA3DX,GA2D4BD,CAAAC,EA3D5B,CA2D2C,EA3D3C,EAFe,CAAlB,CAAD,CA8DYF,CAAAC,EA9DZ,GA8D2BD,CAAAC,EA9D3B,CA8DwC,EA9DxC,EAFY,CAAf,CAAD,CAiEGD,CAjEH;CAiEWA,CAjEX,CAiEiB,EAjEjB,EAyEC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEwI,EACS,EAAG,CAIV,IAAAtI,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPsI,EAAAA,GAAPA,CAAAA,QAA4BA,CAACpI,CAADoI,CAAKlI,CAALkI,CAAUA,CAClCA,MAAOtI,CAACI,CAADJ,EAAQsI,IAAID,CAAZrI,GAAAsI,CAAiCjI,CAAAiI,CAAApI,CAAAoI,CAAapI,CAAAI,SAAAgI,EAAbA,CAAjCA,CAA+DpI,CAAAI,SAAAgI,EAA/DA,CAA8EpI,CAA9EoI,CAD2BA,CAQtChE,EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAI/C,EAASC,CAAA8C,CAAAA,IAAApE,EAAAoE,CAAiBA,IAAAvE,EAAjBuE,CAA8BA,CAA9BA,CACbA,OAAO/C,EAAA+C,CAAS9B,EAAA8B,CAAAA,IAAApE,EAAAoE,CAAkBA,IAAAvE,EAAlBuE,CAAgC/C,CAAhC+C,CAATA,CAAmDA,CAFnDA,CASXiE,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,IAAIhH,EAASC,CAAA+G,CAAAA,IAAArI,EAAAqI,CAAiBA,IAAAxI,EAAjBwI,CAA8BA,CAA9BA,CACbA,OAAOhH,EAAAgH,CAA6D/F,EAAA+F,CAAAA,IAAArI,EAAAqI,CAAkBA,IAAAxI,EAAlBwI,CAAgChH,CAAhCgH,CAA7DA,CAAwGvJ,CAAAC,EAAAC,EAAAC,EAAAQ,WAAA6I,OAF5GD,CAOAE,EAAAA,GAAPA,CAAAA,QAAwBA,CAACjI,CAADiI,CAAUA,CAC9BhI,CAAAgI,CAAAjI,CAAAiI,CAAoBA,CAApBA,CAD8BA,CAO3BhE,EAAAA,GAAPA,CAAAA,QAAkBA,CAACjE,CAADiE,CAAUH,CAAVG,CAAoBA,CAClCpB,EAAAoB,CAAAjE,CAAAiE,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAAmCA,CAAnCA,CADkCA,CAO/BiE,EAAAA,GAAPA,CAAAA,QAAcA,CAAClI,CAADkI,CAAUH,CAAVG,CAAgBA,CAC1BrF,EAAAqF,CAAAlI,CAAAkI,CAAsBA,CAAtBA,CAAyBH,CAAzBG,CAA+B1J,CAAAC,EAAAC,EAAAC,EAAAQ,WAAA6I,OAA/BE,CAD0BA,CAOvBC,EAAAA,GAAPA;AAAAA,QAAsBA,CAACnI,CAADmI,CAAUA,CAE5BA,MADahI,EAAAgI,CAAAnI,CAAAmI,CADeA,CAKpCxJ,EAAAkJ,GAAA,CAAuBA,CAzEP,CAAnB,CAAD,CA0EanJ,CAAAC,EA1Eb,GA0E+BD,CAAAC,EA1E/B,CA0E+C,EA1E/C,EAFc,CAAjB,CAAD,CA6EWF,CAAAC,EA7EX,GA6E4BD,CAAAC,EA7E5B,CA6E2C,EA7E3C,EAFe,CAAlB,CAAD,CAgFYF,CAAAC,EAhFZ,GAgF2BD,CAAAC,EAhF3B,CAgFwC,EAhFxC,EAFY,CAAf,CAAD,CAmFGD,CAnFH,GAmFWA,CAnFX,CAmFiB,EAnFjB,EA2FC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE+I,EACS,EAAG,CAIV,IAAA7I,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP6I,EAAAA,GAAPA,CAAAA,QAAwBA,CAAC3I,CAAD2I,CAAKzI,CAALyI,CAAUA,CAC9BA,MAAO7I,CAACI,CAADJ,EAAQ6I,IAAID,CAAZ5I,GAAA6I,CAA6BxI,CAAAwI,CAAA3I,CAAA2I,CAAa3I,CAAAI,SAAAuI,EAAbA,CAA7BA,CAA2D3I,CAAAI,SAAAuI,EAA3DA,CAA0E3I,CAA1E2I,CADuBA,CAGlCC,EAAAA,UAAAA,IAAAA,CAAAA,QAAGA,CAACpB,CAADoB,CAAmBA,CAClBA,IAAIvH,EAASC,CAAAsH,CAAAA,IAAA5I,EAAA4I,CAAiBA,IAAA/I,EAAjB+I,CAA8BA,CAA9BA,CACbA,OAAOvH,EAAAuH,CAASnB,EAAAmB,CAAAA,IAAA5I,EAAA4I,CAAiBA,IAAA/I,EAAjB+I,CAA+BvH,CAA/BuH,CAAuCpB,CAAvCoB,CAATA,CAAoEA,IAFzDA,CAItB/E,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC2D,CAAD3D,CAAmBA,CACpBA,IAAIxC,EAASC,CAAAuC,CAAAA,IAAA7D,EAAA6D,CAAiBA,IAAAhE,EAAjBgE,CAA8BA,CAA9BA,CACbA,OAAOxC,EAAAwC,CAAS4D,EAAA5D,CAAAA,IAAA7D,EAAA6D,CAAiBA,IAAAhE,EAAjBgE,CAA+BxC,CAA/BwC,CAAuC2D,CAAvC3D,CAATA,CAAoEA,IAFvDA,CAOjBgF,EAAAA,GAAPA,CAAAA,QAAoBA,CAACvI,CAADuI,CAAUA,CAC1BtI,CAAAsI,CAAAvI,CAAAuI,CAAoBA,CAApBA,CAD0BA,CAOvBC,EAAAA,GAAPA,CAAAA,QAAaA,CAACxI,CAADwI,CAAUC,CAAVD,CAAqBA,CAC9BxF,CAAAwF,CAAAxI,CAAAwI,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CAD8BA,CAO3BE,EAAAA,GAAPA,CAAAA,QAAeA,CAAC1I,CAAD0I,CAAUC,CAAVD,CAAuBA,CAClC1F,CAAA0F,CAAA1I,CAAA0I,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADkCA,CAO/BE,EAAAA,GAAPA,CAAAA,QAAkBA,CAAC5I,CAAD4I,CAAUA,CAExBA,MADazI,EAAAyI,CAAA5I,CAAA4I,CADWA,CAKhCjK;CAAAyJ,GAAA,CAAmBA,CA/DH,CAAnB,CAAD,CAgEa1J,CAAAC,EAhEb,GAgE+BD,CAAAC,EAhE/B,CAgE+C,EAhE/C,EAFc,CAAjB,CAAD,CAmEWF,CAAAC,EAnEX,GAmE4BD,CAAAC,EAnE5B,CAmE2C,EAnE3C,EAFe,CAAlB,CAAD,CAsEYF,CAAAC,EAtEZ,GAsE2BD,CAAAC,EAtE3B,CAsEwC,EAtExC,EAFY,CAAf,CAAD,CAyEGD,CAzEH,GAyEWA,CAzEX,CAyEiB,EAzEjB,EAgFC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEwJ,EACS,EAAG,CAIV,IAAAtJ,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPsJ,EAAAA,GAAPA,CAAAA,QAAkCA,CAACpJ,CAADoJ,CAAKlJ,CAALkJ,CAAUA,CACxCA,MAAOtJ,CAACI,CAADJ,EAAQsJ,IAAID,CAAZrJ,GAAAsJ,CAAuCjJ,CAAAiJ,CAAApJ,CAAAoJ,CAAapJ,CAAAI,SAAAgJ,EAAbA,CAAvCA,CAAqEpJ,CAAAI,SAAAgJ,EAArEA,CAAoFpJ,CAApFoJ,CADiCA,CAU5CC,EAAAA,UAAAA,GAAAA,CAAAA,QAAEA,EAAGA,CACDA,IAAIhI,EAASC,CAAA+H,CAAAA,IAAArJ,EAAAqJ,CAAiBA,IAAAxJ,EAAjBwJ,CAA8BA,CAA9BA,CACbA,OAAOhI,EAAAgI,CAASC,EAAAD,CAAAA,IAAArJ,EAAAqJ,CAAkBA,IAAAxJ,EAAlBwJ,CAAgChI,CAAhCgI,CAATA,CAAmDA,IAAArJ,EAAAuJ,EAAAF,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAFzDA,CAWLG,EAAAA,UAAAA,GAAAA,CAAAA,QAASA,EAAMA,CACXA,IAAInI,EAASC,CAAAkI,CAAAA,IAAAxJ,EAAAwJ,CAAiBA,IAAA3J,EAAjB2J,CAA8BA,CAA9BA,CACbA,OAAOnI,EAAAmI,CAAS1J,CAAQ0J,IAAI1K,CAAAC,EAAAC,EAAAC,EAAAiF,IAAZpE,GAAA0J,CAAiDC,EAAAD,CAAAA,IAAAxJ,EAAAwJ,CAAmBA,IAAA3J,EAAnB2J,CAAiCnI,CAAjCmI,CAAjDA,CAA2FA,IAAAxJ,EAA3FwJ,CAATA,CAA+GA,IAF3GA,CAYfE,EAAAA,UAAAA,GAAAA,CAAAA,QAASA,EAAGA,CACRA,IAAIrI,EAASC,CAAAoI,CAAAA,IAAA1J,EAAA0J,CAAiBA,IAAA7J,EAAjB6J,CAA8BA,CAA9BA,CACbA,OAAOrI,EAAAqI,CAASA,CAACA,EAACA,IAAA1J,EWl1BjC8B,EAAA,CXk1BkD4H,IAAA7J,EWl1BlD,CXk1BgEwB,CWl1BhE,CXk1BgCqI,EW11BN,EX01BMA;AW11BA,EX01BAA,CAAVA,CAAoDA,CAAAA,CAFnDA,CAOLC,EAAAA,GAAPA,CAAAA,QAA8BA,CAACrJ,CAADqJ,CAAUA,CACpCpJ,CAAAoJ,CAAArJ,CAAAqJ,CAAoBA,CAApBA,CADoCA,CAOjCC,EAAAA,GAAPA,CAAAA,QAAYA,CAACtJ,CAADsJ,CAAUP,CAAVO,CAAcA,CACtBC,EAAAD,CAAAtJ,CAAAsJ,CAAsBA,CAAtBA,CAAyBP,CAAzBO,CAA6BtJ,CAAAiJ,EAAAK,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAA7BA,CADsBA,CAOnBE,EAAAA,GAAPA,CAAAA,QAAmBA,CAACxJ,CAADwJ,CAAUC,CAAVD,CAA2BA,CAC1CxG,CAAAwG,CAAAxJ,CAAAwJ,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CAD0CA,CAOvCE,EAAAA,GAAPA,CAAAA,QAAmBA,CAAC1J,CAAD0J,CAAUN,CAAVM,CAAqBA,CACpC/H,EAAA+H,CAAA1J,CAAA0J,CAAqBA,CAArBA,CAAwBA,CAACN,CAAzBM,CAAqCA,CAArCA,CADoCA,CAOjCC,EAAAA,GAAPA,CAAAA,QAA4BA,CAAC3J,CAAD2J,CAAUA,CAElCA,MADaxJ,EAAAwJ,CAAA3J,CAAA2J,CADqBA,CAK1ChL,EAAAkK,GAAA,CAA6BA,CAhGb,CAAnB,CAAD,CAiGanK,CAAAC,EAjGb,GAiG+BD,CAAAC,EAjG/B,CAiG+C,EAjG/C,EAFc,CAAjB,CAAD,CAoGWF,CAAAC,EApGX,GAoG4BD,CAAAC,EApG5B,CAoG2C,EApG3C,EAFe,CAAlB,CAAD,CAuGYF,CAAAC,EAvGZ,GAuG2BD,CAAAC,EAvG3B,CAuGwC,EAvGxC,EAFY,CAAf,CAAD,CA0GGD,CA1GH,GA0GWA,CA1GX,CA0GiB,EA1GjB,EAsHC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEuK,EACS,EAAG,CAIV,IAAArK,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPqK,EAAAA,GAAPA,CAAAA,QAAqBA,CAACnK,CAADmK,CAAKjK,CAALiK,CAAUA,CAC3BA,MAAOrK,CAACI,CAADJ,EAAQqK,IAAID,CAAZpK,GAAAqK,CAA0BhK,CAAAgK,CAAAnK,CAAAmK,CAAanK,CAAAI,SAAA+J,EAAbA,CAA1BA,CAAwDnK,CAAAI,SAAA+J,EAAxDA,CAAuEnK,CAAvEmK,CADoBA,CAG/BC,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC5C,CAAD4C,CAAmBA,CACnBA,IAAI/I,EAASC,CAAA8I,CAAAA,IAAApK,EAAAoK,CAAiBA,IAAAvK,EAAjBuK,CAA8BA,CAA9BA,CACbA,OAAO/I,EAAA+I,CAAS3C,EAAA2C,CAAAA,IAAApK,EAAAoK,CAAiBA,IAAAvK,EAAjBuK,CAA+B/I,CAA/B+I,CAAuC5C,CAAvC4C,CAATA,CAAoEA,IAFxDA,CAOvBC,EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAIhJ,EAASC,CAAA+I,CAAAA,IAAArK,EAAAqK,CAAiBA,IAAAxK,EAAjBwK,CAA8BA,CAA9BA,CACbA,OAAOhJ,EAAAgJ,CAASA,CAACA,EAACA,IAAArK,EWj7BjC8B,EAAA,CXi7BkDuI,IAAAxK,EWj7BlD,CXi7BgEwB,CWj7BhE,CXi7BgCgJ,EWz7BN,EXy7BMA,EWz7BA,EXy7BAA,CAAVA,CAAoDA,CAAAA,CAFpDA,CAOXC,EAAAA,UAAAA,GAAAA,CAAAA,QAAQA,EAAGA,CACPA,IAAIjJ,EAASC,CAAAgJ,CAAAA,IAAAtK,EAAAsK,CAAiBA,IAAAzK,EAAjByK,CAA8BA,CAA9BA,CACbA,OAAOjJ,EAAAiJ,CAAuDA,IAAAtK,EWx7B7E8B,EAAAwI,CXw7B+FA,IAAAzK,EWx7B/FyK,CXw7B6GjJ,CWx7B7GiJ,CXw7BsBA,CAAkGxL,CAAAC,EAAAC,EAAAC,EAAAO,KAAA+K,KAFlGD,CAQXjC,EAAAA,UAAAA,KAAAA;AAAAA,QAAIA,CAACnI,CAADmI,CAAMA,CACNA,IAAIhH,EAASC,CAAA+G,CAAAA,IAAArI,EAAAqI,CAAiBA,IAAAxI,EAAjBwI,CAA8BA,EAA9BA,CACbA,OAAOhH,EAAAgH,CAASmC,EAAAnC,CAAAA,IAAArI,EAAAqI,CAAgBnI,CAAhBmI,CAAqBA,IAAAxI,EAArBwI,CAAmChH,CAAnCgH,CAATA,CAAsDA,IAFvDA,CAQVoC,EAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAACvK,CAADuK,CAAMA,CACZA,IAAIpJ,EAASC,CAAAmJ,CAAAA,IAAAzK,EAAAyK,CAAiBA,IAAA5K,EAAjB4K,CAA8BA,EAA9BA,CACbA,OAAOpJ,EAAAoJ,CAAS3K,CAACI,CAADJ,EAAQ2K,IAAI3L,CAAAC,EAAAC,EAAAC,EAAAkK,GAAZrJ,GAAA2K,CAAgEhB,EAAAgB,CAAAA,IAAAzK,EAAAyK,CAAmBA,IAAA5K,EAAnB4K,CAAiCpJ,CAAjCoJ,CAAhEA,CAA0GA,IAAAzK,EAA1GyK,CAATA,CAA8HA,IAFzHA,CAShBC,EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACjI,CAADiI,CAAQxK,CAARwK,CAAaA,CACjBA,IAAIrJ,EAASC,CAAAoJ,CAAAA,IAAA1K,EAAA0K,CAAiBA,IAAA7K,EAAjB6K,CAA8BA,EAA9BA,CACbA,OAAOrJ,EAAAqJ,CAAS5K,CAACI,CAADJ,EAAQ4K,IAAI5L,CAAAC,EAAAC,EAAAC,EAAAiL,MAAZpK,GAAA4K,CAAmDjB,EAAAiB,CAAAA,IAAA1K,EAAA0K,CAAmBhI,EAAAgI,CAAAA,IAAA1K,EAAA0K,CAAiBA,IAAA7K,EAAjB6K,CAA+BrJ,CAA/BqJ,CAAnBA,CAAoEA,CAApEA,CAA4DjI,CAA5DiI,CAAnDA,CAA2HA,IAAA1K,EAA3H0K,CAATA,CAA+IA,IAFrIA,CAOrBC,EAAAA,UAAAA,GAAAA,CAAAA,QAAcA,EAAGA,CACbA,IAAItJ,EAASC,CAAAqJ,CAAAA,IAAA3K,EAAA2K,CAAiBA,IAAA9K,EAAjB8K,CAA8BA,EAA9BA,CACbA,OAAOtJ,EAAAsJ,CAAS3H,EAAA2H,CAAAA,IAAA3K,EAAA2K,CAAqBA,IAAA9K,EAArB8K,CAAmCtJ,CAAnCsJ,CAATA,CAAsDA,CAFhDA,CA6BjBC,EAAAA,UAAAA,GAAAA,CAAAA,QAAcA,CAACnI,CAADmI,CAAaA,CACvBA,IAAIvJ,EAASC,CAAAsJ,CAAAA,IAAA5K,EAAA4K,CAAiBA,IAAA/K,EAAjB+K,CAA8BA,EAA9BA,CACbA,OAAOvJ,EAAAuJ,CAAS9K,CAAQ8K,IAAI9L,CAAAC,EAAAC,EAAAC,EAAAyJ,GAAZ5I,GAAA8K,CAAsDnB,EAAAmB,CAAAA,IAAA5K,EAAA4K;AAAmBlI,EAAAkI,CAAAA,IAAA5K,EAAA4K,CAAiBA,IAAA/K,EAAjB+K,CAA+BvJ,CAA/BuJ,CAAnBA,CAAoEA,CAApEA,CAA4DnI,CAA5DmI,CAAtDA,CAA8HA,IAAA5K,EAA9H4K,CAATA,CAAkJA,IAFlIA,CAO3BC,EAAAA,UAAAA,GAAAA,CAAAA,QAAoBA,EAAGA,CACnBA,IAAIxJ,EAASC,CAAAuJ,CAAAA,IAAA7K,EAAA6K,CAAiBA,IAAAhL,EAAjBgL,CAA8BA,EAA9BA,CACbA,OAAOxJ,EAAAwJ,CAAS7H,EAAA6H,CAAAA,IAAA7K,EAAA6K,CAAqBA,IAAAhL,EAArBgL,CAAmCxJ,CAAnCwJ,CAATA,CAAsDA,CAF1CA,CAOhBC,EAAAA,GAAPA,CAAAA,QAAiBA,CAACxK,CAADwK,CAAUA,CACvBvK,CAAAuK,CAAAxK,CAAAwK,CAAoBA,CAApBA,CADuBA,CAOpBC,EAAAA,GAAPA,CAAAA,QAAcA,CAACzK,CAADyK,CAAUC,CAAVD,CAAsBA,CAChCzH,CAAAyH,CAAAzK,CAAAyK,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADgCA,CAO7BE,EAAAA,GAAPA,CAAAA,QAAkBA,CAAC3K,CAAD2K,CAAUZ,CAAVY,CAAoBA,CAClChJ,EAAAgJ,CAAA3K,CAAA2K,CAAqBA,CAArBA,CAAwBA,CAACZ,CAAzBY,CAAoCA,CAApCA,CADkCA,CAO/BC,EAAAA,GAAPA,CAAAA,QAAkBA,CAAC5K,CAAD4K,CAAUZ,CAAVY,CAAoBA,CAClCjJ,EAAAiJ,CAAA5K,CAAA4K,CAAqBA,CAArBA,CAAwBZ,CAAxBY,CAAkCpM,CAAAC,EAAAC,EAAAC,EAAAO,KAAA+K,KAAlCW,CADkCA,CAO/B1C,EAAAA,GAAPA,CAAAA,QAAcA,CAAClI,CAADkI,CAAU2C,CAAV3C,CAAsBA,CAChClF,CAAAkF,CAAAlI,CAAAkI,CAAuBA,CAAvBA,CAA0B2C,CAA1B3C,CADgCA,CAO7B4C,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC9K,CAAD8K,CAAUC,CAAVD,CAA4BA,CAC5C9H,CAAA8H,CAAA9K,CAAA8K,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CAD4CA,CAOzCE,EAAAA,GAAPA,CAAAA,QAAkBA,CAAChL,CAADgL,CAAUC,CAAVD,CAA0BA,CACxChI,CAAAgI,CAAAhL,CAAAgL,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADwCA,CAQrCE,EAAAA,GAAPA,CAAAA,QAA2BA,CAAClL,CAADkL,CAAUhI,CAAVgI,CAAgBA,CACvC/H,EAAA+H,CAAAlL,CAAAkL,CAAoBA,CAApBA,CAAuBhI,CAAAE,OAAvB8H,CAAoCA,CAApCA,CACAA,KAAKA,IAAIzL,EAAIyD,CAAAE,OAAJ3D,CAAkByL,CAA3BA,CAAmCA,CAAnCA,EAA8BzL,CAA9ByL,CAAsCzL,CAAAyL,EAAtCA,CACIC,EAAAD,CAAAlL,CAAAkL,CAAkBhI,CAAAgI,CAAKzL,CAALyL,CAAlBA,CAEJA,OAAO1H,GAAA0H,CAAAlL,CAAAkL,CALgCA,CAWpCE,EAAAA,GAAPA,CAAAA,QAA0BA,CAACpL,CAADoL,CAAU1H,CAAV0H,CAAoBA,CAC1CjI,EAAAiI,CAAApL,CAAAoL,CAAoBA,CAApBA,CAAuB1H,CAAvB0H,CAAiCA,CAAjCA,CAD0CA,CAOvCC,EAAAA,GAAPA,CAAAA,QAAgBA,CAACrL,CAADqL,CAAUC,CAAVD,CAAwBA,CACpCrI,CAAAqI,CAAArL,CAAAqL,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoCA,CAQjCE,EAAAA,GAAPA;AAAAA,QAAyBA,CAACvL,CAADuL,CAAUrI,CAAVqI,CAAgBA,CACrCpI,EAAAoI,CAAAvL,CAAAuL,CAAoBA,CAApBA,CAAuBrI,CAAAE,OAAvBmI,CAAoCA,CAApCA,CACAA,KAAKA,IAAI9L,EAAIyD,CAAAE,OAAJ3D,CAAkB8L,CAA3BA,CAAmCA,CAAnCA,EAA8B9L,CAA9B8L,CAAsC9L,CAAA8L,EAAtCA,CACIJ,EAAAI,CAAAvL,CAAAuL,CAAkBrI,CAAAqI,CAAK9L,CAAL8L,CAAlBA,CAEJA,OAAO/H,GAAA+H,CAAAvL,CAAAuL,CAL8BA,CAWlCC,EAAAA,GAAPA,CAAAA,QAAwBA,CAACxL,CAADwL,CAAU9H,CAAV8H,CAAoBA,CACxCrI,EAAAqI,CAAAxL,CAAAwL,CAAoBA,CAApBA,CAAuB9H,CAAvB8H,CAAiCA,CAAjCA,CADwCA,CAOrCC,EAAAA,GAAPA,CAAAA,QAAwBA,CAACzL,CAADyL,CAAUC,CAAVD,CAAgCA,CACpDzI,CAAAyI,CAAAzL,CAAAyL,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoDA,CAQjDE,EAAAA,GAAPA,CAAAA,QAAiCA,CAAC3L,CAAD2L,CAAUzI,CAAVyI,CAAgBA,CAC7CxI,EAAAwI,CAAA3L,CAAA2L,CAAoBA,CAApBA,CAAuBzI,CAAAE,OAAvBuI,CAAoCA,CAApCA,CACAA,KAAKA,IAAIlM,EAAIyD,CAAAE,OAAJ3D,CAAkBkM,CAA3BA,CAAmCA,CAAnCA,EAA8BlM,CAA9BkM,CAAsClM,CAAAkM,EAAtCA,CACIR,EAAAQ,CAAA3L,CAAA2L,CAAkBzI,CAAAyI,CAAKlM,CAALkM,CAAlBA,CAEJA,OAAOnI,GAAAmI,CAAA3L,CAAA2L,CALsCA,CAW1CC,EAAAA,GAAPA,CAAAA,QAAgCA,CAAC5L,CAAD4L,CAAUlI,CAAVkI,CAAoBA,CAChDzI,EAAAyI,CAAA5L,CAAA4L,CAAoBA,CAApBA,CAAuBlI,CAAvBkI,CAAiCA,CAAjCA,CADgDA,CAO7CC,EAAAA,GAAPA,CAAAA,QAAeA,CAAC7L,CAAD6L,CAAUA,CAErBA,MADa1L,EAAA0L,CAAA7L,CAAA6L,CADQA,CAK7BlN,EAAAiL,MAAA,CAAgBA,CAhPA,CAAnB,CAAD,CAiPalL,CAAAC,EAjPb,GAiP+BD,CAAAC,EAjP/B,CAiP+C,EAjP/C,EAFc,CAAjB,CAAD,CAoPWF,CAAAC,EApPX,GAoP4BD,CAAAC,EApP5B,CAoP2C,EApP3C,EAFe,CAAlB,CAAD,CAuPYF,CAAAC,EAvPZ,GAuP2BD,CAAAC,EAvP3B,CAuPwC,EAvPxC,EAFY,CAAf,CAAD,CA0PGD,CA1PH,GA0PWA,CA1PX,CA0PiB,EA1PjB,EAiQC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEyM,EACS,EAAG,CAIV,IAAAvM,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAWduB,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,MAAOiI,GAAAjI,CAAAA,IAAArB,EAAAqB,CAAkBA,IAAAxB,EAAlBwB,CADFA,CASTqC,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,MAAO4F,GAAA5F,CAAAA,IAAA1D,EAAA0D,CAAkBA,IAAA7D,EAAlB6D,CAAgCA,CAAhCA,CADFA,CASF2I,EAAAA,aAAPA,CAAAA,QAAmBA,CAAC/L,CAAD+L,CAAUhL,CAAVgL,CAAkB3I,CAAlB2I,CAA0BA,CACzC1I,EAAA0I,CAAA/L,CAAA+L,CAAaA,CAAbA,CAAgBA,EAAhBA,CACA/L,EAAAgM,EAAAD,CAAmB3I,CAAnB2I,CACA/L,EAAAgM,EAAAD,CAAmBhL,CAAnBgL,CACAA,OAAO/L,EAAAe,OAAAgL,EAJkCA,CAOjDpN,EAAAmN,GAAA,CAAiBA,CAjDD,CAAnB,CAAD,CAkDapN,CAAAC,EAlDb,GAkD+BD,CAAAC,EAlD/B,CAkD+C,EAlD/C,EAFc,CAAjB,CAAD,CAqDWF,CAAAC,EArDX,GAqD4BD,CAAAC,EArD5B,CAqD2C,EArD3C,EAFe,CAAlB,CAAD,CAwDYF,CAAAC,EAxDZ,GAwD2BD,CAAAC,EAxD3B,CAwDwC,EAxDxC,EAFY,CAAf,CAAD,CA2DGD,CA3DH,GA2DWA,CA3DX,CA2DiB,EA3DjB,EAkEC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE4M,EACS,EAAG,CAIV,IAAA1M,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP0M,EAAAA,GAAPA,CAAAA,QAAsBA,CAACxM,CAADwM,CAAKtM,CAALsM,CAAUA,CAC5BA,MAAO1M,CAACI,CAADJ,EAAQ0M,IAAID,CAAZzM,GAAA0M,CAA2BrM,CAAAqM,CAAAxM,CAAAwM,CAAaxM,CAAAI,SAAAoM,EAAbA,CAA3BA,CAAyDxM,CAAAI,SAAAoM,EAAzDA,CAAwExM,CAAxEwM,CADqBA,CAmBhCC,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAAChK,CAADgK,CAAQvM,CAARuM,CAAaA,CACfA,IAAIpL,EAASC,CAAAmL,CAAAA,IAAAzM,EAAAyM,CAAiBA,IAAA5M,EAAjB4M,CAA8BA,CAA9BA,CACbA,OAAOpL,EAAAoL,CAAS3M,CAACI,CAADJ,EAAQ2M,IAAI3N,CAAAC,EAAAC,EAAAC,EAAAiL,MAAZpK,GAAA2M,CAAmDhD,EAAAgD,CAAAA,IAAAzM,EAAAyM,CAAmB/J,EAAA+J,CAAAA,IAAAzM,EAAAyM,CAAiBA,IAAA5M,EAAjB4M,CAA+BpL,CAA/BoL,CAAnBA,CAAoEA,CAApEA,CAA4DhK,CAA5DgK,CAAnDA,CAA2HA,IAAAzM,EAA3HyM,CAATA,CAA+IA,IAFvIA,CAOnBC,EAAAA,UAAAA,GAAAA,CAAAA,QAAYA,EAAGA,CACXA,IAAIrL,EAASC,CAAAoL,CAAAA,IAAA1M,EAAA0M,CAAiBA,IAAA7M,EAAjB6M,CAA8BA,CAA9BA,CACbA,OAAOrL,EAAAqL,CAAS1J,EAAA0J,CAAAA,IAAA1M,EAAA0M,CAAqBA,IAAA7M,EAArB6M,CAAmCrL,CAAnCqL,CAATA,CAAsDA,CAFlDA,CASf9B,EAAAA,UAAAA,GAAAA,CAAAA,QAAcA,CAACnI,CAADmI,CAAaA,CACvBA,IAAIvJ,EAASC,CAAAsJ,CAAAA,IAAA5K,EAAA4K,CAAiBA,IAAA/K,EAAjB+K,CAA8BA,CAA9BA,CACbA,OAAOvJ,EAAAuJ,CAAS9K,CAAQ8K,IAAI9L,CAAAC,EAAAC,EAAAC,EAAAyJ,GAAZ5I,GAAA8K,CAAsDnB,EAAAmB,CAAAA,IAAA5K,EAAA4K;AAAmBlI,EAAAkI,CAAAA,IAAA5K,EAAA4K,CAAiBA,IAAA/K,EAAjB+K,CAA+BvJ,CAA/BuJ,CAAnBA,CAAoEA,CAApEA,CAA4DnI,CAA5DmI,CAAtDA,CAA8HA,IAAA5K,EAA9H4K,CAATA,CAAkJA,IAFlIA,CAO3BC,EAAAA,UAAAA,GAAAA,CAAAA,QAAoBA,EAAGA,CACnBA,IAAIxJ,EAASC,CAAAuJ,CAAAA,IAAA7K,EAAA6K,CAAiBA,IAAAhL,EAAjBgL,CAA8BA,CAA9BA,CACbA,OAAOxJ,EAAAwJ,CAAS7H,EAAA6H,CAAAA,IAAA7K,EAAA6K,CAAqBA,IAAAhL,EAArBgL,CAAmCxJ,CAAnCwJ,CAATA,CAAsDA,CAF1CA,CAOhB8B,EAAAA,GAAPA,CAAAA,QAAkBA,CAACrM,CAADqM,CAAUA,CACxBpM,CAAAoM,CAAArM,CAAAqM,CAAoBA,CAApBA,CADwBA,CAOrBC,EAAAA,GAAPA,CAAAA,QAAoBA,CAACtM,CAADsM,CAAsBA,CACtCzJ,EAAAyJ,CAAAtM,CAAAsM,CAAsBA,CAAtBA,CY7nDSC,EAAAC,CAAyBC,EAAAC,GAAzBF,CAA8CC,EAAAE,GZ6nDvDL,CAAqC9N,CAAAC,EAAAC,EAAAC,EAAAS,GAAAsN,GAArCJ,CADsCA,CAOnCM,EAAAA,GAAPA,CAAAA,QAAgBA,CAAC5M,CAAD4M,CAAUC,CAAVD,CAAwBA,CACpC5J,CAAA4J,CAAA5M,CAAA4M,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoCA,CAQjCE,EAAAA,GAAPA,CAAAA,QAAyBA,CAAC9M,CAAD8M,CAAU5J,CAAV4J,CAAgBA,CACrC3J,EAAA2J,CAAA9M,CAAA8M,CAAoBA,CAApBA,CAAuB5J,CAAAE,OAAvB0J,CAAoCA,CAApCA,CACAA,KAAKA,IAAIrN,EAAIyD,CAAAE,OAAJ3D,CAAkBqN,CAA3BA,CAAmCA,CAAnCA,EAA8BrN,CAA9BqN,CAAsCrN,CAAAqN,EAAtCA,CACI3B,EAAA2B,CAAA9M,CAAA8M,CAAkB5J,CAAA4J,CAAKrN,CAALqN,CAAlBA,CAEJA,OAAOtJ,GAAAsJ,CAAA9M,CAAA8M,CAL8BA,CAWlCC,EAAAA,GAAPA,CAAAA,QAAwBA,CAAC/M,CAAD+M,CAAUrJ,CAAVqJ,CAAoBA,CACxC5J,EAAA4J,CAAA/M,CAAA+M,CAAoBA,CAApBA,CAAuBrJ,CAAvBqJ,CAAiCA,CAAjCA,CADwCA,CAOrCtB,EAAAA,GAAPA,CAAAA,QAAwBA,CAACzL,CAADyL,CAAUC,CAAVD,CAAgCA,CACpDzI,CAAAyI,CAAAzL,CAAAyL,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoDA,CAQjDE,EAAAA,GAAPA,CAAAA,QAAiCA,CAAC3L,CAAD2L,CAAUzI,CAAVyI,CAAgBA,CAC7CxI,EAAAwI,CAAA3L,CAAA2L,CAAoBA,CAApBA,CAAuBzI,CAAAE,OAAvBuI,CAAoCA,CAApCA,CACAA,KAAKA,IAAIlM,EAAIyD,CAAAE,OAAJ3D,CAAkBkM,CAA3BA,CAAmCA,CAAnCA,EAA8BlM,CAA9BkM,CAAsClM,CAAAkM,EAAtCA,CACIR,EAAAQ,CAAA3L,CAAA2L,CAAkBzI,CAAAyI,CAAKlM,CAALkM,CAAlBA,CAEJA,OAAOnI,GAAAmI,CAAA3L,CAAA2L,CALsCA,CAW1CC,EAAAA,GAAPA,CAAAA,QAAgCA,CAAC5L,CAAD4L,CAAUlI,CAAVkI,CAAoBA,CAChDzI,EAAAyI,CAAA5L,CAAA4L;AAAoBA,CAApBA,CAAuBlI,CAAvBkI,CAAiCA,CAAjCA,CADgDA,CAO7CoB,EAAAA,GAAPA,CAAAA,QAAgBA,CAAChN,CAADgN,CAAUA,CAEtBA,MADa7M,EAAA6M,CAAAhN,CAAAgN,CADSA,CAQnBC,EAAAA,GAAPA,CAAAA,QAAyBA,CAACjN,CAADiN,CAAUlM,CAAVkM,CAAkBA,CACvCjN,CAAAkN,OAAAD,CAAelM,CAAfkM,CADuCA,CAI/CtO,EAAAsN,OAAA,CAAiBA,CAtJD,CAAnB,CAAD,CAuJavN,CAAAC,EAvJb,GAuJ+BD,CAAAC,EAvJ/B,CAuJ+C,EAvJ/C,EAFc,CAAjB,CAAD,CA0JWF,CAAAC,EA1JX,GA0J4BD,CAAAC,EA1J5B,CA0J2C,EA1J3C,EAFe,CAAlB,CAAD,CA6JYF,CAAAC,EA7JZ,GA6J2BD,CAAAC,EA7J3B,CA6JwC,EA7JxC,EAFY,CAAf,CAAD,CAgKGD,CAhKH,GAgKWA,CAhKX,CAgKiB,EAhKjB,EArjEWA,KAAA2O,EAAA3O,C,CaHJ,IAAIA,EAAJ,CAYJ,GAAAA,EAAA,GAAQA,EAAR,CAAc,EAAd,CAZI,CAWS,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CAXT,CAUY,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAFHuN,EACSvN,EAAAC,EADTsN,GAC2BvN,EAAAC,EAD3BsN,CAC2C,EAD3CA,SAAA,CAAiBmB,CAAA3O,EAAAC,EAAAC,EAAAsN,OAmC9B,KAAA,GAAAzN,EAAA,GAAQA,EAAR,CAAc,EAAd,CAAA,CADa,GAAAA,EAAAC,EAAA,GAAeD,EAAAC,EAAf,CAA4B,EAA5B,CACb,CAFgB,GAAAA,EAAAC,EAAA,GAAiBD,EAAAC,EAAjB,CAAgC,EAAhC,CAEhB,CAHsB,GAAAA,EAAAC,EAAA,GAAkBD,EAAAC,EAAlB,CAAkC,EAAlC,CAGtB,CAJgC,GAAAA,EAAA0O,cAAA,GAA0B1O,EAAA0O,cAA1B,CAAkD,EAAlD,CALfA,GAAA,CAAcA,EAAA,KAAd,CAAsC,CAAtC,CAAA,CAA2C,MAC3CA,GAAA,CAAcA,EAAA,OAAd,CAAwC,CAAxC,CAAA,CAA6C,QAC7CA,GAAA,CAAcA,EAAA,gBAAd,CAAiD,CAAjD,CAAA,CAAsD,iBACtDA,GAAA,CAAcA,EAAA,YAAd,CAA6C,CAA7C,CAAA,CAAkD,aAClDA,GAAA,CAAcA,EAAA,OAAd,CAAwC,CAAxC,CAAA,CAA6C,QAmBhE;SAAS,CAAC7O,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEiO,EACS,EAAG,CAIV,IAAA/N,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAWd4D,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,MAAO4F,GAAA5F,CAAAA,IAAA1D,EAAA0D,CAAkBA,IAAA7D,EAAlB6D,CADFA,CAUTmK,EAAAA,UAAAA,UAAAA,CAAAA,QAASA,EAAGA,CACRA,MAAOvE,GAAAuE,CAAAA,IAAA7N,EAAA6N,CAAkBA,IAAAhO,EAAlBgO,CAAgCA,CAAhCA,CADCA,CASLC,EAAAA,GAAPA,CAAAA,QAAsBA,CAACxN,CAADwN,CAAUpK,CAAVoK,CAAkBC,CAAlBD,CAA8BA,CAChDnK,EAAAmK,CAAAxN,CAAAwN,CAAaA,CAAbA,CAAgBA,EAAhBA,CACAxN,EAAAgM,EAAAwB,CAAmBC,CAAnBD,CACAxN,EAAAgM,EAAAwB,CAAmBpK,CAAnBoK,CACAA,OAAOxN,EAAAe,OAAAyM,EAJyCA,CAOxD7O,EAAA2O,GAAA,CAAoBA,CAlDJ,CAAnB,CAAD,CAmDa5O,CAAAC,EAnDb,GAmD+BD,CAAAC,EAnD/B,CAmD+C,EAnD/C,EAFc,CAAjB,CAAD,CAsDWF,CAAAC,EAtDX,GAsD4BD,CAAAC,EAtD5B,CAsD2C,EAtD3C,EAFe,CAAlB,CAAD,CAyDYF,CAAAC,EAzDZ,GAyD2BD,CAAAC,EAzD3B,CAyDwC,EAzDxC,EAFY,CAAf,CAAD,CA4DGD,EA5DH,GA4DWA,EA5DX,CA4DiB,EA5DjB,EAoEC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEqO,EACS,EAAG,CAIV,IAAAnO,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPmO,EAAAA,GAAPA,CAAAA,QAA2BA,CAACjO,CAADiO,CAAK/N,CAAL+N,CAAUA,CACjCA,MAAOnO,CAACI,CAADJ,EAAQmO,IAAID,CAAZlO,GAAAmO,CAAgC9N,CAAA8N,CAAAjO,CAAAiO,CAAajO,CAAAI,SAAA6N,EAAbA,CAAhCA,CAA8DjO,CAAAI,SAAA6N,EAA9DA,CAA6EjO,CAA7EiO,CAD0BA,CASrCvK,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,IAAIrC,EAASC,CAAAoC,CAAAA,IAAA1D,EAAA0D,CAAiBA,IAAA7D,EAAjB6D,CAA8BA,CAA9BA,CACbA,OAAOrC,EAAAqC,CAAS4F,EAAA5F,CAAAA,IAAA1D,EAAA0D,CAAkBA,IAAA7D,EAAlB6D,CAAgCrC,CAAhCqC,CAATA,CAAmDA,IAAA1D,EAAAuJ,EAAA7F,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAFrDA,CAWTwK,EAAAA,UAAAA,EAAAA,CAAAA,QAAKA,CAACzL,CAADyL,CAAQhO,CAARgO,CAAaA,CACdA,IAAI7M,EAASC,CAAA4M,CAAAA,IAAAlO,EAAAkO,CAAiBA,IAAArO,EAAjBqO,CAA8BA,CAA9BA,CACbA,OAAO7M,EAAA6M,CAASpO,CAACI,CAADJ,EAAQoO,IAAIpP,CAAAC,EAAAC,EAAAC,EAAA2O,GAAZ9N,GAAAoO,CAAuDxL,EAAAwL,CAAAA,IAAAlO,EAAAkO,CAAiBA,IAAArO,EAAjBqO,CAA+B7M,CAA/B6M,CAAvDA,CAAwGA,EAAxGA,CAAgGzL,CAAhGyL,CAA4GA,IAAAlO,EAA5GkO,CAATA,CAAgIA,IAFzHA,CAOlBC,EAAAA,UAAAA,GAAAA,CAAAA,QAAWA,EAAGA,CACVA,IAAI9M,EAASC,CAAA6M,CAAAA,IAAAnO,EAAAmO,CAAiBA,IAAAtO,EAAjBsO,CAA8BA,CAA9BA,CACbA,OAAO9M,EAAA8M,CAASnL,EAAAmL,CAAAA,IAAAnO,EAAAmO,CAAqBA,IAAAtO,EAArBsO;AAAmC9M,CAAnC8M,CAATA,CAAsDA,CAFnDA,CAgBdC,EAAAA,UAAAA,EAAAA,CAAAA,QAAOA,CAAC3L,CAAD2L,CAAQlO,CAARkO,CAAaA,CAChBA,IAAI/M,EAASC,CAAA8M,CAAAA,IAAApO,EAAAoO,CAAiBA,IAAAvO,EAAjBuO,CAA8BA,CAA9BA,CACbA,OAAO/M,EAAA+M,CAAStO,CAACI,CAADJ,EAAQsO,IAAIC,CAAAtP,EAAAC,EAAAC,EAAAmN,GAAZtM,GAAAsO,CAA2E1L,EAAA0L,CAAAA,IAAApO,EAAAoO,CAAiBA,IAAAvO,EAAjBuO,CAA+B/M,CAA/B+M,CAA3EA,CAA4HA,EAA5HA,CAAoH3L,CAApH2L,CAAgIA,IAAApO,EAAhIoO,CAATA,CAAoJA,IAF3IA,CAOpBE,EAAAA,UAAAA,GAAAA,CAAAA,QAAaA,EAAGA,CACZA,IAAIjN,EAASC,CAAAgN,CAAAA,IAAAtO,EAAAsO,CAAiBA,IAAAzO,EAAjByO,CAA8BA,CAA9BA,CACbA,OAAOjN,EAAAiN,CAAStL,EAAAsL,CAAAA,IAAAtO,EAAAsO,CAAqBA,IAAAzO,EAArByO,CAAmCjN,CAAnCiN,CAATA,CAAsDA,CAFjDA,CAOTC,EAAAA,GAAPA,CAAAA,QAAuBA,CAACjO,CAADiO,CAAUA,CAC7BhO,CAAAgO,CAAAjO,CAAAiO,CAAoBA,CAApBA,CAD6BA,CAO1BC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAClO,CAADkO,CAAU9K,CAAV8K,CAAkBA,CAC9B3E,EAAA2E,CAAAlO,CAAAkO,CAAsBA,CAAtBA,CAAyB9K,CAAzB8K,CAAiClO,CAAAiJ,EAAAiF,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAAjCA,CAD8BA,CAO3BC,EAAAA,GAAPA,CAAAA,QAAeA,CAACnO,CAADmO,CAAUC,CAAVD,CAAuBA,CAClCnL,CAAAmL,CAAAnO,CAAAmO,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADkCA,CAO/BE,EAAAA,GAAPA,CAAAA,QAAuBA,CAACrO,CAADqO,CAAU3K,CAAV2K,CAAoBA,CACvClL,EAAAkL,CAAArO,CAAAqO,CAAoBA,EAApBA,CAAwB3K,CAAxB2K,CAAkCA,CAAlCA,CADuCA,CAOpCC,EAAAA,GAAPA,CAAAA,QAAiBA,CAACtO,CAADsO,CAAUC,CAAVD,CAAyBA,CACtCtL,CAAAsL,CAAAtO,CAAAsO,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADsCA,CAOnCE,EAAAA,GAAPA,CAAAA,QAAyBA,CAACxO,CAADwO,CAAU9K,CAAV8K,CAAoBA,CACzCrL,EAAAqL,CAAAxO,CAAAwO,CAAoBA,EAApBA,CAAwB9K,CAAxB8K,CAAkCA,CAAlCA,CADyCA,CAOtCC,EAAAA,GAAPA,CAAAA,QAAqBA,CAACzO,CAADyO,CAAUA,CAE3BA,MADatO,EAAAsO,CAAAzO,CAAAyO,CADcA,CAKnC9P,EAAA+O,YAAA,CAAsBA,CA/HN,CAAnB,CAAD,CAgIahP,CAAAC,EAhIb,GAgI+BD,CAAAC,EAhI/B,CAgI+C,EAhI/C,EAFc,CAAjB,CAAD,CAmIWF,CAAAC,EAnIX,GAmI4BD,CAAAC,EAnI5B,CAmI2C,EAnI3C,EAFe,CAAlB,CAAD,CAsIYF,CAAAC,EAtIZ,GAsI2BD,CAAAC,EAtI3B,CAsIwC,EAtIxC,EAFY,CAAf,CAAD,CAyIGD,EAzIH;CAyIWA,EAzIX,CAyIiB,EAzIjB,EAoJC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEqP,EACS,EAAG,CAIV,IAAAnP,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPmP,EAAAA,GAAPA,CAAAA,QAA+BA,CAACjP,CAADiP,CAAK/O,CAAL+O,CAAUA,CACrCA,MAAOnP,CAACI,CAADJ,EAAQmP,IAAID,CAAZlP,GAAAmP,CAAoC9O,CAAA8O,CAAAjP,CAAAiP,CAAajP,CAAAI,SAAA6O,EAAbA,CAApCA,CAAkEjP,CAAAI,SAAA6O,EAAlEA,CAAiFjP,CAAjFiP,CAD8BA,CAMzC5F,EAAAA,UAAAA,GAAAA,CAAAA,QAAEA,EAAGA,CACDA,IAAIhI,EAASC,CAAA+H,CAAAA,IAAArJ,EAAAqJ,CAAiBA,IAAAxJ,EAAjBwJ,CAA8BA,CAA9BA,CACbA,OAAOhI,EAAAgI,CAASC,EAAAD,CAAAA,IAAArJ,EAAAqJ,CAAkBA,IAAAxJ,EAAlBwJ,CAAgChI,CAAhCgI,CAATA,CAAmDA,IAAArJ,EAAAuJ,EAAAF,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAFzDA,CAQL7F,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACtD,CAADsD,CAAMA,CACNA,IAAInC,EAASC,CAAAkC,CAAAA,IAAAxD,EAAAwD,CAAiBA,IAAA3D,EAAjB2D,CAA8BA,CAA9BA,CACbA,OAAOnC,EAAAmC,CAAS1D,CAACI,CAADJ,EAAQ0D,IAAI1E,CAAAC,EAAAC,EAAAC,EAAA+O,YAAZlO,GAAA0D,CAAyDiG,EAAAjG,CAAAA,IAAAxD,EAAAwD,CAAmBA,IAAA3D,EAAnB2D,CAAiCnC,CAAjCmC,CAAzDA,CAAmGA,IAAAxD,EAAnGwD,CAATA,CAAuHA,IAFxHA,CAUV0L,EAAAA,UAAAA,GAAAA,CAAAA,QAAOA,EAAGA,CACNA,IAAI7N,EAASC,CAAA4N,CAAAA,IAAAlP,EAAAkP,CAAiBA,IAAArP,EAAjBqP,CAA8BA,CAA9BA,CACbA,OAAO7N,EAAA6N,CAASA,CAACA,EAACA,IAAAlP,EFqiBjC8B,EAAA,CEriBkDoN,IAAArP,EFqiBlD,CEriBgEwB,CFqiBhE,CEriBgC6N;AF6hBN,EE7hBMA,EF6hBA,EE7hBAA,CAAVA,CAAoDA,CAAAA,CAFrDA,CAOHC,EAAAA,GAAPA,CAAAA,QAA2BA,CAAC7O,CAAD6O,CAAUA,CACjC5O,CAAA4O,CAAA7O,CAAA6O,CAAoBA,CAApBA,CADiCA,CAO9BvF,EAAAA,GAAPA,CAAAA,QAAYA,CAACtJ,CAADsJ,CAAUP,CAAVO,CAAcA,CACtBC,EAAAD,CAAAtJ,CAAAsJ,CAAsBA,CAAtBA,CAAyBP,CAAzBO,CAA6BtJ,CAAAiJ,EAAAK,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAA7BA,CADsBA,CAOnBwF,EAAAA,GAAPA,CAAAA,QAAcA,CAAC9O,CAAD8O,CAAUC,CAAVD,CAAsBA,CAChC9L,CAAA8L,CAAA9O,CAAA8O,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADgCA,CAO7BE,EAAAA,GAAPA,CAAAA,QAAiBA,CAAChP,CAADgP,CAAUJ,CAAVI,CAAmBA,CAChCrN,EAAAqN,CAAAhP,CAAAgP,CAAqBA,CAArBA,CAAwBA,CAACJ,CAAzBI,CAAmCA,CAAnCA,CADgCA,CAO7BC,EAAAA,GAAPA,CAAAA,QAAyBA,CAACjP,CAADiP,CAAUA,CAE/BA,MADa9O,EAAA8O,CAAAjP,CAAAiP,CADkBA,CAKvCtQ,EAAA+P,gBAAA,CAA0BA,CAvFV,CAAnB,CAAD,CAwFahQ,CAAAC,EAxFb,GAwF+BD,CAAAC,EAxF/B,CAwF+C,EAxF/C,EAFc,CAAjB,CAAD,CA2FWF,CAAAC,EA3FX,GA2F4BD,CAAAC,EA3F5B,CA2F2C,EA3F3C,EAFe,CAAlB,CAAD,CA8FYF,CAAAC,EA9FZ,GA8F2BD,CAAAC,EA9F3B,CA8FwC,EA9FxC,EAFY,CAAf,CAAD,CAiGGD,EAjGH,GAiGWA,EAjGX,CAiGiB,EAjGjB,EAqGC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE6P,EACS,EAAG,CAIV,IAAA3P,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUP2P,EAAAA,GAAPA,CAAAA,QAAuBA,CAACzP,CAADyP,CAAUA,CAC7BA,MAAO3P,CAAQ2P,IAAID,CAAZ1P,GAAA2P,CAA4BtP,CAAAsP,CAAAzP,CAAAyP,CAAazP,CAAAI,SAAAqP,EAAbA,CAA5BA,CAA0DzP,CAAAI,SAAAqP,EAA1DA,CAAyEzP,CAAzEyP,CADsBA,CAMjCC,EAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,IAAIrO,EAASC,CAAAoO,CAAAA,IAAA1P,EAAA0P,CAAiBA,IAAA7P,EAAjB6P,CAA8BA,CAA9BA,CACbA,OAAOrO,EAAAqO,CAAkEpN,EAAAoN,CAAAA,IAAA1P,EAAA0P,CAAkBA,IAAA7P,EAAlB6P,CAAgCrO,CAAhCqO,CAAlEA,CAA6GC,CAAA5Q,EAAAC,EAAAC,EAAAC,gBAAA0Q,GAF9GF,CAOVG,EAAAA,UAAAA,EAAAA,CAAAA,QAAUA,EAAGA,CACTA,IAAIxO,EAASC,CAAAuO,CAAAA,IAAA7P,EAAA6P,CAAiBA,IAAAhQ,EAAjBgQ,CAA8BA,CAA9BA,CACbA,OAAOxO,EAAAwO,CAAgEA,IAAA7P,EF2ctF8B,EAAA+N,CE3cwGA,IAAAhQ,EF2cxGgQ,CE3csHxO,CF2ctHwO,CE3csBA,CAA2G/Q,CAAAC,EAAAC,EAAAC,EAAA0O,cAAApD,KAFzGsF,CAQbC,EAAAA,UAAAA,GAAAA,CAAAA,QAAMA,CAAC5P,CAAD4P,CAAMA,CACRA,IAAIzO,EAASC,CAAAwO,CAAAA,IAAA9P,EAAA8P,CAAiBA,IAAAjQ,EAAjBiQ,CAA8BA,CAA9BA,CACbA,OAAOzO,EAAAyO,CAAStF,EAAAsF,CAAAA,IAAA9P,EAAA8P,CAAgB5P,CAAhB4P,CAAqBA,IAAAjQ,EAArBiQ,CAAmCzO,CAAnCyO,CAATA;AAAsDA,IAFrDA,CAOZC,EAAAA,UAAAA,EAAAA,CAAAA,QAAUA,EAAGA,CACTA,IAAI1O,EAASC,CAAAyO,CAAAA,IAAA/P,EAAA+P,CAAiBA,IAAAlQ,EAAjBkQ,CAA8BA,EAA9BA,CACbA,OAAO1O,EAAA0O,CAASzG,EAAAyG,CAAAA,IAAA/P,EAAA+P,CAAkBA,IAAAlQ,EAAlBkQ,CAAgC1O,CAAhC0O,CAATA,CAAmDA,IAAA/P,EAAAuJ,EAAAwG,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAFjDA,CAONC,EAAAA,GAAPA,CAAAA,QAAmBA,CAAC1P,CAAD0P,CAAUA,CACzBzP,CAAAyP,CAAA1P,CAAA0P,CAAoBA,CAApBA,CADyBA,CAOtBC,EAAAA,GAAPA,CAAAA,QAAiBA,CAAC3P,CAAD2P,CAAUP,CAAVO,CAAmBA,CAChC9M,EAAA8M,CAAA3P,CAAA2P,CAAsBA,CAAtBA,CAAyBP,CAAzBO,CAAkCN,CAAA5Q,EAAAC,EAAAC,EAAAC,gBAAA0Q,GAAlCK,CADgCA,CAO7BC,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC5P,CAAD4P,CAAUL,CAAVK,CAAsBA,CACtCjO,EAAAiO,CAAA5P,CAAA4P,CAAqBA,CAArBA,CAAwBL,CAAxBK,CAAoCpR,CAAAC,EAAAC,EAAAC,EAAA0O,cAAApD,KAApC2F,CADsCA,CAOnCC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAC7P,CAAD6P,CAAUC,CAAVD,CAAwBA,CACpC7M,CAAA6M,CAAA7P,CAAA6P,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoCA,CAOjCE,EAAAA,GAAPA,CAAAA,QAAoBA,CAAC/P,CAAD+P,CAAUN,CAAVM,CAAsBA,CACtCxG,EAAAwG,CAAA/P,CAAA+P,CAAsBA,CAAtBA,CAAyBN,CAAzBM,CAAqC/P,CAAAiJ,EAAA8G,CAAmBA,CAAnBA,CAAsBA,CAAtBA,CAArCA,CADsCA,CAOnCC,EAAAA,GAAPA,CAAAA,QAAiBA,CAAChQ,CAADgQ,CAAUA,CAEvBA,MADa7P,EAAA6P,CAAAhQ,CAAAgQ,CADUA,CAQpBC,EAAAA,GAAPA,CAAAA,QAA0BA,CAACjQ,CAADiQ,CAAUlP,CAAVkP,CAAkBA,CACxCjQ,CAAAkN,OAAA+C,CAAelP,CAAfkP,CADwCA,CAIhDtR,EAAAuQ,GAAA,CAAkBA,CAzGF,CAAnB,CAAD,CA0GaxQ,CAAAC,EA1Gb,GA0G+BD,CAAAC,EA1G/B,CA0G+C,EA1G/C,EAFc,CAAjB,CAAD,CA6GWF,CAAAC,EA7GX,GA6G4BD,CAAAC,EA7G5B,CA6G2C,EA7G3C,EAFe,CAAlB,CAAD,CAgHYF,CAAAC,EAhHZ,GAgH2BD,CAAAC,EAhH3B,CAgHwC,EAhHxC,EAFY,CAAf,CAAD,CAmHGD,EAnHH,GAmHWA,EAnHX,CAmHiB,EAnHjB,EAtXWA,KAAA0R,GAAA1R,E,CF4DX,IAAA2R,GAAoB,IAAI7N,UAAJ,CAAe,CAAf,CAME,KAAI8N,YAAJ,CAAiBC,EAAA7N,OAAjB,CAMA,KAAI8N,YAAJ,CAAiBD,EAAA7N,OAAjB,CAMO,KAAI+N,WAAJ,CAAgB/N,CAAA,IAAIgO,UAAJ,CAAe,CAAC,CAAD,CAAI,CAAJ,CAAf,CAAAhO,QAAhB,CASViO,SAAA,EAAQ,CAACC,CAAD,CAAMC,CAAN,CAAY,CAKrC,IAAAD,IAAA,CAAWA,CAAX,CAAiB,CAMjB,KAAAC,KAAA,CAAYA,CAAZ,CAAmB,CAXkB,CAmCvCC,CAAAC,UAAAC,OAAA,CAAoCC,QAAQ,CAACC,CAAD,CAAQ,CAClD,MAAO,KAAAN,IAAP,EAAmBM,CAAAN,IAAnB,EAAgC,IAAAC,KAAhC,EAA6CK,CAAAL,KADK,CAQpD,KAAAM,GAAwB,IAAIL,CAAJ,CAAqB,CAArB,CAAwB,CAAxB,CAUFM,SAAA,GAAQ,EAAmB,CAW/C,IAAAxR,EAAA,CAkqBO,IAAIyR,EAAJ,CAA2B,IAAIX,UAAJ,CA3qBbY,IA2qBa,CAA3B,CA1pBP,KAAAC,EAAA,CAjBqBD,IAyBrB,KAAAE,GAAA,CAAgB,CAQhB,KAAAC,EAAA,CAAc,IAQd,KAAAC,GAAA,CAAqB,CAQrB,KAAAC,GAAA,CAAgB,CAAA,CAQhB,KAAAC,GAAA,CAAoB,CAQpB,KAAAC,GAAA,CAAe,EAQf,KAAAC,GAAA,CAAwB,CAQxB,KAAAC,GAAA,CAAsB,CAAA,CAnFyB,CAkHJC,QAAA,GAAQ,CAARA,CAAQ,CAAG,CACtD,MAAO,EAAApS,EAAA6C,EAAA,EAAAwP,SAAA,CAAyB,CAAArS,EAAAI,SAAA,EAAzB,CAA6C,CAAAJ,EAAAI,SAAA,EAA7C,CAAkE,CAAAiB,OAAA,EAAlE,CAD+C;AAcnBiR,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAOC,CAAP,CAAyB,CAEhED,CAAJ,CAAW,CAAAX,GAAX,GACE,CAAAA,GADF,CACkBW,CADlB,CASA,KAHA,IAAIE,EAAe,EAAE,CAAAzS,EAykBd8B,EAAA4B,OAzkBY,CAAuB,CAAAiO,EAAvB,CAAoCa,CAApC,CAAfC,CAAwE,CAAxEA,CAA8EF,CAA9EE,CAAqF,CAGzF,CAAO,CAAAd,EAAP,CAAoBc,CAApB,CAAiCF,CAAjC,CAAwCC,CAAxC,CAAA,CAA0D,CACxD,IAAIE,EAAe,CAAA1S,EAqkBd8B,EAAA4B,OArkBL,CACA,EAAA,CADA,CAC6C1D,EAAAA,CAAAA,EAD7C,CAyQE0S,EAAe1S,CA4TZ8B,EAAA4B,OAzTP,IAAIgP,CAAJ,CAAmB,UAAnB,CACE,KAAUC,MAAJ,CAAU,qDAAV,CAAN,CAGF,IAAIC,EAAeF,CAAfE,EAA+B,CAAnC,CACIC,EAgRG,IAAIpB,EAAJ,CAA2B,IAAIX,UAAJ,CAhRQ8B,CAgRR,CAA3B,CA/QPC,EAAAC,YAAA,CAAgBF,CAAhB,CAA+BF,CAA/B,CACAG,EAAAhQ,EAAA,EAAAkQ,IAAA,CAAgB/S,CAAA6C,EAAA,EAAhB,CAA4B+P,CAA5B,CAA2CF,CAA3C,CAlRE,EAAA1S,EAAA,CAmRK6S,CAlRL,EAAAlB,EAAA,EAAc,CAAA3R,EAmkBT8B,EAAA4B,OAnkBL,CAAmCgP,CAHqB,CAM1DM,EAAA,CAAAA,CAAA,CAASP,CAAT,CAjBoE,CAuBlCQ,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAY,CACtD,IAAK,IAAInT,EAAI,CAAb,CAAgBA,CAAhB,CAAoBmT,CAApB,CAA+BnT,CAAA,EAA/B,CACE,CAAAC,EAAAmT,GAAA,CAAkB,EAAE,CAAAxB,EAApB,CAAgC,CAAhC,CAFoD,CASxD,CAAA,CAAA,EAAA,UAAAyB,EAAAD,GAAA,CAA0CE,QAAQ,CAACxP,CAAD,CAAQ,CACxD,IAAA7D,EAAAmT,GAAA,CAAkB,EAAA,IAAAxB,EAAlB,CAAmC9N,CAAnC,CADwD,CAO1DuP,EAAAE,GAAA,CAA2CC,QAAQ,CAAC1P,CAAD,CAAQ,CACzD,IAAA7D,EAAAsT,GAAA,CAAmB,IAAA3B,EAAnB,EAAiC,CAAjC,CAAoC9N,CAApC,CADyD,CAO3DuP;CAAAxP,EAAA,CAA2C4P,QAAQ,CAAC3P,CAAD,CAAQ,CACzD,IAAA7D,EAAA4D,EAAA,CAAmB,IAAA+N,EAAnB,EAAiC,CAAjC,CAAoC9N,CAApC,CADyD,CAO3DuP,EAAA9G,EAAA,CAA2CmH,QAAQ,CAAC5P,CAAD,CAAQ,CACzD,IAAA7D,EAAAsM,EAAA,CAAmB,IAAAqF,EAAnB,EAAiC,CAAjC,CAAoC9N,CAApC,CADyD,CAgClB6P,SAAA,GAAQ,CAARA,CAAQ,CAAC7P,CAAD,CAAQ,CACvDF,EAAA,CAAAA,CAAA,CAAU,CAAV,CAAa,CAAb,CACA,EAAA2P,GAAA,CAAgBzP,CAAhB,CAFuD,CA+CZ8P,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAU/P,CAAV,CAAiBgQ,CAAjB,CAA+B,CAClF,GAAI,CAAA1B,GAAJ,EAA2BtO,CAA3B,EAAoCgQ,CAApC,CAxDAlQ,EAAA,CAyDEmQ,CAzDF,CAAU,CAAV,CAAa,CAAb,CA0DE,CADAA,CAxDFX,GAAA,CAwDetP,CAxDf,CAyDE,CAAA,CAAAkQ,KAAA,CAAUH,CAAV,CAHgF,CAYtCI,QAAA,GAAQ,CAARA,CAAQ,CAACJ,CAAD,CAAU/P,CAAV,CAAiBgQ,CAAjB,CAA+B,CACnF,GAAI,CAAA1B,GAAJ,EAA2BtO,CAA3B,EAAoCgQ,CAApC,CACEI,EAAA,CAAAA,CAAA,CAAcpQ,CAAd,CACA,CAAA,CAAAkQ,KAAA,CAAUH,CAAV,CAHiF,CAYvCM,QAAA,GAAQ,CAARA,CAAQ,CAACN,CAAD,CAAU/P,CAAV,CAAiBgQ,CAAjB,CAA+B,CACnF,GAAI,CAAA1B,GAAJ,EAA2BtO,CAA3B,EAAoCgQ,CAApC,CA9DAlQ,EAAA,CA+DEwQ,CA/DF,CAAU,CAAV,CAAa,CAAb,CAgEE,CADAA,CA9DFvQ,EAAA,CA8DgBC,CA9DhB,CA+DE,CAAA,CAAAkQ,KAAA,CAAUH,CAAV,CAHiF,CAYvCQ,QAAA,GAAQ,CAARA,CAAQ,CAACR,CAAD,CAAU/P,CAAV,CAAiBgQ,CAAjB,CAA+B,CACnF,GAAI,CAAA1B,GAAJ,EAA2B,CAACtO,CAAAuN,OAAA,CAAayC,CAAb,CAA5B,CAjEAlQ,EAAA,CAkEE0Q,CAlEF,CAAU,CAAV,CAAa,CAAb,CAmEE,CADAA,CAjEF/H,EAAA,CAiEgBzI,CAjEhB,CAkEE,CAAA,CAAAkQ,KAAA,CAAUH,CAAV,CAHiF,CAoCtCU,QAAA,EAAQ,CAARA,CAAQ,CAACV,CAAD,CAAU/P,CAAV,CAA+B,CACpF,GAAI,CAAAsO,GAAJ,EXqL+D/O,CWrL/D,EAA2BS,CAA3B,CACE4H,EAAA,CAAAA,CAAA,CAAe5H,CAAf,CACA,CAAA,CAAAkQ,KAAA,CAAUH,CAAV,CAHkF;AAsC5CW,QAAA,GAAQ,CAARA,CAAQ,CAAG,CACnD,GAAI,CAAAxC,GAAJ,CACE,KAAUY,MAAJ,CAAU,uDAAV,CAAN,CAFiD,CAWrDS,CAAAW,KAAA,CAAqCS,QAAQ,CAACZ,CAAD,CAAU,CACrD,IAAA/B,EAAA,CAAY+B,CAAZ,CAAA,CAAuB,IAAAvS,OAAA,EAD8B,CAOvD+R,EAAA/R,OAAA,CAAuCoT,QAAQ,EAAG,CAChD,MAAO,KAAAzU,EA4UA8B,EAAA4B,OA5UP,CAA4B,IAAAiO,EADoB,CAqCR+C,SAAA,GAAQ,CAARA,CAAQ,CAACrT,CAAD,CAAS,CACzDsC,EAAA,CAAAA,CAAA,CA9gBuBgR,CA8gBvB,CAAkC,CAAlC,CACA,EAAA/Q,EAAA,CAAgB,CAAAvC,OAAA,EAAhB,CAAgCA,CAAhC,CA/gBuBsT,CA+gBvB,CAFyD,CAafC,QAAA,EAAQ,CAARA,CAAQ,CAACC,CAAD,CAAY,CAC9DC,EAAA,CAAAA,CAAA,CACmB,KAAnB,EAAI,CAAAjD,EAAJ,GACE,CAAAA,EADF,CACgB,EADhB,CAGA,EAAAC,GAAA,CAAqB+C,CACrB,KAAK,IAAI9U,EAAI,CAAb,CAAgBA,CAAhB,CAAoB8U,CAApB,CAA+B9U,CAAA,EAA/B,CACE,CAAA8R,EAAA,CAAY9R,CAAZ,CAAA,CAAiB,CAEnB,EAAAgS,GAAA,CAAgB,CAAA,CAChB,EAAAC,GAAA,CAAoB,CAAA3Q,OAAA,EAV0C;AAkBtB0T,QAAA,EAAQ,CAARA,CAAQ,CAAG,CACnD,GAAmB,IAAnB,EAAI,CAAAlD,EAAJ,EAA2B,CAAC,CAAAE,GAA5B,CACE,KAAUY,MAAJ,CAAU,mDAAV,CAAN,CA3OFhP,EAAA,CA8OAwQ,CA9OA,CAAU,CAAV,CAAa,CAAb,CA8OAA,EA7OAvQ,EAAA,CA6OcC,CA7Od,CAkPA,KAJA,IAAImR,EAAY,CAAA3T,OAAA,EAAhB,CAGItB,EAAI,CAAA+R,GAAJ/R,CAAyB,CAC7B,CAAY,CAAZ,EAAOA,CAAP,EAAmC,CAAnC,EAAiB,CAAA8R,EAAA,CAAY9R,CAAZ,CAAjB,CAAsCA,CAAA,EAAtC,EAIA,IAHA,IAAIkV,EAAelV,CAAfkV,CAAmB,CAGvB,CAAY,CAAZ,EAAOlV,CAAP,CAAeA,CAAA,EAAf,CAEEkU,EAAA,CAAAA,CAAA,CAAgC,CAAlB,EAAA,CAAApC,EAAA,CAAY9R,CAAZ,CAAA,CAAsBiV,CAAtB,CAAkC,CAAAnD,EAAA,CAAY9R,CAAZ,CAAlC,CAAmD,CAAjE,CAIFkU,GAAA,CAAAA,CAAA,CAAce,CAAd,CAA0B,CAAAhD,GAA1B,CACIkD,EAAAA,CAvkBqBC,CAukBrBD,EAAOD,CAAPC,CAFkBE,CAElBF,CACJjB,GAAA,CAAAA,CAAA,CAAciB,CAAd,CAGA,KAAIG,EAAkB,CAAtB,CACIC,EAAM,CAAA3D,EAEL5R,EAAA,CAAI,CADX,EAAA,CACE,IAAA,CAAYA,CAAZ,CAAgB,CAAAkS,GAAAvO,OAAhB,CAAqC3D,CAAA,EAArC,CAA0C,CACxC,IAAIwV,EAAM,CAAAvV,EA4OL8B,EAAA4B,OA5OD6R,CAA2B,CAAAtD,GAAA,CAAalS,CAAb,CAC/B,IAAImV,CAAJ,EAAW5S,EAAA,CAAA,CAAAtC,EAAA,CAAkBuV,CAAlB,CAAX,CAAmC,CACjC,IAAK,IAAIC,EAjlBYL,CAilBrB,CAAuCK,CAAvC,CAA2CN,CAA3C,CAAgDM,CAAhD,EAjlBqBL,CAilBrB,CACE,GAAI7S,EAAA,CAAA,CAAAtC,EAAA,CAAkBsV,CAAlB,CAAwBE,CAAxB,CAAJ,EAAkClT,EAAA,CAAA,CAAAtC,EAAA,CAAkBuV,CAAlB,CAAwBC,CAAxB,CAAlC,CACE,SAAS,CAGbH,EAAA,CAAkB,CAAApD,GAAA,CAAalS,CAAb,CAClB,MAPiC,CAFK,CAatCsV,CAAJ,EAGE,CAAA1D,EAGA,CAHa,CAAA3R,EA6NR8B,EAAA4B,OA1NL,CAHkCsR,CAGlC,CAAA,CAAAhV,EAAA4D,EAAA,CAAmB,CAAA+N,EAAnB,CAA+B0D,CAA/B,CAAiDL,CAAjD,CANF,GAUE,CAAA/C,GAAAwD,KAAA,CAAkB,CAAApU,OAAA,EAAlB,CAGA,CAAA,CAAArB,EAAA4D,EAAA,CAAmB,CAAA5D,EAmNd8B,EAAA4B,OAnNL,CAAwCsR,CAAxC,CAAmD,CAAA3T,OAAA,EAAnD;AAAmE2T,CAAnE,CAbF,CAgBA,EAAAjD,GAAA,CAAgB,CAAA,CAChB,OAAOiD,EA1D4C,CAoErD5B,CAAA5F,OAAA,CAAuCkI,QAAQ,CAACC,CAAD,CAAaC,CAAb,CAAkC,CAC/E,GAAIA,CAAJ,CAAyB,CAEvBjS,EAAA,CAAAA,IAAA,CAAU,IAAAiO,GAAV,CAAyB,CAAzB,CAEA,IA/mBiCiE,CA+mBjC,EAHsBD,CAGlBlS,OAAJ,CACE,KAAUiP,MAAJ,CAAU,+CAAV,CAAN,CAGF,IAAK,IAAI5S,EAAI,CAAb,CAA0D,CAA1D,EAAqDA,CAArD,CAA6DA,CAAA,EAA7D,CACE,IAAAoT,GAAA,CARoByC,CAQLE,WAAA,CAA2B/V,CAA3B,CAAf,CATqB,CAYzB4D,EAAA,CAAAA,IAAA,CAAU,IAAAiO,GAAV,CA7nBuB+C,CA6nBvB,CACAlJ,GAAA,CAAAA,IAAA,CAAekK,CAAf,CACA,KAAA3V,EAAA8S,YAAA,CAAoB,IAAAnB,EAApB,CAf+E,CA8CrCoE,SAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAYC,CAAZ,CAAuBC,CAAvB,CAAkC,CACpFpB,EAAA,CAAAA,CAAA,CACA,EAAA5C,GAAA,CAAwB+D,CACxBtS,GAAA,CAAAA,CAAA,CAjqBuBgR,CAiqBvB,CAAkCqB,CAAlC,CAA8CC,CAA9C,CACAtS,GAAA,CAAAA,CAAA,CAAUuS,CAAV,CAAqBF,CAArB,CAAiCC,CAAjC,CAJoF,CAc5CE,QAAA,GAAQ,CAARA,CAAQ,CAAG,CACnD,CAAAvS,EAAA,CAAgB,CAAAsO,GAAhB,CACA,OAAO,EAAA7Q,OAAA,EAF4C;AAaR+U,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAI,CACvD,GAAIA,CAAJ,WAAiBvF,WAAjB,CACE,IAAIwF,EAAOD,CADb,KAEO,CACDC,CAAJ,CAAW,EAGX,KAFA,IAAIvW,EAAI,CAER,CAAOA,CAAP,CAAWsW,CAAA3S,OAAX,CAAA,CAAqB,CAIf6S,IAAAA,EAAIF,CAAAP,WAAA,CAAa/V,CAAA,EAAb,CACR,IAAI,EAAI,KAAJ,CAAAwW,CAAA,EAAmB,KAAnB,EAAcA,CAAd,CAAJ,CAEO,CACL,IAAIC,EAAIH,CAAAP,WAAA,CAAa/V,CAAA,EAAb,CACR0W,EAAA,EAAaF,CAAb,EAAkB,EAAlB,EAAwBC,CAAxB,CAA6B,SAFxB,CAMS,GAAhB,CAAIC,CAAJ,CACEH,CAAAb,KAAA,CAAUgB,CAAV,CADF,EAGkB,IAAhB,CAAIA,CAAJ,CACEH,CAAAb,KAAA,CAAYgB,CAAZ,EAAyB,CAAzB,CAA8B,EAA9B,CAAsC,GAAtC,CADF,EAGkB,KAAhB,CAAIA,CAAJ,CACEH,CAAAb,KAAA,CAAYgB,CAAZ,EAAyB,EAAzB,CAA+B,EAA/B,CAAuC,GAAvC,CADF,CAGEH,CAAAb,KAAA,CACIgB,CADJ,EACiB,EADjB,CACuB,CADvB,CAC+B,GAD/B,CAEIA,CAFJ,EAEiB,EAFjB,CAEuB,EAFvB,CAE+B,GAF/B,CAIF,CAAAH,CAAAb,KAAA,CAAYgB,CAAZ,EAAyB,CAAzB,CAA8B,EAA9B,CAAsC,GAAtC,CAVF,CAYA,CAAAH,CAAAb,KAAA,CAAWgB,CAAX,CAAuB,EAAvB,CAA+B,GAA/B,CAfF,CAbmB,CAJhB,CA3YP9S,EAAA,CAgbAmQ,CAhbA,CAAU,CAAV,CAAa,CAAb,CAgbAA,EA/aAX,GAAA,CA+aatP,CA/ab,CAgbAJ,GAAA,CAAAA,CAAA,CAAiB,CAAjB,CAAoB6S,CAAA5S,OAApB,CAAiC,CAAjC,CACA,EAAA1D,EAAA8S,YAAA,CAAoB,CAAAnB,EAApB,EAAkC2E,CAAA5S,OAAlC,CACS3D,EA3C8C,CA2C1C,CAAGsB,EAAAA,CAAS,CAAAsQ,EAAzB,KAAqC9O,CAArC,CAA6C,CAAA7C,EAAA6C,EAAA,EAA7C,CAA8D9C,CAA9D,CAAkEuW,CAAA5S,OAAlE,CAA+E3D,CAAA,EAA/E,CACE8C,CAAA,CAAMxB,CAAA,EAAN,CAAA,CAAkBiV,CAAA,CAAKvW,CAAL,CAEpB,OAAO+D,GAAA,CAAAA,CAAA,CA9CgD;AAwDzDsP,CAAA7J,EAAA,CAA2CmN,QAAQ,CAAC1F,CAAD,CAAMC,CAAN,CAAY,CAC7D,MA9qBc,EAAP,EA8qBwBD,CA9qBxB,EAAoB,CAApB,EA8qB6BC,CA9qB7B,CAAwBM,EAAxB,CAAgD,IAAIL,CAAJ,CA8qBxBF,CA9qBwB,CA8qBnBC,CA9qBmB,CA6qBM,CAWtC0F,SAAA,GAAQ,CAAC9T,CAAD,CAAQ,CAKvC,IAAAf,EAAA,CAAce,CAMd,KAAA+T,GAAA,CAAiB,CAXsB,CA6BzC,CAAA,CAAA,EAAA,UAAAC,EAAAhU,EAAA,CAAyCiU,QAAQ,EAAG,CAClD,MAAO,KAAAhV,EAD2C,CASpD+U,EAAAzW,SAAA,CAA4C2W,QAAQ,EAAG,CACrD,MAAO,KAAAH,GAD8C,CASvDC,EAAA/D,YAAA,CAA+CkE,QAAQ,CAAC5W,CAAD,CAAW,CAChE,IAAAwW,GAAA,CAAiBxW,CAD+C,CAyBrB6W,SAAA,GAAQ,CAARA,CAAQ,CAAC5V,CAAD,CAAS,CAC5D,MAAO,EAAAS,EAAA,CAAYT,CAAZ,CADqD,CAQjB6V,QAAA,GAAQ,CAARA,CAAQ,CAAC7V,CAAD,CAAS,CAC5D,OAAO8V,CAQArV,EAAA,CARgBT,CAQhB,CARP,CAAO8V,CAQsBrV,EAAA,CARNT,CAQM,CAAqB,CAArB,CAR7B,EAQwD,CARxD,GAAkC,EAAlC,EAAwC,EADoB,CAgBjB+V,QAAA,EAAQ,CAARA,CAAQ,CAAC/V,CAAD,CAAS,CAC5D,MAAO,EAAAS,EAAA,CAAYT,CAAZ,CAAP,CAA6B,CAAAS,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAA7B,EAAwD,CAAxD,CAA4D,CAAAS,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAA5D,EAAuF,EAAvF,CAA4F,CAAAS,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAA5F,EAAuH,EAD3D,CAgBjBgW,QAAA,GAAQ,CAARA,CAAQ,CAAChW,CAAD,CAAS,CAC5D,MAAO,KAAI6P,CAAJ,CAAqB/Q,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAArB,CAA6ClB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAAwB,CAAxB,CAA7C,CADqD,CAmC9DwV,CAAA1D,GAAA,CAA6CmE,QAAQ,CAACjW,CAAD,CAASwC,CAAT,CAAgB,CACnE,IAAA/B,EAAA,CAAYT,CAAZ,CAAA,CAA4CwC,CADuB,CAgBrEgT,EAAAvD,GAAA,CAA8CiE,QAAQ,CAAClW,CAAD,CAASwC,CAAT,CAAgB,CACpE,IAAA/B,EAAA,CAAYT,CAAZ,CAAA,CAAsBwC,CACtB,KAAA/B,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAAA,CAA0BwC,CAA1B,EAAmC,CAFiC,CAkBtEgT;CAAAjT,EAAA,CAA8C4T,QAAQ,CAACnW,CAAD,CAASwC,CAAT,CAAgB,CACpE,IAAA/B,EAAA,CAAYT,CAAZ,CAAA,CAAsBwC,CACtB,KAAA/B,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAAA,CAA0BwC,CAA1B,EAAmC,CACnC,KAAA/B,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAAA,CAA0BwC,CAA1B,EAAmC,EACnC,KAAA/B,EAAA,CAAYT,CAAZ,CAAqB,CAArB,CAAA,CAA0BwC,CAA1B,EAAmC,EAJiC,CAsBtEgT,EAAAvK,EAAA,CAA8CmL,QAAQ,CAACpW,CAAD,CAASwC,CAAT,CAAgB,CACpE,IAAAD,EAAA,CAAgBvC,CAAhB,CAAwBwC,CAAAmN,IAAxB,CACA,KAAApN,EAAA,CAAgBvC,CAAhB,CAAyB,CAAzB,CAA4BwC,CAAAoN,KAA5B,CAFoE,CAyC1ByG,SAAA,EAAQ,CAARA,CAAQ,CAAC7X,CAAD,CAAS8X,CAAT,CAAwB,CAC7D9X,CAATgS,EAAkB1R,CAAA,CAAAA,CAAA,CAAeN,CAAf,CACtB,OAAO8X,EAAA,CAAgBrV,EAAA,CAAAA,CAAA,CAAeuP,CAAf,CAAhB,CAAyCvP,EAAA,CAAAA,CAAA,CAAeuP,CAAf,CAAwB8F,CAAxB,CAAzC,CAAkF,CAFf,CAYjCC,QAAA,GAAQ,CAARA,CAAQ,CAACC,CAAD,CAAIxW,CAAJ,CAAY,CAC7DwW,CAAAhY,EAAA,CAAWwB,CAAX,CAAoBlB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CACpBwW,EAAA7X,EAAA,CAAO,CACP,OAAO6X,EAHsD;AAmBnBC,QAAA,GAAQ,CAARA,CAAQ,CAACzW,CAAD,CAAS0W,CAAT,CAAuB,CACzE1W,CAAA,EAAUlB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAEV,KAAIqC,EAASvD,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAAb,CACI2W,EAAS,EADb,CAEIjY,EAAI,CAERsB,EAAA,EAthCuBsT,CAwhCvB,IA5gCYsD,CA4gCZ,GAAIF,CAAJ,CACE,MAAO,EAAAjW,EAAAuQ,SAAA,CAAqBhR,CAArB,CAA6BA,CAA7B,CAAsCqC,CAAtC,CAGT,KAAA,CAAO3D,CAAP,CAAW2D,CAAX,CAAA,CAAmB,CAIb6S,CAAAA,CAAI2B,EAAA,CAAAA,CAAA,CAAe7W,CAAf,CAAwBtB,CAAA,EAAxB,CACR,IAAI,EAAI,GAAJ,CAAAwW,CAAA,CAAJ,CAEO,CACL,IAAIC,EAAI0B,EAAA,CAAAA,CAAA,CAAe7W,CAAf,CAAwBtB,CAAA,EAAxB,CACR,IAAQ,GAAR,CAAIwW,CAAJ,CACEE,CAAA,EACIF,CADJ,CACQ,EADR,GACiB,CADjB,CAEGC,CAFH,CAEO,EAHT,KAIO,CACL,IAAI2B,EAAID,EAAA,CAAAA,CAAA,CAAe7W,CAAf,CAAwBtB,CAAA,EAAxB,CACR,IAAQ,GAAR,CAAIwW,CAAJ,CACEE,CAAA,EACIF,CADJ,CACQ,EADR,GACiB,EADjB,EAEIC,CAFJ,CAEQ,EAFR,GAEiB,CAFjB,CAGG2B,CAHH,CAGO,EAJT,KAKO,CACL,IAAIC,EAAIF,EAAA,CAAAA,CAAA,CAAe7W,CAAf,CAAwBtB,CAAA,EAAxB,CACR0W,EAAA,EACIF,CADJ,CACQ,CADR,GACiB,EADjB,EAEIC,CAFJ,CAEQ,EAFR,GAEiB,EAFjB,EAGI2B,CAHJ,CAGQ,EAHR,GAGiB,CAHjB,CAIGC,CAJH,CAIO,EANF,CAPF,CANF,CAyBS,KAAhB,CAAI3B,CAAJ,CACEuB,CADF,EACYK,MAAAC,aAAA,CAAoB7B,CAApB,CADZ,EAGEA,CACA,EADa,KACb,CAAAuB,CAAA,EAAUK,MAAAC,aAAA,EACP7B,CADO,EACM,EADN,EACY,KADZ,EAEPA,CAFO,CAEM,IAFN,EAEwB,KAFxB,CAJZ,CAhCiB,CA0CnB,MAAOuB,EAvDkE,CA+D7BO,QAAA,GAAQ,CAARA,CAAQ,CAAClX,CAAD,CAAS,CAC7D,MAAOA,EAAP,CAAgBlB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAD6C,CAUnBmX,QAAA,GAAQ,CAARA,CAAQ,CAACnX,CAAD,CAAS,CAC3D,MAAOA,EAAP,CAAgBlB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAAhB,CAzlCuBsT,CAwlCoC;AAUb8D,QAAA,GAAQ,CAARA,CAAQ,CAACpX,CAAD,CAAS,CAC/D,MAAOlB,EAAA,CAAAA,CAAA,CAAekB,CAAf,CAAwBlB,CAAA,CAAAA,CAAA,CAAekB,CAAf,CAAxB,CADwD,CA4BjEwV,CAAAtN,EAAA,CAA8CmP,QAAQ,CAAC1H,CAAD,CAAMC,CAAN,CAAY,CAChE,MA3jCc,EAAP,EA2jCwBD,CA3jCxB,EAAoB,CAApB,EA2jC6BC,CA3jC7B,CAAwBM,EAAxB,CAAgD,IAAIL,CAAJ,CA2jCxBF,CA3jCwB,CA2jCnBC,CA3jCmB,CA0jCS,C,CGxpC3D0H,QAASA,GAAK,CAAC9U,CAAD,CAAmB,CACpC,MAAOA,EAAP,EAG8B,CAAtB,GAHeA,CAGf,CC0B2EqS,CD1B3E,CAA0B,CAA1B,CC0B2EA,CD1B3E,CAHerS,CAGf,CC0B2EqS,CD7BnF,CADoC,CAMjC0C,QAASA,GAAO,CAACC,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAsBC,CAAtB,CAA2B,CAC9C,MAA6B,EAA7B,IAAQD,CAAR,CAAe,CAAf,EAAoBC,CAApB,CAD8C,CAG3CC,QAASA,GAAM,CAACJ,CAAD,CAAQC,CAAR,CAAgBC,CAAhB,CAAsBC,CAAtB,CAA2B,CAC7C,OAAQD,CAAR,CAAe,CAAf,EAAoBC,CAApB,GAA4BA,CADiB,CAG1CE,QAASA,GAAO,CAACrW,CAAD,CAAQJ,CAAR,CAAeoB,CAAf,CAAsB,CACzC,MAAOA,EAAA,CACH,CAAC,EAAEhB,CAAA,CAAMJ,CAAN,EAAe,CAAf,CAAF,EAAwB,CAAxB,EAA8BA,CAA9B,CAAsC,CAAtC,CADE,EAC4C,CAAA,CAD5C,CAEH,EAAEI,CAAA,CAAMJ,CAAN,EAAe,CAAf,CAAF,EAAuB,EAAE,CAAF,EAAQA,CAAR,CAAgB,CAAhB,CAAvB,CAFG,EAE4C,CAAA,CAHV,CAKtC0W,QAASA,GAAS,CAACC,CAAD,CAAS,CAAA,IAC1BC,EAAI,CADsB,CACnBtZ,EAAI,CADe,CAE1BuZ,EAAK,EAFqB,CAG1BN,EAAM,CAHoB,CAGjBD,EAAO,CACpB,EAAA,CAAAra,CAAA,CAAoB0a,CAApB,CAAA,KAAA,IAAA,EAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAAvV,MAEI,GADUkV,CACV,EADkB,CAClB,EADuBC,CACvB,EAAc,CAAd,GAAI,EAAEA,CAAN,GACIM,CAAA,CAAGvZ,CAAA,EAAH,CACA,CADUgZ,CACV,CAAAA,CAAA,CAAOC,CAAP,CAAa,CAFjB,CAKJ,IAAU,CAAV,GAAIjZ,CAAJ,EAAqB,CAArB,CAAeiZ,CAAf,CACIM,CAAA,CAAGvZ,CAAA,EAAH,CAAA,CAAUgZ,CAEd,IAAIhZ,CAAJ,CAAQ,CAAR,GAAcsZ,CAAd,CAAkBtZ,CAAlB,CAAsB,CAAtB,CAA0BA,CAA1B,CAA8B,CAA9B,GACI,EACIuZ,EAAA,CAAGvZ,CAAH,CAAA,CAAQ,CADZ,OAES,EAAEA,CAFX,CAEesZ,CAFf,CADJ,CAKA,MAAO,KAAIvI,UAAJ,CAAewI,CAAf,CAnBuB;AAqB3BC,QAAUA,GAAW,CAAC1W,CAAD,CAAQ2W,CAAR,CAAe9V,CAAf,CAAuB+V,CAAvB,CAAgCC,CAAhC,CAAqC,CAC7D,IAAIV,CAAJ,CACIW,CADJ,CAEIlX,CAFJ,CAEemX,CAFf,CAIQb,CALqD,OAAAc,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CACzDb,CAEWY,CAFLJ,CAEKI,CAFG,CAEHA,CADXD,CACWC,CADCJ,CACDI,EADU,CACVA,CAAXnX,CAAWmX,CAAH,CAAGA,CAAAA,CAAAA,CAAYlW,CAHkC,MAAA,CAAA,CAI7D,GAAO,EAAY,CAAZ,CAAAkW,CAAA,CAAP,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACQb,CAAJ,CAAWlW,CAAA,CAAM8W,CAAA,EAAN,CAL8C,MAAA,CAAA,CAOrD,MAAA,EAAA,CAAA,CAAA,CAAMD,CAAA,CAAID,CAAJ,CAAahX,CAAA,EAAb,CAAsBsW,CAAtB,CAA4BC,CAA5B,CAAN,CAAA,CAAA,CAPqD,MAAA,CAAA,CAQlC,CAFvB,CAES,EAAEY,CAFX,EAEoC,CAFpC,CAE4B,EAAEZ,CAF9B,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,EAFkBA,CAAtB,CAA4B,CAA5B,CAAA,CAAA,EAAA,CAAA,CAAA,CAEI,CANyD,CAAA,CAAA,CAAA;AAiB1Dc,QAASA,GAAgB,CAACtW,CAAD,CAAOuW,CAAP,CAAYC,CAAZ,CAAiB,CAC7C,GAAiB,CAAjB,EAAIA,CAAJ,CAAUD,CAAV,CACI,MAAO,EAGX,IAAgB,CAAhB,CAAIC,CAAJ,CAAUD,CAAV,CAAmB,CACf,IAAIE,EAAM,CACV,EAAA,CAAAvb,CAAA,CAAkB6a,EAAA,CAAY/V,CAAZ,CAAkBuW,CAAlB,CAAuBC,CAAvB,CAA6BD,CAA7B,CAAkCvW,CAAlC,CAAwCyV,EAAxC,CAAlB,CAAA,KAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CACIgB,CAAA,EADJ,CAAAjB,MAGA,OAAOiB,EALQ,CAQnB,IAAMC,EAAYF,CAAZE,EAAmB,CAAnBA,EAAwB,CAExBC,EAAAA,CAAYJ,CAAZI,EAA+B,CAAZ,GAAAJ,CAAA,CAAM,CAAN,CAAgB,CAAhB,CAAoB,CAApB,CAAwBA,CAAxB,CAA8B,CAAjDI,CAGN,EAAA,CAAAL,EAAA,CAAiBtW,CAAjB,CAAuBuW,CAAvB,CAA4BI,CAA5B,CAAA,CAEIL,EAAA,CAAiBtW,CAAjB,CAAuB0W,CAAvB,CAAkCF,CAAlC,CAEmC,EAAA,CAACE,CAAD,CAAaC,CAAb,EAA2B,CAG9DC,EAAAA,CAAM,CAAGC,EAAAA,CAHUF,CAGVE,EAHuB,CAGvBA,CAAmB,CAChC,KAAMC,EAAO,IAAIC,QAAJ,CAJI/W,CAISV,OAAb,CAJIU,CAIqBT,WAAzB,CAJIS,CAIqCgX,WAAzC,CAEb,KADMtF,CACN,CAD2B,IAAK,EAApB,GAAAsF,CAAA,CALKhX,CAKmBgX,WAAxB,CAAyCH,CAAzC,CAA+CG,CAC3D,CAAoB,CAApB,EAAOtF,CAAP,CAAamF,CAAb,CAAA,CACID,CACA,EADOK,EAAA,CAAcH,CAAAI,UAAA,CAAeL,CAAf,CAAd,CACP,CAAAA,CAAA,EAAO,CAEX,KAAA,CAAoB,CAApB,EAAOnF,CAAP,CAAamF,CAAb,CAAA,CACID,CACA,EADOK,EAAA,CAAcH,CAAAK,UAAA,CAAeN,CAAf,CAAd,CACP,CAAAA,CAAA,EAAO,CAEX,KAAA,CAAoB,CAApB,EAAOnF,CAAP,CAAamF,CAAb,CAAA,CACID,CACA,EADOK,EAAA,CAAcH,CAAAM,SAAA,CAAcP,CAAd,CAAd,CACP,CAAAA,CAAA,EAAO,CAtBX,OAEA,EAFA,CAwBOD,CAxCsC;AA0C1CK,QAASA,GAAa,CAACI,CAAD,CAAS,CAC1BA,CAAJ9a,EAAa,CACbA,EAAJ,EAAUA,CAAV,GAAgB,CAAhB,CAAqB,UACrBA,EAAA,EAAKA,CAAL,CAAS,SAAT,GAAyBA,CAAzB,GAA+B,CAA/B,CAAoC,SAApC,CACA,OAAyC,SAAzC,EAAUA,CAAV,EAAeA,CAAf,GAAqB,CAArB,EAA2B,SAA3B,IAAyD,EAJvB,C,CC7FlCJ,QADSmb,GACE,CAACC,CAAD,CAAoBC,CAApB,CAAmCC,CAAnC,CAA2C,CAClD,IAAAF,GAAA,CAAyBA,CACzB,KAAAC,GAAA,CAAqBA,CACrB,KAAAC,OAAA,CAAcA,CAHoC,CAOtDtb,QADSub,GACE,CAACC,CAAD,CAAiBpL,CAAjB,CAA6B1O,CAA7B,CAAqC,CAC5C,IAAA8Z,GAAA,CAAsBA,CACtB,KAAA9Z,OAAA,CAAgC,QAAlB,GAAA,MAAOA,EAAP,CAA6BA,CAA7B,CAAsCA,CAAA2P,IACpD,KAAAjB,EAAA,CAAwC,QAAtB,GAAA,MAAOA,EAAP,CAAiCA,CAAjC,CAA8CA,CAAAiB,IAHpB,CAOhDrR,QADS6P,GACE,CAACE,CAAD,CAAUK,CAAV,CAAsBF,CAAtB,CAAkC,CACzC,IAAAH,QAAA,CAAeA,CACf,KAAAG,EAAA,CAAkBA,CAClB,KAAAE,EAAA,CAAwC,QAAtB,GAAA,MAAOA,EAAP,CAAiCA,CAAjC,CAA8CA,CAAAiB,IAHvB,CAU7CrR,QADSyb,GACE,CAAC1L,CAAD,CAAUhM,CAAV,CAAkBwK,CAAlB,CAAyBE,CAAzB,CAAkC2B,CAAlC,CAA8C,CAClC,IAAM,EAAzB,GAAIA,CAAJ,GACIA,CADJ,CACiB3B,CAAAiN,OAAA,CAAe,QAAA,CAAChF,CAAD,CAAIG,CAAJ,CAAU,CAAA,MAAAmC,GAAA,CAAMtC,CAAN,CAAUG,CAAA9S,OAAV,EAAsB8S,CAAAnV,OAAtB,CAAiCgV,CAAjC,EAAA,CAAzB,CAAkE,CAAlE,CADjB,CAGA,GAAA,KAAA,CAAA,IAAA,CAAM3G,CAAN,CAAeK,CAAf,CAA2BpC,EAAAK,YAA3B,CACA,KAAAE,EAAA,CAAaA,CACb,KAAAE,EAAA,CAAeA,CACf,KAAA1K,OAAA,CAAgC,QAAlB,GAAA,MAAOA,EAAP,CAA6BA,CAA7B,CAAsCA,CAAAsN,IAPC,CADpBsK,CAAA9L,CAA5B4L,EAA4B5L,CAAAA,EAAAA,CAYrC7P;QADSqP,GACE,CAACU,CAAD,CAAUlM,CAAV,CAAgB6F,CAAhB,CAAoB6F,CAApB,CAAqC,CAAjBA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAU,CAAA,CAAV,CAAAA,CAC3B,GAAA,KAAA,CAAA,IAAA,CAAMQ,CAAN,CAAelM,CAAAuM,EAAf,CAAgCpC,EAAAqB,gBAAhC,CACA,KAAAE,GAAA,CAAeA,CACf,KAAA1L,KAAA,CAAYA,CACZ,KAAA6F,GAAA,CAAwB,QAAd,GAAA,MAAOA,EAAP,CAAyBA,CAAzB,CAA8BA,CAAA2H,IAJI,CADfsK,CAAA9L,CAAxBR,EAAwBQ,CAAAA,EAAAA,CAA9B+L,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,EAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAQrN,QAAA,EAAA,CAAE,MAAO,KAAA1K,KAAA0K,EAAT,CAAR,CARD,CAAA,EASC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAUE,QAAA,EAAA,CAAE,MAAO,KAAA5K,KAAA4K,EAAT,CAAV,CATD,CAAA,CAWP,KAAAoN,GAAqC,CAEjC7b,SADS8b,GACE,CAACpa,CAAD,CAASqC,CAAT,CAAiB,CACxB,IAAArC,OAAA,CAAgC,QAAlB,GAAA,MAAOA,EAAP,CAA6BA,CAA7B,CAAsCA,CAAA2P,IACpD,KAAAtN,OAAA,CAAgC,QAAlB,GAAA,MAAOA,EAAP,CAA6BA,CAA7B,CAAsCA,CAAAsN,IAF5B;AAM5BrR,QADS+b,GACE,CAAChY,CAAD,CAASmK,CAAT,CAAoB,CAC3B,IAAAnK,OAAA,CAAgC,QAAlB,GAAA,MAAOA,EAAP,CAA6BA,CAA7B,CAAsCA,CAAAsN,IACpD,KAAAnD,UAAA,CAAsC,QAArB,GAAA,MAAOA,EAAP,CAAgCA,CAAhC,CAA4CA,CAAAmD,IAFlC,C,CCxD5B,QAAM2K,GAAN,EAAA,EACHC,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAACvT,CAADuT,CAAOA,CACRA,MAAOvT,EAAAwT,kBAAPD,EAAiCvT,CAAAwT,kBAAAD,CAAuBA,IAAvBA,CAAjCA,EAAiEA,IADzDA,CAGZE,GAAAA,UAAAA,UAAAA,CAAAA,QAASA,CAACC,CAADD,CAAQA,CAAAA,IAAAA,EAAAA,IACbA,OAAOC,EAAAC,IAAAF,CAAUA,QAAAA,CAACzT,CAADyT,CAAUA,CAAAA,MAAAA,EAAAF,MAAAE,CAAWzT,CAAXyT,CAAAA,CAApBA,CADMA,CAGjBG;QAAOA,GAAeA,CAACC,CAADD,CAAU5T,CAAV4T,CAAgBA,CAClCA,OAAQ5T,CAAA8T,EAARF,EACIA,KAAKG,CAAAxc,KAALqc,CAAgBA,MAAOC,EAAAG,UAAPJ,EAA4BC,CAAAG,UAAAJ,CAAkB5T,CAAlB4T,CAC5CA,MAAKK,CAAApY,IAAL+X,CAAeA,MAAOC,EAAAK,SAAPN,EAA2BC,CAAAK,SAAAN,CAAiB5T,CAAjB4T,CAC1CA,MAAKO,CAAAC,MAALR,CAAiBA,MAAOC,EAAAQ,WAAPT,EAA6BC,CAAAQ,WAAAT,CAAmB5T,CAAnB4T,CAC9CA,MAAKU,CAAAtX,OAAL4W,CAAkBA,MAAOC,EAAAU,YAAPX,EAA8BC,CAAAU,YAAAX,CAAoB5T,CAApB4T,CAChDA,MAAKY,CAAA5X,KAALgX,CAAgBA,MAAOC,EAAAY,UAAPb,EAA4BC,CAAAY,UAAAb,CAAkB5T,CAAlB4T,CAC5CA,MAAKc,CAAAhX,KAALkW,CAAgBA,MAAOC,EAAAc,UAAPf,EAA4BC,CAAAc,UAAAf,CAAkB5T,CAAlB4T,CAC5CA,MAAKgB,CAAA9W,QAAL8V,CAAmBA,MAAOC,EAAAgB,aAAPjB,EAA+BC,CAAAgB,aAAAjB,CAAqB5T,CAArB4T,CAClDA,MAAKkB,CAAA1W,KAALwV,CAAgBA,MAAOC,EAAAkB,UAAPnB,EAA4BC,CAAAkB,UAAAnB,CAAkB5T,CAAlB4T,CAC5CA,MAAKoB,CAAArW,KAALiV,CAAgBA,MAAOC,EAAAoB,UAAPrB,EAA4BC,CAAAoB,UAAArB,CAAkB5T,CAAlB4T,CAC5CA,MAAKsB,CAAAnW,UAAL6U,CAAqBA,MAAOC,EAAAsB,eAAPvB;AAAiCC,CAAAsB,eAAAvB,CAAuB5T,CAAvB4T,CACtDA,MAAKwB,CAAA3V,SAALmU,CAAoBA,MAAOC,EAAAwB,cAAPzB,EAAgCC,CAAAwB,cAAAzB,CAAsB5T,CAAtB4T,CACpDA,MAAK0B,CAAA7c,KAALmb,CAAgBA,MAAOC,EAAA0B,UAAP3B,EAA4BC,CAAA0B,UAAA3B,CAAkB5T,CAAlB4T,CAC5CA,MAAK4B,CAAAC,OAAL7B,CAAkBA,MAAOC,EAAA6B,YAAP9B,EAA8BC,CAAA6B,YAAA9B,CAAoB5T,CAApB4T,CAChDA,MAAK+B,CAAA7b,MAAL8Z,CAAiBA,MAAOC,EAAA+B,WAAPhC,EAA6BC,CAAA+B,WAAAhC,CAAmB5T,CAAnB4T,CAC9CA,MAAKiC,CAAAzY,gBAALwW,CAA2BA,MAAOC,EAAAiC,qBAAPlC,EAAuCC,CAAAiC,qBAAAlC,CAA6B5T,CAA7B4T,CAClEA,MAAKmC,CAAAld,cAAL+a,CAAyBA,MAAOC,EAAAmC,mBAAPpC,EAAqCC,CAAAmC,mBAAApC,CAA2B5T,CAA3B4T,CAC9DA,MAAKqC,CAAA3c,IAALsa,CAAeA,MAAOC,EAAAqC,SAAPtC,EAA2BC,CAAAqC,SAAAtC,CAAiB5T,CAAjB4T,CAC1CA,MAAKuC,CAAAC,WAALxC,CAAsBA,MAAOC,EAAAwC,gBAAPzC,EAAkCC,CAAAwC,gBAAAzC,CAAwB5T,CAAxB4T,CACxDA,SAASA,MAAOA,KAnBpBA,CADkCA;AAwBnC,QAAM0C,GAAN,EAAA,EACH/C,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAACgD,CAADhD,CAASA,CACVA,MAAOgD,EAAAC,GAAPjD,EAAqCgD,CAAAC,GAAAjD,CAA2BA,IAA3BA,CAArCA,EAAyEA,IAD/DA,CAGdE,GAAAA,UAAAA,UAAAA,CAAAA,QAASA,CAACgD,CAADhD,CAAUA,CAAAA,IAAAA,EAAAA,IACfA,OAAOgD,EAAA9C,IAAAF,CAAYA,QAAAA,CAAC8C,CAAD9C,CAAYA,CAAAA,MAAAA,EAAAF,MAAAE,CAAW8C,CAAX9C,CAAAA,CAAxBA,CADQA,CAGnBG;QAAOA,GAAeA,CAACC,CAADD,CAAU5T,CAAV4T,CAAgB2C,CAAhB3C,CAAwBA,CAC1CA,OAAQ5T,CAAA8T,EAARF,EACIA,KAAKG,CAAAxc,KAALqc,CAAgBA,MAAOC,EAAAG,UAAPJ,EAA4BC,CAAAG,UAAAJ,CAAkB2C,CAAlB3C,CAC5CA,MAAKK,CAAApY,IAAL+X,CAAeA,MAAOC,EAAAK,SAAPN,EAA2BC,CAAAK,SAAAN,CAAiB2C,CAAjB3C,CAC1CA,MAAKO,CAAAC,MAALR,CAAiBA,MAAOC,EAAAQ,WAAPT,EAA6BC,CAAAQ,WAAAT,CAAmB2C,CAAnB3C,CAC9CA,MAAKU,CAAAtX,OAAL4W,CAAkBA,MAAOC,EAAAU,YAAPX,EAA8BC,CAAAU,YAAAX,CAAoB2C,CAApB3C,CAChDA,MAAKY,CAAA5X,KAALgX,CAAgBA,MAAOC,EAAAY,UAAPb,EAA4BC,CAAAY,UAAAb,CAAkB2C,CAAlB3C,CAC5CA,MAAKc,CAAAhX,KAALkW,CAAgBA,MAAOC,EAAAc,UAAPf,EAA4BC,CAAAc,UAAAf,CAAkB2C,CAAlB3C,CAC5CA,MAAKgB,CAAA9W,QAAL8V,CAAmBA,MAAOC,EAAAgB,aAAPjB,EAA+BC,CAAAgB,aAAAjB,CAAqB2C,CAArB3C,CAClDA,MAAKkB,CAAA1W,KAALwV,CAAgBA,MAAOC,EAAAkB,UAAPnB,EAA4BC,CAAAkB,UAAAnB,CAAkB2C,CAAlB3C,CAC5CA,MAAKoB,CAAArW,KAALiV,CAAgBA,MAAOC,EAAAoB,UAAPrB,EAA4BC,CAAAoB,UAAArB,CAAkB2C,CAAlB3C,CAC5CA,MAAKsB,CAAAnW,UAAL6U,CAAqBA,MAAOC,EAAAsB,eAAPvB;AAAiCC,CAAAsB,eAAAvB,CAAuB2C,CAAvB3C,CACtDA,MAAKwB,CAAA3V,SAALmU,CAAoBA,MAAOC,EAAAwB,cAAPzB,EAAgCC,CAAAwB,cAAAzB,CAAsB2C,CAAtB3C,CACpDA,MAAK0B,CAAA7c,KAALmb,CAAgBA,MAAOC,EAAA0B,UAAP3B,EAA4BC,CAAA0B,UAAA3B,CAAkB2C,CAAlB3C,CAC5CA,MAAK4B,CAAAC,OAAL7B,CAAkBA,MAAOC,EAAA6B,YAAP9B,EAA8BC,CAAA6B,YAAA9B,CAAoB2C,CAApB3C,CAChDA,MAAK+B,CAAA7b,MAAL8Z,CAAiBA,MAAOC,EAAA+B,WAAPhC,EAA6BC,CAAA+B,WAAAhC,CAAmB2C,CAAnB3C,CAC9CA,MAAKiC,CAAAzY,gBAALwW,CAA2BA,MAAOC,EAAAiC,qBAAPlC,EAAuCC,CAAAiC,qBAAAlC,CAA6B2C,CAA7B3C,CAClEA,MAAKmC,CAAAld,cAAL+a,CAAyBA,MAAOC,EAAAmC,mBAAPpC,EAAqCC,CAAAmC,mBAAApC,CAA2B2C,CAA3B3C,CAC9DA,MAAKqC,CAAA3c,IAALsa,CAAeA,MAAOC,EAAAqC,SAAPtC,EAA2BC,CAAAqC,SAAAtC,CAAiB2C,CAAjB3C,CAC1CA,MAAKuC,CAAAC,WAALxC,CAAsBA,MAAOC,EAAAwC,gBAAPzC,EAAkCC,CAAAwC,gBAAAzC,CAAwB2C,CAAxB3C,CACxDA,SAASA,MAAOA,KAnBpBA,CAD0CA;A,CCjC3C,IAAI8C,GAAYC,CAAAjgB,EAAAC,EAAAC,EAAAO,KAAhB,CACIH,GAAW4f,CAAAlgB,EAAAC,EAAAC,EAAAI,SADf,CAEIC,GAAW4f,CAAAngB,EAAAC,EAAAC,EAAAK,SAFf,CAGIF,GAAY+f,CAAApgB,EAAAC,EAAAC,EAAAG,UAHhB,CAIID,GAAYigB,CAAArgB,EAAAC,EAAAC,EAAAE,UAJhB,CAKIM,EAAa4f,CAAAtgB,EAAAC,EAAAC,EAAAQ,WALjB,CAMIF,GAAe+f,CAAAvgB,EAAAC,EAAAC,EAAAM,aANnB,CAOIoO,GAAgB4R,EAAAxgB,EAAAC,EAAAC,EAAA0O,cAPpB,CAQIzO,GAAkBsgB,CAAAzgB,EAAAC,EAAAC,EAAAC,gBAEzBS,SADS4M,GACE,CAACE,CAAD,CAASgT,CAAT,CAAmB/P,CAAnB,CAAiDgQ,CAAjD,CAA2E,CAAxDhQ,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAUxQ,EAAAygB,GAAV,CAAAjQ,CAA8BgQ,EAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAe,IAAI/d,GAAnB,CAAA+d,CACxD,KAAAjT,OAAA,CAAcA,CACd,KAAAiD,QAAA,CAAeA,CACf,KAAA+P,SAAA,CAAgBA,CAChB,KAAAC,aAAA,CAAoBA,CAJ8D,CAMtFE,QAAOA,GAAIA,CAACd,CAADc,CAAUA,CACjBA,MAAOA,KAAIrT,EAAJqT,CAAWd,CAAA9C,IAAA4D,CAAYA,QAAAA,CAACC,CAADD,CAAI7f,CAAJ6f,CAAUA,CAAAA,MAAAA,KAAI1V,EAAJ0V,CAAUA,EAAVA,CAAe7f,CAAf6f,CAAkBC,CAAAxX,KAAlBuX,CAAAA,CAAtBA,CAAXA,CADUA;AAKrBE,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAACA,CAADA,CAAgBA,CAAfA,IAAAA,IAAeA,EAAfA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAeA,CAAfA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CACHA,KAAMC,EADYD,CACEzE,OAAAyE,CAAkBA,QAAAA,CAACxG,CAADwG,CAAKE,CAALF,CAAWA,CAAAA,MAACxG,EAAAwG,CAAGE,CAAHF,CAADA,CAASA,CAAAA,CAATA,CAAkBxG,CAAlBwG,CAA7BA,CAAmDG,MAAAC,OAAAJ,CAAcA,IAAdA,CAAnDA,CAApBA,CACMK,EAAgBL,IAAIne,GAAOye,EAAAA,CAAYN,IAAArT,OAAA4T,OAAAP,CAAmBA,QAAAA,CAACQ,CAADR,CAAOA,CAAAA,MAAAC,EAAAD,CAAYQ,CAAAlW,KAAZ0V,CAAAA,CAA1BA,CAC7CA,KAAAJ,aAAAa,QAAAT,CAA0BA,QAAAA,CAACQ,CAADR,CAAIU,CAAJV,CAAeA,CAAAA,MAACC,EAAAD,CAAYQ,CAAAlW,KAAZ0V,CAADA,EAAyBK,CAAApN,IAAA+M,CAAkBU,CAAlBV,CAA0BQ,CAA1BR,CAAzBA,CAAzCA,CACAA,OAAOA,KAAIvT,EAAJuT,CAAWM,CAAXN,CAAsBA,IAAAL,SAAtBK,CAAqCA,IAAApQ,QAArCoQ,CAAmDK,CAAnDL,CAJWA,CAZnBvE,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,EAUC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAaxL,QAAA,EAAA,CAAE,MAAO,KAAA0Q,GAAT,CAAb,CAVD,CAAA,EAWC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAa5Q,QAAA,EAAA,CAAE,MAAO,KAAA6Q,GAAT,CAAb,CAXD,CAAA,CAmBP1iB;CAAA,EAAO2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAIJxP,GAAA5E,EAAA4E,UAHCA,GAAAsP,GAAA,CAAwB,CACxBtP,GAAAuP,GAAA,CAAwB/S,EAAApB,OAF5BA,GAAA,CAAOoU,EAAP,CAAA,CAGW,QAGPhhB,SADSuK,GACE,CAACE,CAAD,CAAO/B,CAAP,CAAagC,CAAb,CAA+BoV,CAA/B,CAAyC,CAChD,IAAArV,KAAA,CAAYA,CACZ,KAAA/B,KAAA,CAAYA,CACZ,KAAAgC,SAAA,CAHoB,IAAA,EAAAA,GAAAA,CAAAA,CAAW,CAAA,CAAXA,CAAAA,CAIpB,KAAAoV,SAAA,CAAgBA,CAJgC,CAD3CzhB,CAAAkM,EAOT2W,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAUA,KAAAzW,KAAVyW,CAAmBA,IAAnBA,CAAwBA,IAAAxY,KAA1BwY,CAPR7iB,EAAA,EAAA,KAAA,GAAA,EAAAud;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,EAAA,EAAA,OAAA,CAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASuF,QAAA,EAAA,CAAE,MAAO,KAAAzY,KAAA8T,EAAT,CAAT,CARD,CAAA,EAAA,CASEyE,MAAAD,YATF,CAAA,CASH,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAA2B,QAAA,EAAA,CAAE,MAAO,OAAT,CAA3B,CATG,CAAA,EAAA,QAAA,CAUC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAUI,QAAA,EAAA,CACV,MAAOC,GAAA,CAAsB,IAAA3Y,KAAtB,CAAA,CAAmC,IAAAA,KAAA0Y,QAAnC,CAAuD,IAAA1Y,KADpD,CAAV,CAVD,CAAA,EAAA,EAuBA,KAAI7I,CAAJ,CAuBJ,EAAAA,CAAA,GAASA,CAAT,CAAgB,EAAhB,CArBCA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,IAAL,CAAmB,CAAnB,CAAA,CAAwB,KACxBA,EAAA,CAAKA,CAAA,MAAL,CAAqB,CAArB,CAAA,CAA0B,OAC1BA,EAAA,CAAKA,CAAA,OAAL,CAAsB,CAAtB,CAAA,CAA2B,QAC3BA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,QAAL,CAAuB,CAAvB,CAAA,CAA4B,SAC5BA;CAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,KAAL,CAAoB,CAApB,CAAA,CAAyB,MACzBA,EAAA,CAAKA,CAAA,UAAL,CAAyB,EAAzB,CAAA,CAA+B,WAC/BA,EAAA,CAAKA,CAAA,SAAL,CAAwB,EAAxB,CAAA,CAA8B,UAC9BA,EAAA,CAAKA,CAAA,KAAL,CAAoB,EAApB,CAAA,CAA0B,MAC1BA,EAAA,CAAKA,CAAA,OAAL,CAAsB,EAAtB,CAAA,CAA4B,QAC5BA,EAAA,CAAKA,CAAA,MAAL,CAAqB,EAArB,CAAA,CAA2B,OAC3BA,EAAA,CAAKA,CAAA,gBAAL,CAA+B,EAA/B,CAAA,CAAqC,iBACrCA,EAAA,CAAKA,CAAA,cAAL,CAA6B,EAA7B,CAAA,CAAmC,eACnCA,EAAA,CAAKA,CAAA,IAAL,CAAmB,EAAnB,CAAA,CAAyB,KACzBA,EAAA,WAAA,CAAqB,YACrBA,EAAA,WAAA,CAAqB,YACrBA,EAAA,YAAA,CAAsB,aAGtBG,SADSshB,EACE,CAAC9E,CAAD,CAAQzR,CAAR,CAAkB,CACzB,IAAAyR,EAAA,CAAaA,CACb,KAAAzR,SAAA,CAAgBA,CAFS,CAK7BwW,QAAOA,GAAKA,CAAClB,CAADkB,CAAIA,CAAEA,MAAOlB,EAAPkB,EAAYlB,CAAA7D,EAAZ+E,GAAwB1hB,CAAA0E,IAA1Bgd,CAEhBC,QAAOA,GAAQA,CAACnB,CAADmB,CAAIA,CAAEA,MAAOnB,EAAPmB,EAAYnB,CAAA7D,EAAZgF,GAAwB3hB,CAAA6F,OAA1B8b,CACnBC,QAAOA,GAAMA,CAACpB,CAADoB,CAAIA,CAAEA,MAAOpB,EAAPoB,EAAYpB,CAAA7D,EAAZiF,GAAwB5hB,CAAAyF,KAA1Bmc;AACjBC,QAAOA,GAAMA,CAACrB,CAADqB,CAAIA,CAAEA,MAAOrB,EAAPqB,EAAYrB,CAAA7D,EAAZkF,GAAwB7hB,CAAAuG,KAA1Bsb,CACjBC,QAAOA,GAASA,CAACtB,CAADsB,CAAIA,CAAEA,MAAOtB,EAAPsB,EAAYtB,CAAA7D,EAAZmF,GAAwB9hB,CAAA2G,QAA1Bmb,CACpBC,QAAOA,GAAMA,CAACvB,CAADuB,CAAIA,CAAEA,MAAOvB,EAAPuB,EAAYvB,CAAA7D,EAAZoF,GAAwB/hB,CAAAiH,KAA1B8a,CACjBC,QAAOA,GAAMA,CAACxB,CAADwB,CAAIA,CAAEA,MAAOxB,EAAPwB,EAAYxB,CAAA7D,EAAZqF,GAAwBhiB,CAAAwH,KAA1Bwa,CACjBC,QAAOA,GAAWA,CAACzB,CAADyB,CAAIA,CAAEA,MAAOzB,EAAPyB,EAAYzB,CAAA7D,EAAZsF,GAAwBjiB,CAAA4H,UAA1Bqa,CAOtBC,QAAOA,GAAiBA,CAAC1B,CAAD0B,CAAIA,CAAEA,MAAO1B,EAAP0B,EAAY1B,CAAA7D,EAAZuF,GAAwBliB,CAAAiG,gBAA1Bic,CAG5BC,QAAOA,GAAYA,CAAC3B,CAAD2B,CAAIA,CAAEA,MAAO3B,EAAP2B,EAAY3B,CAAA7D,EAAZwF,GAAwBniB,CAAAif,WAA1BkD,CACvB9F,CAAAA,UAAAA,kBAAAA,CAAAA,QAAiBA,CAACK,CAADL,CAAUA,CACvBA,MAAO+F,GAAA/F,CAA4BK,CAA5BL,CAAqCA,IAArCA,CADgBA,CAI/B7d,EAAA,EAAS2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGNxP,GAAA8P,CAAA9P,UAFC0Q,GAAAC,UAAA,CAAkBC,KAClB/jB,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,UAFvCM,EAAA,CAASN,EAAT,CAAA,CAA+B,EAK3BhhB;QADSC,GACE,EAAG,CACV,CAAA,KAAA,CAAA,IAAA,CAAMJ,CAAAI,KAAN,CADU,CADQ0b,CAAA2F,CAAbrhB,EAAaqhB,CAAAA,CAAAA,CAItBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAATA,CAEf7iB,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEFxP,GAAAvR,EAAAuR,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MADvC/gB,GAAA,CAAK+gB,EAAL,CAAA,CAA2B,EAIvBhhB,SADSuE,EACE,CAACG,CAAD,CAAWD,CAAX,CAAqB,CAC5B,CAAA,KAAA,CAAA,IAAA,CAAM5E,CAAA0E,IAAN,CACA,KAAAG,EAAA,CAAgBA,CAChB,KAAAD,EAAA,CAAgBA,CAHY,CADXkX,CAAA2F,CAAZ/c,CAAY+c,CAAAA,CAAAA,CAerBJ,EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,OAAUA,IAAAxc,EAAAwc,CAAgBA,GAAhBA,CAAsBA,IAAhCA,EAAoCA,IAApCA,CAAyCA,IAAAzc,EAA3Cyc,CAfRtF;CAAA,OAAA,iBAAA,CAAA,CAAA,UAAA,CAAA,CAAA,UAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYuG,QAAA,EAAA,CACZ,OAAQ,IAAA1d,EAAR,EACI,KAAK,CAAL,CAAQ,MAAQ,KAAAC,EAAA,CAAgB2d,SAAhB,CAA4BlR,UAC5C,MAAK,EAAL,CAAS,MAAQ,KAAAzM,EAAA,CAAgB4d,UAAhB,CAA6BpR,WAC9C,MAAK,EAAL,CAAS,MAAQ,KAAAxM,EAAA,CAAgBzB,UAAhB,CAA6Bsf,WAC9C,MAAK,EAAL,CAAS,MAAQ,KAAA7d,EAAA,CAAgBzB,UAAhB,CAA6Bsf,WAJlD,CAMAlkB,CAAA,EAAA,MAAU2U,MAAJ,CAAU,eAAV,CAA0B,IAAA,CAAKiO,MAAAD,YAAL,CAA1B,CAAkD,OAAlD,CAAN,CAPY,CAAZ,CAND,CAAA,CAiBP3iB,EAAA,EAAI2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEDxP,GAAAjN,CAAAiN,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,KADvCzc,EAAA,CAAIyc,EAAJ,CAAA,CAA0B,EAItBhhB,SADSwiB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAY,CAAZ,CAAF,CADQ7G,CAAApX,CAAbie,EAAaje,CAAAA,CAAAA,CAItBvE;QADSyiB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAY,EAAZ,CAAF,CADS9G,CAAApX,CAAdke,EAAcle,CAAAA,CAAAA,CAIvBvE,SADS0iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAY,EAAZ,CAAF,CADS/G,CAAApX,CAAdme,EAAcne,CAAAA,CAAAA,CAIvBvE,SADS2iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAY,EAAZ,CAAF,CADShH,CAAApX,CAAdoe,EAAcpe,CAAAA,CAAAA,CAIvBvE,SADS4iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAa,CAAb,CAAF,CADSjH,CAAApX,CAAdqe,EAAcre,CAAAA,CAAAA,CAIvBvE,SADS6iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAa,EAAb,CAAF,CADUlH,CAAApX,CAAfse,EAAete,CAAAA,CAAAA,CAIxBvE,SADS8iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAa,EAAb,CAAF,CADUnH,CAAApX,CAAfue,EAAeve,CAAAA,CAAAA,CAIxBvE,SADS+iB,GACE,EAAG,CAAE,CAAA,KAAA,CAAA,IAAA,CAAM,CAAA,CAAN,CAAa,EAAb,CAAF,CADUpH,CAAApX,CAAfwe,EAAexe,CAAAA,CAAAA,CAIxBvE,SADS8c,GACE,CAAC7X,CAAD,CAAY,CACnB,CAAA,KAAA,CAAA,IAAA,CAAMpF,CAAAid,MAAN,CACA,KAAA7X,UAAA,CAAiBA,CAFE,CADA0W,CAAA2F,CAAdxE,EAAcwE,CAAAA,CAAAA,CAcvBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,OAAPA,EAAgBA,IAAAjc,UAAhBic,EAAkCA,CAAlCA,EAAwCA,EAAxCA,CAAFA,CAdRtF;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,UAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYuG,QAAA,EAAA,CACZ,OAAQ,IAAAld,UAAR,EACI,KAAKxF,EAAAyF,KAAL,CAAqB,MAAOgM,YAC5B,MAAKzR,EAAAujB,OAAL,CAAuB,MAAOjS,aAC9B,MAAKtR,EAAAwjB,OAAL,CAAuB,MAAOhS,aAHlC,CAKA5S,CAAA,EAAA,MAAU2U,MAAJ,CAAU,eAAV,CAA0B,IAAA,CAAKiO,MAAAD,YAAL,CAA1B,CAAkD,OAAlD,CAAN,CANY,CAAZ,CAND,CAAA,CAgBP3iB,EAAA,EAAM2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEHxP,GAAAsL,EAAAtL,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,OADvClE,GAAA,CAAMkE,EAAN,CAAA,CAA4B,EAIxBhhB,SADSkjB,GACE,EAAG,CAAE,EAAA,KAAA,CAAA,IAAA,CAAMzjB,EAAAyF,KAAN,CAAF,CADWyW,CAAAmB,CAAhBoG,EAAgBpG,CAAAA,EAAAA,CAIzB9c,SADSmjB,GACE,EAAG,CAAE,EAAA,KAAA,CAAA,IAAA,CAAM1jB,EAAAujB,OAAN,CAAF,CADWrH,CAAAmB,CAAhBqG,EAAgBrG,CAAAA,EAAAA,CAIzB9c;QADSojB,GACE,EAAG,CAAE,EAAA,KAAA,CAAA,IAAA,CAAM3jB,EAAAwjB,OAAN,CAAF,CADWtH,CAAAmB,CAAhBsG,EAAgBtG,CAAAA,EAAAA,CAIzB9c,SADS0F,GACE,EAAG,CACV,CAAA,KAAA,CAAA,IAAA,CAAM7F,CAAA6F,OAAN,CADU,CADUiW,CAAA2F,CAAf5b,EAAe4b,CAAAA,CAAAA,CAIxBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,QAATA,CAEf7iB,EAAA,EAAO2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGJxP,GAAA9L,EAAA8L,UAFC0Q,GAAAC,UAAA,CAAkBhR,UAClB9S,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,QAFvCtb,GAAA,CAAOsb,EAAP,CAAA,CAA6B,EAKzBhhB,SADSsF,GACE,EAAG,CACV,CAAA,KAAA,CAAA,IAAA,CAAMzF,CAAAyF,KAAN,CADU,CADQqW,CAAA2F,CAAbhc,EAAagc,CAAAA,CAAAA,CAItBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAATA,CAEf7iB,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGFxP,GAAAlM,EAAAkM,UAFC0Q,GAAAC,UAAA,CAAkBhR,UAClB9S,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MAFvC1b,GAAA,CAAK0b,EAAL,CAAA,CAA2B,EAKvBhhB;QADSoG,GACE,EAAG,CACV,CAAA,KAAA,CAAA,IAAA,CAAMvG,CAAAuG,KAAN,CADU,CADQuV,CAAA2F,CAAblb,EAAakb,CAAAA,CAAAA,CAItBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAATA,CAEf7iB,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGFxP,GAAApL,EAAAoL,UAFC0Q,GAAAC,UAAA,CAAkBhR,UAClB9S,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MAFvC5a,GAAA,CAAK4a,EAAL,CAAA,CAA2B,EAKvBhhB,SADSwG,GACE,CAACE,CAAD,CAAQzB,CAAR,CAAmB,CAC1B,CAAA,KAAA,CAAA,IAAA,CAAMpF,CAAA2G,QAAN,CACA,KAAAE,MAAA,CAAaA,CACb,KAAAzB,UAAA,CAAiBA,CAHS,CADL0W,CAAA2F,CAAhB9a,EAAgB8a,CAAAA,CAAAA,CAMzBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,UAAPA,CAAkBA,IAAAjc,UAAlBic,CAAgCA,GAAhCA,EAAiDA,CAAbA,CAAAA,IAAAxa,MAAAwa,CAAiBA,GAAjBA,CAAuBA,EAA3DA,EAAgEA,IAAAxa,MAAhEwa,CAA0EA,GAA5EA,CAEf7iB,EAAA,EAAQ2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGLxP,GAAAhL,EAAAgL,UAFC0Q,GAAAC,UAAA,CAAkBI,WAClBlkB,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,SAFvCxa;EAAA,CAAQwa,EAAR,CAAA,CAA8B,EAK1BhhB,SADSqjB,GACE,CAACrc,CAAD,CAAO,CACd,CAAA,KAAA,CAAA,IAAA,CAAMnH,CAAAiH,KAAN,CACA,KAAAE,EAAA,CAAYA,CAFE,CADK2U,CAAA2F,CAAd+B,EAAc/B,CAAAA,CAAAA,CAKvBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAAPA,CAAgCA,EAAhCA,EAAeA,IAAAla,EAAfka,CAA2BA,CAA3BA,EAAkCA,GAAlCA,CAAsCxhB,EAAAwhB,CAASA,IAAAla,EAATka,CAAtCA,CAAyDA,GAA3DA,CAEf7iB,EAAA,EAAM2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGHxP,GAAA6R,EAAA7R,UAFC0Q,GAAAC,UAAA,CAAkBlf,UAClB5E,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MAFvCqC,GAAA,CAAMrC,EAAN,CAAA,CAA4B,EAKxBhhB,SADSqH,GACE,CAACL,CAAD,CAAOvC,CAAP,CAAiB,CACxB,CAAA,KAAA,CAAA,IAAA,CAAM5E,CAAAwH,KAAN,CACA,KAAAL,EAAA,CAAYA,CACZ,KAAAvC,EAAA,CAAgBA,CAHQ,CADNkX,CAAA2F,CAAbja,EAAaia,CAAAA,CAAAA,CAMtBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAAPA,CAAcA,IAAAzc,EAAdyc,CAA2BA,GAA3BA,CAA+BvhB,EAAAuhB,CAASA,IAAAla,EAATka,CAA/BA,CAAkDA,GAApDA,CAEf7iB,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGFxP,GAAAnK,EAAAmK,UAFC0Q,GAAAC,UAAA,CAAkBI,WAClBlkB,EAAA,EAAA;EAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MAFvC3Z,GAAA,CAAK2Z,EAAL,CAAA,CAA2B,EAKvBhhB,SADSyH,GACE,CAACT,CAAD,CAAOY,CAAP,CAAiB,CACxB,CAAA,KAAA,CAAA,IAAA,CAAM/H,CAAA4H,UAAN,CACA,KAAAT,EAAA,CAAYA,CACZ,KAAAY,GAAA,CAAgBA,CAHQ,CADD+T,CAAA2F,CAAlB7Z,EAAkB6Z,CAAAA,CAAAA,CAM3BJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,YAAPA,CAAoBvhB,EAAAuhB,CAASA,IAAAla,EAATka,CAApBA,EAA0CA,IAAAtZ,GAAAsZ,CAAgBA,IAAhBA,CAAqBA,IAAAtZ,GAArBsZ,CAAuCA,EAAjFA,EAAmFA,GAArFA,CAEf7iB,EAAA,EAAU2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGPxP,GAAA/J,EAAA+J,UAFC0Q,GAAAC,UAAA,CAAkBlf,UAClB5E,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,WAFvCvZ,GAAA,CAAUuZ,EAAV,CAAA,CAAgC,EAK5BhhB,SADSmI,GACE,CAACnB,CAAD,CAAO,CACd,CAAA,KAAA,CAAA,IAAA,CAAMnH,CAAAsI,SAAN,CACA,KAAAnB,EAAA,CAAYA,CAFE,CADQ2U,CAAA2F,CAAjBnZ,EAAiBmZ,CAAAA,CAAAA,CAK1BJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,WAAPA,CAAmBthB,EAAAshB,CAAaA,IAAAla,EAAbka,CAAnBA,CAA0CA,GAA5CA,CAEf7iB,EAAA,EAAS2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGNxP,GAAArJ,EAAAqJ,UAFC0Q;EAAAC,UAAA,CAAkBlf,UAClB5E,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,UAFvC7Y,GAAA,CAAS6Y,EAAT,CAAA,CAA+B,EAK3BhhB,SADSmB,GACE,CAAC4J,CAAD,CAAW,CAClB,CAAA,KAAA,CAAA,IAAA,CAAMlL,CAAAsB,KAAN,CAAiB4J,CAAjB,CACA,KAAAA,SAAA,CAAgBA,CAFE,CADA4Q,CAAA2F,CAAbngB,EAAamgB,CAAAA,CAAAA,CAKtBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,OAAPA,CAAeA,IAAAoC,UAAfpC,CAA6BA,GAA/BA,CALRtF,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,UAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYuG,QAAA,EAAA,CAAE,MAAO,KAAAmB,UAAAnB,UAAT,CAAZ,CAND,CAAA,UAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYmB,QAAA,EAAA,CAAE,MAAO,KAAAvY,SAAA,CAAc,CAAd,CAAArC,KAAT,CAAZ,CAPD,CAAA,CAUPrK,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEFxP,GAAArQ,EAAAqQ,UADCnT,EAAA,EAAA;EAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MADvC7f,GAAA,CAAK6f,EAAL,CAAA,CAA2B,EAIvBhhB,SADSme,GACE,CAACpT,CAAD,CAAW,CAClB,CAAA,KAAA,CAAA,IAAA,CAAMlL,CAAAse,OAAN,CAAmBpT,CAAnB,CACA,KAAAA,SAAA,CAAgBA,CAFE,CADE4Q,CAAA2F,CAAfnD,EAAemD,CAAAA,CAAAA,CAKxBJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,SAAPA,CAAiBA,IAAAnW,SAAAsR,IAAA6E,CAAkBA,QAAAA,CAACP,CAADO,CAAOxY,CAAAA,MAAAiY,EAAAjY,KAAAA,CAAzBwY,CAAAqC,KAAArC,CAAsCA,IAAtCA,CAAjBA,CAA4DA,GAA9DA,CAEf7iB,EAAA,EAAO2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEJxP,GAAA2M,EAAA3M,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,QADvC7C,GAAA,CAAO6C,EAAP,CAAA,CAA6B,EAIzBhhB,SADSwC,GACE,CAACE,CAAD,CAAOG,CAAP,CAAgBkI,CAAhB,CAA0B,CACjC,CAAA,KAAA,CAAA,IAAA,CAAMlL,CAAA2C,MAAN,CAAkBuI,CAAlB,CACA,KAAArI,KAAA,CAAYA,CACZ,KAAAG,QAAA,CAAeA,CACf,KAAAkI,SAAA,CAAgBA,CAJiB,CADd4Q,CAAA2F,CAAd9e,EAAc8e,CAAAA,CAAAA,CAOvBJ;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CACP7iB,CAAA6iB,EAAAA,OAAUA,KAAAA,CAAKD,MAAAD,YAALE,CAAVA,CAAkCA,GAAlCA,CAAsCA,IAAAnW,SAAAsR,IAAA6E,CAAkBA,QAAAA,CAACb,CAADa,CAAOA,CAAAA,MAAAA,EAAAA,CAAGb,CAAA3X,KAAHwY,CAAzBA,CAAAqC,KAAArC,CAA2CA,KAA3CA,CAAtCA,CAAuFA,GADhFA,CAIf7iB,EAAA,EAAM2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGHxP,GAAAhP,EAAAgP,UAFC0Q,GAAAC,UAAA,CAAkBE,SAClBhkB,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,OAFvCxe,GAAA,CAAMwe,EAAN,CAAA,CAA4B,EAKxBhhB,SADSwjB,GACE,CAAC3gB,CAAD,CAAUkI,CAAV,CAAoB,CAC3B,EAAA,KAAA,CAAA,IAAA,CAAMvL,EAAAikB,MAAN,CAAuB5gB,CAAvB,CAAgCkI,CAAhC,CAD2B,CADH4Q,CAAAnZ,CAAnBghB,EAAmBhhB,CAAAA,EAAAA,CAKhCnE,EAAA,EAAW2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAERxP,GAAAgS,EAAAhS,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,YADvCwC,GAAA,CAAWxC,EAAX,CAAA,CAAiC,EAI7BhhB,SADS0jB,GACE,CAAC7gB,CAAD,CAAUkI,CAAV,CAAoB,CAC3B,EAAA,KAAA,CAAA,IAAA,CAAMvL,EAAAoD,OAAN,CAAwBC,CAAxB,CAAiCkI,CAAjC,CAD2B,CADF4Q,CAAAnZ,CAApBkhB,EAAoBlhB,CAAAA,EAAAA,CAKjCnE,EAAA,EAAY2iB;IAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAETxP,GAAAkS,EAAAlS,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,aADvC0C,GAAA,CAAY1C,EAAZ,CAAA,CAAkC,EAI9BhhB,SADS8F,GACE,CAACE,CAAD,CAAY,CACnB,CAAA,KAAA,CAAA,IAAA,CAAMnG,CAAAiG,gBAAN,CACA,KAAAE,GAAA,CAAiBA,CAFE,CADU2V,CAAA2F,CAAxBxb,EAAwBwb,CAAAA,CAAAA,CAKjCJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,kBAAPA,CAA0BA,IAAAlb,GAA1Bkb,CAAwCA,GAA1CA,CAEf7iB,EAAA,EAAgB2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAGbxP,GAAA1L,EAAA0L,UAFC0Q,GAAAC,UAAA,CAAkBhR,UAClB9S,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,iBAFvClb,GAAA,CAAgBkb,EAAhB,CAAA,CAAsC,EAKlChhB,SADSuB,GACE,CAACE,CAAD,CAAWsJ,CAAX,CAAqB,CAC5B,CAAA,KAAA,CAAA,IAAA,CAAMlL,CAAA0B,cAAN,CAA0BwJ,CAA1B,CACA,KAAAtJ,GAAA,CAAgBA,CAChB,KAAAsJ,SAAA,CAAgBA,CAHY,CADD4Q,CAAA2F,CAAtB/f,EAAsB+f,CAAAA,CAAAA,CAS/BJ;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,gBAAPA,CAAwBA,IAAAzf,GAAxByf,CAAqCA,IAArCA,CAA0CA,IAAAoC,UAA1CpC,CAAwDA,GAA1DA,CATRtF,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,UAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYuG,QAAA,EAAA,CAAE,MAAO,KAAAmB,UAAAnB,UAAT,CAAZ,CAND,CAAA,UAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYmB,QAAA,EAAA,CAAE,MAAO,KAAAvY,SAAA,CAAc,CAAd,CAAArC,KAAT,CAAZ,CAPD,CAAA,CAWPrK,EAAA,EAAc2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEXxP,GAAAjQ,EAAAiQ,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,eADvCzf,GAAA,CAAcyf,EAAd,CAAA,CAAoC,EAIhChhB,SADS2jB,GACE,CAACzhB,CAAD,CAAa6I,CAAb,CAAuB,CAC9B,CAAA,KAAA,CAAA,IAAA,CAAMlL,CAAAmC,IAAN,CAAgB+I,CAAhB,CACA,KAAA7I,GAAA,CAAkBA,CAClB,KAAA6I,SAAA,CAAgBA,CAHc,CADZ4Q,CAAA2F,CAAbqC,EAAarC,CAAAA,CAAAA,CAMtBJ;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,MAAPA,CAAcA,IAAAnW,SAAAwY,KAAArC,CAAmBA,IAAnBA,CAAdA,CAAsCA,GAAxCA,CAEf7iB,EAAA,EAAK2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAEFxP,GAAAmS,EAAAnS,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,MADvC2C,GAAA,CAAK3C,EAAL,CAAA,CAA2B,EAIvBhhB,SADS8e,GACE,CAAChU,CAAD,CAAasW,CAAb,CAAsB1X,CAAtB,CAA0BK,CAA1B,CAAqC,CAC5C,CAAA,KAAA,CAAA,IAAA,CAAMlK,CAAAif,WAAN,CACA,KAAAsC,QAAA,CAAeA,CACf,KAAAtW,WAAA,CAAkBA,CAClB,KAAAf,GAAA,CAAiBA,CAAjB,EAA8B,CAAA,CAC9B,KAAAL,GAAA,CAAgB,IAAN,EAAAA,CAAA,CFnVUmS,EAAA+H,EEmVV,CAAqD,QAAd,GAAA,MAAOla,EAAP,CAAyBA,CAAzB,CAA8BA,CAAA2H,IALnC,CADpBsK,CAAA2F,CAAnBxC,EAAmBwC,CAAAA,CAAAA,CAS5BJ,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CAAEA,MAAOA,aAAPA,CAAqBA,IAAAE,QAArBF,CAAiCA,IAAjCA,CAAsCA,IAAApW,WAAtCoW,CAAqDA,GAAvDA,CATRtF,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,UAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYuG,QAAA,EAAA,CAAE,MAAO,KAAArX,WAAAqX,UAAT,CAAZ,CARD,CAAA,CAWP9jB;CAAA,EAAW2iB,KAAAA,GAAAC,MAAAD,YAAAA,CAAsB,EAAtBA,CAERxP,GAAAsN,EAAAtN,UADCnT,EAAA,EAAA,GAAA,CAAO6jB,EAAA,CAAMjB,MAAAD,YAAN,CAAP,CAAmC,YADvClC,GAAA,CAAWkC,EAAX,CAAA,CAAiC,EAvUtBnhB,KAAAgkB,EAAAhkB,C,CC5DJikB,QAASA,GAAY,CAAC3B,CAAD,CAAY1I,CAAZ,CAAoB,CAC5C,MAAI,CAAC0I,CAAL,EAAkB4B,WAAAC,OAAA,CAAmBvK,CAAnB,CAAlB,CACWA,CADX,CAGOA,CAAA,WAAkB0I,EAAlB,CAA8B1I,CAA9B,CACAA,CAAD,EAAYsK,WAAAC,OAAA,CAAmBvK,CAAnB,CAAZ,CACI,IAAI0I,CAAJ,CAAc1I,CAAAtW,OAAd,CAA6BsW,CAAArW,WAA7B,CAAgDqW,CAAAoB,WAAhD,CAAoEsH,CAAA8B,kBAApE,CADJ,CAAyC9B,CAAAlC,KAAA,CAAexG,CAAf,EAAyB,EAAzB,CALH,CAU5CzZ,QADSkkB,GACE,CAACxb,CAAD,CAAO3E,CAAP,CAAerC,CAAf,CAAuBwM,CAAvB,CAAkC,CACzC,IAAAxF,KAAA,CAAYA,CACZ,KAAA3E,OAAA,CAAcogB,IAAAC,MAAA,CAAWD,IAAAE,IAAA,CAAStgB,CAAT,EAAmB,CAAnB,CAAsB,CAAtB,CAAX,CACd,KAAArC,OAAA,CAAcyiB,IAAAC,MAAA,CAAWD,IAAAE,IAAA,CAAS3iB,CAAT,EAAmB,CAAnB,CAAsB,CAAtB,CAAX,CACd,KAAA4iB,EAAA,CAAkBH,IAAAC,MAAA,CAAWD,IAAAE,IAAA,CAASnW,CAAT,EAAsB,CAAtB,CAA0B,EAA1B,CAAX,CAJuB,CAgB7CqW,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIL,EAAJK,CAAa7b,CAAb6b,CAAmBxgB,CAAnBwgB,CAA2B7iB,CAA3B6iB,CAAmCrW,CAAnCqW,CAD0EA,CAGrFC;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC9iB,CAAD8iB,CAASzgB,CAATygB,CAAiBA,CAClBA,MAAiBA,EAAVA,EAAAzgB,CAAAygB,CAAcA,IAAdA,CAAqBA,IAAAC,GAAAD,CAAmBA,IAAAD,MAAAC,CAAWA,IAAA9b,KAAX8b,CAAsBzgB,CAAtBygB,CAA8BA,IAAA9iB,OAA9B8iB,CAA4C9iB,CAA5C8iB,CAAoDA,EAAsBA,CAAtBA,GAAEA,IAAAF,EAAFE,CAApDA,CAA+EA,CAA/EA,CAAnBA,CAAsG9iB,CAAtG8iB,CAA8GzgB,CAA9GygB,CADVA,CAGtBC,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAQ/iB,CAAR+iB,CAAgB1gB,CAAhB0gB,CAAwBA,CACjCA,IAAIC,CAEJD,EAACC,CAADD,CAAOA,IAAAA,CAAK3kB,CAAA6kB,KAALF,CAAPA,IAAkCF,CAAAE,CAAM3kB,CAAA6kB,KAANF,CAAlCA,CAA2DA,IAAAG,GAAAH,CAAeC,CAAfD,CAAoB/iB,CAApB+iB,CAA4B1gB,CAA5B0gB,CAA3DA,CAEAA,EAACC,CAADD,CAAOA,IAAAA,CAAK3kB,CAAA6I,OAAL8b,CAAPA,IAAoCF,CAAAE,CAAM3kB,CAAA6I,OAAN8b,CAApCA,CAAiFC,CAS1EhS,SAAAmS,CAT+EnjB,CAS/EmjB,CAT+EnjB,CAS/EmjB,CATuF9gB,CASvF8gB,CAAgDA,CAAhDA,CATPJ,IAEKC,CAFLD,CAEWA,IAAAA,CAAK3kB,CAAAglB,KAALL,CAFXA,IAEsCF,CAAAE,CAAM3kB,CAAAglB,KAANL,CAFtCA,CAE+DA,IAAAG,GAAAH,CAAeC,CAAfD,CAAoB/iB,CAApB+iB,CAA4B1gB,CAA5B0gB,CAF/DA,CAGAA,OAAOF,EAR0BE,CAUrCG,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAAC/gB,CAAD+gB,CAAOljB,CAAPkjB,CAAe7gB,CAAf6gB,CAAuBA,CAC5BA,MAAO/gB,EAAA6O,SAAAkS,CAAcljB,CAAdkjB,CAAsBljB,CAAtBkjB,CAA+B7gB,CAA/B6gB,CADqBA,CAjC7BhJ;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,OAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASuF,QAAA,EAAA,CAAE,MAAO,KAAAzY,KAAA8T,EAAT,CAAT,CAPD,CAAA,WAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAauI,QAAA,EAAA,CAAE,MAAO,KAAA,CAAKjlB,CAAAklB,SAAL,CAAT,CAAb,CARD,CAAA,UASC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAY9W,QAAA,EAAA,CACZ,IAAIA,EAAY,IAAAoW,EAAhB,CACIS,CACe,GAAnB,GAAI7W,CAAJ,GAAyB6W,CAAzB,CAAsC,IAAA,CAAKjlB,CAAAklB,SAAL,CAAtC,IACI,IAAAV,EADJ,CACsBpW,CADtB,CACkC,IAAAnK,OADlC,CACgDoW,EAAA,CAAiB4K,CAAjB,CAA6B,IAAArjB,OAA7B,CAA0C,IAAAA,OAA1C,CAAwD,IAAAqC,OAAxD,CADhD,CAGA,OAAOmK,EANK,CAAZ,CATD,CAAA,CAyCHlO,SADSilB,EACE,CAACvc,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BlhB,CAA3B,CAAiCnC,CAAjC,CAAyCwM,CAAzC,CAAoD,CAC3D,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBrC,CAApB,CAA4BwM,CAA5B,CACA,KAAA,CAAKpO,CAAAglB,KAAL,CAAA,CAAwBhB,EAAA,CAAa,IAAA3B,UAAb,CAA6Bte,CAA7B,CACxB,KAAA,CAAK/D,CAAAklB,SAAL,CAAA,CAA4BlB,EAAA,CAAa3S,UAAb,CAAyB4T,CAAzB,CAH+B,CADrCpJ,CAAAuI,CAAjBe,CAAiBf,CAAAA,EAAAA,CAQ1BK;CAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB7b,CAArB6b,CAA2BxgB,CAA3BwgB,CAAmCA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAAnCA,CAA8DA,IAAAA,CAAKzkB,CAAAglB,KAALP,CAA9DA,CAAqF7iB,CAArF6iB,CAA6FrW,CAA7FqW,CAD0EA,CARlF3I,EAAA,OAAA,iBAAA,CAAA,CAAA,UAAA,CAAA,CAAA,OAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAA,CAAK3Z,CAAAglB,KAAL,CAAT,CAAT,CAND,CAAA,UAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAY3C,QAAA,EAAA,CAAE,MAAO,KAAAzZ,KAAAyZ,UAAT,CAAZ,CAPD,CAAA,CAYA,SAAM+C,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAuBvJ,CAAAsJ,CAAjBC,EAAiBD,CAAAA,CAAAA,CAC1BL,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAAC/gB,CAAD+gB,CAAOA,CAAEA,MAAO/gB,EAAT+gB,CAGhB5kB;QADSmlB,GACE,CAACzc,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BK,CAA3B,CAAyCvhB,CAAzC,CAA+CnC,CAA/C,CAAuDwM,CAAvD,CAAkE,CACzE,CAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgClhB,CAAhC,CAAsCnC,CAAtC,CAA8CwM,CAA9C,CACA,KAAA,CAAKpO,CAAA6I,OAAL,CAAA,CAA0Bmb,EAAA,CAAa7gB,UAAb,CAAyBmiB,CAAzB,CAF+C,CAD/CzJ,CAAAsJ,CAArBE,EAAqBF,CAAAA,CAAAA,CAO9BV,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIY,EAAJZ,CAAiB7b,CAAjB6b,CAAuBxgB,CAAvBwgB,CAA+BA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAA/BA,CAA0DA,IAAAA,CAAKzkB,CAAA6I,OAAL4b,CAA1DA,CAAmFA,IAAAA,CAAKzkB,CAAAglB,KAALP,CAAnFA,CAA0G7iB,CAA1G6iB,CAAkHrW,CAAlHqW,CAD0EA,CAPlF3I,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,OAKC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAA,CAAK3Z,CAAAglB,KAAL,CAAT,CAAT,CALD,CAAA,aAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAeM,QAAA,EAAA,CAAE,MAAO,KAAA,CAAKtlB,CAAA6I,OAAL,CAAT,CAAf,CAND,CAAA,CAYH3I;QADSqlB,GACE,CAAC3c,CAAD,CAAOoC,CAAP,CAAmBsW,CAAnB,CAA4B,CACnC,EAAA,KAAA,CAAA,IAAA,CAAM1Y,CAAN,CAAY0Y,CAAArd,OAAZ,CAA4Bqd,CAAA1f,OAA5B,CAA4C0f,CAAAkD,EAA5C,CACA,KAAAgB,GAAA,CAAgBlE,CAChB,KAAAmE,GAAA,CAAmBza,CAHgB,CADP6Q,CAAAuI,CAAvBmB,EAAuBnB,CAAAA,EAAAA,CAUhCK,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDA,CAA5CxgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CACxBmC,EAAAA,CAAO0gB,IAAAgB,GAAA1hB,KAAA0gB,MAAAA,CAA4B7b,CAAAoC,WAA5ByZ,CACbA,OAAOA,KAAIc,EAAJd,CAAmBA,IAAA7b,KAAnB6b,CAA8BA,IAAAgB,GAAAhB,MAAAA,CAAuB1gB,CAAvB0gB,CAA9BA,CAA4DA,IAAAe,GAAAd,MAAAD,CAAoB7iB,CAApB6iB,CAA6BA,IAAA7iB,OAA7B6iB,CAA0CxgB,CAA1CwgB,CAA5DA,CAF6CA,CAIxDE,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAA0BA,CACnCF,CAAAxgB,OAAA0gB,CAAeF,CAAAe,GAAAvhB,OACfwgB,EAAAD,EAAAG,CAAmBF,CAAAe,GAAAhB,EACnBG,OAAOF,EAH4BE,CAdpC7I;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,QAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAUwF,QAAA,EAAA,CAAE,MAAO,KAAAkE,GAAT,CAAV,CAND,CAAA,WAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAaxa,QAAA,EAAA,CAAE,MAAO,KAAAya,GAAT,CAAb,CAPD,CAAA,UAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYrX,QAAA,EAAA,CAAE,MAAO,KAAAoX,GAAApX,UAAT,CAAZ,CARD,CAAA,WASC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAa6W,QAAA,EAAA,CAAE,MAAO,KAAAO,GAAAP,WAAT,CAAb,CATD,CAAA,CAqBH/kB,SADSwlB,GACE,CAAC9c,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BU,CAA3B,CAAsC/jB,CAAtC,CAA8CwM,CAA9C,CAAyD,CAChE,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBrC,CAApB,CAA4BwM,CAA5B,CACA,KAAAuX,UAAA,CAAiBA,CACjB,KAAA,CAAK3lB,CAAAklB,SAAL,CAAA,CAA4BlB,EAAA,CAAa3S,UAAb,CAAyB4T,CAAzB,CAHoC,CADxCpJ,CAAAuI,CAAnBsB,EAAmBtB,CAAAA,EAAAA,CAM5BK;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIiB,EAAJjB,CAAe7b,CAAf6b,CAAqBxgB,CAArBwgB,CAA6BA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAA7BA,CAAwDA,IAAAkB,UAAxDlB,CAAwE7iB,CAAxE6iB,CAAgFrW,CAAhFqW,CAD0EA,CAGrFE,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAQ/iB,CAAR+iB,CAAgB1gB,CAAhB0gB,CAAwBA,CAC5BA,IAAAA,CAAK3kB,CAAA6I,OAAL8b,CAALA,GACIF,CAAAkB,UADJhB,CACsBA,IAAAgB,UAAApJ,IAAAoI,CAAmBA,QAAAA,CAACiB,CAADjB,CAAWA,CAAAA,MAAAiB,EAAAlB,MAAAC,CAAY/iB,CAAZ+iB,CAAoB1gB,CAApB0gB,CAAAA,CAA9BA,CADtBA,CAGAA,OAAOA,GAAAA,UAAAA,GAAAA,KAAAA,CAAAA,IAAAA,CAAoBF,CAApBE,CAA2B/iB,CAA3B+iB,CAAmC1gB,CAAnC0gB,CAJ0BA,CAQrCzkB,SADS2lB,GACE,CAACjd,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2Ba,CAA3B,CAA2ClkB,CAA3C,CAAmDwM,CAAnD,CAA8D,CACrE,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgC,CAACa,CAAD,CAAhC,CAAkDlkB,CAAlD,CAA0DwM,CAA1D,CACA,KAAA2X,GAAA,CAAmBD,CAFkD,CADvCjK,CAAA6J,CAAzBG,EAAyBH,CAAAA,EAAAA,CAA/B5J,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,OAKC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAAoM,GAAT,CAAT,CALD,CAAA,CAQH7lB;QADS8lB,GACE,CAACpd,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BK,CAA3B,CAAyCQ,CAAzC,CAAyDlkB,CAAzD,CAAiEwM,CAAjE,CAA4E,CACnF,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgCa,CAAhC,CAAgDlkB,CAAhD,CAAwDwM,CAAxD,CACA,KAAA,CAAKpO,CAAA6I,OAAL,CAAA,CAA0Bmb,EAAA,CAAa7gB,UAAb,CAAyBmiB,CAAzB,CAFyD,CAD7DzJ,CAAAgK,CAAjBG,EAAiBH,CAAAA,EAAAA,CAM1BpB,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIuB,EAAJvB,CAAa7b,CAAb6b,CAAmBxgB,CAAnBwgB,CAA2BA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAA3BA,CAAsDA,IAAAA,CAAKzkB,CAAA6I,OAAL4b,CAAtDA,CAA+EA,IAAAsB,GAA/EtB,CAAiG7iB,CAAjG6iB,CAAyGrW,CAAzGqW,CAD0EA,CANlF3I,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,aAKC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAewJ,QAAA,EAAA,CAAE,MAAO,KAAA,CAAKtlB,CAAA6I,OAAL,CAAT,CAAf,CALD,CAAA,CAWH3I;QADS+lB,GACE,CAACrd,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BliB,CAA3B,CAAoC4iB,CAApC,CAA+C/jB,CAA/C,CAAuDwM,CAAvD,CAAkE,CACzE,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgCU,CAAhC,CAA2C/jB,CAA3C,CAAmDwM,CAAnD,CACA,KAAA,CAAKpO,CAAA6kB,KAAL,CAAA,CAAwBb,EAAA,CAAazB,SAAb,CAAwBxf,CAAxB,CACxB,KAAAmjB,GAAA,CAA0Btd,CAAA7F,QAAA6Y,OAAA,CAAoB,QAAA,CAACsK,CAAD,CAAqB7E,CAArB,CAA6B8E,CAA7B,CAAqC,CAC/E,OAAQD,CAAA,CAAmB7E,CAAnB,CAAR,CAAqC8E,CAArC,GAA6CD,CAA7C,EAAmEA,CADY,CAAzD,CAEvB1F,MAAAC,OAAA,CAAc,IAAd,CAFuB,CAH+C,CADlD5E,CAAA6J,CAAlBO,EAAkBP,CAAAA,EAAAA,CAS3BjB,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAIwB,EAAJxB,CAAc7b,CAAd6b,CAAoBxgB,CAApBwgB,CAA4BA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAA5BA,CAAuDA,IAAAA,CAAKzkB,CAAA6kB,KAALJ,CAAvDA,CAA8EA,IAAAkB,UAA9ElB,CAA8F7iB,CAA9F6iB,CAAsGrW,CAAtGqW,CAD0EA,CATlF3I,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,QAQC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAU/Y,QAAA,EAAA,CAAE,MAAO,KAAA,CAAK/C,CAAA6kB,KAAL,CAAT,CAAV,CARD,CAAA,CAcH3kB;QADSkmB,GACE,CAACxd,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BliB,CAA3B,CAAoC4iB,CAApC,CAA+C/jB,CAA/C,CAAuDwM,CAAvD,CAAkE,CACzE,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgCliB,CAAhC,CAAyC4iB,CAAzC,CAAoD/jB,CAApD,CAA4DwM,CAA5D,CADyE,CAD5CyN,CAAAoK,CAAxBG,EAAwBH,CAAAA,EAAAA,CAIjCxB,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAI2B,EAAJ3B,CAAoB7b,CAApB6b,CAA0BxgB,CAA1BwgB,CAAkCA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAAlCA,CAA6DA,IAAAA,CAAKzkB,CAAA6kB,KAALJ,CAA7DA,CAAoFA,IAAAkB,UAApFlB,CAAoG7iB,CAApG6iB,CAA4GrW,CAA5GqW,CAD0EA,CAMrFvkB,SAFSmmB,GAEE,CAACzd,CAAD,CAAO3E,CAAP,CAAeghB,CAAf,CAA2BliB,CAA3B,CAAoCuiB,CAApC,CAAkDK,CAAlD,CAA6D/jB,CAA7D,CAAqEwM,CAArE,CAAgF,CACvF,EAAA,KAAA,CAAA,IAAA,CAAMxF,CAAN,CAAY3E,CAAZ,CAAoBghB,CAApB,CAAgCliB,CAAhC,CAAyC4iB,CAAzC,CAAoD/jB,CAApD,CAA4DwM,CAA5D,CACA,KAAA,CAAKpO,CAAA6I,OAAL,CAAA,CAA0Bmb,EAAA,CAAa7gB,UAAb,CAAyBmiB,CAAzB,CAF6D,CAF3DzJ,CAAAoK,CAAvBI,EAAuBJ,CAAAA,EAAAA,CAMhCxB;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAI4B,EAAJ5B,CAAmB7b,CAAnB6b,CAAyBxgB,CAAzBwgB,CAAiCA,IAAAA,CAAKzkB,CAAAklB,SAALT,CAAjCA,CAA4DA,IAAAA,CAAKzkB,CAAA6kB,KAALJ,CAA5DA,CAAmFA,IAAAA,CAAKzkB,CAAA6I,OAAL4b,CAAnFA,CAA4GA,IAAAkB,UAA5GlB,CAA4H7iB,CAA5H6iB,CAAoIrW,CAApIqW,CAD0EA,CANlF3I,EAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,aACC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAewJ,QAAA,EAAA,CAAE,MAAO,KAAA,CAAKtlB,CAAA6I,OAAL,CAAT,CAAf,CADD,CAAA,CAWH3I,SADSomB,GACE,CAAC1d,CAAD,CAAO3E,CAAP,CAAesiB,CAAf,CAA6B3kB,CAA7B,CAAqCwM,CAArC,CAAgDoY,CAAhD,CAA8D,CACrE,EAAA,KAAA,CAAA,IAAA,CAAM5d,CAAN,CAAY3E,CAAZ,CAAoBrC,CAApB,CAA4BwM,CAA5B,CACA,KAAAqY,GAAA,CAAqBF,CACrB,KAAAG,GAAA,CAAqBF,CAArB,EAAqCG,EAAA,CAA2BJ,CAA3B,CAHgC,CAD5C1K,CAAAuI,CAApBkC,EAAoBlC,CAAAA,EAAAA,CAkB7BK;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC7b,CAAD6b,CAAOxgB,CAAPwgB,CAA6B7iB,CAA7B6iB,CAAmDrW,CAAnDqW,CAAgFA,CAAzExgB,CAAAwgB,CAAAA,IAAAA,EAAAA,GAAAxgB,CAAAwgB,CAASA,IAAAxgB,OAATwgB,CAAAxgB,CAAsBrC,EAAA6iB,CAAAA,IAAAA,EAAAA,GAAA7iB,CAAA6iB,CAASA,IAAA7iB,OAAT6iB,CAAA7iB,CAAsBwM,EAAAqW,CAAAA,IAAAA,EAAAA,GAAArW,CAAAqW,CAAYA,IAAAD,EAAZC,CAAArW,CACpDqW,OAAOA,KAAI6B,EAAJ7B,CAAgB7b,CAAhB6b,CAAsBxgB,CAAtBwgB,CAA8BA,IAAAgC,GAAAlK,IAAAkI,CAAuBA,QAAAA,CAACmC,CAADnC,CAASA,CAAAA,MAAAmC,EAAAnC,MAAAA,CAAUmC,CAAA7iB,KAAA0gB,MAAAA,CAAe7b,CAAf6b,CAAVA,CAAAA,CAAhCA,CAA9BA,CAAgG7iB,CAAhG6iB,CAAwGrW,CAAxGqW,CAAmHA,IAAAiC,GAAnHjC,CAD0EA,CAGrFE,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAQ/iB,CAAR+iB,CAAgB1gB,CAAhB0gB,CAAwBA,CAIjCA,IAHAA,IAAMkC,EAASlC,IAAA8B,GAAf9B,CACMmC,EAAUnC,IAAA+B,GADhB/B,CAEMoC,EAAcpC,EAFpBA,CAGSqC,EAAcrC,EAHvBA,CAG0BsC,EAAcJ,CAAA5iB,OAAxC0gB,CAAuDA,EAAEqC,CAAzDrC,CAAsEsC,CAAtEtC,CAAAA,CAAoFA,CAChFA,IAAMiB,EAAQiB,CAAAlC,CAAOqC,CAAPrC,CAAdA,CACMuC,EAActB,CAAA3hB,OADpB0gB,CAEMwC,EAAcL,CAAAnC,CAAQqC,CAARrC,CAEpBA,IAAIA,EAAAwC,CAAAxC,EAAe/iB,CAAf+iB,CAAwB1gB,CAAxB0gB,EAIA/iB,CAJA+iB,EAIUwC,CAJVxC,CAIwBuC,CAJxBvC,CAAJA,CAQAA,GAAIwC,CAAJxC,EAAmB/iB,CAAnB+iB,EAA8BwC,CAA9BxC,CAA4CuC,CAA5CvC,EAA4D/iB,CAA5D+iB,CAAqE1gB,CAArE0gB,CACIoC,CAAA/Q,KAAA2O,CAAiBiB,CAAjBjB,CADJA,KAAAA,CAKAA,IAAM5K,EAAQsK,IAAAE,IAAAI,CAASA,CAATA,CAAY/iB,CAAZ+iB,CAAqBwC,CAArBxC,CAEdoC,EAAA/Q,KAAA2O,CAAiBiB,CAAAlB,MAAAC,CAAY5K,CAAZ4K,CADL5K,CACK4K,CADGN,IAAA+C,IAAAzC,CAASuC,CAATvC,CAAuB5K,CAAvB4K,CAA+B/iB,CAA/B+iB,CAAwC1gB,CAAxC0gB,CAAkDwC,CAAlDxC,CACHA,CAAjBA,CAPAA,CAbgFA,CAsBpFF,CAAAgC,GAAA9B,CAAsBoC,CACtBtC,EAAAiC,GAAA/B,CAAsBgC,EAAAhC,CAA2BoC,CAA3BpC,CACtBA,OAAOF,EA5B0BE,CA8BrC0C;QAAOA,GAAcA,CAACC,CAADD,CAAeA,CAEhCA,IADAA,IAAME,EAAeF,IAAI5E,WAAJ4E,CAAgBC,CAAArjB,OAAhBojB,CAAsCA,CAAtCA,CAArBA,CACSrkB,EAAQqkB,CADjBA,CACoBpjB,EAASsjB,CAAAtjB,OAD7BojB,CACkDF,EAAcI,CAAAF,CAAaA,CAAbA,CAAdF,CAAgCE,CAAlFA,CAAqFA,EAAErkB,CAAvFqkB,CAA+FpjB,CAA/FojB,CAAAA,CACIE,CAAAF,CAAarkB,CAAbqkB,CAAAA,CAAuBF,CAAvBE,EAAsCC,CAAAD,CAAarkB,CAAbqkB,CAAqBA,CAArBA,CAAApjB,OAE1CojB,OAAOE,EALyBF,CAnDjCvL,CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,EAMC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAeyK,QAAA,EAAA,CAAE,MAAO,KAAAE,GAAT,CAAf,CAND,CAAA,GAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAeD,QAAA,EAAA,CAAE,MAAO,KAAAE,GAAT,CAAf,CAPD,CAAA,UAWC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAYtY,QAAA,EAAA,CACZ,IAAIA,EAAY,IAAAoW,EACG,GAAnB,GAAIpW,CAAJ,GACI,IAAAoW,EADJ,CACsBpW,CADtB,CACkC,IAAAqY,GAAA7K,OAAA,CAA0B,QAAA,CAAC2E,CAAD,CAAI7H,CAAJ,CAAU,CAAA,MAAA6H,EAAA,CAAI7H,CAAAtK,UAAJ,CAApC,CAAqD,CAArD,CADlC,CAGA,OAAOA,EALK,CAAZ,CAXD,CAAA,C,CC/JHlO,QADSsnB,GACE,CAACzjB,CAAD,CAAO,CACd,IAAAwiB,EAAA,CAAoBxiB,CAAAwiB,EACpB,KAAAC,GAAA,CAAoBziB,CAAAyiB,GAFN,CAIlB/B,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAI+C,EAAJ/C,CAAgB1gB,CAAhB0gB,CADCA,CAGZlmB,EAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACI,EAAA,IADJ,CACjB,CADiB,CACjB,CADiB,CACNtI,CADM,OAAA/E,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACjB,CAAA,CAAAnb,CAAA,CAAqB,CAAAsnB,EAArB,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EADiB,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CACjB,GAAA,CAAA,KAAA,CAAA,MAAA,EAAA,EAAA,CAAA,CAAA,CAAWpH,EAAX,CAAA,CAAA,MACI,OAAA,GAAA,CAAA,CAAA,CAAOA,CAAP,CAAA,CAAA,CAFa,CACjB,CAAA,CAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,CADiB,CAAA,CAAA,CAKrBuI,EAAAA,CAAAA,EAAAA,UAAAC,EAAAD,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAeA,EAARA,CAAA1kB,CAAA0kB,CAAYA,IAAZA,CACDA,CAACA,IAAAE,EAADF,GAAoBA,IAAAE,EAApBF,CAAqCA,EAArCA,GAA0C1kB,CAA1C0kB,CADCA,GAEEA,IAAAE,EAAAF,CAAe1kB,CAAf0kB,CAFFA,CAE0BG,EAAAH,MAAAA,CAAAI,CAAAJ,CAAAK,CAAAL,CAAiBA,IAAAnB,EAAAhK,IAAAmL,CACjCA,QAAAA,CAACM,CAADN,CAAWA,CAAAA,MAAAM,EAAAN,WAAAA,CAAiB1kB,CAAjB0kB,CAAAA,CADsBA,CAAjBA,CAAAA,CAF1BA,CADOA,CAMlBO;CAAAC,QAAAA,CAAAA,QAAOA,CAACllB,CAADklB,CAAQA,CAIXA,IAJWA,IAEPpB,EAAUoB,IAAA1B,GAFH0B,CAEsBtN,EAAMsN,CAF5BA,CAGP5N,EAAM4N,CAHCA,CAGEC,CAHFD,CAGW3N,EAAMuM,CAAA7iB,OAANsW,CAAuB2N,CAC7CA,CAAOllB,CAAPklB,CAAepB,CAAAoB,CAAQ3N,CAAR2N,CAAfA,EAA+BllB,CAA/BklB,GAAyCtN,CAAzCsN,CAA+CpB,CAAAoB,CAAQ5N,CAAR4N,CAA/CA,EAAAA,CAA8DA,CAC1DA,GAAI5N,CAAJ4N,CAAUA,CAAVA,GAAgB3N,CAAhB2N,CACIA,MAAOA,KAAA3B,EAAA2B,CAAkB5N,CAAlB4N,CAAAA,QAAAA,CAA+BllB,CAA/BklB,CAAuCtN,CAAvCsN,CAEXC,EAAAD,CAAM5N,CAAN4N,EAAc3N,CAAd2N,CAAoB5N,CAApB4N,EAA2BA,CAA3BA,CAAgCA,CAChCllB,EAAAklB,EAASpB,CAAAoB,CAAQC,CAARD,CAATA,CAAyB5N,CAAzB4N,CAA+BC,CAA/BD,CAAuC3N,CAAvC2N,CAA6CC,CALaD,CAO9DA,MAAOA,CAAAA,CAXIA,CAafE,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CAIPA,IAJOA,IAEH6M,EAAU7M,IAAAuM,GAFPvM,CAE0BW,EAAMX,CAFhCA,CAGHK,EAAML,CAHHA,CAGMkO,CAHNlO,CAGeM,EAAMuM,CAAA7iB,OAANsW,CAAuBN,CAC7CA,CAAOjX,CAAPiX,CAAe6M,CAAA7M,CAAQM,CAARN,CAAfA,EAA+BjX,CAA/BiX,GAAyCW,CAAzCX,CAA+C6M,CAAA7M,CAAQK,CAARL,CAA/CA,EAAAA,CAA8DA,CAC1DA,GAAIK,CAAJL,CAAUA,CAAVA,GAAgBM,CAAhBN,CACIA,MAAOA,KAAAsM,EAAAtM,CAAkBK,CAAlBL,CAAAA,IAAAA,CAA2BjX,CAA3BiX,CAAmCW,CAAnCX,CAEXkO,EAAAlO,CAAMK,CAANL,EAAcM,CAAdN,CAAoBK,CAApBL,EAA2BA,CAA3BA,CAAgCA,CAChCjX,EAAAiX,EAAS6M,CAAA7M,CAAQkO,CAARlO,CAATA,CAAyBK,CAAzBL,CAA+BkO,CAA/BlO,CAAuCM,CAAvCN,CAA6CkO,CALalO,CAO9DA,MAAOA,KAXAA,CAaXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CAIdA,IAJcA,IAEVwT,EAAUxT,IAAAkT,GAFAlT,CAEmBsH,EAAMtH,CAFzBA,CAGVgH,EAAMhH,CAHIA,CAGD6U,CAHC7U,CAGQiH,EAAMuM,CAAA7iB,OAANsW,CAAuBjH,CAC7CA,CAAOtQ,CAAPsQ,CAAewT,CAAAxT,CAAQiH,CAARjH,CAAfA,EAA+BtQ,CAA/BsQ,GAAyCsH,CAAzCtH,CAA+CwT,CAAAxT,CAAQgH,CAARhH,CAA/CA,EAAAA,CAA8DA,CAC1DA,GAAIgH,CAAJhH,CAAUA,CAAVA,GAAgBiH,CAAhBjH,CACIA,MAAOA,KAAAiT,EAAAjT,CAAkBgH,CAAlBhH,CAAAA,IAAAA,CAA2BtQ,CAA3BsQ,CAAmCsH,CAAnCtH,CAAwClP,CAAxCkP,CAEX6U,EAAA7U,CAAMgH,CAANhH,EAAciH,CAAdjH,CAAoBgH,CAApBhH,EAA2BA,CAA3BA,CAAgCA,CAChCtQ,EAAAsQ,EAASwT,CAAAxT,CAAQ6U,CAAR7U,CAATA,CAAyBgH,CAAzBhH,CAA+B6U,CAA/B7U,CAAuCiH,CAAvCjH,CAA6C6U,CALa7U,CAJhDA,CAYlBgV;CAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,IAAM1B,EAAS0B,IAAAhC,EAAfgC,CACMC,EAAY3B,CAAA5iB,OAClBskB,IAAkBA,CAAlBA,GAAIC,CAAJD,CACIA,MAAO1B,EAAA0B,CAAOA,CAAPA,CAAAA,QAAAA,EAIXA,KAFAA,IAAIE,EAAcnG,KAAJiG,CAAUC,CAAVD,CAAdA,CACIG,EAAaH,CADjBA,CACoBlG,EAAYC,KADhCiG,CAESvlB,EAASulB,EAAlBA,CAAqBA,EAAEvlB,CAAvBulB,CAA+BC,CAA/BD,CAAAA,CAA2CA,CACvCA,IAAII,EAAS9B,CAAA0B,CAAOvlB,CAAPulB,CAAAA,QAAAA,EACbG,EAAAH,EAActkB,CAACwkB,CAAAF,CAAQvlB,CAARulB,CAADtkB,CAAkB0kB,CAAlB1kB,QACVoe,EAAJkG,GAAkBI,CAAAzoB,YAAlBqoB,GACIlG,CADJkG,CACgBI,CAAAzoB,YADhBqoB,CAHuCA,CAOvCK,CAAAA,CAASL,IAAIlG,CAAJkG,CAAcG,CAAdH,CACTM,EAAAA,CAAYxG,CAAAkG,GAAcjG,KAAdiG,CAAsBO,EAAtBP,CAAiCQ,EACxC/lB,EAAAA,CAASulB,EAAlBA,KAAqB3mB,CAArB2mB,CAA8BA,CAA9BA,CAAiCA,EAAEvlB,CAAnCulB,CAA2CC,CAA3CD,CAAAA,CACI3mB,CAAA2mB,CAASM,CAAAN,CAAUE,CAAAF,CAAQvlB,CAARulB,CAAVA,CAA0BK,CAA1BL,CAAkC3mB,CAAlC2mB,CAEbA,OAAOK,EApBDL,CAsBVS,EAAAC,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAAAA,IACRrnB,EAASqnB,CADDA,CACI1Q,CADJ0Q,CAEZA,EAAAhqB,CAAAgqB,CAAqBA,IAAA1C,EAArB0C,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAwCA,CAAxCA,IAAW9J,EAAX8J,CAAAA,MACI1Q,EAAA0Q,CAAS9J,CAAA8J,QAAAA,CAAeC,CAAfD,CACTA,IAAgBA,EAAhBA,GAAI1Q,CAAJ0Q,CACIA,MAAO1Q,EAAP0Q,CAAgBrnB,CAEpBA,EAAAqnB,EAAU9J,CAAAlb,OAL0BglB,CAOxCA,MAAQA,EATIA,CAYpBF,SAASA,GAAa,CAACJ,CAAD,CAASC,CAAT,CAAiB5lB,CAAjB,CAAwB,CAC1C,MAAO4lB,EAAAtV,IAAA,CAAWqV,CAAX,CAAmB3lB,CAAnB,CAAP,EAAoCA,CAApC,CAA4C2lB,CAAA1kB,OADF;AAG9C6kB,QAASA,GAAQ,CAACH,CAAD,CAASC,CAAT,CAAiB5lB,CAAjB,CAAwB,CACxBmmB,EAAAnmB,CACb,KAFqC,IACbomB,EAAU,EADG,CACAC,EAASV,CAAA1kB,OAC9C,CAAO,EAAEmlB,CAAT,CAAkBC,CAAlB,CAAA,CACIT,CAAA,CAAO,EAAEO,CAAT,CAAA,CAAmBR,CAAA,CAAOS,CAAP,CAEvB,OAAOD,EAL8B,C,CC7FrCjpB,QADSopB,GACE,CAACvlB,CAAD,CAAO8W,CAAP,CAAa,CACpB,IAAAA,KAAA,CAAYA,CACZ,KAAA5W,OAAA,CAAcF,CAAAE,OACd,KAAArC,OAAA,CAAcmC,CAAAnC,OACd,KAAAqjB,WAAA,CAAkBlhB,CAAAkhB,WAJE,CASxBR,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAI6E,EAAJ7E,CAAiB1gB,CAAjB0gB,CAAuBA,IAAA5J,KAAA4J,MAAAA,CAAgB1gB,CAAhB0gB,CAAvBA,CADCA,CAGZ6D,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CADDA,CAGVS,EAAAC,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEZA,IADAA,IAAIjmB,EAAQimB,CAAZA,CACAA,EAAAhqB,CAAAgqB,CAAkBA,IAAlBA,CADAA,CACAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAwBA,CACpBA,GADJA,CAAAA,MACIA,GAAcC,CAAdD,CACIA,MAAOjmB,EAEXimB,GAAEjmB,CAJkBimB,CAMxBA,MAAQA,EARIA,CAUhBhB,EAAAC,QAAAA,CAAAA,QAAOA,CAACllB,CAADklB,CAAQA,CACLsB,CAAAA,CAAetB,IAAAtmB,OAAf4nB,CAA6BxmB,CACnCklB,ONtByB,EMsBzBA,IAA4BA,IAAAjD,WAAAiD,CAAgBsB,CAAhBtB,EAAgCA,CAAhCA,CAA5BA,CNtBW,CMsBXA,EAAgEsB,CAAhEtB,CAA+EA,CAA/EA,CAFWA,CAIfE;CAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,IAAMuP,EAAevP,IAAArY,OAAf4nB,CAA6BxmB,CACnCiX,OAAOA,KAAAwP,GAAAxP,CAAiBA,IAAAY,KAAjBZ,CAA4BjX,CAA5BiX,CAAmCA,IAAAgL,WAAAhL,CAAgBuP,CAAhBvP,EAAgCA,CAAhCA,CAAnCA,CAAuEuP,CAAvEvP,CAAsFA,CAAtFA,CAFAA,CAIXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACVmG,EAAAnG,CAAQA,IAAA2R,WAAR3R,CAAyBA,IAAA1R,OAAzB0R,CAAuCtQ,CAAvCsQ,CAAuDA,IAAvDA,EAA8ClP,CAA9CkP,CAAJA,EACIA,IAAAuH,KAAAvH,IAAAA,CAActQ,CAAdsQ,CAAqBlP,CAArBkP,CAFUA,CAKlBqU,EAAAD,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAOA,KAAA7M,KAAA6M,WAAAA,CAAqB1kB,CAArB0kB,CADOA,CAGlBnpB,EAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAChB,MAAO3N,GAAA,CAAY,IAAAmL,WAAZ,CAA6B,IAAArjB,OAA7B,CAA0C,IAAAqC,OAA1C,CAAuD,IAAA4W,KAAvD,CAAkE,IAAA4O,GAAlE,CADS,CAGpBA,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAC5O,CAAD4O,CAAOzmB,CAAPymB,CAAcnQ,CAAdmQ,CAAoBlQ,CAApBkQ,CAAyBA,CAChCA,MNxCyB,EMwClBA,IAAqBnQ,CAArBmQ,CNxCI,CMwCJA,EAA2BlQ,CAA3BkQ,EAAkC5O,CAAAZ,IAAAwP,CAASzmB,CAATymB,CAAlCA,CAAoDA,IAD3BA,CA7CjC3N;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,KAOC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAOhJ,QAAA,EAAA,CACP,MAAO,KAAA+H,KAAA/H,KAAP,EAAyB,CADlB,CAAP,CAPD,CAAA,C,CCAH5S,QADSwpB,GACE,CAAC1e,CAAD,CAAasW,CAAb,CAAsB,CAC7B,IAAAA,QAAA,CAAeA,CACf,KAAAtW,WAAA,CAAkBA,CAFW,CAIjCyZ,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIiF,EAAJjF,CAAmB1gB,CAAAiH,WAAnByZ,CAAoCA,IAAAnD,QAAAmD,MAAAA,CAAmB1gB,CAAAud,QAAnBmD,CAApCA,CADCA,CAGZwD,EAAAC,QAAAA,CAAAA,QAAOA,CAACllB,CAADklB,CAAQA,CACXA,MAAOA,KAAA5G,QAAA4G,QAAAA,CAAqBllB,CAArBklB,CADIA,CAGfE,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAjP,WAAAiP,IAAAA,CAAoBA,IAAAqH,QAAArH,IAAAA,CAAiBjX,CAAjBiX,CAApBA,CADAA,CAGXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,IAAAtI,WAAAsI,IAAAA,CAAoBA,IAAAgO,QAAArH,IAAA3G,CAAiBtQ,CAAjBsQ,CAApBA,CAA6ClP,CAA7CkP,CADcA,CAGlBgV,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CADDA,CAGVhqB,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACF,EAAA,IADE,CACX9N,CADW,CACe2H,CADf,CAERte,CAFQ,CAEI4W,CAFJ,OAAAQ,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACXT,CACeC,CADN,CAAA5O,WACM4O,CADW0H,CACX1H,CADqB,CAAA0H,QACrB1H,CAAZ5W,CAAY4W,CAAH,EAAGA,CAAAA,CAAAA,CAAI0H,CAAArd,OAFR,CAEjB,OAAyC,EAAEjB,CAA3C,CAAmD4W,CAAnD,CACI,CAAA,CAAA,CAAA,CAAMD,CAAAM,IAAA,CAAWqH,CAAArH,IAAA,CAAYjX,CAAZ,CAAX,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAFiB,CAAA,CAAA,CAMrBimB,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEN9f,CAAAA,CAAM8f,IAAAje,WAAAie,QAAAA,CAAwBC,CAAxBD,CACZA,OAAaA,EAAbA,GAAI9f,CAAJ8f,CACW9f,CADX8f,CAIOA,IAAA3H,QAAA2H,QAAAA,CAAqB9f,CAArB8f,CAPKA,C,CCnBpBU,QAASA,GAAY,CAACC,CAAD,CAAI,CACvB,GAAUC,IAAAA,EAAV,GAAID,CAAJ,CAAqB,MAAO,EAC5B,IAAIA,CAAJ,GAAUpJ,MAAA,CAAOoJ,CAAP,CAAV,CAAqB,MAAOA,EAC5B,MAAME,UAAA,CAAU,0CAAV,CAAN,CAHuB,CAmIzBC,QAASA,GAAM,CAACC,CAAD,CAAS,CAEtB,IAAAA,GAAA,CAAc,EAAAtF,MAAAuF,KAAA,CAAcD,CAAd,CAFQ,CAKxBD,EAAArY,UAAA,CAAmB,CAIjBwY,YAAaA,QAAQ,EAAG,CACtB,MAAO,CAAC,IAAAF,GAAA/lB,OADc,CAJP,CAgBhBkmB,KAAMA,QAAQ,EAAG,CAChB,MAAK,KAAAH,GAAA/lB,OAAL,CAEQ,IAAA+lB,GAAAI,MAAA,EAFR,CA/BqBC,EA8BL,CAhBD,CA8CjBrU,KAAMA,QAAQ,CAACsU,CAAD,CAAQ,CACpB,GAAIhI,KAAAiI,QAAA,CAAcD,CAAd,CAAJ,CAEE,IAAA,CAD0CA,CACnCrmB,OAAP,CAAA,CACE,IAAA+lB,GAAAhU,KAAA,CAFwCsU,CAEvBF,MAAA,EAAjB,CAHJ,KAKE,KAAAJ,GAAAhU,KAAA,CAAiBsU,CAAjB,CANkB,CA9CL,CAuEnBE,SAASA,GAAY,CAACC,CAAD,CAAwB,CAC3C,GAAIA,CAAJ,CACE,KAAMX,UAAA,CAAU,eAAV,CAAN,CACF,MAAyB,MAHkB;AA4C7CY,QAASA,GAAW,CAACC,CAAD,CAAWC,CAAX,CAAoB,CACtC,GAAI,EAAE,IAAF,WAAkBF,GAAlB,CAAJ,CACE,MAAO,KAAIA,EAAJ,CAAgBC,CAAhB,CAA0BC,CAA1B,CAETD,EAAA,CAAwBd,IAAAA,EAAb,GAAAc,CAAA,CAAyB/R,MAAA,CAAO+R,CAAP,CAAAE,YAAA,EAAzB,CAdwBC,OAenC,IAfmCA,OAenC,GAAIH,CAAJ,CACE,KAAUzX,MAAJ,CAAU,iDAAV,CAAN,CAEF0X,CAAA,CAAUjB,EAAA,CAAaiB,CAAb,CAKV,KAAAG,GAAA,CAFA,IAAAC,EAEA,CAFkB,CAAA,CAIlB,KAAAC,GAAA,CAAgB,IAEhB,KAAAC,GAAA,CAAc,CAAA,CAAQN,CAAA,MAEtB,KAAAO,GAAA,CAAkB,CAAA,CAAQP,CAAA,UAE1BpK,OAAA4K,eAAA,CAAsB,IAAtB,CAA4B,UAA5B,CAAwC,CAAChnB,MAAO,OAAR,CAAxC,CACAoc,OAAA4K,eAAA,CAAsB,IAAtB,CAA4B,OAA5B,CAAqC,CAAChnB,MAAO,IAAA8mB,GAAR,CAArC,CACA1K,OAAA4K,eAAA,CAAsB,IAAtB,CAA4B,WAA5B,CAAyC,CAAChnB,MAAO,IAAA+mB,GAAR,CAAzC,CAvBsC;AA0BxCT,EAAAhZ,UAAA,CAAwB,CAMtB2Z,OAAQA,QAAe,CAACC,CAAD,CAAQV,CAAR,CAAiB,CAGpCxnB,CAAA,CADmB,QAArB,GAAI,MAAOkoB,EAAX,EAAiCA,CAAjC,WAAkDrH,YAAlD,CACU,IAAI5S,UAAJ,CAAeia,CAAf,CADV,CAE4B,QAArB,GAAI,MAAOA,EAAX,EAAiC,QAAjC,EAA6CA,EAA7C,EACIA,CAAAjoB,OADJ,WAC4B4gB,YAD5B,CAEG,IAAI5S,UAAJ,CAAeia,CAAAjoB,OAAf,CACeioB,CAAAhoB,WADf,CAEegoB,CAAAvQ,WAFf,CAFH,CAMG,IAAI1J,UAAJ,CAAe,CAAf,CAGVuZ,EAAA,CAAUjB,EAAA,CAAaiB,CAAb,CAEL,KAAAI,EAAL,GACE,IAAAC,GACA,CADgB,IAAIM,EAAJ,CAAgB,CAACd,MAAO,IAAAS,GAAR,CAAhB,CAChB,CAAA,IAAAH,GAAA,CAAgB,CAAA,CAFlB,CAIA,KAAAC,EAAA,CAAkB,CAAA,CAAQJ,CAAA,OAEtBY,EAAAA,CAAe,IAAIzB,EAAJ,CAAW3mB,CAAX,CAEfqoB,EAAAA,CAAc,EAKlB,KAFA,IAAIlT,CAEJ,CAAO,CAACiT,CAAAtB,YAAA,EAAR,CAAA,CAAoC,CAClC3R,CAAA,CAAS,IAAA0S,GAAAS,GAAA,CAAsBF,CAAtB,CAAoCA,CAAArB,KAAA,EAApC,CACT,IAjHUwB,EAiHV,GAAIpT,CAAJ,CACE,KACa,KAAf,GAAIA,CAAJ,GAEI+J,KAAAiI,QAAA,CAAchS,CAAd,CAAJ,CACEkT,CAAAzV,KAAA4V,MAAA,CAAuBH,CAAvB,CAAiElT,CAAjE,CADF,CAGEkT,CAAAzV,KAAA,CAAiBuC,CAAjB,CALF,CAJkC,CAWpC,GAAI,CAAC,IAAAyS,EAAL,CAAsB,CACpB,EAAG,CACDzS,CAAA,CAAS,IAAA0S,GAAAS,GAAA,CAAsBF,CAAtB,CAAoCA,CAAArB,KAAA,EAApC,CACT,IA7HQwB,EA6HR;AAAIpT,CAAJ,CACE,KACa,KAAf,GAAIA,CAAJ,GAEI+J,KAAAiI,QAAA,CAAchS,CAAd,CAAJ,CACEkT,CAAAzV,KAAA4V,MAAA,CAAuBH,CAAvB,CAAiElT,CAAjE,CADF,CAGEkT,CAAAzV,KAAA,CAAiBuC,CAAjB,CALF,CAJC,CAAH,MAUS,CAACiT,CAAAtB,YAAA,EAVV,CAWA,KAAAe,GAAA,CAAgB,IAZI,CAelBhnB,CAAAwnB,CAAAxnB,OAAJ,EAI4C,EAJ5C,GAIM,CAAC,OAAD,CAAAglB,QAAA,CAAkB,IAAA0B,SAAlB,CAJN,EAKO,IAAAQ,GALP,EAK2B,IAAAJ,GAL3B,GAO2B,KAAvB,GAAIU,CAAA,CAAY,CAAZ,CAAJ,EACE,IAAAV,GACA,CADgB,CAAA,CAChB,CAAAU,CAAArB,MAAA,EAFF,EAME,IAAAW,GANF,CAMkB,CAAA,CAbtB,CAnPEnU,EAAAA,CAAI,EACR,KAAStW,CAAT,CAAa,CAAb,CAAgBA,CAAhB,CAoQ4BmrB,CApQRxnB,OAApB,CAAwC,EAAE3D,CAA1C,CAA6C,CAC3C,IAAIurB,EAmQsBJ,CAnQjB,CAAYnrB,CAAZ,CACC,MAAV,EAAIurB,CAAJ,CACEjV,CADF,EACOgC,MAAAC,aAAA,CAAoBgT,CAApB,CADP,EAGEA,CACA,EADM,KACN,CAAAjV,CAAA,EAAKgC,MAAAC,aAAA,EAAqBgT,CAArB,EAA2B,EAA3B,EAAiC,KAAjC,EACqBA,CADrB,CAC0B,IAD1B,EACmC,KADnC,CAJP,CAF2C,CAoQ3C,MA1PKjV,EAkLiC,CANlB,CA0FxBkV;QAASA,GAAW,CAACnB,CAAD,CAAWC,CAAX,CAAoB,CACtC,GAAI,EAAE,IAAF,WAAkBkB,GAAlB,CAAJ,CACE,MAAO,KAAIA,EAAJ,CAAgBnB,CAAhB,CAA0BC,CAA1B,CACTD,EAAA,CAAwBd,IAAAA,EAAb,GAAAc,CAAA,CAAyB/R,MAAA,CAAO+R,CAAP,CAAAE,YAAA,EAAzB,CAjIwBC,OAkInC,IAlImCA,OAkInC,GAAIH,CAAJ,CACE,KAAUzX,MAAJ,CAAU,iDAAV,CAAN,CAEQyW,EAAA,CAAaiB,CAAb,CAGV,KAAAI,EAAA,CAAkB,CAAA,CAElB,KAAAe,GAAA,CAAgB,IAIhBvL,OAAA4K,eAAA,CAAsB,IAAtB,CAA4B,UAA5B,CAAwC,CAAChnB,MAAO,OAAR,CAAxC,CAhBsC;AAmBxC0nB,EAAApa,UAAA,CAAwB,CAMtBsa,OAAQA,QAAe,CAACC,CAAD,CAAarB,CAAb,CAAsB,CAC3CqB,CAAA,CAAaA,CAAA,CAAarT,MAAA,CAAOqT,CAAP,CAAb,CAAkC,EAC/CrB,EAAA,CAAUjB,EAAA,CAAaiB,CAAb,CAKL,KAAAI,EAAL,GACE,IAAAe,GADF,CACkB,IAAIG,EADtB,CAEA,KAAAlB,EAAA,CAAkB,CAAA,CAAQJ,CAAA,OAEtBxnB,EAAAA,CAAQ,EAzXd,KAZA,IAAIwT,EAAIgC,MAAA,CAAOuT,CAAP,CAAR,CAGIvS,EAAIhD,CAAA3S,OAHR,CAMI3D,EAAI,CANR,CASI8rB,EAAI,EAGR,CAAO9rB,CAAP,CAAWsZ,CAAX,CAAA,CAAc,CAGZ,IAAIlB,EAAI9B,CAAAP,WAAA,CAAa/V,CAAb,CAKR,IAAQ,KAAR,CAAIoY,CAAJ,EAAsB,KAAtB,CAAkBA,CAAlB,CAEE0T,CAAApW,KAAA,CAAO0C,CAAP,CAFF,KAMK,IAAI,KAAJ,EAAcA,CAAd,EAAwB,KAAxB,EAAmBA,CAAnB,CAEH0T,CAAApW,KAAA,CAAO,KAAP,CAFG,KAMA,IAAI,KAAJ,EAAc0C,CAAd,EAAwB,KAAxB,EAAmBA,CAAnB,CAGH,GAAIpY,CAAJ,GAAUsZ,CAAV,CAAc,CAAd,CACEwS,CAAApW,KAAA,CAAO,KAAP,CADF,KAIK,CAEH,IAAI2C,EAAIwT,CAAA9V,WAAA,CAAkB/V,CAAlB,CAAsB,CAAtB,CAGJ,MAAJ,EAAcqY,CAAd,EAAwB,KAAxB,EAAmBA,CAAnB,EASEyT,CAAApW,KAAA,CAAO,KAAP,GAPQ0C,CAOR,CAPY,IAOZ,GAAuB,EAAvB,GAJQC,CAIR,CAJY,IAIZ,EAGA,CAAArY,CAAA,EAAK,CAZP,EAkBE8rB,CAAApW,KAAA,CAAO,KAAP,CAvBC,CA6BP1V,CAAA,EAAK,CAxDO,CA6XZ,IAHIkrB,CAGJ,CAHmB,IAAIzB,EAAJ,CA9TdqC,CA8Tc,CAGnB,CAAO,CAACZ,CAAAtB,YAAA,EAAR,CAAA,CAAoC,CAClC3R,CAAA,CAAS,IAAAwT,GAAAL,GAAA,CAAsBF,CAAtB,CAAoCA,CAAArB,KAAA,EAApC,CACT,IAjNUwB,EAiNV,GAAIpT,CAAJ,CACE,KACE+J,MAAAiI,QAAA,CAAchS,CAAd,CAAJ;AACEnV,CAAA4S,KAAA4V,MAAA,CAAiBxoB,CAAjB,CAAqDmV,CAArD,CADF,CAGEnV,CAAA4S,KAAA,CAAWuC,CAAX,CAPgC,CASpC,GAAI,CAAC,IAAAyS,EAAL,CAAsB,CACpB,IAAA,CAAA,CAAA,CAAa,CACXzS,CAAA,CAAS,IAAAwT,GAAAL,GAAA,CAAsBF,CAAtB,CAAoCA,CAAArB,KAAA,EAApC,CACT,IA3NQwB,EA2NR,GAAIpT,CAAJ,CACE,KACE+J,MAAAiI,QAAA,CAAchS,CAAd,CAAJ,CACEnV,CAAA4S,KAAA4V,MAAA,CAAiBxoB,CAAjB,CAAqDmV,CAArD,CADF,CAGEnV,CAAA4S,KAAA,CAAWuC,CAAX,CAPS,CASb,IAAAwT,GAAA,CAAgB,IAVI,CAYtB,MAAO,KAAI1a,UAAJ,CAAejO,CAAf,CApCoC,CANvB,CAyDxBmoB;QAASA,GAAW,CAACX,CAAD,CAAU,CAC5B,IAAIH,EAAQG,CAAAH,MAAZ,CAM0B4B,EAAkB,CAN5C,CAO0BC,EAAkB,CAP5C,CAQ0BC,EAAoB,CAR9C,CAS0BC,EAAsB,GAThD,CAU0BC,EAAsB,GAShD,KAAAf,GAAA,CAAegB,QAAQ,CAACC,CAAD,CAASC,CAAT,CAAe,CAGpC,GAxVqBvC,EAwVrB,GAAIuC,CAAJ,EAAoD,CAApD,GAA8BL,CAA9B,CAEE,MADAA,EACO,CADa,CACb,CAAA/B,EAAA,CAAaC,CAAb,CAIT,IA9VqBJ,EA8VrB,GAAIuC,CAAJ,CACE,MAjRUjB,EAoRZ,IAA0B,CAA1B,GAAIY,CAAJ,CAA6B,CAG3B,GAAkBnF,CAAlB,EAAYwF,CAAZ,EAAwBrI,GAAxB,EAAYqI,CAAZ,CAEE,MAAOA,EAIT,IAAkBxF,GAAlB,EAAYwF,CAAZ,EAAwBrI,GAAxB,EAAYqI,CAAZ,CAGEL,CACA,CADoB,CACpB,CAAAF,CAAA,CAAkBO,CAAlB,CAAyB,GAJ3B,KAQK,IAAkBxF,GAAlB,EAAYwF,CAAZ,EAAwBrI,GAAxB,EAAYqI,CAAZ,CAEU,GAQb,GARIA,CAQJ,GAPEJ,CAOF,CAPwB,GAOxB,EALa,GAKb,GALII,CAKJ,GAJEH,CAIF,CAJwB,GAIxB,EADAF,CACA,CADoB,CACpB,CAAAF,CAAA,CAAkBO,CAAlB,CAAyB,GAVtB,KAcA,IAAkBxF,GAAlB,EAAYwF,CAAZ,EAAwBrI,GAAxB,EAAYqI,CAAZ,CAEU,GAQb,GARIA,CAQJ,GAPEJ,CAOF,CAPwB,GAOxB,EALa,GAKb,GALII,CAKJ,GAJEH,CAIF,CAJwB,GAIxB,EADAF,CACA,CADoB,CACpB,CAAAF,CAAA,CAAkBO,CAAlB,CAAyB,GAVtB,KAgBH,OAAOpC,GAAA,CAAaC,CAAb,CAMS4B,EAAlB,GAAsC,CAAtC,CAA0CE,CAC1C,OAAO,KAtDoB,CA2D7B,GAAI,EAAeC,CAAf,EAASI,CAAT,EAASA,CAAT,EAAoCH,CAApC,CAAJ,CAA8D,CAK5DJ,CAAA,CAAkBE,CAAlB,CAAsCD,CAAtC,CAAwD,CACxDE,EAAA,CAAsB,GACtBC,EAAA,CAAsB,GAxXxB,IAAInK,KAAAiI,QAAA,CA2XaqC,CA3Xb,CAAJ,CAEE,IAAA,CAyXeA,CAzXR3oB,OAAP,CAAA,CAyXA0oB,CAxXE3C,GAAA6C,QAAA,CAwXaD,CAxXOE,IAAA,EAApB,CAHJ,KA2XEH,EAtXA3C,GAAA6C,QAAA,CAsXeD,CAtXf,CAyXA,OAAOpC,GAAA,CAAaC,CAAb,CAbqD,CAkB9D+B,CAAA,CAAsB,GACtBC;CAAA,CAAsB,GAKtBH,EAAA,EAAmB,CACnBD,EAAA,EAAoBO,CAApB,CAA2B,GAA3B,EAAqC,CAArC,EAA0CL,CAA1C,CAA8DD,CAA9D,CAIA,IAAIA,CAAJ,GAAwBC,CAAxB,CACE,MAAO,KAGLQ,EAAAA,CAAaV,CAIjBA,EAAA,CAAkBE,CAAlB,CAAsCD,CAAtC,CAAwD,CAGxD,OAAOS,EAhH6B,CApBV,CA6I9Bb,QAASA,GAAW,EAAU,CAO5B,IAAAR,GAAA,CAAegB,QAAQ,CAACC,CAAD,CAASI,CAAT,CAAqB,CAE1C,GAvdqB1C,EAudrB,GAAI0C,CAAJ,CACE,MA1YUpB,EA8YZ,IAAwBvE,CAAxB,EAAY2F,CAAZ,EAAgCxI,GAAhC,EAAYwI,CAAZ,CACE,MAAOA,EAKT,IAAwB3F,GAAxB,EAAY2F,CAAZ,EAAgCxI,IAAhC,EAAYwI,CAAZ,CAAyC,CACvC,IAAAC,EAAQ,CACR,KAAAprB,EAAS,GAF8B,CAAzC,IAK6BwlB,KAAxB,EAAY2F,CAAZ,EAAgCxI,KAAhC,EAAYwI,CAAZ,EACHC,CACA,CADQ,CACR,CAAAprB,CAAA,CAAS,GAFN,EAKwBwlB,KALxB,EAKY2F,CALZ,EAKiCxI,OALjC,EAKYwI,CALZ,GAMHC,CACA,CADQ,CACR,CAAAprB,CAAA,CAAS,GAPN,CAeL,KAHIwB,CAGJ,CAHY,EAAE2pB,CAAF,EAAiB,CAAjB,CAAqBC,CAArB,EAA+BprB,CAA/B,CAGZ,CAAe,CAAf,CAAOorB,CAAP,CAAA,CAME5pB,CAAA4S,KAAA,CAAW,GAAX,CAHW+W,CAGX,EAH0B,CAG1B,EAH+BC,CAG/B,CAHuC,CAGvC,EAA0B,EAA1B,CAGA,CAAA,EAAAA,CAIF,OAAO5pB,EA9CmC,CAPhB,C,CC7kBJ,IAAA,EAAA,CAA4C,GAAA,IAAI0oB,EAAJ,CAAgB,OAAhB,CAA9B,GAAA,CAAAmB,EAAAjB,OAAAkB,KAAA,CAAoBD,EAApB,CACd,KAAA,EAAA,CAA4C,GAAA,IAAIvC,EAAJ,CAAgB,OAAhB,CAA9B,GAAA,CAAAyC,EAAA9B,OAAA6B,KAAA,CAAoBC,EAApB,CAEpCjtB,SADSktB,GACE,CAACrpB,CAAD,CAAO,CACd,IAAAE,OAAA,CAAcF,CAAAE,OACd,KAAA0V,OAAA,CAAc5V,CAAA4V,OAFA,CAIlB8K,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CADCA,CAGZwD,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,CAAAA,CADDA,CAGVI,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CADDA,CAGVH,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAoT,GAAApT,CAAaA,IAAAN,OAAbM,CAA0BjX,CAA1BiX,CAAiCA,IAAAqL,aAAjCrL,CADAA,CAGXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,MAAOA,KAAAga,GAAAha,CAAaA,IAAAqG,OAAbrG,CAA0BtQ,CAA1BsQ,CAAiClP,CAAjCkP,CAAwCA,IAAAgS,aAAxChS,CADOA,CAGlB/U,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACL,EAAA,IADK,CACXxN,CADW,CACShW,CADT,CAEX0V,CAFW,CAEW2L,CAFX,CAGRtiB,CAHQ,OAAAoX,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACXH,CAEGjX,CAFG,CAAAqqB,GAEHrqB,CAFiBiB,CAEjBjB,CAF0B,CAAAiB,OAE1BjB,CADH2W,CACG3W,CADM,CAAA2W,OACN3W,CADmBsiB,CACnBtiB,CADkC,CAAAsiB,aAClCtiB,CAAAA,CAAAA,CAAS,EAHD,CAGjB,OAAqB,EAAEA,CAAvB,CAA+BiB,CAA/B,CACI,CAAA,CAAA,CAAA,CAAMgW,CAAA,CAAIN,CAAJ,CAAY3W,CAAZ,CAAmBsiB,CAAnB,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAHiB,CAAA,CAAA,CAOrB2D,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEZA,IADAA,IAAIjmB,EAAQimB,CAAZA,CACAA,EAAAhqB,CAAAgqB,CAAkBA,IAAlBA,CADAA,CACAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAwBA,CACpBA,GADJA,CAAAA,MACIA,GAAcC,CAAdD,CACIA,MAAOjmB,EAEXimB,GAAEjmB,CAJkBimB,CAMxBA,MAAQA,EARIA,CAYhB/oB,SADSqtB,GACE,CAACxpB,CAAD,CAAO,CACd,EAAA,KAAA,CAAA,IAAA,CAAMA,CAAN,CACA,KAAAE,OAAA,CAAcF,CAAAE,OACd,KAAAqhB,aAAA,CAAoBvhB,CAAAuhB,aAHN,CADoBzJ,CAAAuR,CAA7BG,EAA6BH,CAAAA,EAAAA,CAQtCltB,SADSstB,GACE,CAACzpB,CAAD,CAAO,CACd,EAAA,KAAA,CAAA,IAAA,CAAMA,CAAN,CACA,KAAA4V,OAAA,CAAc8T,EAAA,CAAa1pB,CAAA4V,OAAb,CAFA,CADQkC,CAAA0R,CAAjBC,EAAiBD,CAAAA,EAAAA,CAK1B7F;EAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAiBA,EAAVA,GAAA1kB,CAAA0kB,CAAcA,IAAA/N,OAAd+N,CAA4BA,IADrBA,CAGlB2F,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC1T,CAAD0T,CAASrqB,CAATqqB,CAAgB/H,CAAhB+H,CAA8BA,CACjCA,MAAO1T,EAAA+K,MAAA2I,CAAa/H,CAAA+H,CAAarqB,CAAbqqB,CAAbA,CAAkC/H,CAAA+H,CAAarqB,CAAbqqB,CAAqBA,CAArBA,CAAlCA,CAD0BA,CAGrCC,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC3T,CAAD2T,CAAStqB,CAATsqB,CAAgBlpB,CAAhBkpB,CAAuBhI,CAAvBgI,CAAqCA,CACxCA,IAAInH,EAAOmH,EAAXA,CACI1rB,EAAS0jB,CAAAgI,CAAatqB,CAAbsqB,CAEbA,KADII,CACJJ,CADUjJ,IAAA+C,IAAAkG,CAASlpB,CAAAH,OAATqpB,CAAuBhI,CAAAgI,CAAatqB,CAAbsqB,CAAqBA,CAArBA,CAAvBA,CAAiD1rB,CAAjD0rB,CACVA,CAAO1rB,CAAP0rB,CAAgBI,CAAhBJ,CAAAA,CACI3T,CAAArG,IAAAga,CAAW1rB,CAAA0rB,EAAXA,CAAqBlpB,CAAA6V,IAAAqT,CAAUA,EAAEnH,CAAZmH,CAArBA,CALoCA,CAU5CptB,SADSytB,GACE,CAAC5pB,CAAD,CAAO,CACd,EAAA,KAAA,CAAA,IAAA,CAAMA,CAAN,CACA,KAAA+O,KAAA,CAAY/O,CAAA6E,KAAAjH,GACZ,KAAAgY,OAAA,CAAc8T,EAAA,CAAa1pB,CAAA4V,OAAb,CAHA,CADiBkC,CAAAuR,CAA1BO,EAA0BP,CAAAA,EAAAA,CAMnC1F,GAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAiBA,EAAVA,GAAA1kB,CAAA0kB,CAAcA,IAAA/N,OAAd+N,CAA4BA,IADrBA,CAGlB2F,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC1T,CAAD0T,CAASrqB,CAATqqB,CAAgBA,CACnBA,IAAMva,EAAOua,IAAAva,KACbua,OAAO1T,EAAA+K,MAAA2I,CAAarqB,CAAbqqB,EAAsBva,CAAtBua,CAA4BrqB,CAA5BqqB,CAAoCva,CAApCua,CAFYA,CAIvBC;EAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC3T,CAAD2T,CAAStqB,CAATsqB,CAAgBlpB,CAAhBkpB,CAAuBA,CAC1BA,IAAIxa,EAAOwa,IAAAxa,KAAXwa,CACSnH,EAAOmH,EAAhBA,KAA4BtqB,CAA5BsqB,EAAoCxa,CAApCwa,CAA0CA,EAAEnH,CAA5CmH,CAAkDxa,CAAlDwa,CAAAA,CACI3T,CAAArG,IAAAga,CAAW1rB,CAAX0rB,CAAoBnH,CAApBmH,CAAyBlpB,CAAA6V,IAAAqT,CAAUA,EAAEnH,CAAZmH,CAAzBA,CAHsBA,CAO3B,SAAMM,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAyB/R,CAAA0R,CAAnBK,EAAmBL,CAAAA,EAAAA,CAC5BF,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC1T,CAAD0T,CAASrqB,CAATqqB,CAAgB/H,CAAhB+H,CAA8BA,CACjCA,MAAO1T,EAAA/G,SAAAya,CAAgB/H,CAAA+H,CAAarqB,CAAbqqB,CAAhBA,CAAqC/H,CAAA+H,CAAarqB,CAAbqqB,CAAqBA,CAArBA,CAArCA,CAD0BA,CAGrCC,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC3T,CAAD2T,CAAStqB,CAATsqB,CAAgBlpB,CAAhBkpB,CAAuBhI,CAAvBgI,CAAqCA,CACxCA,IAAM1rB,EAAS0jB,CAAAgI,CAAatqB,CAAbsqB,CACf3T,EAAArG,IAAAga,CAAWlpB,CAAAwO,SAAA0a,CAAeA,CAAfA,CAAkBhI,CAAAgI,CAAatqB,CAAbsqB,CAAqBA,CAArBA,CAAlBA,CAA4C1rB,CAA5C0rB,CAAXA,CAAgE1rB,CAAhE0rB,CAFwCA,CAKzC,SAAMO,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAuBhS,CAAA0R,CAAjBM,EAAiBN,CAAAA,EAAAA,CAC1BF,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC1T,CAAD0T,CAASrqB,CAATqqB,CAAgB/H,CAAhB+H,CAA8BA,CACjCA,MAjGkBS,GAiGXT,CAAW1T,CAAA/G,SAAAya,CAAgB/H,CAAA+H,CAAarqB,CAAbqqB,CAAhBA,CAAqC/H,CAAA+H,CAAarqB,CAAbqqB,CAAqBA,CAArBA,CAArCA,CAAXA,CAD0BA,CAGrCC,GAAAA,UAAAA,GAAAA,CAAAA,QAAOA,CAAC3T,CAAD2T,CAAStqB,CAATsqB,CAAgBlpB,CAAhBkpB,CAAuBhI,CAAvBgI,CAAqCA,CACxCA,IAAM1rB,EAAS0jB,CAAAgI,CAAatqB,CAAbsqB,CACf3T,EAAArG,IAAAga,CAtGkBS,EAsGPT,CAAWlpB,CAAXkpB,CAAA1a,SAAA0a,CAA2BA,CAA3BA,CAA8BhI,CAAAgI,CAAatqB,CAAbsqB,CAAqBA,CAArBA,CAA9BA,CAAwD1rB,CAAxD0rB,CAAXA,CAA4E1rB,CAA5E0rB,CAFwCA,C,CCtHzCU,QAASA,GAAO,CAACC,CAAD,CAAYrU,CAAZ,CAAe,CAClC,MAAO8K,CAAKpC,KAAJ,CAAU1I,CAAV,CAAc,CAAd,CAAA6J,KAAA,CC2EsCyK,GD3EtC,CAADxJ,CAA+BuJ,CAA/BvJ,OAAA,CAA2C,EAA3C,CAA+C9K,CAA/C,CAD2B,CAG/BuU,QAASA,GAAa,CAAC5N,CAAD,CAAI,CAC7B,MAAoB,QAAb,GAAA,MAAOA,EAAP,CAAwB,GAAxB,CAA4BA,CAA5B,CAA6B,GAA7B,CAAmC0D,WAAAC,OAAA,CAAmB3D,CAAnB,CAAA,CAAwB,GAAxB,CAA4BA,CAA5B,CAA6B,GAA7B,CAAmC6N,IAAAC,UAAA,CAAe9N,CAAf,CADhD,C,CEgB7BrgB,QADSouB,GACE,CAACvqB,CAAD,CAAOkH,CAAP,CAAiB,CACxB,IAAAhH,OAAA,CAAcF,CAAAE,OACd,KAAA0hB,UAAA,CAAiB5hB,CAAA4hB,UACjB,KAAAsB,GAAA,CAAmBljB,CAAA4hB,UAAA1hB,OACnB,KAAA2jB,EAAA,CAAiB3c,CAAjB,EAAiCqX,KAAJ,CAAU,IAAA2E,GAAV,CAJL,CAM5BxC,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CAA2BA,IAAAmD,EAA3BnD,CADCA,CAGZwD,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,CAAAA,CADDA,CAGVI,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CADDA,CAGVS,EAAAC,QAAAA,CAAAA,QAAOA,EAAIA,CACPA,KAAU/V,MAAJ+V,CAAUA,qBAAVA,CAANA,CADOA,CAGXsF,EAAAC,OAAAA,CAAAA,QAAMA,EAAGA,CAAEA,MAAOA,KAAAjG,QAAAiG,EAATA,CACTC,EAAArN,SAAAA,CAAAA,QAAQA,EAAGA,CACPA,MAAOA,EAAAA,OAAAA,CAAA2G,CAAA3G,CAAIA,IAAJA,CAAAA,CAAA7E,IAAA6E,CAAcA,QAAAA,CAACb,CAADa,CAAOA,CAAAA,MAAA+M,GAAA/M,CAAcb,CAAda,CAAAA,CAArBA,CAAAqC,KAAArC,CAA4CA,IAA5CA,CADAA,CAGXgH,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAyU,GAAAzU,CAAeA,IAAfA,CAAqBjX,CAArBiX,CADAA,CAGXoO;CAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,MAAOA,KAAAqb,GAAArb,CAAeA,IAAfA,CAAqBtQ,CAArBsQ,CAA4BlP,CAA5BkP,CADOA,CAGlBqU,EAAAD,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAeA,EAARA,CAAA1kB,CAAA0kB,EAAa1kB,CAAb0kB,EAAsBA,IAAAT,GAAtBS,CACDA,IADCA,CAEDA,IAAAE,EAAAF,CAAe1kB,CAAf0kB,CAFCA,GAGEA,IAAAE,EAAAF,CAAe1kB,CAAf0kB,CAHFA,CCXA+F,EAAAhN,CDcwCiH,IAAA/B,UAAA+B,CAAe1kB,CAAf0kB,CCdxCjH,CDWAiH,CADOA,CAMlBnpB,EAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACL,EAAA,IADK,CACXxN,CADW,CAEXhW,CAFW,CAGRjB,CAHQ,OAAAoX,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACXH,CAEGjX,CAFG,CAAA0rB,GAEH1rB,CADHiB,CACGjB,CADM,CAAAiB,OACNjB,CAAAA,CAAAA,CAAS,EAHD,CAGjB,OAAqB,EAAEA,CAAvB,CAA+BiB,CAA/B,CACI,CAAA,CAAA,CAAA,CAAMgW,CAAA,CAAI,CAAJ,CAAUjX,CAAV,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAHiB,CAAA,CAAA,CASrB9C,SADS0uB,GACE,CAAC7qB,CAAD,CAAOkH,CAAP,CAAiB,CACxB,EAAA,KAAA,CAAA,IAAA,CAAMlH,CAAN,CAAYkH,CAAZ,CACA,KAAAhH,OAAA,CAAcF,CAAAE,OACd,KAAAlB,QAAA,CAAegB,CAAAhB,QACf,KAAAmjB,GAAA,CAA0BniB,CAAAmiB,GAJF,CADDrK,CAAAyS,CAAlBM,EAAkBN,CAAAA,EAAAA,CAO3BI,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACG,CAADH,CAAO1rB,CAAP0rB,CAAcA,CACnBA,MAAOG,EAAAC,EAAAJ,CAAmBG,CAAnBH,CAAyB1rB,CAAzB0rB,CAAgCG,CAAA9rB,QAAhC2rB,CAA8CG,CAAAvJ,aAA9CoJ,CAAiEG,CAAA3I,GAAjEwI,CADYA,CAGvBC;EAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACE,CAADF,CAAO3rB,CAAP2rB,CAAcvqB,CAAduqB,CAAqBA,CAC1BA,MAAOE,EAAAE,GAAAJ,CAAmBE,CAAnBF,CAAyB3rB,CAAzB2rB,CAAgCvqB,CAAhCuqB,CAAuCE,CAAA9rB,QAAvC4rB,CAAqDE,CAAAvJ,aAArDqJ,CAAwEE,CAAA3I,GAAxEyI,CADmBA,CAG9BG,GAAAA,UAAAA,EAAAA,CAAAA,QAAaA,CAACD,CAADC,CAAO9rB,CAAP8rB,CAAc/rB,CAAd+rB,CAAuBE,CAAvBF,CAAsC5I,CAAtC4I,CAA0DA,CAEnEA,MAAOA,CADDlJ,CACCkJ,CADOD,CAAAnH,WAAAoH,CAAgB5I,CAAA4I,CAAmB/rB,CAAA+rB,CAAQ9rB,CAAR8rB,CAAnBA,CAAhBA,CACPA,EAAQlJ,CAAA3L,IAAA6U,CAAU9rB,CAAV8rB,CAARA,CAA2BA,IAFiCA,CAIvEC,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAO/rB,CAAP+rB,CAAc3qB,CAAd2qB,CAAqBhsB,CAArBgsB,CAA8BC,CAA9BD,CAA6C7I,CAA7C6I,CAAiEA,CAE1EA,MAAOA,CADDnJ,CACCmJ,CADOF,CAAAnH,WAAAqH,CAAgB7I,CAAA6I,CAAmBhsB,CAAAgsB,CAAQ/rB,CAAR+rB,CAAnBA,CAAhBA,CACPA,EAAQnJ,CAAAtS,IAAAyb,CAAU/rB,CAAV+rB,CAAiB3qB,CAAjB2qB,CAARA,CAAkCA,IAFiCA,CAI9ExwB,EAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACF,EAAA,IADE,CACXxjB,CADW,CAEXgW,CAFW,CAGX,CAHW,CAGTiM,CAHS,CAIX,CAJW,CAITnjB,CAJS,CAIAuiB,CAJA,CAKRtiB,CALQ,OAAAoX,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACXnW,CAIGjB,CAJM,CAAAiB,OAINjB,CAHHiX,CAGGjX,CAHG,CAAA8rB,EAGH9rB,CAFH,CAEGA,CAFsB,CAEtBA,CAFDkjB,CAECljB,CAFD,CAAA,GAECA,CADH,CACGA,CADyB,CACzBA,CADDD,CACCC,CADD,CAAA,QACCA,CADQsiB,CACRtiB,CADQ,CAAA,aACRA,CAAAA,CAAAA,CAAS,EALD,CAKjB,OAAqB,EAAEA,CAAvB,CAA+BiB,CAA/B,CACI,CAAA,CAAA,CAAA,CAAMgW,CAAA,CAAI,CAAJ,CAAUjX,CAAV,CAAiBD,CAAjB,CAA0BuiB,CAA1B,CAAwCY,CAAxC,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CALiB,CAAA,CAAA,CAWrBhmB;QADS+uB,GACE,CAAClrB,CAAD,CAAOkH,CAAP,CAAiB,CACxB,EAAA,KAAA,CAAA,IAAA,CAAMlH,CAAN,CAAYkH,CAAZ,CACA,KAAAqa,aAAA,CAAoBvhB,CAAAuhB,aAFI,CADIzJ,CAAA+S,CAAvBK,EAAuBL,CAAAA,EAAAA,CAKhCF,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACG,CAADH,CAAO1rB,CAAP0rB,CAAcA,CACnBA,MAAOG,EAAAC,EAAAJ,CAAmBG,CAAnBH,CAAyB1rB,CAAzB0rB,CAAgCG,CAAA9rB,QAAhC2rB,CAA8CG,CAAAvJ,aAA9CoJ,CAAiEG,CAAA3I,GAAjEwI,CADYA,CAGvBI,GAAAA,UAAAA,EAAAA,CAAAA,QAAaA,CAACD,CAADC,CAAO9rB,CAAP8rB,CAAc/rB,CAAd+rB,CAAuBxJ,CAAvBwJ,CAAqC5I,CAArC4I,CAAyDA,CAElEA,MAAOA,CADDlJ,CACCkJ,CADOD,CAAAnH,WAAAoH,CAAgB5I,CAAA4I,CAAmB/rB,CAAA+rB,CAAQ9rB,CAAR8rB,CAAnBA,CAAhBA,CACPA,EAAQlJ,CAAA3L,IAAA6U,CAAUxJ,CAAAwJ,CAAa9rB,CAAb8rB,CAAVA,CAARA,CAAyCA,IAFkBA,CAItEC,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAO/rB,CAAP+rB,CAAc3qB,CAAd2qB,CAAqBhsB,CAArBgsB,CAA8BzJ,CAA9ByJ,CAA4C7I,CAA5C6I,CAAgEA,CAEzEA,MAAOA,CADDnJ,CACCmJ,CADOF,CAAAnH,WAAAqH,CAAgB7I,CAAA6I,CAAmBhsB,CAAAgsB,CAAQ/rB,CAAR+rB,CAAnBA,CAAhBA,CACPA,EAAQnJ,CAAAtS,IAAAyb,CAAUzJ,CAAAyJ,CAAa/rB,CAAb+rB,CAAVA,CAA+B3qB,CAA/B2qB,CAARA,CAAgDA,IAFkBA,CAM7E7uB;QADSgvB,GACE,CAACnrB,CAAD,CAAOkH,CAAP,CAAiB,CAGxB,QAAMkkB,EAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAFA,EAAA,KAAA,CAAA,IAAA,CAAMprB,CAAN,CAAYkH,CAAZ,CAEuB4Q,EAAAuT,CAAjBD,CAAiBC,CAAAA,EAAAA,CAEvB,KAAMhN,EAAQ+M,CAAAzd,UACd3N,EAAA6E,KAAAqC,SAAA6V,QAAA,CAA2B,QAAS,CAACD,CAAD,CAAIvgB,CAAJ,CAAO,CACvCkgB,MAAA4K,eAAA,CAAsBhJ,CAAtB,CAA6BvB,CAAAlW,KAA7B,CAAqC,CACjCsP,IAAKA,QAAS,EAAG,CACb,MAAO,KAAAA,IAAA,CAAS3Z,CAAT,CADM,CADgB,CAIjC+uB,WAAY,CAAA,CAJqB,CAArC,CADuC,CAA3C,CAQA,KAAAD,GAAA,CAAeD,CAdS,CADAtT,CAAAyS,CAAnBY,EAAmBZ,CAAAA,EAAAA,CAiB5BI,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACG,CAADH,CAAO1rB,CAAP0rB,CAAcA,CACnBA,MAAOA,KAAIG,CAAAO,GAAJV,CAAiBG,CAAjBH,CAAuBG,CAAAjH,EAAvB8G,CAAuC1rB,CAAvC0rB,CADYA,CAGvBC,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACE,CAADF,CAAO3rB,CAAP2rB,CAAcvqB,CAAduqB,CAAqBA,CAAAA,IACtBxI,EAAOwI,EADeA,CACZlZ,EAAMoZ,CAAA5H,GADM0H,CACY/I,CACtC+I,IAAMvqB,CAANuqB,WAAuBL,GAAvBK,EAAqCvqB,CAArCuqB,WAAsD7G,EAAtD6G,CAQIA,IAAAA,CAAOA,EAAExI,CAATwI,CAAelZ,CAAfkZ,CAAAA,CACIA,CAAI/I,CAAJ+I,CAAYE,CAAAnH,WAAAiH,CAAgBxI,CAAhBwI,CAAZA,GACI/I,CAAAtS,IAAAqb,CAAU3rB,CAAV2rB,CAAiBvqB,CAAA6V,IAAA0U,CAAUxI,CAAVwI,CAAjBA,CAVZA,KACIA,KAAAA,CAAOA,EAAExI,CAATwI,CAAelZ,CAAfkZ,CAAAA,CACIA,CAAI/I,CAAJ+I,CAAYE,CAAAnH,WAAAiH,CAAgBxI,CAAhBwI,CAAZA,GACI/I,CAAAtS,IAAAqb,CAAU3rB,CAAV2rB,CAAiBvqB,CAAAuqB,CAAMxI,CAANwI,CAAjBA,CALcA,CAmB9BzuB;QADSovB,GACE,CAACvrB,CAAD,CAAOkH,CAAP,CAAiB,CACxB,EAAA,KAAA,CAAA,IAAA,CAAMlH,CAAN,CAAYkH,CAAZ,CACA,KAAAlI,QAAA,CAAegB,CAAA6E,KAAAqC,SAAA2Q,OAAA,CAA0B,QAAA,CAAC/B,CAAD,CAAK0G,CAAL,CAAQjgB,CAAR,CAAc,CAAA,OAACuZ,CAAA,CAAG0G,CAAA5V,KAAH,CAAD,CAAcrK,CAAd,GAAoBuZ,CAApB,EAA0BA,CAA1B,CAAxC,CAAsE2G,MAAAC,OAAA,CAAc,IAAd,CAAtE,CAFS,CADH5E,CAAAyS,CAAhBgB,EAAgBhB,CAAAA,EAAAA,CAKzBI,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACG,CAADH,CAAO1rB,CAAP0rB,CAAcA,CACnBA,MAAOA,KAAIa,EAAJb,CAAeG,CAAfH,CAAqBG,CAAAjH,EAArB8G,CAAqC1rB,CAArC0rB,CADYA,CAGvBC,GAAAA,UAAAA,GAAAA,CAAAA,QAASA,CAACE,CAADF,CAAO3rB,CAAP2rB,CAAcvqB,CAAduqB,CAAqBA,CAAAA,IACtB5rB,EAAU8rB,CAAA9rB,QADY4rB,CACE/I,CAC5B+I,IAAMvqB,CAANuqB,WAAuBL,GAAvBK,EAAqCvqB,CAArCuqB,WAAsD7G,EAAtD6G,CAQIA,IAAKA,IAAMxlB,CAAXwlB,GAAkB5rB,EAAlB4rB,CACIA,CAAI/I,CAAJ+I,CAAYE,CAAAnH,WAAAiH,CAAgB5rB,CAAA4rB,CAAQxlB,CAARwlB,CAAhBA,CAAZA,GACI/I,CAAAtS,IAAAqb,CAAU3rB,CAAV2rB,CAAiBvqB,CAAA6V,IAAA0U,CAAUxlB,CAAVwlB,CAAjBA,CAVZA,KACIA,KAAKA,IAAMxlB,CAAXwlB,GAAkB5rB,EAAlB4rB,CACIA,CAAI/I,CAAJ+I,CAAYE,CAAAnH,WAAAiH,CAAgB5rB,CAAA4rB,CAAQxlB,CAARwlB,CAAhBA,CAAZA,GACI/I,CAAAtS,IAAAqb,CAAU3rB,CAAV2rB,CAAiBvqB,CAAAuqB,CAAMxlB,CAANwlB,CAAjBA,CALcA,CAmB9BzuB,SADSkvB,GACE,CAACrrB,CAAD,CAAOkH,CAAP,CAAiBukB,CAAjB,CAA2B,CAClC,EAAA,KAAA,CAAA,IAAA,CAAMzrB,CAAN,CAAYkH,CAAZ,CACA,KAAAukB,SAAA,CAAgBA,CAAhB,EAA4B,CAC5B,KAAAvrB,OAAA,CAAcF,CAAAkjB,GAHoB,CADbpL,CAAA+S,CAAhBQ,EAAgBR,CAAAA,EAAAA,CAMzBnK;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CAA2BA,IAAAmD,EAA3BnD,CAA2CA,IAAA+K,SAA3C/K,CADCA,CAGZqK,GAAAA,UAAAA,EAAAA,CAAAA,QAAaA,CAACD,CAADC,CAAO9rB,CAAP8rB,CAAuCA,CAEhDA,MAAOA,CADDlJ,CACCkJ,CADOD,CAAAnH,WAAAoH,CAAgB9rB,CAAhB8rB,CACPA,EAAQlJ,CAAA3L,IAAA6U,CAAUD,CAAAW,SAAVV,CAARA,CAAmCA,IAFMA,CAIpDC,GAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAO/rB,CAAP+rB,CAAc3qB,CAAd2qB,CAA8CA,CAEvDA,MAAOA,CADDnJ,CACCmJ,CADOF,CAAAnH,WAAAqH,CAAgB/rB,CAAhB+rB,CACPA,EAAQnJ,CAAAtS,IAAAyb,CAAUF,CAAAW,SAAVT,CAAyB3qB,CAAzB2qB,CAARA,CAA0CA,IAFMA,CAKxD,SAAMQ,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAyB1T,CAAAuT,CAAnBG,EAAmBH,CAAAA,EAAAA,CAC5BZ,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,IAAMvU,EAAMuU,IAAAM,EAAZN,CACMjW,EAASiW,EADfA,CAEMzrB,EAAUyrB,IAAAzrB,QAFhByrB,CAGW7jB,CAAX6jB,KAAW7jB,CAAX6jB,GAAmBzrB,EAAnByrB,CACIjW,CAAAiW,CAAO7jB,CAAP6jB,CAAAA,CAAevU,CAAAuU,CAAIA,IAAJA,CAAU7jB,CAAV6jB,CAAgBzrB,CAAhByrB,CAAyBA,IAAzBA,CAEnBA,OAAOjW,EAPFiW,CASTM,GAAAA,UAAAA,EAAAA,CAAAA,QAAaA,CAACD,CAADC,CAAO3lB,CAAP2lB,CAAY/rB,CAAZ+rB,CAAoCA,CAE7CA,MAAOA,CADDlJ,CACCkJ,CADOD,CAAAnH,WAAAoH,CAAgB/rB,CAAA+rB,CAAQ3lB,CAAR2lB,CAAhBA,CACPA,EAAQlJ,CAAA3L,IAAA6U,CAAUD,CAAAW,SAAVV,CAARA,CAAmCA,IAFGA,CAIjDC;EAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACF,CAADE,CAAO5lB,CAAP4lB,CAAY3qB,CAAZ2qB,CAAmBhsB,CAAnBgsB,CAA2CA,CAEpDA,MAAOA,CADDnJ,CACCmJ,CADOF,CAAAnH,WAAAqH,CAAgBhsB,CAAAgsB,CAAQ5lB,CAAR4lB,CAAhBA,CACPA,EAAQnJ,CAAAtS,IAAAyb,CAAUF,CAAAW,SAAVT,CAAyB3qB,CAAzB2qB,CAARA,CAA0CA,IAFGA,C,CE3LxD7uB,QADSuvB,GACE,CAAC1rB,CAAD,CAAO,CACd,IAAAE,OAAA,CAAcF,CAAAE,OACd,KAAA0V,OAAA,CAAc5V,CAAA4V,OAFA,CAIlB8K,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CADCA,CAGZwD,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,CAAAA,CADDA,CAGVE,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAN,OAAAM,CAAYjX,CAAZiX,CADAA,CAGXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,MAAOA,KAAAqG,OAAArG,CAAYtQ,CAAZsQ,CAAPA,CAA4BlP,CADdkP,CAGlBgV,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,KAAA5O,OAAA/G,SAAA2V,CAAqBA,CAArBA,CAAwBA,IAAAtkB,OAAxBskB,CADDA,CAGVS,EAAAC,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEZA,IADAA,IAAIjmB,EAAQimB,CAAZA,CACAA,EAAAhqB,CAAAgqB,CAAkBA,IAAlBA,CADAA,CACAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAwBA,CACpBA,GADJA,CAAAA,MACIA,GAAcC,CAAdD,CACIA,MAAOjmB,EAEXimB,GAAEjmB,CAJkBimB,CAMxBA,MAAQA,EARIA,CAUhB1qB,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAChBlpB,CAAA,EAAAI,EAAA,EAAA,OAAO,KAAAgb,OAAA/G,SAAA,CAAqB,CAArB,CAAwB,IAAA3O,OAAxB,CAAA,CAAqCkd,MAAAsG,SAArC,CAAA,EADS,CAKpBvnB,SADSwvB,GACE,CAAC3rB,CAAD,CAAO,CACd,IAAAE,OAAA,CAAcF,CAAAE,OADA,CAGlBwgB,CAAAA,CAAAA,EAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CADCA,CAGZwD,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,CAAAA,CADDA,CAGVG,EAAA/U,IAAAA,CAAAA,QAAGA,EAAGA,EACN8U,EAAAnO,IAAAA,CAAAA,QAAGA,EAAGA,CAAEA,MAAOA,KAATA,CACNqO,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CADDA,CAGVS,EAAAC,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEZA,MAAkBA,KAAXA,GAAAC,CAAAD,EAAiCA,CAAjCA,CAAmBA,IAAAhlB,OAAnBglB,CAAqCA,CAArCA,CAA0CA,EAFrCA,CAIhB1qB,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACa,EAAA,IADb,CACRzkB,CADQ,CACIiB,CADJ,OAAAmW,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACRpX,CAAYiB,CAAH,EAAGA,CAAAA,CAAAA,CAAS,CAAAA,OADb,CACjB,OAA2C,EAAEjB,CAA7C,CAAqDiB,CAArD,CACI,CAAA,CAAA,CAAA,CAAM,IAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CADiB,CAAA,CAAA,CAOrB/D,SADSyvB,GACE,CAAC5rB,CAAD,CAAO,CACd,EAAA,KAAA,CAAA,IAAA,CAAMA,CAAN,CACA,KAAAnC,OAAA,CAAcmC,CAAAnC,OAFA,CADQia,CAAA4T,CAAjBE,EAAiBF,CAAAA,EAAAA,CAK1BlH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVtO,GAAAA,UAAAA,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACD2V,CAAAA,CAAe3V,IAAArY,OAAfguB,CAA6B5sB,CACnCiX,Od7DyB,Ec6DzBA,IAA4BA,IAAAN,OAAAM,CAAY2V,CAAZ3V,EAA4BA,CAA5BA,CAA5BA,Cd7DW,Cc6DXA,EAA4D2V,CAA5D3V,CAA2EA,CAA3EA,CAFOA,CAIX3G,GAAAA,UAAAA,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdmG,EAAAnG,CAAQA,IAAAqG,OAARrG,CAAqBA,IAAA1R,OAArB0R,CAAmCtQ,CAAnCsQ,CAA0ClP,CAA1CkP,CADcA,CAGlB/U,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAChB,MAAO3N,GAAA,CAAY,IAAAH,OAAZ,CAAyB,IAAA/X,OAAzB,CAAsC,IAAAqC,OAAtC,CAAmD,IAAA0V,OAAnD,CAAgER,EAAhE,CADS,CAKpBjZ,SADS2vB,EACE,CAAC9rB,CAAD,CAAO+O,CAAP,CAAa,CACpB,EAAA,KAAA,CAAA,IAAA,CAAM/O,CAAN,CACA,KAAA+O,KAAA,CAAYA,CAAZ,EAAoB,CACpB,KAAAuP,UAAA,CAAiBte,CAAA6E,KAAAyZ,UAHG,CADOxG,CAAA4T,CAAtBI,CAAsBJ,CAAAA,EAAAA,CAM/BhL,EAAAA,CAAAA,CAAAA,UAAA8E,EAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAOA,CACRA,MAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CAA2BA,IAAA3R,KAA3B2R,CADCA,CAGZqL,EAAAC,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAAOpW,EAAAoW,CAAO/sB,CAAP+sB,CAAejd,CAAfid,CADmBA,CAG9BC,EAAAC,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAuB7rB,CADU6rB,CAGrC7H,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAA8V,SAAA9V,CAAcA,IAAAN,OAAdM,CAA2BjX,CAA3BiX,CAAkCA,IAAAnH,KAAlCmH,CADAA,CAGXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,MAAOA,KAAA2c,EAAA3c,CAAcA,IAAAqG,OAAdrG,CAA2BtQ,CAA3BsQ,CAAkCA,IAAAR,KAAlCQ,CAA6ClP,CAA7CkP,CADOA,CAGlBgV;CAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAmBA,EAAZA,CAAAA,IAAAzV,KAAAyV,CACHA,IAAIA,IAAAlG,UAAJkG,CAAmBA,IAAnBA,CADGA,CAEHA,IAAA5O,OAAA/G,SAAA2V,CAAqBA,CAArBA,CAAwBA,IAAAtkB,OAAxBskB,CAHEA,CAKVhqB,EAAA,EAAAI,EAAA,EAAA,EAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IACL,EAAA,IADK,CACXxN,CADW,CAEX,CAFW,CAETnH,CAFS,CAEH6G,CAFG,CAEK1V,CAFL,CAGRjB,CAHQ,OAAAoX,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACXH,CAEGjX,CAFG,CAAA+sB,SAEH/sB,CADH,CACGA,CADwB,CACxBA,CADD8P,CACC9P,CADD,CAAA,KACCA,CADK2W,CACL3W,CADK,CAAA,OACLA,CADaiB,CACbjB,CADa,CAAA,OACbA,CAAAA,CAAAA,CAAS,EAHD,CAGjB,OAAqB,EAAEA,CAAvB,CAA+BiB,CAA/B,CACI,CAAA,CAAA,CAAA,CAAMgW,CAAA,CAAIN,CAAJ,CAAY3W,CAAZ,CAAmB8P,CAAnB,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAHiB,CAAA,CAAA,CAQlB,SAAMod,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA4BrU,CAAAgU,CAAtBK,EAAsBL,CAAAA,CAAAA,CAC/BtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,KAAA5O,OADD4O,CAGVU;EAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACC,CAADD,CAASA,CAEZA,IADAA,IAAIjmB,EAAQimB,CAAZA,CACAA,EAAAhqB,CAAAgqB,CAAkBA,IAAlBA,CADAA,CACAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAwBA,CACpBA,GADJA,CAAAA,MACQkH,MAAAlH,CAAYA,QAAAA,CAACtQ,CAADsQ,CAAI3oB,CAAJ2oB,CAAUA,CAAAA,MAAAtQ,EAAAsQ,GAAMC,CAAAD,CAAO3oB,CAAP2oB,CAANA,CAAtBA,CAAJA,CACIA,MAAOjmB,EAEXimB,GAAEjmB,CAJkBimB,CAMxBA,MAAQA,EARIA,CAUhB8G,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAAOpW,EAAA/G,SAAAmd,CAAgB/sB,CAAhB+sB,CAAwBjd,CAAxBid,CAA8B/sB,CAA9B+sB,CAAsCjd,CAAtCid,CAA6Cjd,CAA7Cid,CADmBA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAArG,IAAA2c,CAAW7rB,CAAAwO,SAAAqd,CAAeA,CAAfA,CAAkBnd,CAAlBmd,CAAXA,CAAoCjtB,CAApCitB,CAA4Cnd,CAA5Cmd,CADiCA,CAIlC,SAAMG,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA0BvU,CAAAgU,CAApBO,EAAoBP,CAAAA,CAAAA,CAC7BtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,KAAItX,YAAJsX,CAAiBA,IAAjBA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,OAAQpW,CAAAoW,CAAO/sB,CAAP+sB,CAAejd,CAAfid,CAARA,CAA+BA,KAA/BA,EAAwCA,KADdA,CAG9BE;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAgCA,KAAhCA,CAAwB7rB,CAAxB6rB,CAAyCA,KADRA,CAIlC,SAAMI,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA0BxU,CAAAgU,CAApBQ,EAAoBR,CAAAA,CAAAA,CAC7BtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAkGkDA,KAAI/oB,IAAJ+oB,CAJN,KAIMA,CAlG3BpW,CA8FgC,CA9FxB3W,CA8FwB,CA9FhB8P,CA8FgB,CAILid,CAnGxBA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAuB7rB,CAAAksB,QAAAL,EAAvBA,CAAyCA,KADRA,CAIlC,SAAMM,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAkC1U,CAAAqU,CAA5BK,EAA4BL,CAAAA,EAAAA,CACrC3H,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAyFkDA,KAAI/oB,IAAJ+oB,CAIgCS,EAAAC,CA7F/C9W,CA6F+C8W,CA7FvCztB,CA6FuCytB,CA7F/B3d,CA6F+B2d,CAJhCV,CA1FxBA,CAG9BE;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CAC3BQ,CAAAA,CAAUrsB,CAAAksB,QAAAL,EAChBtW,EAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAwBQ,CAAxBR,CAAkCA,UAAlCA,CAAgDA,CAChDtW,EAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAsBnd,CAAtBmd,CAAAA,CAA+BQ,CAA/BR,CAAyCA,UAAzCA,CAAuDA,CAHtBA,CAMlC,SAAMS,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA+B7U,CAAAgU,CAAzBa,EAAyBb,CAAAA,CAAAA,CAClCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MA0E4C,MA1E5CA,CAAqBpW,CA0EkC,CA1E1B3W,CA0E0B,CA1ElB8P,CA0EkB,CA3E7Bid,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsBQ,CAAtBR,CAA+BA,CACnCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAwBQ,CAAxBR,CAAkCA,KAAlCA,CAA8CA,CADXA,CAIpC,SAAMU,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAkC9U,CAAAgU,CAA5Bc,EAA4Bd,CAAAA,CAAAA,CACrCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAgE+C,IAhE/CA,CAAwBpW,CAgE8B,CAhEtB3W,CAgEsB,CAhEd8P,CAgEc,CAjE5Bid,CAG9BE;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsBQ,CAAtBR,CAA+BA,CACnCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAwBQ,CAAxBR,CAAkCA,GAAlCA,CAA0CA,CADPA,CAIpC,SAAMW,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAuC/U,CAAAgU,CAAjCe,EAAiCf,CAAAA,CAAAA,CAC1CtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAAOS,GAAAT,CAA0BpW,CAA1BoW,CAAkC/sB,CAAlC+sB,CAA0Cjd,CAA1Cid,CADmBA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsBQ,CAAtBR,CAA+BA,CACnCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAwBQ,CAAxBR,CAAkCA,UAAlCA,CAAgDA,CAChDtW,EAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAsBnd,CAAtBmd,CAAAA,CAA+BQ,CAA/BR,CAAyCA,UAAzCA,CAAuDA,CAFpBA,CAKpC,SAAMY,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAuChV,CAAAgU,CAAjCgB,EAAiChB,CAAAA,CAAAA,CAC1CtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CACe/sB,CAAA+sB,EAAQjd,CAAjDid,OAAiCpW,EAgDqC,CAAK3W,CAAL,CAAa,CAAb,CAhDtE+sB,CAgDwF,GAhDxFA,CAgDwD,UAhDxDA,EAAiCpW,CAgDiE,CAAK3W,CAAL,CAhDlG+sB,GAgDkH,CAhDlHA,EAgDuH,GAjD7FA,CAG9BE;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsBQ,CAAtBR,CAA+BA,CACnCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAyBQ,CAAzBR,CAAmCA,GAAnCA,CAA2CA,UAA3CA,CAAyDA,CACzDtW,EAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAsBnd,CAAtBmd,CAAAA,CAAgCQ,CAAhCR,CAA0CA,GAA1CA,CAAkDA,UAAlDA,CAAgEA,CAF7BA,CAKpC,SAAMa,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAsCjV,CAAAgU,CAAhCiB,EAAgCjB,CAAAA,CAAAA,CACzCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CACc/sB,CAAA+sB,EAAQjd,CAAhDid,OAAgCpW,EAuCqC,CAAK3W,CAAL,CAAa,CAAb,CAvCrE+sB,CAuCuF,GAvCvFA,CAuCuD,UAvCvDA,EAAgCpW,CAuCoE,CAAK3W,CAAL,CAvCpG+sB,GAuCoH,CAvCpHA,EAuCyH,GAxC/FA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsBQ,CAAtBR,CAA+BA,CACnCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAyBQ,CAAzBR,CAAmCA,GAAnCA,CAA8CA,UAA9CA,CAA4DA,CAC5DtW,EAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAsBnd,CAAtBmd,CAAAA,CAAgCQ,CAAhCR,CAA0CA,GAA1CA,CAAqDA,UAArDA,CAAmEA,CAFhCA,CAKpC,SAAMc,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAoClV,CAAAgU,CAA9BkB,EAA8BlB,CAAAA,CAAAA,CACvCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CACpBiB,CAAAA,CAAWrX,CAAAoW,CAAO/sB,CAAP+sB,CAAejd,CAAfid,CACjBA,OAAOA,KAAI5sB,UAAJ4sB,CAAeA,CAACiB,CAADjB,CAAYA,EAAZA,CAA4BiB,CAA5BjB,CAAuCA,EAAvCA,CAAfA,CAFmBA,CAI9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAmCA,EAAnCA,CAAwB7rB,CAAA6rB,CAAMA,CAANA,CAAxBA,CAA0C7rB,CAAA6rB,CAAMA,CAANA,CAA1CA,CAAqDA,EADpBA,CAIlC,SAAMgB,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA+BpV,CAAAgU,CAAzBoB,EAAyBpB,CAAAA,CAAAA,CAClCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAAOpW,EAAAoW,CAAO/sB,CAAP+sB,CAAejd,CAAfid,CAAPA,CAA8BA,EADJA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAAgCA,EAAhCA,CAAwB7rB,CAAxB6rB,CAAuCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAvCA,CAA8DA,EAD7BA,CAIlC,SAAMiB,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAgCrV,CAAAgU,CAA1BqB,EAA0BrB,CAAAA,CAAAA,CACnCtH,GAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CAAEA,MAAOA,EAAAA,OAAAA,CAAAR,CAAAQ,CAAIA,IAAJA,CAAAA,CAATA,CACVwH;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAACpW,CAADoW,CAAS/sB,CAAT+sB,CAAgBjd,CAAhBid,CAAsBA,CAC1BA,MAAOpW,EAAAoW,CAAO/sB,CAAP+sB,CAAejd,CAAfid,CAAPA,CAA8BA,EADJA,CAG9BE,GAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACtW,CAADsW,CAASjtB,CAATitB,CAAgBnd,CAAhBmd,CAAsB7rB,CAAtB6rB,CAA6BA,CACjCtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAAA,CAA+CA,EAA/CA,CAAwBtW,CAAAsW,CAAOjtB,CAAPitB,CAAend,CAAfmd,CAAxBA,CAAsD7rB,CAAtD6rB,CAA8DA,EAD7BA,CAMlCO,SAASA,GAAyB,CAACzsB,CAAD,CAAOf,CAAP,CAAc,CAAE,MAAO,WAAP,CAAqBe,CAAA,CAAKf,CAAL,CAAa,CAAb,CAArB,EAAyCe,CAAA,CAAKf,CAAL,CAAzC,GAAyD,CAAzD,CAAF,C,CD1OnD9C,QADS4nB,EACE,CAAC/jB,CAAD,CAAO8W,CAAP,CAAa,CACpB,IAAA9W,KAAA,CAAYA,CACZ,KAAA6E,KAAA,CAAY7E,CAAA6E,KACZ,KAAA3E,OAAA,CAAcF,CAAAE,OACd,KAAIktB,CACCptB,EAAL,WAAqBuiB,GAArB,EAAqC,EAAEzL,CAAF,WAAkB2M,GAAlB,CAArC,CACI,IAAA3M,KADJ,CACgB,IAAI2M,EAAJ,CAAgBzjB,CAAhB,CADhB,CAGS,EAAE8W,CAAF,WAAkByO,GAAlB,CAAJ,GAAwC6H,CAAxC,CAAgDptB,CAAAkhB,WAAhD,GAAmF,CAAnF,CAAoEkM,CAAAltB,OAApE,EAAyG,CAAzG,CAAwFF,CAAAqK,UAAxF,CACD,IAAAyM,KADC,CACW,IAAIyO,EAAJ,CAAiBvlB,CAAjB,CAAuB8W,CAAvB,CADX,CAID,IAAAA,KAJC,CAIWA,CAZI,CADftc,CAAAupB,EAmBTsJ,SAAOA,GAAMA,CAACzI,CAADyI,CAASA,CAATA,CAAoBA,CAAXA,IAAAA,IAAWA,EAAXA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAWA,CAAXA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAClBA,OAD6BA,EACtBxV,OAAAwV,CAAcA,QAAAA,CAACta,CAADsa,CAAIra,CAAJqa,CAAUA,CAAAA,MAAAta,EAAAsa,CAAIta,CAAAsa,OAAAA,CAASra,CAATqa,CAAJA,CAAkBra,CAAlBqa,CAAxBA,CAA6CzI,CAA7CyI,CADsBA,CAQjC5C,CAAAA,CAAAA,CAAAA,UAAAD,EAAAC,OAAAA,CAAAA,QAAMA,EAAGA,CAAEA,MAAOA,KAAAjG,QAAAiG,EAATA,CACTjF;CAAA9E,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAO5J,CAAP4J,CAAqCA,CAA9B5J,CAAA4J,CAAAA,IAAAA,EAAAA,GAAA5J,CAAA4J,CAAOA,IAAA5J,KAAA4J,MAAAA,CAAgB1gB,CAAhB0gB,CAAPA,CAAA5J,CACR4J,OAAOA,KAAIA,IAAAvkB,YAAJukB,CAAqB1gB,CAArB0gB,CAA2B5J,CAA3B4J,CAD+BA,CAG1CwD,EAAAC,QAAAA,CAAAA,QAAOA,CAACllB,CAADklB,CAAQA,CACXA,MAAOA,KAAArN,KAAAqN,QAAAA,CAAkBllB,CAAlBklB,CADIA,CAGfE,EAAAnO,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAY,KAAAZ,IAAAA,CAAcjX,CAAdiX,CADAA,CAGXoO,EAAA/U,IAAAA,CAAAA,QAAGA,CAACtQ,CAADsQ,CAAQlP,CAARkP,CAAeA,CACdA,MAAOA,KAAAuH,KAAAvH,IAAAA,CAActQ,CAAdsQ,CAAqBlP,CAArBkP,CADOA,CAGlBgV,EAAAC,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,MAAOA,KAAA1N,KAAA0N,QAAAA,EADDA,CAGVS,EAAAC,QAAAA,CAAAA,QAAOA,CAAC7kB,CAAD6kB,CAAQA,CACXA,MAAOA,KAAApO,KAAAoO,QAAAA,CAAkB7kB,CAAlB6kB,CADIA,CAGf1qB,EAAA,EAAAI,EAAA,EAAA,EAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAChBlpB,CAAA,EAAAI,EAAA,EAAA,OAAO,KAAAkc,KAAA,CAAUsG,MAAAsG,SAAV,CAAA,EADS,CAGpB2J;CAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAACA,CAADA,CAAYA,CAAXA,IAAAA,IAAWA,EAAXA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAWA,CAAXA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CACHA,IAAiDA,CAAjDA,GAAIntB,CAACotB,CAADptB,CAAUotB,CAAAzQ,OAAAwQ,CAAcE,OAAdF,CAAVntB,QAAJmtB,CACIA,MAAOA,KAEHvW,EAAAA,CAASuW,IAATA,KACFG,EAAAA,CAAS1W,CAAFuW,WAAkB5J,GAAlB4J,CAEPA,EAAAA,OAAAA,CAAArJ,CAAAqJ,CAAIvW,CAAA0L,EAAJ6K,CAAAA,CAAArJ,CAAAqJ,CAA0BC,CAA1BD,CAAAA,CAFOA,CACPA,CAACA,IAADA,CAAAA,OAAAA,CAAArJ,CAAAqJ,CAAUC,CAAVD,CAAAA,CAEAtK,EAAAA,CAAUH,EAAAyK,CAA2BG,CAA3BH,CAEVI,EAAAA,CAAcJ,IAAI9K,EAAJ8K,CAAgBA,IAAAxoB,KAAhBwoB,CADCtK,CAAAsK,CAAQtK,CAAA7iB,OAARmtB,CAAyBA,CAAzBA,CACDA,CAAyCG,CAAzCH,CAA+CA,CAA/CA,CAAmDA,EAAnDA,CAAsDtK,CAAtDsK,CACpBA,OAAOA,KAAA3M,MAAA2M,CAAWI,CAAXJ,CAAwBA,IAAI5J,EAAJ4J,CAAgBI,CAAhBJ,CAAxBA,CAXOA,CAalB1M;CAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC3K,CAAD2K,CAAQgJ,CAARhJ,CAAaA,CACRA,IAAAzgB,EAAWygB,IAAXA,OAAAA,CACF5R,EAAO4R,IAAA7J,KAAA/H,KAAPA,EAAyB4R,CADvBA,CAEF+M,EAAQxtB,CAAQkc,EAAAA,EAAQpG,CAARoG,EAAiBuE,CAAjBvE,EAAsBrN,CACtC4e,EAAAA,EAAqBhN,QAAfA,GAAAA,MAAOgJ,EAAPhJ,CAA0BgJ,CAA1BhJ,CAAgC+M,CAAtCC,EAA+C5e,CAC1C4R,EAATA,CAAIgN,CAAJhN,GACIgN,CADJhN,CACS+M,CADT/M,CACwBA,GADxBA,CACkBgN,CADlBhN,CAC6B+M,CAD7B/M,CAGWA,EAAXA,CAAIvE,CAAJuE,GACIvE,CADJuE,CACW+M,CADX/M,CAC4BA,GAD5BA,CACoBvE,CADpBuE,CACiC+M,CADjC/M,CAGIgN,EAAJhN,CAASvE,CAATuE,GACIA,CAAAA,CAAAzlB,CAAAylB,CAAaA,CAACgN,CAADhN,CAAKvE,CAALuE,CAAbA,CAAAA,CAACvE,CAADuE,CAAAA,CAAAA,KAAAA,EAAAA,MAAAA,CAAOgN,CAAPhN,CAAAA,CAAAA,KAAAA,EAAAA,MADJA,CAGA+M,EAAA/M,CAAQA,CAACiN,QAAAjN,CAAS+M,CAAT/M,CAAkBgN,CAAlBhN,CAAuBvE,CAAvBuE,CAADA,EAA0CA,CAA1CA,CAAkC+M,CAAlC/M,CAA8CA,CAA9CA,CAAkD+M,CACpDG,EAAAA,CAAalN,IAAA3gB,KAAA2gB,MAAAA,CAAgBvE,CAAhBuE,CAAsBL,IAAA+C,IAAA1C,CAAS+M,CAAT/M,CAAgBzgB,CAAhBygB,CAAtBA,CACnBA,OAAOA,KAAAD,MAAAC,CAAWkN,CAAXlN,CAAuBA,IAAA7J,KAAA4J,MAAAC,CAAgBkN,CAAhBlN,CAAvBA,CAhBOA,CAkBlBtI,EAAAA,UAAAA,kBAAAA,CAAAA,QAAiBA,CAACK,CAADL,CAAUA,CACvBA,MAAO+F,GAAA/F,CAA4BK,CAA5BL,CAAqCA,IAAAxT,KAArCwT,CADgBA,CAG3BgD,EAAAA,UAAAA,GAAAA,CAAAA,QAAmBA,CAAC3C,CAAD2C,CAAUA,CACzBA,MAAOyS,GAAAzS,CAA8B3C,CAA9B2C,CAAuCA,IAAAxW,KAAvCwW,CAAkDA,IAAlDA,CADkBA,CAnF1B7gB,EAAA,EAAA,KAAA,GAAA,EAAAud;CAAA,OAAA,iBAAA,CAAA,CAAA,UAAA,EAAA,EAAA,UAAA,CAsBC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAY1N,QAAA,EAAA,CAAE,MAAO,KAAArK,KAAAqK,UAAT,CAAZ,CAtBD,CAAA,EAAA,WAAA,CAuBC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAa6W,QAAA,EAAA,CAAE,MAAO,KAAAlhB,KAAAkhB,WAAT,CAAb,CAvBD,CAAA,EAAA,CAwBE9D,MAAAD,YAxBF,CAAA,CAwBH,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAA2B,QAAA,EAAA,CACvB3iB,CAAA,EAAA,OAAO,SAAP,CAAiB,IAAAqK,KAAA,CAAUuY,MAAAD,YAAV,CAAjB,CAA8C,GADvB,CAA3B,CAxBG,CAAA,EAAA,EAuFA,SAAM4Q,EAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAyBjW,CAAAiM,CAAnBgK,CAAmBhK,CAAAA,CAAAA,CAE5BiK,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CAAEA,MAAOA,KAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CAATA,CACPE,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CAAEA,MAAOA,KAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CAATA,CACRD;CAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACpwB,CAADowB,CAAaE,CAAbF,CAAyBA,CAAxBpwB,CAAAowB,CAAAA,IAAAA,EAAAA,GAAApwB,CAAAowB,CAASA,CAATA,CAAApwB,CAAYswB,EAAAF,CAAAA,IAAAA,EAAAA,GAAAE,CAAAF,CAASA,CAATA,CAAAE,CAChBF,KAAIjuB,EAAOiuB,IAAAjuB,KAAA0gB,MAAAuN,CAAgBA,IAAIpP,EAApBoP,CACEA,EAAbA,CAAIpwB,CAAJowB,GACIjuB,CADJiuB,CACWjuB,CAAA2gB,MAAAsN,CAAWpwB,CAAXowB,CAAmBA,IAAA/tB,OAAnB+tB,CAAiCpwB,CAAjCowB,CADXA,CAGMG,EAAAA,CAASH,IAAII,EAAJJ,CAAcjuB,CAAdiuB,CAAoBA,IAAInC,CAAJmC,CAAkBjuB,CAAlBiuB,CAAwBE,CAAxBF,CAApBA,CACfG,EAAAluB,OAAA+tB,CAAgBA,IAAA/tB,OAAhB+tB,CAA8BE,CAA9BF,CAAuCA,CACvCA,OAAOG,EAPqBH,CAJ7BlW,EAAA,OAAA,iBAAA,CAAA,CAAA,UAAA,CAAA,CAAA,OACC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAA5V,KAAA4V,OAAT,CAAT,CADD,CAAA,CAcA,SAAM0Y,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA6BxW,CAAAiM,CAAvBuK,EAAuBvK,CAAAA,CAAAA,CAGhCwK,GAAAA,UAAAA,eAAAA,CAAAA,QAAcA,CAACtvB,CAADsvB,CAAQA,CAClBA,MAAOA,KAAAhN,aAAAgN,CAAkBtvB,CAAlBsvB,CADWA,CAGtBC,GAAAA,UAAAA,eAAAA,CAAAA,QAAcA,CAACvvB,CAADuvB,CAAQA,CAClBA,MAAOA,KAAAjN,aAAAiN,CAAkBvvB,CAAlBuvB,CAA0BA,CAA1BA,CAAPA,CAAsCA,IAAAjN,aAAAiN,CAAkBvvB,CAAlBuvB,CADpBA,CANnBzW;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,OACC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAA5V,KAAA4V,OAAT,CAAT,CADD,CAAA,aAEC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAe2L,QAAA,EAAA,CAAE,MAAO,KAAAvhB,KAAAuhB,aAAT,CAAf,CAFD,CAAA,CAUA,SAAMkN,GAAN,CAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAA2B3W,CAAAiM,CAArB0K,EAAqB1K,CAAAA,CAAAA,CAC9BJ,GAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAOA,KAAA7M,KAAA6M,WAAAA,CAAqB1kB,CAArB0kB,CADOA,CADf5L;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,UAIC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAAY6J,QAAA,EAAA,CACZ,IAAI5hB,CACJ,OAAA,CAAKA,CAAL,CAAY,IAAA0uB,GAAZ,EAEW1uB,CAFX,CAIK,CAAOA,CAAP,CAAc,IAAAA,KAAd,WAAoCuiB,GAApC,CAQE,IAAAmM,GARF,CAOU1uB,CAAAwiB,EACU3K,OAAA,CACb,QAAA,CAAC8W,CAAD,CAAO1K,CAAP,CAAiB,CAAA,MAAAA,EAAArC,UAAA/J,OAAA,CACjB,QAAA,CAAC8W,CAAD,CAAOC,CAAP,CAAUryB,CAAV,CAAgB,CAAA,MAAC0V,CAAC0c,CAAA,CAAKpyB,CAAL,CAAD0V,GAAa0c,CAAA,CAAKpyB,CAAL,CAAb0V,CAAuB,EAAvBA,OAAA,CAAiCgS,CAAAN,WAAA,CAAiBpnB,CAAjB,CAAjC,CAAD,EAA2DoyB,CAA3D,EAAmEA,CAAnE,CADC,CACwEA,CADxE,CAAA,CADJ,CAEmF,EAFnF,CAAAnW,IAAA,CAGhB,QAAA,CAACgV,CAAD,CAAUxtB,CAAAA,MAAA8jB,GAAA9jB,MAAAA,CAAA+jB,CAAA/jB,CAAAgkB,CAAAhkB,CAAiBwtB,CAAjBxtB,CAAAA,CAAAA,KAAAA,CAHM,CARpB,CAEM,IAAA0uB,GAFN,CAEwB1uB,CAAA4hB,UARjB,CAAZ,CAJD,CAAA,CAqCHzlB,SADS0yB,GACE,CAAC7uB,CAAD,CAAO8W,CAAP,CAAkC,CAA3BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI6U,EAAJ,CAAa3rB,CAAb,CAAP,CAAA8W,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADyC,CADjBgB,CAAAiM,CAAnB8K,EAAmB9K,CAAAA,CAAAA,CAU5B5nB,SALS2yB,GAKE,CAAC9uB,CAAD,CAAO8W,CAAP,CAAkC,CAA3BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI8U,EAAJ,CAAa5rB,CAAb,CAAP,CAAA8W,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADyC,CALjBgB,CAAAiM,CAAnB+K,EAAmB/K,CAAAA,CAAAA,CAAzBhM;CAAA,OAAA,iBAAA,CAAA,EAAA,UAAA,CAAA,CAAA,OAIC,CAAA,aAAA,CAAA,CAAA,CAAA,WAAA,CAAA,CAAA,CAAA,IAASnC,QAAA,EAAA,CAAE,MAAO,KAAA5V,KAAA4V,OAAT,CAAT,CAJD,CAAA,CAUHzZ,SADSkyB,GACE,CAACruB,CAAD,CAAO8W,CAAP,CAA2C,CAApCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAoBeiY,EAAtBA,EApBoC/uB,CAoBpC6E,KAAAjE,EAAAmuB,CAA2BA,IAAIrD,EAAJqD,CApBS/uB,CAoBT+uB,CAA3BA,CAAgDA,IAAI5C,EAAJ4C,CApBZ/uB,CAoBY+uB,CApBZ/uB,CAoBqC6E,KAAAjE,EAAzBmuB,CAA8CA,EAA9CA,CAAoDA,CAApDA,CApBzC,CAAAjY,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADkD,CAD3BgB,CAAAiW,CAAlBM,EAAkBN,CAAAA,CAAAA,CAI3B3R;QAAOA,GAAIA,CAACpc,CAADoc,CAAO4S,CAAP5S,CAAaA,CACpBA,GAAaA,CAAAA,CAAbA,GAAI4S,CAAJ5S,CACIA,MAAOpc,EAAAoc,WAAgBhd,WAAhBgd,CACDA,IAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAI0C,EAAjB1C,CAA0Bpc,CAAAE,OAA1Bkc,CAAuCA,IAAvCA,CAA6Cpc,CAA7Coc,CAAdA,CADCA,CAEDA,IAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAI8C,EAAjB9C,CAA2Bpc,CAAAE,OAA3Bkc,CAAwCA,IAAxCA,CAA8Cpc,CAA9Coc,CAAdA,CAEVA,QAAQpc,CAAA7D,YAARigB,EACIA,KAAKoC,SAALpC,CAAgBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAIuC,EAAjBvC,CAAyBpc,CAAAE,OAAzBkc,CAAsCA,IAAtCA,CAA4Cpc,CAA5Coc,CAAdA,CACvBA,MAAKqC,UAALrC,CAAiBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAIwC,EAAjBxC,CAA0Bpc,CAAAE,OAA1Bkc,CAAuCA,IAAvCA,CAA6Cpc,CAA7Coc,CAAdA,CACxBA,MAAKhd,UAALgd,CAAiBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAIyC,EAAjBzC,CAA0Bpc,CAAAE,OAA1Bkc,CAAuCA,IAAvCA,CAA6Cpc,CAA7Coc,CAAdA,CACxBA,MAAK9O,UAAL8O,CAAiBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAI2C,EAAjB3C,CAA0Bpc,CAAAE,OAA1Bkc,CAAuCA,IAAvCA,CAA6Cpc,CAA7Coc,CAAdA,CACxBA,MAAK/O,WAAL+O,CAAkBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAI4C,EAAjB5C,CAA2Bpc,CAAAE,OAA3Bkc,CAAwCA,IAAxCA,CAA8Cpc,CAA9Coc,CAAdA,CACzBA,MAAKsC,WAALtC,CAAkBA,MAAOA,KAAIiS,EAAJjS,CAAcA,IAAIgF,CAAJhF,CAAaA,IAAI6C,EAAjB7C;AAA2Bpc,CAAAE,OAA3Bkc,CAAwCA,IAAxCA,CAA8Cpc,CAA9Coc,CAAdA,CAN7BA,CAQAA,KAAMA,KAAI2J,SAAJ3J,CAAcA,uBAAdA,CAANA,CAdoBA,CAqBxBjgB,QADS8yB,GACE,CAACjvB,CAAD,CAAO8W,CAAP,CAA6C,CAAtCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAA+B9W,CAYtC6E,KAAAzD,UAAA2tB,GAAwBnzB,EAAAyF,KAAxB0tB,CAAyCA,IAAIrD,EAAJqD,CAZH/uB,CAYG+uB,CAAzCA,CAA8DA,IAAI1C,EAAJ0C,CAZxB/uB,CAYwB+uB,CAZvD,CAAAjY,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADoD,CAD3BgB,CAAAiW,CAApBkB,EAAoBlB,CAAAA,CAAAA,CAoB7B5xB,SAJS+yB,GAIE,CAAClvB,CAAD,CAAO8W,CAAP,CAA4C,CAArCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAA8B9W,CAFrC6E,KAAA1B,EAAA4rB,GAAmBlzB,EAAAszB,IAAnBJ,CAAkCA,IAAIzC,EAAJyC,CAEG/uB,CAFH+uB,CAAlCA,CAA0DA,IAAIvC,EAAJuC,CAErB/uB,CAFqB+uB,CAA8BA,CAA9BA,CAEnD,CAAAjY,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADmD,CAJ3BgB,CAAAiW,CAAnBmB,EAAmBnB,CAAAA,CAAAA,CAO5BC,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,MAAOA,KAAAnpB,KAAA1B,EAAA6qB,GAAmBnyB,EAAAszB,IAAnBnB,CAAkCA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CAAlCA,CAAuDA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CAD3DA,CAGPE,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CACJA,MAAOA,KAAArpB,KAAA1B,EAAA+qB,GAAmBryB,EAAAszB,IAAnBjB,CAAkCA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CAAlCA,CAAuDA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CAD1DA,CAGRkB;EAAAA,UAAAA,oBAAAA,CAAAA,QAAmBA,EAAGA,CAClBA,IAAIpvB,EAAOovB,IAAApvB,KAAA0gB,MAAA0O,CAAgBA,IAAIvQ,EAApBuQ,CACXA,QAAQA,IAAAvqB,KAAA1B,EAARisB,EACIA,KAAKvzB,EAAAszB,IAALC,CAAmBA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAIzC,EAAJyC,CAAqBpvB,CAArBovB,CAA2BA,CAA3BA,CAApBA,CAC1BA,MAAKvzB,EAAAuH,YAALgsB,CAA2BA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAIvC,EAAJuC,CAA6BpvB,CAA7BovB,CAAmCA,CAAnCA,CAApBA,CAFtCA,CAIAA,KAAMA,KAAIrJ,SAAJqJ,CAAcA,0BAAdA,CAAyCvzB,EAAAuzB,CAASA,IAAAvqB,KAAA1B,EAATisB,CAAzCA,CAAiEA,GAAjEA,CAANA,CANkBA,CAUtBjzB,SADSkzB,GACE,CAACrvB,CAAD,CAAO8W,CAAP,CAA0C,CAAnCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIqV,EAAJ,CAAkBnsB,CAAlB,CAAwB,CAAxB,CAAP,CAAA8W,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADiD,CADtBgB,CAAAiW,CAAtBsB,EAAsBtB,CAAAA,CAAAA,CAS/B5xB,SAJSmzB,GAIE,CAACtvB,CAAD,CAAO8W,CAAP,CAA4C,CAArCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAFeiY,EAAtBA,EAEqC/uB,CAFrC6E,KAAAjE,EAAAmuB,CAA2BA,IAAIrD,EAAJqD,CAEU/uB,CAFV+uB,CAA3BA,CAAgDA,IAAI5C,EAAJ4C,CAEX/uB,CAFW+uB,CAEX/uB,CAFoC6E,KAAAjE,EAAzBmuB,CAA8CA,EAA9CA,CAAoDA,CAApDA,CAEzC,CAAAjY,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADmD,CAJ3BgB,CAAAiW,CAAnBuB,EAAmBvB,CAAAA,CAAAA,CAO5BC;EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,MAA6BA,GAAtBA,EAAAA,IAAAnpB,KAAAjE,EAAAotB,CAA2BA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CAA3BA,CAAgDA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CADpDA,CAGPE,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CACJA,MAA6BA,GAAtBA,EAAAA,IAAArpB,KAAAjE,EAAAstB,CAA2BA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CAA3BA,CAAgDA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CADnDA,CAKR/xB,SADSozB,GACE,CAACvvB,CAAD,CAAO8W,CAAP,CAA0C,CAAnCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIqV,EAAJ,CAAkBnsB,CAAlB,CAAwB,CAAxB,CAAP,CAAA8W,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADiD,CADpBgB,CAAAiW,CAAxBwB,EAAwBxB,CAAAA,CAAAA,CAIjCqB;EAAAA,UAAAA,oBAAAA,CAAAA,QAAmBA,EAAGA,CAClBA,IAAIpvB,EAAOovB,IAAApvB,KAAA0gB,MAAA0O,CAAgBA,IAAIvQ,EAApBuQ,CACXA,QAAQA,IAAAvqB,KAAA1B,EAARisB,EACIA,KAAKtzB,EAAAgI,OAALsrB,CAAsBA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAIxC,EAAJwC,CAAwBpvB,CAAxBovB,CAA8BA,CAA9BA,CAApBA,CAC7BA,MAAKtzB,EAAAsH,YAALgsB,CAA2BA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAIvC,EAAJuC,CAA6BpvB,CAA7BovB,CAAmCA,CAAnCA,CAApBA,CAClCA,MAAKtzB,EAAA0zB,YAALJ,CAA2BA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAItC,EAAJsC,CAA6BpvB,CAA7BovB,CAAmCA,CAAnCA,CAApBA,CAClCA,MAAKtzB,EAAA2zB,WAALL,CAA0BA,MAAOA,KAAIf,EAAJe,CAAcpvB,CAAdovB,CAAoBA,IAAIrC,EAAJqC,CAA4BpvB,CAA5BovB,CAAkCA,CAAlCA,CAApBA,CAJrCA,CAMAA,KAAMA,KAAIrJ,SAAJqJ,CAAcA,0BAAdA,CAAyCtzB,EAAAszB,CAASA,IAAAvqB,KAAA1B,EAATisB,CAAzCA,CAAiEA,GAAjEA,CAANA,CARkBA,CAetBjzB,SAJSuzB,GAIE,CAAC1vB,CAAD,CAAO8W,CAAP,CAAgD,CAAzCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAkC9W,CAFzC6E,KAAA1B,EAAA4rB,GAAmBhzB,EAAAyI,WAAnBuqB,CAA6CA,IAAI/B,EAAJ+B,CAEJ/uB,CAFI+uB,CAA7CA,CAA+EA,IAAI5C,EAAJ4C,CAEtC/uB,CAFsC+uB,CAAwBA,CAAxBA,CAExE,CAAAjY,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADuD,CAJ3BgB,CAAAiW,CAAvB2B,EAAuB3B,CAAAA,CAAAA,CAOhCC;EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,MAAOA,KAAAnpB,KAAA1B,EAAA6qB,GAAmBjyB,EAAAyI,WAAnBwpB,CAA6CA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CAA7CA,CAAkEA,IAAAC,QAAAD,CAAaA,CAAbA,CAAgBA,CAAhBA,CADtEA,CAGPE,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CACJA,MAAOA,KAAArpB,KAAA1B,EAAA+qB,GAAmBnyB,EAAAyI,WAAnB0pB,CAA6CA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CAA7CA,CAAkEA,IAAAD,QAAAC,CAAaA,CAAbA,CAAgBA,CAAhBA,CADrEA,CAKR/xB,SADSwzB,GACE,CAAC3vB,CAAD,CAAO8W,CAAP,CAAoC,CAA7BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI+S,EAAJ,CAAe7pB,CAAf,CAAP,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CAD2C,CADjBgB,CAAAwW,CAArBqB,EAAqBrB,CAAAA,EAAAA,CAI9BsB,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,MAAOA,KAAIC,EAAJD,CAAeA,IAAA5vB,KAAA0gB,MAAAkP,CAAgBA,IAAInuB,EAApBmuB,CAAfA,CADFA,CAKTzzB,SADS2zB,GACE,CAAC9vB,CAAD,CAAO8W,CAAP,CAA4D,CAArDA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIqV,EAAJ,CAAkBnsB,CAAlB,CAAwBA,CAAA6E,KAAA1C,GAAxB,CAAP,CAAA2U,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADmE,CADhCgB,CAAAiW,CAA9B+B,EAA8B/B,CAAAA,CAAAA,CAMvC5xB,SADS0zB,GACE,CAAC7vB,CAAD,CAAO8W,CAAP,CAAkC,CAA3BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIgT,EAAJ,CAAa9pB,CAAb,CAAP,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADyC,CADjBgB,CAAAwW,CAAnBuB,EAAmBvB,CAAAA,EAAAA,CAI5ByB;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CACPA,MAAOA,KAAIJ,EAAJI,CAAiBA,IAAA/vB,KAAA0gB,MAAAqP,CAAgBA,IAAIluB,EAApBkuB,CAAjBA,CADAA,CAKX5zB,SADS6zB,GACE,CAAChwB,CAAD,CAAO8W,CAAP,CAAkC,CAA3BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI2S,EAAJ,CAAazpB,CAAb,CAAP,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADyC,CADjBgB,CAAAwW,CAAnB0B,EAAmB1B,CAAAA,EAAAA,CAI5B3K,GAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAOA,KAAA7M,KAAA6M,WAAAA,CAAqB1kB,CAArB0kB,CADOA,CAKlBxnB,SADS8zB,GACE,CAACjwB,CAAD,CAAO8W,CAAP,CAA2C,CAApCA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI8S,EAAJ,CAAsB5pB,CAAtB,CAAP,CAAA8W,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADkD,CADjBgB,CAAAiM,CAA5BkM,EAA4BlM,CAAAA,CAAAA,CAIrCJ,GAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAOA,KAAA7M,KAAA6M,WAAAA,CAAqB1kB,CAArB0kB,CADOA,CAKlBxnB,SADS+zB,GACE,CAAClwB,CAAD,CAAO8W,CAAP,CAAiC,CAA1BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIyU,EAAJ,CAAYvrB,CAAZ,CAAP,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CADwC,CADjBgB,CAAA2W,CAAlByB,EAAkBzB,CAAAA,EAAAA,CAI3B0B,GAAAA,UAAAA,SAAAA,CAAAA,QAAQA,EAAGA,CACPA,MAAOA,KAAIC,EAAJD,CAAiBA,IAAAnwB,KAAA0gB,MAAAyP,CAAgBA,IAAI7V,EAAJ6V,CAAWA,IAAAtrB,KAAAqC,SAAXipB,CAAhBA,CAAjBA,CADAA,CAKXh0B;QADSi0B,GACE,CAACpwB,CAAD,CAAO8W,CAAP,CAAoC,CAA7BA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAIqU,EAAJ,CAAenrB,CAAf,CAAP,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CAD2C,CADjBgB,CAAA2W,CAArB2B,EAAqB3B,CAAAA,EAAAA,CAI9B4B,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAChyB,CAADgyB,CAAqBA,CACtBA,MAAOA,KAAIH,EAAJG,CAAcA,IAAArwB,KAAA0gB,MAAA2P,CAAgBA,IAAIvQ,EAAJuQ,CADnCA,IAAAA,EAAAA,GAAAhyB,CAAAgyB,CAAaA,CAAAA,CAAbA,CAAAhyB,CACmCgyB,CAAqBA,IAAAxrB,KAAAqC,SAArBmpB,CAAhBA,CAAdA,CADeA,CAK1Bl0B,SADSm0B,GACE,CAACtwB,CAAD,CAAO8W,CAAP,CAAsG,CAA/FA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAQ9W,CAAA6E,KAAAhG,KAAA,GAAmBlD,EAAAoD,OAAnB,CAAsC,IAAI8rB,EAAJ,CAAc7qB,CAAd,CAAtC,CAA4D,IAAIkrB,EAAJ,CAAmBlrB,CAAnB,CAApE,CAAA8W,CACd,GAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CAD6G,CADpFgB,CAAA2W,CAApB6B,EAAoB7B,CAAAA,EAAAA,CAM7BtyB;QADSo0B,GACE,CAACvwB,CAAD,CAAO8W,CAAP,CAAgF,CAAzEA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAO,IAAI6O,EAAJ,CAAmB3lB,CAAAiH,WAAnB,CAAoC,IAAIonB,EAAJ,CAAcruB,CAAAud,QAAd,CAApC,CAAP,CAAAzG,CACd,EAAA,KAAA,CAAA,IAAA,CAAM9W,CAAN,CAAY8W,CAAZ,CACIA,EAAJ,WAAoByO,GAApB,GACIzO,CADJ,CACWA,CAAAA,KADX,CAGA,IAAI9W,CAAJ,WAAoBwhB,GAApB,EAAsC1K,CAAtC,WAAsD6O,GAAtD,CACI,IAAApI,QACA,CADezG,CAAAyG,QACf,CAAA,IAAAtW,WAAA,CAAkBjH,CAAAiH,WAFtB,KAIK,IAAIjH,CAAJ,WAAoBuiB,GAApB,EAAmCzL,CAAnC,WAAmD2M,GAAnD,CACKX,CAIN,CAJehM,CAAA0L,EAIf,CADA,IAAAvb,WACA,CADkB6b,CAAA,CAAOA,CAAA5iB,OAAP,CAAuB,CAAvB,CAAA+G,WAClB,CAAA,IAAAsW,QAAA,CAAeuF,CAAAjL,OAAA,CAAc,QAAA,CAAC2Y,CAAD,CAAOC,CAAP,CAAgB,CAAA,MAACD,EAAD,CAAuBA,CAAAnD,OAAA,CAAYoD,CAAAlT,QAAZ,CAAvB,CAAQkT,CAAAlT,QAAR,CAA9B,CAAgF,IAAhF,CALd,KAQD,MAAM,KAAIwI,SAAJ,CAAc,oCAAd,CAAN,CAjBmF,CADzDjO,CAAAiM,CAAzBwM,EAAyBxM,CAAAA,CAAAA,CAqBlC2M,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAACzxB,CAADyxB,CAAQA,CAAEA,MAAOA,KAAAnT,QAAArH,IAAAwa,CAAiBzxB,CAAjByxB,CAATA,CACd1E;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAAC5mB,CAAD4mB,CAAMA,CAAEA,MAAOA,KAAA/kB,WAAAiP,IAAA8V,CAAoB5mB,CAApB4mB,CAATA,CACd2E,GAAAA,UAAAA,cAAAA,CAAAA,QAAaA,CAACtwB,CAADswB,CAAQA,CAAEA,MAAOA,KAAA1pB,WAAAie,QAAAyL,CAAwBtwB,CAAxBswB,CAATA,CAGrBx0B,SAAA,GAAW,CAAC6D,CAAD,CAAO,CAEd,IAAAA,KAAA,CAAYA,CAFE,CADgI8X,CAAAK,CAArByY,EAAqBzY,CAAAA,EAAAA,CAKlJU,EAAAA,CAAAA,EAAAA,UAAAgY,EAAAhY,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAIgW,EAAJhW,CAAeA,IAAA7Y,KAAf6Y,CAATA,CACjBiY,EAAA/X,SAAAA,CAAAA,QAAQA,EAAQA,CAAEA,MAAOA,KAAIsV,EAAJtV,CAAcA,IAAA/Y,KAAd+Y,CAATA,CAChBgY,EAAA7X,WAAAA,CAAAA,QAAUA,EAAQA,CAAEA,MAAOA,KAAI+V,EAAJ/V,CAAgBA,IAAAlZ,KAAhBkZ,CAATA,CAClB8X,EAAA5X,YAAAA,CAAAA,QAAWA,EAAQA,CAAEA,MAAOA,KAAIuW,EAAJvW,CAAiBA,IAAApZ,KAAjBoZ,CAATA,CACnB6X,EAAA3X,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAIuW,EAAJvW,CAAeA,IAAAtZ,KAAfsZ,CAATA,CACjB4X,EAAA1X,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAIsV,EAAJtV,CAAeA,IAAAxZ,KAAfwZ,CAATA,CACjB2X;CAAAzX,aAAAA,CAAAA,QAAYA,EAAQA,CAAEA,MAAOA,KAAI2V,EAAJ3V,CAAkBA,IAAA1Z,KAAlB0Z,CAATA,CACpB0X,EAAAxX,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAIsV,EAAJtV,CAAeA,IAAA5Z,KAAf4Z,CAATA,CACjByX,EAAAvX,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAIwV,EAAJxV,CAAeA,IAAA9Z,KAAf8Z,CAATA,CACjBwX,EAAAtX,eAAAA,CAAAA,QAAcA,EAAQA,CAAEA,MAAOA,KAAIuV,EAAJvV,CAAoBA,IAAAha,KAApBga,CAATA,CACtBuX,EAAArX,cAAAA,CAAAA,QAAaA,EAAQA,CAAEA,MAAOA,KAAIwV,EAAJxV,CAAmBA,IAAAla,KAAnBka,CAATA,CACrBsX,EAAApX,UAAAA,CAAAA,QAASA,EAAQA,CAAEA,MAAOA,KAAI4V,EAAJ5V,CAAeA,IAAApa,KAAfoa,CAATA,CACjBqX,EAAAlX,YAAAA,CAAAA,QAAWA,EAAQA,CAAEA,MAAOA,KAAI6V,EAAJ7V,CAAiBA,IAAAva,KAAjBua,CAATA,CACnBmX,EAAAjX,WAAAA,CAAAA,QAAUA,EAAQA,CAAEA,MAAOA,KAAI6V,EAAJ7V,CAAgBA,IAAAza,KAAhBya,CAATA,CAClBkX,EAAAhX,qBAAAA,CAAAA,QAAoBA,EAAQA,CAAEA,MAAOA,KAAImV,EAAJnV,CAA0BA,IAAA3a,KAA1B2a,CAATA,CAC5BiX,EAAA/W,mBAAAA,CAAAA,QAAkBA,EAAQA,CAAEA,MAAOA,KAAIoV,EAAJpV,CAAwBA,IAAA7a,KAAxB6a,CAATA,CAC1BgX;CAAA9W,SAAAA,CAAAA,QAAQA,EAAQA,CAAEA,MAAOA,KAAImV,EAAJnV,CAAcA,IAAA/a,KAAd+a,CAATA,CAChB+W,EAAA5W,gBAAAA,CAAAA,QAAeA,EAAQA,CAAEA,MAAOA,KAAIqV,EAAJrV,CAAqBA,IAAAlb,KAArBkb,CAATA,CAtBpB,KAAMwO,GAAgB,QAAA,CAACkH,CAAD,CAAmB,CAAA,MAAA,SAAA,CAAC5wB,CAAD,CAAU,CAAA,MAAAoe,GAAA,CAA4B,IAAIwS,CAAJ,CAAiB5wB,CAAjB,CAA5B,CAAoDA,CAAA6E,KAApD,CAAA,CAAV,CAApB,CAA+F,EAA/F,C,CErW5BktB,QAASA,GAAQ,CAAC1xB,CAAD,CAAQ,CACT,CAAZ,CAAIA,CAAJ,GACIA,CADJ,CACY,UADZ,CACyBA,CADzB,CACiC,CADjC,CAGA,OAAO,IAAP,CAAYA,CAAAgd,SAAA,CAAe,EAAf,CAJS,CAOzB,IAAM2U,GAAe,CAAC,CAAD,CACjB,EADiB,CAEjB,GAFiB,CAGjB,GAHiB,CAIjB,GAJiB,CAKjB,GALiB,CAMjB,GANiB,CAOjB,GAPiB,CAQjB,GARiB,CAUjB71B,SADS81B,GACE,CAAC3yB,CAAD,CAAS,CAChB,IAAAA,OAAA,CAAcA,CADE,CAGpBmO,CAAAA,CAAAA,EAAAA,UAAAykB,EAAAzkB,KAAAA,CAAAA,QAAIA,EAAGA,CAAEA,MAAOA,KAAAnO,OAAAmO,CAAYA,CAAZA,CAATA,CACP0kB,EAAA3kB,IAAAA,CAAAA,QAAGA,EAAGA,CAAEA,MAAOA,KAAAlO,OAAAkO,CAAYA,CAAZA,CAATA,CACN4kB;QAAAA,GAAMA,CAANA,CAAMA,CAACtkB,CAADskB,CAAQA,CAGVA,IAAMC,EAAID,IAAI1T,WAAJ0T,CAAgBA,CACtBA,CAAA9yB,OAAA8yB,CAAYA,CAAZA,CADsBA,GACHA,EADGA,CAEtBA,CAAA9yB,OAAA8yB,CAAYA,CAAZA,CAFsBA,CAELA,KAFKA,CAGtBA,CAAA9yB,OAAA8yB,CAAYA,CAAZA,CAHsBA,GAGHA,EAHGA,CAItBA,CAAA9yB,OAAA8yB,CAAYA,CAAZA,CAJsBA,CAILA,KAJKA,CAAhBA,CAMJE,EAAAA,CAAIF,IAAI1T,WAAJ0T,CAAgBA,CACtBtkB,CAAAxO,OAAA8yB,CAAaA,CAAbA,CADsBA,GACFA,EADEA,CAEtBtkB,CAAAxO,OAAA8yB,CAAaA,CAAbA,CAFsBA,CAEJA,KAFIA,CAGtBtkB,CAAAxO,OAAA8yB,CAAaA,CAAbA,CAHsBA,GAGFA,EAHEA,CAItBtkB,CAAAxO,OAAA8yB,CAAaA,CAAbA,CAJsBA,CAIJA,KAJIA,CAAhBA,CAMVA,KAAIG,EAAUF,CAAAD,CAAEA,CAAFA,CAAVG,CAAiBD,CAAAF,CAAEA,CAAFA,CACrBA,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,CAAiBG,CAAjBH,CAA2BA,KAC3BA,KAAI3b,EAAM8b,CAAN9b,GAAkB2b,EACtBG,EAAAH,CAAUC,CAAAD,CAAEA,CAAFA,CAAVA,CAAiBE,CAAAF,CAAEA,CAAFA,CACjB3b,EAAA2b,EAAOG,CACPA,EAAAH,CAAWC,CAAAD,CAAEA,CAAFA,CAAXA,CAAkBE,CAAAF,CAAEA,CAAFA,CAAlBA,GAA4BA,CAC5B3b,EAAA2b,EAAOG,CACPH,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,EAAkB3b,CAAlB2b,EAAyBA,EACzBA,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,CAAkB3b,CAAA2b,GAAQA,CAARA,CAAYG,CAAZH,CA9CPI,KA8COJ,CAAmCA,CACrDA,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,EAAkB3b,CAAlB2b,GAA0BA,EAC1BA,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,EAAkBC,CAAAD,CAAEA,CAAFA,CAAlBA,CAAyBE,CAAAF,CAAEA,CAAFA,CAAzBA,CAAgCC,CAAAD,CAAEA,CAAFA,CAAhCA,CAAuCE,CAAAF,CAAEA,CAAFA,CAAvCA,CAA8CC,CAAAD,CAAEA,CAAFA,CAA9CA,CAAqDE,CAAAF,CAAEA,CAAFA,CACrDA,EAAA9yB,OAAA8yB,CAAYA,CAAZA,CAAAA,EAAmBC,CAAAD,CAAEA,CAAFA,CAAnBA,CAA0BE,CAAAF,CAAEA,CAAFA,CAA1BA,CAAiCC,CAAAD,CAAEA,CAAFA,CAAjCA,CAAwCE,CAAAF,CAAEA,CAAFA,CAAxCA,CAA+CC,CAAAD,CAAEA,CAAFA,CAA/CA,CAAsDE,CAAAF,CAAEA,CAAFA,CAAtDA,CAA6DC,CAAAD,CAAEA,CAAFA,CAA7DA,CAAoEE,CAAAF,CAAEA,CAAFA,CAApEA,EAA6EA,EA1BnEA;AA6BdK,QAAAA,GAAKA,CAALA,CAAKA,CAAC3kB,CAAD2kB,CAAQA,CACTA,IAAMhc,EAAOgc,CAAAnzB,OAAAmzB,CAAYA,CAAZA,CAAPhc,CAAwB3I,CAAAxO,OAAAmzB,CAAaA,CAAbA,CAAxBhc,GAA6Cgc,CACnDA,EAAAnzB,OAAAmzB,CAAYA,CAAZA,CAAAA,EAAkB3kB,CAAAxO,OAAAmzB,CAAaA,CAAbA,CACdhc,EAAJgc,CAAWA,CAAAnzB,OAAAmzB,CAAYA,CAAZA,CAAXA,GAA8BA,CAA9BA,EACIA,EAAEA,CAAAnzB,OAAAmzB,CAAYA,CAAZA,CAENA,EAAAnzB,OAAAmzB,CAAYA,CAAZA,CAAAA,CAAiBhc,CANRgc,CAQbC,CAAAC,SAAAA,CAAAA,QAAQA,CAAC7kB,CAAD6kB,CAAQA,CACZA,MAAOA,KAAArzB,OAAAqzB,CAAYA,CAAZA,CAAPA,CAAwB7kB,CAAAxO,OAAAqzB,CAAaA,CAAbA,CAAxBA,EACKA,IAAArzB,OAAAqzB,CAAYA,CAAZA,CADLA,GACwB7kB,CAAAxO,OAAAqzB,CAAaA,CAAbA,CADxBA,EAC2CA,IAAArzB,OAAAqzB,CAAYA,CAAZA,CAD3CA,CAC4D7kB,CAAAxO,OAAAqzB,CAAaA,CAAbA,CAFhDA,CAIhBC,EAAAhlB,OAAAA,CAAAA,QAAMA,CAACE,CAADF,CAAQA,CACVA,MAAOA,KAAAtO,OAAAsO,CAAYA,CAAZA,CAAPA,GAA0BE,CAAAxO,OAAAsO,CAAaA,CAAbA,CAA1BA,EAA6CA,IAAAtO,OAAAsO,CAAYA,CAAZA,CAA7CA,EAA+DE,CAAAxO,OAAAsO,CAAaA,CAAbA,CADrDA,CAGdilB,EAAAC,YAAAA,CAAAA,QAAWA,CAAChlB,CAADglB,CAAQA,CACfA,MAAOhlB,EAAA6kB,SAAAG,CAAeA,IAAfA,CADQA,CAGnBC,EAAAC,IAAAA,CAAAA,QAAGA,EAAGA,CACFA,MAAUjB,GAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CAAVA,CAAkCA,GAAlCA,CAAsCjB,EAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CADpCA,CAIH,SAAM9T,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAqBpH,CAAAma,CAAf/S,EAAe+S,CAAAA,EAAAA,CACxBgB;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAACnlB,CAADmlB,CAAQA,CACTb,EAAAa,CAAAA,IAAAA,CAAYnlB,CAAZmlB,CACAA,OAAOA,KAFEA,CAIbC,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACplB,CAADolB,CAAQA,CACRT,EAAAS,CAAAA,IAAAA,CAAWplB,CAAXolB,CACAA,OAAOA,KAFCA,CAIZC,SAAOA,GAAQA,CAACC,CAADD,CAAOE,CAAPF,CAAcA,CAEzBA,MAAOF,CADIE,IAAIjU,EAAJiU,CAAWA,IAAIzU,WAAJyU,CAAgBC,CAAA9zB,OAAhB6zB,CAAXA,CACJF,OAAAE,CAAWE,CAAXF,CAFkBA,CAS1B,QAAMrU,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAoBhH,CAAAma,CAAdnT,EAAcmT,CAAAA,EAAAA,CACvBqB,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAlBA,CAAmCA,CACnCA,KAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CACIA,EAAtBA,EAAIA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAJA,EACIA,EAAEA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAENA,OAAOA,KANFA,CAQTL,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAACnlB,CAADmlB,CAAQA,CACTb,EAAAa,CAAAA,IAAAA,CAAYnlB,CAAZmlB,CACAA,OAAOA,KAFEA,CAIbC,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACplB,CAADolB,CAAQA,CACRT,EAAAS,CAAAA,IAAAA,CAAWplB,CAAXolB,CACAA,OAAOA,KAFCA,CAIZP;EAAAA,UAAAA,SAAAA,CAAAA,QAAQA,CAAC7kB,CAAD6kB,CAAQA,CAEZA,IAAMY,EAAYZ,IAAArzB,OAAAqzB,CAAYA,CAAZA,CAAZY,EAA8BZ,CAApCA,CACMa,EAAa1lB,CAAAxO,OAAAqzB,CAAaA,CAAbA,CAAba,EAAgCb,CACtCA,OAAOY,EAAPZ,CAAmBa,CAAnBb,EACKY,CADLZ,GACmBa,CADnBb,EACiCA,IAAArzB,OAAAqzB,CAAYA,CAAZA,CADjCA,CACkD7kB,CAAAxO,OAAAqzB,CAAaA,CAAbA,CALtCA,CAOhBc,SAAOA,GAAUA,CAACvJ,CAADuJ,CAAMC,CAAND,CAAuCA,CAAjCC,CAAAD,CAAAA,IAAAA,EAAAA,GAAAC,CAAAD,CAAaA,IAAI/U,WAAJ+U,CAAgBA,CAAhBA,CAAbA,CAAAC,CAEnBD,KAAMH,EAASpJ,CAAAyJ,WAAAF,CAAeA,GAAfA,CAAfA,CACMvzB,EAASgqB,CAAAhqB,OACX0zB,EAAAA,CAAMH,IAAI3U,EAAJ2U,CAAUC,CAAVD,CACVA,KAAKA,IAAII,EAAOP,CAAAG,CAASA,CAATA,CAAaA,CAA7BA,CAAgCI,CAAhCJ,CAAuCvzB,CAAvCuzB,CAAAA,CAAgDA,CAC5CA,IAAMK,EAnHUC,CAmHFN,CAAsBvzB,CAAtBuzB,CAA+BI,CAA/BJ,CAnHEM,CAmHFN,CACYvzB,CADZuzB,CACqBI,CADnCJ,CAEMxP,EAAQwP,IAAI3U,EAAJ2U,CAAUA,IAAI/U,WAAJ+U,CAAgBA,CAACO,QAAAP,CAASvJ,CAAA+J,OAAAR,CAAWI,CAAXJ,CAAiBK,CAAjBL,CAATA,CAAkCA,EAAlCA,CAADA,CAAwCA,CAAxCA,CAAhBA,CAAVA,CAEdG,EAAAX,MAAAQ,CADiBA,IAAI3U,EAAJ2U,CAAUA,IAAI/U,WAAJ+U,CAAgBA,CAACzB,EAAAyB,CAAaK,CAAbL,CAADA,CAAsBA,CAAtBA,CAAhBA,CAAVA,CACjBA,CACAG,EAAAV,KAAAO,CAASxP,CAATwP,CACAI,EAAAJ,EAAQK,CAPoCL,CAShDA,MAAOH,EAAAG,CAASG,CAAAN,OAAAG,EAATA,CAAwBG,CAdqBH,CA0BxDt3B,QADS+3B,GACE,CAAC50B,CAAD,CAAS,CAChB,IAAAA,OAAA,CAAcA,CADE,CAOpBmO,CAAAA,CAAAA,EAAAA,UAAAykB;CAAAzkB,KAAAA,CAAAA,QAAIA,EAAGA,CACHA,MAAOA,KAAIqR,EAAJrR,CAAUA,IAAIiR,WAAJjR,CAAgBA,IAAAnO,OAAAA,OAAhBmO,CAAoCA,IAAAnO,OAAAC,WAApCkO,CAA6DA,CAA7DA,CAAgEA,CAAhEA,CAAVA,CADJA,CAGP0kB,EAAA3kB,IAAAA,CAAAA,QAAGA,EAAGA,CACFA,MAAOA,KAAIsR,EAAJtR,CAAUA,IAAIkR,WAAJlR,CAAgBA,IAAAlO,OAAAA,OAAhBkO,CAAoCA,IAAAlO,OAAAC,WAApCiO,CAA4DA,CAA5DA,CAAVA,CADLA,CAGN2mB,EAAAb,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAlBA,CAAmCA,CACnCA,KAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAClBA,KAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAClBA,KAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAAA,CAAiBA,CAACA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CACIA,EAAtBA,EAAIA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAJA,EACIA,EAAEA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAEgBA,EAAtBA,EAAIA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAJA,EACIA,EAAEA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAEgBA,EAAtBA,EAAIA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAAJA,EACIA,EAAEA,IAAAh0B,OAAAg0B,CAAYA,CAAZA,CAENA,OAAOA,KAdFA,CAgBTc;CAAAnB,MAAAA,CAAAA,QAAKA,CAACnlB,CAADmlB,CAAQA,CAGTA,IAAMoB,EAAKpB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACA,IAAA3zB,OAAA2zB,CAAYA,CAAZA,CAADA,CAAiBA,CAAjBA,CAAhBA,CAAXA,CAAXA,CACMqB,EAAKrB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACA,IAAA3zB,OAAA2zB,CAAYA,CAAZA,CAADA,CAAiBA,CAAjBA,CAAhBA,CAAXA,CADXA,CAEMsB,EAAKtB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACA,IAAA3zB,OAAA2zB,CAAYA,CAAZA,CAADA,CAAiBA,CAAjBA,CAAhBA,CAAXA,CAFXA,CAGMuB,EAAKvB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACA,IAAA3zB,OAAA2zB,CAAYA,CAAZA,CAADA,CAAiBA,CAAjBA,CAAhBA,CAAXA,CAHXA,CAIMwB,EAAKxB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACnlB,CAAAxO,OAAA2zB,CAAaA,CAAbA,CAADA,CAAkBA,CAAlBA,CAAhBA,CAAXA,CAJXA,CAKMyB,EAAKzB,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACnlB,CAAAxO,OAAA2zB,CAAaA,CAAbA,CAADA,CAAkBA,CAAlBA,CAAhBA,CAAXA,CALXA,CAMM0B,EAAK1B,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACnlB,CAAAxO,OAAA2zB,CAAaA,CAAbA,CAADA,CAAkBA,CAAlBA,CAAhBA,CAAXA,CACL2B,EAAAA,CAAK3B,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACnlB,CAAAxO,OAAA2zB,CAAaA,CAAbA,CAADA,CAAkBA,CAAlBA,CAAhBA,CAAXA,CACXA,KAAIV,EAAUsC,EAAA5B,CAAgBuB,CAAhBvB,CAAoB2B,CAApB3B,CACdA,KAAA3zB,OAAA2zB,CAAYA,CAAZA,CAAAA,CAAiBV,CAAA/kB,IAAAylB,EACjBA,KAAIxc,EAAMwc,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,CAACV,CAAA9kB,KAAAwlB,EAADA,CAAiBA,CAAjBA,CAAhBA,CAAXA,CACVV,EAAAU,CAAU4B,EAAA5B,CAAgBsB,CAAhBtB,CAAoB2B,CAApB3B,CACVxc,EAAAyc,KAAAD,CAASV,CAATU,CACAV,EAAAU,CAAU4B,EAAA5B,CAAgBuB,CAAhBvB,CAAoB0B,CAApB1B,CACVxc,EAAAyc,KAAAD,CAASV,CAATU,CACAA;IAAA3zB,OAAA2zB,CAAYA,CAAZA,CAAAA,CAAiBxc,CAAAjJ,IAAAylB,EACjBA,KAAA3zB,OAAA2zB,CAAYA,CAAZA,CAAAA,CAAkBxc,CAAAkc,SAAAM,CAAaV,CAAbU,CAAAA,CAAwBA,CAAxBA,CAA4BA,CAC9CA,KAAA3zB,OAAA2zB,CAAYA,CAAZA,CAAAA,CAAiBxc,CAAAhJ,KAAAwlB,EAEjBC,EADWD,IAAI/T,EAAJ+T,CAAWA,IAAIvU,WAAJuU,CAAgBA,IAAA3zB,OAAAA,OAAhB2zB,CAAoCA,IAAA3zB,OAAAC,WAApC0zB,CAA6DA,CAA7DA,CAAgEA,CAAhEA,CAAXA,CACXC,MAAAD,CAAU4B,EAAA5B,CAAgBqB,CAAhBrB,CAAoB2B,CAApB3B,CAAVA,CAAAC,KAAAD,CACU4B,EAAA5B,CAAgBsB,CAAhBtB,CAAoB0B,CAApB1B,CADVA,CAAAC,KAAAD,CAEU4B,EAAA5B,CAAgBuB,CAAhBvB,CAAoByB,CAApBzB,CAFVA,CAGAA,KAAA3zB,OAAA2zB,CAAYA,CAAZA,CAAAA,EAAkB4B,EAAA5B,CAAgBoB,CAAhBpB,CAAoB2B,CAApB3B,CAAAC,KAAAD,CACR4B,EAAA5B,CAAgBqB,CAAhBrB,CAAoB0B,CAApB1B,CADQA,CAAAC,KAAAD,CAER4B,EAAA5B,CAAgBsB,CAAhBtB,CAAoByB,CAApBzB,CAFQA,CAAAC,KAAAD,CAGR4B,EAAA5B,CAAgBuB,CAAhBvB,CAAoBwB,CAApBxB,CAHQA,CAAAzlB,IAAAylB,EAIlBA,OAAOA,KA7BEA,CA+Bb6B;CAAA5B,KAAAA,CAAAA,QAAIA,CAACplB,CAADolB,CAAQA,CACRA,IAAI6B,EAAO7B,IAAIxU,WAAJwU,CAAgBA,CAAhBA,CACX6B,EAAA7B,CAAKA,CAALA,CAAAA,CAAWA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAXA,CAA4BplB,CAAAxO,OAAA4zB,CAAaA,CAAbA,CAA5BA,GAAiDA,CACjD6B,EAAA7B,CAAKA,CAALA,CAAAA,CAAWA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAXA,CAA4BplB,CAAAxO,OAAA4zB,CAAaA,CAAbA,CAA5BA,GAAiDA,CACjD6B,EAAA7B,CAAKA,CAALA,CAAAA,CAAWA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAXA,CAA4BplB,CAAAxO,OAAA4zB,CAAaA,CAAbA,CAA5BA,GAAiDA,CACjD6B,EAAA7B,CAAKA,CAALA,CAAAA,CAAWA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAXA,CAA4BplB,CAAAxO,OAAA4zB,CAAaA,CAAbA,CAA5BA,GAAiDA,CAC7C6B,EAAA7B,CAAKA,CAALA,CAAJA,CAAeA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAfA,GAAkCA,CAAlCA,EACIA,EAAE6B,CAAA7B,CAAKA,CAALA,CAEF6B,EAAA7B,CAAKA,CAALA,CAAJA,CAAeA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAfA,GAAkCA,CAAlCA,EACIA,EAAE6B,CAAA7B,CAAKA,CAALA,CAEF6B,EAAA7B,CAAKA,CAALA,CAAJA,CAAeA,IAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAfA,GAAkCA,CAAlCA,EACIA,EAAE6B,CAAA7B,CAAKA,CAALA,CAENA,KAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAAA,CAAiB6B,CAAA7B,CAAKA,CAALA,CACjBA,KAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAAA,CAAiB6B,CAAA7B,CAAKA,CAALA,CACjBA,KAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAAA,CAAiB6B,CAAA7B,CAAKA,CAALA,CACjBA,KAAA5zB,OAAA4zB,CAAYA,CAAZA,CAAAA,CAAiB6B,CAAA7B,CAAKA,CAALA,CACjBA,OAAOA,KAnBCA,CAqBZH,EAAAC,IAAAA,CAAAA,QAAGA,EAAGA,CACFA,MAAUjB,GAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CAAVA,CAAkCA,GAAlCA,CAAsCjB,EAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CAAtCA,CAA8DA,GAA9DA,CAAkEjB,EAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CAAlEA,CAA0FA,GAA1FA,CAA8FjB,EAAAiB,CAASA,IAAA1zB,OAAA0zB,CAAYA,CAAZA,CAATA,CAD5FA,CAWNS;QAAOA,GAAUA,CAACvJ,CAADuJ,CAAMC,CAAND,CAAuCA,CAAjCC,CAAAD,CAAAA,IAAAA,EAAAA,GAAAC,CAAAD,CAAaA,IAAI/U,WAAJ+U,CAAgBA,CAAhBA,CAAbA,CAAAC,CAEnBD,KAAMH,EAASpJ,CAAAyJ,WAAAF,CAAeA,GAAfA,CAAfA,CACMvzB,EAASgqB,CAAAhqB,OACX0zB,EAAAA,CAAMH,IAAIS,EAAJT,CAAWC,CAAXD,CACVA,KAAKA,IAAII,EAAOP,CAAAG,CAASA,CAATA,CAAaA,CAA7BA,CAAgCI,CAAhCJ,CAAuCvzB,CAAvCuzB,CAAAA,CAAgDA,CAC5CA,IAAMK,EAzOUC,CAyOFN,CAAsBvzB,CAAtBuzB,CAA+BI,CAA/BJ,CAzOEM,CAyOFN,CACYvzB,CADZuzB,CACqBI,CADnCJ,CAEMxP,EAAQwP,IAAIS,EAAJT,CAAWA,IAAI/U,WAAJ+U,CAAgBA,CAACO,QAAAP,CAASvJ,CAAA+J,OAAAR,CAAWI,CAAXJ,CAAiBK,CAAjBL,CAATA,CAAkCA,EAAlCA,CAADA,CAAwCA,CAAxCA,CAA2CA,CAA3CA,CAA8CA,CAA9CA,CAAhBA,CAAXA,CAEdG,EAAAX,MAAAQ,CADiBA,IAAIS,EAAJT,CAAWA,IAAI/U,WAAJ+U,CAAgBA,CAACzB,EAAAyB,CAAaK,CAAbL,CAADA,CAAsBA,CAAtBA,CAAyBA,CAAzBA,CAA4BA,CAA5BA,CAAhBA,CAAXA,CACjBA,CACAG,EAAAV,KAAAO,CAASxP,CAATwP,CACAI,EAAAJ,EAAQK,CAPoCL,CAShDA,MAAOH,EAAAG,CAASG,CAAAN,OAAAG,EAATA,CAAwBG,CAdqBH,C;;;;;;;;;;;;;;;ACzLrDuB,QAASA,GAAS,CAACC,CAAD,CAAyBC,CAAzB,CAAoC,CAAdC,IAAAA,ECfAC,IAAKA,EDgBhD,OAAO,MAAKD,CAAL,GAAWA,CAAX,CAAeE,OAAf,GAAyB,QAAS,CAACC,CAAD,CAAUC,CAAV,CAAkB,CACvDC,QAASA,EAAS,CAACn1B,CAAD,CAAQ,CAAE,GAAI,CAAEo1B,CAAA,CAAKP,CAAAQ,KAAA,CAAer1B,CAAf,CAAL,CAAF,CAAiC,MAAOs1B,CAAP,CAAU,CAAEJ,CAAA,CAAOI,CAAP,CAAF,CAAjD,CAC1BC,QAASA,EAAQ,CAACv1B,CAAD,CAAQ,CAAE,GAAI,CAAEo1B,CAAA,CAAKP,CAAA,CAAU,OAAV,CAAA,CAAmB70B,CAAnB,CAAL,CAAF,CAAqC,MAAOs1B,CAAP,CAAU,CAAEJ,CAAA,CAAOI,CAAP,CAAF,CAArD,CACzBF,QAASA,EAAI,CAACjhB,CAAD,CAAS,CAAEA,CAAAqhB,KAAA,CAAcP,CAAA,CAAQ9gB,CAAAnU,MAAR,CAAd,CAAsCy1B,CAAA,IAAIX,CAAJ,CAAM,QAAS,CAACG,CAAD,CAAU,CAAEA,CAAA,CAAQ9gB,CAAAnU,MAAR,CAAF,CAAzB,CAAAy1B,MAAA,CAA0DN,CAA1D,CAAqEI,CAArE,CAAxC,CACtBH,CAAA,CAAKC,CAACR,CAADQ,CAAaR,CAAArN,MAAA,CAAgBoN,CAAhB,CAAuC,EAAvC,CAAbS,MAAA,EAAL,CAJuD,CAApD,CADkD,CAyCtDK,QAASA,GAAQ,CAAClQ,CAAD,CAAI,CACxBrrB,CAAA,EAAAA,EAAA,EAAAI,EAAA,EADwB,KACpBo7B,EAAsB,UAAtBA,GAAI,MAAO5Y,OAAX4Y,EAAoCnQ,CAAA,CAAEzI,MAAAsG,SAAF,CADhB,CACoCnnB,EAAI,CAChE,OAAIy5B,EAAJ,CAAcA,CAAA9P,KAAA,CAAOL,CAAP,CAAd,CACO,CACH6P,KAAMA,QAAS,EAAG,CACV7P,CAAJ,EAAStpB,CAAT,EAAcspB,CAAA3lB,OAAd,GAAwB2lB,CAAxB,CAA4B,IAAK,EAAjC,CACA,OAAO,CAAExlB,MAAOwlB,CAAPxlB,EAAYwlB,CAAA,CAAEtpB,CAAA,EAAF,CAAd,CAAsBs5B,KAAM,CAAChQ,CAA7B,CAFO,CADf,CAHiB;AAkCrBoQ,QAASA,EAAO,CAAC5Z,CAAD,CAAI,CACvB,MAAO,KAAA,WAAgB4Z,EAAhB,EAA2B,IAAA5Z,EAAA,CAASA,CAAT,CAAY,IAAvC,EAA+C,IAAI4Z,CAAJ,CAAY5Z,CAAZ,CAD/B;AAIpB6Z,QAASA,GAAgB,CAACjB,CAAD,CAAUkB,CAAV,CAAsBjB,CAAtB,CAAiC,CAI7DkB,QAASA,EAAI,CAACvgB,CAAD,CAAI,CAAMwgB,CAAA,CAAExgB,CAAF,CAAJ,GAAUtZ,CAAA,CAAEsZ,CAAF,CAAV,CAAiB,QAAS,CAACwG,CAAD,CAAI,CAAE,MAAO,KAAIgZ,OAAJ,CAAY,QAAS,CAACtiB,CAAD,CAAIC,CAAJ,CAAO,CAAyB,CAAvB,CAAAsjB,CAAArkB,KAAA,CAAO,CAAC4D,CAAD,CAAIwG,CAAJ,CAAOtJ,CAAP,CAAUC,CAAV,CAAP,CAAA,EAA4BujB,CAAA,CAAO1gB,CAAP,CAAUwG,CAAV,CAA9B,CAA5B,CAAT,CAA9B,CAAF,CACjBka,QAASA,EAAM,CAAC1gB,CAAD,CAAIwG,CAAJ,CAAO,CAAE,GAAI,CAAO,IAAA,EAAAga,CAAA,CAAExgB,CAAF,CAAA,CAAKwG,CAAL,CAChBma,EAAAn2B,MAAA,WAAmB41B,EAAnB,CAA6BZ,OAAAC,QAAA,CAAgBkB,CAAAn2B,MAAAgc,EAAhB,CAAAyZ,KAAA,CAAgCW,CAAhC,CAAyClB,CAAzC,CAA7B,CAAgFmB,CAAA,CAAOJ,CAAA,CAAE,CAAF,CAAA,CAAK,CAAL,CAAP,CAAgBE,CAAhB,CADvE,CAAmB,MAAOb,EAAP,CAAU,CAAEe,CAAA,CAAOJ,CAAA,CAAE,CAAF,CAAA,CAAK,CAAL,CAAP,CAAgBX,EAAhB,CAAF,CAAnC,CAEtBc,QAASA,EAAO,CAACp2B,CAAD,CAAQ,CAAEk2B,CAAA,CAAO,MAAP,CAAel2B,CAAf,CAAF,CACxBk1B,QAASA,EAAM,CAACl1B,CAAD,CAAQ,CAAEk2B,CAAA,CAAO,OAAP,CAAgBl2B,CAAhB,CAAF,CACvBq2B,QAASA,EAAM,CAAC5Z,CAAD,CAAIT,CAAJ,CAAO,CAAE,CAAIS,CAAA,CAAET,CAAF,CAAA,CAAMia,CAAAjQ,MAAA,EAAN,CAAiBiQ,CAAAp2B,OAArB,GAA+Bq2B,CAAA,CAAOD,CAAA,CAAE,CAAF,CAAA,CAAK,CAAL,CAAP,CAAgBA,CAAA,CAAE,CAAF,CAAA,CAAK,CAAL,CAAhB,CAAjC,CARtB97B,CAAA,EAAAK,GAAA,EAAA,IAAI,CAACuiB,MAAAuZ,cAAL,CAA2B,KAAM,KAAI5Q,SAAJ,CAAc,sCAAd,CAAN,CADkC,IAEzDsQ,EAAInB,CAAArN,MAAA,CAAgBoN,CAAhB,CAAyBkB,CAAzB,EAAuC,EAAvC,CAFqD,CAET55B,CAFS,CAEN+5B,EAAI,EAC3D97B,EAAA,EAAAK,GAAA,EAAA,OAAO0B,EAAA;AAAI,EAAJ,CAAQ65B,CAAA,CAAK,MAAL,CAAR,CAAsBA,CAAA,CAAK,OAAL,CAAtB,CAAqCA,CAAA,CAAK,QAAL,CAArC,CAAqD75B,CAAA,CAAE6gB,MAAAuZ,cAAF,CAArD,CAA+E,QAAS,EAAG,CAAE,MAAO,KAAT,CAA3F,CAA6Gp6B,CAHvD,CAY1Dq6B,QAASA,GAAgB,CAAC/Q,CAAD,CAAI,CAGhCuQ,QAASA,EAAI,CAACvgB,CAAD,CAAIiH,CAAJ,CAAO,CAAEvgB,CAAA,CAAEsZ,CAAF,CAAA,CAAOgQ,CAAA,CAAEhQ,CAAF,CAAA,CAAO,QAAS,CAACwG,CAAD,CAAI,CAAE,MAAO,CAACwa,CAAD,CAAK,CAACA,CAAN,EAAW,CAAEx2B,MAAO41B,CAAA,CAAQpQ,CAAA,CAAEhQ,CAAF,CAAA,CAAKwG,CAAL,CAAR,CAAT,CAA2BwZ,KAAY,QAAZA,GAAMhgB,CAAjC,CAAX,CAA+DiH,CAAA,CAAIA,CAAA,CAAET,CAAF,CAAJ,CAAWA,CAAnF,CAApB,CAA8GS,CAAvH,CAHY,IAC5BvgB,CAD4B,CACzBs6B,CACPr8B,EAAA,EAAAI,EAAA,EAAA,OAAO2B,EAAA,CAAI,EAAJ,CAAQ65B,CAAA,CAAK,MAAL,CAAR,CAAsBA,CAAA,CAAK,OAAL,CAAc,QAAS,CAACT,CAAD,CAAI,CAAE,KAAMA,EAAN,CAAF,CAA3B,CAAtB,CAAgES,CAAA,CAAK,QAAL,CAAhE,CAAgF75B,CAAA,CAAE6gB,MAAAsG,SAAF,CAAhF,CAAqG,QAAS,EAAG,CAAE,MAAO,KAAT,CAAjH,CAAmInnB,CAF1G;AAM7Bu6B,QAASA,GAAa,CAACjR,CAAD,CAAI,CAI7BuQ,QAASA,EAAI,CAACvgB,CAAD,CAAI,CAAEtZ,CAAA,CAAEsZ,CAAF,CAAA,CAAOgQ,CAAA,CAAEhQ,CAAF,CAAP,EAAe,QAAS,CAACwG,CAAD,CAAI,CAAE,MAAO,KAAIgZ,OAAJ,CAAY,QAAS,CAACC,CAAD,CAAUC,CAAV,CAAkB,CAAElZ,CAAA,CAAIwJ,CAAA,CAAEhQ,CAAF,CAAA,CAAKwG,CAAL,CAASqa,EAAA,CAAOpB,CAAP,CAAgBC,CAAhB,CAAwBlZ,CAAAwZ,KAAxB,CAAgCxZ,CAAAhc,MAAhC,CAAf,CAAvC,CAAT,CAA9B,CACjBq2B,QAASA,EAAM,CAACpB,CAAD,CAAUC,CAAV,CAAkB3gB,CAAlB,CAAqByH,CAArB,CAAwB,CAAEgZ,OAAAC,QAAA,CAAgBjZ,CAAhB,CAAAyZ,KAAA,CAAwB,QAAQ,CAACzZ,CAAD,CAAI,CAAEiZ,CAAA,CAAQ,CAAEj1B,MAAOgc,CAAT,CAAYwZ,KAAMjhB,CAAlB,CAAR,CAAF,CAApC,CAAyE2gB,CAAzE,CAAF,CAJvC/6B,CAAA,EAAAK,GAAA,EAAA,IAAI,CAACuiB,MAAAuZ,cAAL,CAA2B,KAAM,KAAI5Q,SAAJ,CAAc,sCAAd,CAAN,CAC3BvrB,CAAA,EAAAK,GAAA,EAF6B,KAEzBm7B,EAAInQ,CAAA,CAAEzI,MAAAuZ,cAAF,CAFqB,CAEIp6B,CACjC/B,EAAA,EAAAI,EAAA,EAAAJ,EAAA,EAAAK,GAAA,EAAA,OAAOm7B,EAAA,CAAIA,CAAA9P,KAAA,CAAOL,CAAP,CAAJ,EAAiBA,CAAA,CAAwB,UAApB,GAAA,MAAOkQ,GAAP,CAAiCA,EAAA,CAASlQ,CAAT,CAAjC,CAA+CA,CAAA,CAAEzI,MAAAsG,SAAF,CAAA,EAAnD,CAAyEnnB,CAAzE,CAA6E,EAA7E,CAAiF65B,CAAA,CAAK,MAAL,CAAjF,CAA+FA,CAAA,CAAK,OAAL,CAA/F,CAA8GA,CAAA,CAAK,QAAL,CAA9G,CAA8H75B,CAAA,CAAE6gB,MAAAuZ,cAAF,CAA9H,CAAwJ,QAAS,EAAG,CAAE,MAAO,KAAT,CAApK;AAAsLp6B,CAAvM,CAHsB,C,CChK7BJ,QADS46B,GACE,CAACrT,CAAD,CAAWkD,CAAX,CAAqB,CAC5B,IAAAlD,SAAA,CAAgBA,CAChB,KAAAkD,SAAA,CAAgBA,CAFY,CAIhCpsB,CAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAAE,MAAO,KAAAA,SAAT,CACpBgS,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACr1B,CAADq1B,CAAQA,CAAEA,MAAOA,KAAAhS,SAAAgS,KAAAA,CAAmBr1B,CAAnBq1B,CAATA,CACZN,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC4B,CAAD5B,CAAQA,CACTA,MAAmCA,UAAnCA,GAAIA,MAAOA,KAAA1R,SAAA0R,MAAXA,CACWA,IAAA1R,SAAA0R,MAAAA,CAAoB4B,CAApB5B,CADXA,CAGOA,CAAES,KAAMT,CAAAA,CAARA,CAAc/0B,MAAO+0B,IAArBA,CAJEA,CAMb6B,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAAC52B,CAAD42B,CAAQA,CACVA,MAAoCA,UAApCA,GAAIA,MAAOA,KAAAvT,SAAAuT,OAAXA,CACWA,IAAAvT,SAAAuT,OAAAA,CAAqB52B,CAArB42B,CADXA,CAGOA,CAAEpB,KAAMoB,CAAAA,CAARA,CAAc52B,MAAO42B,IAArBA,CAJGA,CAMdC;EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACtO,CAADsO,CAASA,CAGGC,QAAAD,EAAAA,CAACE,CAADF,CAASA,CACjBtO,CAAAsO,eAAAA,CAAyBA,OAAzBA,CAAkCC,CAAlCD,CACAtO,EAAAsO,eAAAA,CAAyBA,OAAzBA,CAAkCC,CAAlCD,CACAA,IAAIE,CAAJF,CACIA,MAAOA,EAAA9B,MAAA8B,CAAWE,CAAXF,CAEXA,IAAItO,CAAAsO,SAAJA,EACIA,EACIA,IAAIrB,CAACwB,CAADxB,CAAOqB,CAAAxB,KAAAwB,EAAPrB,MAAJqB,CACIA,KAFRA,OAISI,EAAAJ,CAAKtO,CAALsO,CAAatQ,CAAbsQ,CAAuBG,CAAAh3B,MAAvB62B,CAJTA,CADJA,CAOAA,MAAOK,GAAAL,CAAKtO,CAALsO,CAAaG,CAAbH,EAAoBG,CAAAxB,KAApBqB,CAA8BC,CAA9BD,CAbUA,CAHZA,IAAAA,EAAAA,IAAAA,CACHtQ,EAAasQ,IAAbA,SADGA,CAELG,CAgBJF,EAAAD,EACAA,OAAOtO,EAnBEsO,CAuBb/6B,SADSq7B,GACE,CAAC9T,CAAD,CAAWkD,CAAX,CAAqB,CAC5B,IAAAlD,SAAA,CAAgBA,CAChB,KAAAkD,SAAA,CAAgBA,CAFY,CAIhCpsB,CAAA,EAAAK,GAAA,EAAA,GAAA,UAAA,CAACuiB,MAAAuZ,cAAD,CAAA,CAAA,QAAsB,EAAG,CAAE,MAAO,KAAAjT,SAAT,CACzBgS,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACr1B,CAADq1B,CAAQA,CAAEA,MAAOA,KAAAhS,SAAAgS,KAAAA,CAAmBr1B,CAAnBq1B,CAATA,CACZN;EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC4B,CAAD5B,CAAQA,CACTA,MAAeA,GAARA,CAAkBA,IAAlBA,CAAwCA,QAAAA,EAAUA,EAAGA,CAAAA,IAC7CA,EAAAA,IAD6CA,OAAA/e,EAAA+e,CAAAA,CAAAA,CAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CACxDA,MAAmCA,UAAnCA,GAAIA,MAAOA,EAAA1R,SAAA0R,MAAXA,CACIA,CAAAA,OAAAA,CAAOA,CAAA1R,SAAA0R,MAAAA,CAAoB4B,CAApB5B,CAAPA,CADJA,CAGAA,CAAAA,OAAAA,CAAOA,CAAES,KAAMT,CAAAA,CAARA,CAAc/0B,MAAO+0B,IAArBA,CAAPA,CAJwDA,CAAAA,CAAAA,CAArDA,CADEA,CAQb6B,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAAC52B,CAAD42B,CAAQA,CACVA,MAAeA,GAARA,CAAkBA,IAAlBA,CAAwCA,QAAAA,EAAUA,EAAGA,CAAAA,IAC7CA,EAAAA,IAD6CA,OAAA5gB,EAAA4gB,CAAAA,CAAAA,CAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CACxDA,MAAoCA,UAApCA,GAAIA,MAAOA,EAAAvT,SAAAuT,OAAXA,CACIA,CAAAA,OAAAA,CAAOA,CAAAvT,SAAAuT,OAAAA,CAAqB52B,CAArB42B,CAAPA,CADJA,CAGAA,CAAAA,OAAAA,CAAOA,CAAEpB,KAAMoB,CAAAA,CAARA,CAAc52B,MAAO42B,IAArBA,CAAPA,CAJwDA,CAAAA,CAAAA,CAArDA,CADGA,CAQdC;EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACtO,CAADsO,CAASA,CAGGC,QAAAD,EAAAA,CAACE,CAADF,CAASA,CAAAA,MAAQA,GAARA,CAAkBA,CAAlBA,CAAwCA,QAAAA,EAAUA,EAAGA,CAAAA,IAI3DA,EAAAA,IAJ2DA,OAAA7gB,EAAA6gB,CAAAA,CAAAA,CAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CACtEtO,CAAAsO,eAAAA,CAAyBA,OAAzBA,CAAkCC,CAAlCD,CACAtO,EAAAsO,eAAAA,CAAyBA,OAAzBA,CAAkCC,CAAlCD,CACAA,IAAIE,CAAJF,CACIA,MAAAA,EAAAA,OAAAA,CAAOA,CAAA9B,MAAA8B,CAAWE,CAAXF,CAAPA,CAEJA,IAAIA,CAAAtO,CAAAsO,SAAJA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CANsEA,KAAAA,CAAAA,CAQnDA,MAAAA,EAAAA,CAAAA,CAAAA,CAAMA,CAAAxB,KAAAwB,EAANA,CAAAA,CAAAA,CARmDA,MAAAA,CAAAA,CAQ9DA,GAAIrB,CAACwB,CAADxB,CAAOqB,CAAAA,EAAPrB,MAAJqB,CAAoCA,CAChCA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MADgCA,CADxCA,GAISI,EAAAJ,CAAKtO,CAALsO,CAAatQ,CAAbsQ,CAAuBG,CAAAh3B,MAAvB62B,CAJTA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAPkEA,KAAAA,CAAAA,CAatEA,MAAAA,EAAAA,OAAAA,CAAOK,EAAAL,CAAKtO,CAALsO,CAAaG,CAAbH,EAAoBG,CAAAxB,KAApBqB,CAA8BC,CAA9BD,CAAPA,CAbsEA,CAAAA,CAAAA,CAAAA,CAArDA,CAAAA,CAHZA,IAAAA,EAAAA,IAAAA,CACHtQ,EAAasQ,IAAbA,SADGA,CAELG,CAgBJF,EAAAD,EACAA,OAAOtO,EAnBEsO,CAsBjB;IAAMO,GAAwB,QAAA,EAAM,CAIhC,IAAMC,EAAaC,IAAA,CAAK,+CAAL,CACnB,OAAQD,EAAD,CACH,QAAA,CAAC7W,CAAD,CAAS,CAAA,MAAA6W,EAAAtb,KAAA,CAAgByE,CAAAvhB,OAAhB,CAA4BuhB,CAAAthB,WAA5B,CAA4CshB,CAAA7J,WAA5C,CAAA,CADN,CAAc,QAAA,CAAC6J,CAAD,CAASA,CAAAA,MAAAA,EAAAA,CALE,CAAP,EAQ7ByW,SAASA,GAAI,CAAC1O,CAAD,CAAShC,CAAT,CAAmBvmB,CAAnB,CAA0B,CACnC,MAAOuoB,EAAA,MAAA,CAA8B,MAAb,GAAAhC,CAAA,CAAsBvmB,CAAtB,CAA8B,IAA9B,CAAqCo3B,EAAA,CAAqBp3B,CAArB,CAAtD,CAAoFumB,CAApF,CAD4B,CAGvC2Q,QAASA,GAAI,CAAC3O,CAAD,CAASiN,CAAT,CAAesB,CAAf,CAAsB,CAC/B,IAAMN,EAAIc,IAAA,CAAK,SAAL,CACL9B,EAAL,CAIYgB,CAJZ,EAIiBjO,CAJjB,GAI4BiO,CAAAe,GAJ5B,EAIyC,CAAChP,CAAA,MAJ1C,EAKIA,CAAA,IAAA,EALJ,EACIA,CAAA,KAAA,CAAe,OAAf,CAAwBuO,CAAxB,CACA,CAAAvO,CAAA,KAAA,CAAe,OAAf,CAAwBuO,CAAxB,CAFJ,CAF+B,C,CClGnC,IAAAU,EAAA,CAAS,eAAA,EAAA,CAAA,MAAA,GAAA,CAAT,CACS,gBAAA,EAAA,CAAA,MAAA,GAAA,CADT,CAES,kBAAA,EAAA,CAAA,MAAA,GAAA,CAFT,CAGS,YAAA,EAAA,CAAA,MAAA,GAAA,CAHT,CAGmB,qBAAA,EAAA,CAAA,MAAA,GAAA,CAHnB,CAGsC,cAAA,EAAA,CAAA,MAAA,GAAA,CAHtC,CAGkD,YAAA,EAAA,CAAA,MAAA,GAAA,CAHlD,CAIS,aAAA,EAAA,CAAA,MAAA,GAAA,CAJT,CAIoB,kBAAA,EAAA,CAAA,MAAA,GAAA,CAJpB,CAIoC,cAAA,EAAA,CAAA,MAAA,GAAA,CAJpC,CAIgD,cAAA,EAAA,CAAA,MAAA,GAAA,CAJhD,CAI4D,WAAA,EAAA,CAAA,MAAA,GAAA,CAJ5D,CAKS,YAAA,EAAA,CAAA,MAAA,GAAA,CALT,CAKmB,YAAA,EAAA,CAAA,MAAA,GAAA,CALnB,CAK6B,YAAA,EAAA,CAAA,MAAA,GAAA,CAL7B,CAKuC,iBAAA,EAAA,CAAA,MAAA,EAAA,CALvC,CAKsD,iBAAA,EAAA,CAAA,MAAA,GAAA,CALtD,CAKqE,eAAA,EAAA,CAAA,MAAA,GAAA,CALrE;AAMS,eAAA,EAAA,CAAA,MAAA,GAAA,CANT,CAMsB,uBAAA,EAAA,CAAA,MAAA,GAAA,CANtB,CAOS,yBAAA,EAAA,CAAA,MAAA,GAAA,CAPT,CAOgC,oBAAA,EAAA,CAAA,MAAA,GAAA,CAPhC,CAOkD,qBAAA,EAAA,CAAA,MAAA,GAAA,CAPlD,CAQS,oBAAA,EAAA,CAAA,MAAA,GAAA,CART,CAQ2B,uBAAA,EAAA,CAAA,MAAA,GAAA,CAR3B,CAQgD,4BAAA,EAAA,CAAA,MAAA,GAAA,CARhD,CAQ0E,4BAAA,EAAA,CAAA,MAAA,GAAA,CAR1E,CAQoG,2BAAA,EAAA,CAAA,MAAA,GAAA,CARpG,C,CCiBO,QAAMC,GAAN,EAAA,EACHC,CAAAA,CAAAA,EAAAA,UAAAC,EAAAD,GAAAA,CAAAA,QAAEA,CAACjqB,CAADiqB,CAAQA,CACAjqB,CAANiqB,WAAuBD,GAAvBC,GACIjqB,CADJiqB,CACYA,IAAIE,EAAJF,CAAYjqB,CAAZiqB,CADZA,CAGAA,OAAOA,KAAIG,EAAJH,CAAWA,IAAXA,CAAiBjqB,CAAjBiqB,CAJDA,CAMVI,EAAAC,GAAAA,CAAAA,QAAEA,CAACtqB,CAADsqB,CAAQA,CACAtqB,CAANsqB,WAAuBN,GAAvBM,GACItqB,CADJsqB,CACYA,IAAIH,EAAJG,CAAYtqB,CAAZsqB,CADZA,CAGAA,OAAOA,KAAIC,EAAJD,CAASA,IAATA,CAAetqB,CAAfsqB,CAJDA,CAMVE,EAAAC,GAAAA,CAAAA,QAAEA,CAACzqB,CAADyqB,CAAQA,CACAzqB,CAANyqB,WAAuBT,GAAvBS,GACIzqB,CADJyqB,CACYA,IAAIN,EAAJM,CAAYzqB,CAAZyqB,CADZA,CAGAA,OAAOA,KAAIC,EAAJD,CAASA,IAATA,CAAezqB,CAAfyqB,CAJDA,CAMVE,EAAAC,GAAAA,CAAAA,QAAEA,CAAC5qB,CAAD4qB,CAAQA,CACNA,MAAOA,KAAIC,EAAJD,CAAQA,IAAAH,GAAAG,CAAQ5qB,CAAR4qB,CAARA,CADDA,CAGVE,EAAAC,GAAAA,CAAAA,QAAEA,CAAC/qB,CAAD+qB,CAAQA,CACNA,MAAOA,KAAIF,EAAJE,CAAQA,IAAAT,GAAAS,CAAQ/qB,CAAR+qB,CAARA,CADDA,CAGVC,EAAAC,GAAAA,CAAAA,QAAEA,CAACjrB,CAADirB,CAAQA,CACNA,MAAOA,KAAIJ,EAAJI,CAAQA,IAAAhB,GAAAgB,CAAQjrB,CAARirB,CAARA,CADDA,CAKV58B,SADS87B,GACE,CAAC5b,CAAD,CAAI,CAEX,IAAAA,EAAA,CAASA,CAFE,CADUvE,CAAAggB,CAAhBG,EAAgBH,CAAAA,EAAAA,CAOzB37B,SADS68B,GACE,CAACpyB,CAAD,CAAO,CAEd,IAAAA,KAAA,CAAYA,CAFE,CADGkR,CAAAggB,CAAZkB,EAAYlB,CAAAA,EAAAA,CAKrB3O;EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,GAAIA,CAACA,IAAA+P,GAAL/P,CAAkBA,CAGdA,IAAA+P,GAAA/P,CAAeA,EAEfA,KADAA,IAAMlgB,EAASgwB,CAAAxhB,OAAAxO,OAAfkgB,CACS/G,EAAO+G,EAAhBA,CAAmBA,EAAE/G,CAArB+G,CAA2BlgB,CAAA/I,OAA3BipB,CAAAA,CACIA,GAAIlgB,CAAAkgB,CAAO/G,CAAP+G,CAAAviB,KAAJuiB,GAAyBA,IAAAviB,KAAzBuiB,CAAoCA,CAChCA,IAAA+P,GAAA/P,CAAc/G,CACd+G,MAFgCA,CAKxCA,GAAkBA,CAAlBA,CAAIA,IAAA+P,GAAJ/P,CACIA,KAAUha,MAAJga,CAAUA,sBAAVA,CAAiCA,IAAAviB,KAAjCuiB,CAA0CA,GAA1CA,CAANA,CAZUA,CAelBA,IAAA/N,EAAA+N,CAAc8P,CAAAtV,WAAAwF,CAAiBA,IAAA+P,GAAjB/P,CACdA,OAAOA,KAAA/N,EAAAlF,IAAAiT,KAAAA,CAAqBA,IAAA/N,EAArB+N,CAjBCA,CAoBT,SAAMgQ,GAAN,EAAA,EACHC,EAAAA,UAAAA,IAAAA,CAAAA,QAAGA,CAACA,CAADA,CAAUA,CAATA,IAAAA,IAASA,EAATA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAASA,CAATA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAWA,OAAOA,MAAAA,QAAAA,UAAAA,KAAAA,MAAAA,CAAIC,EAAJD,CAAAA,CAAAA,IAAAA,CAAQA,IAARA,CAAAA,OAAAA,CAAApV,CAAAoV,CAATA,CAASA,CAAAA,CAAAA,CAAAA,CAATA,CACbE;EAAAA,UAAAA,GAAAA,CAAAA,QAAEA,CAACA,CAADA,CAAUA,CAATA,IAAAA,IAASA,EAATA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAASA,CAATA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CAAWA,OAAOA,MAAAA,QAAAA,UAAAA,KAAAA,MAAAA,CAAIC,EAAJD,CAAAA,CAAAA,IAAAA,CAAOA,IAAPA,CAAAA,OAAAA,CAAAtV,CAAAsV,CAATA,CAASA,CAAAA,CAAAA,CAAAA,CAATA,CACZE,GAAAA,UAAAA,IAAAA,CAAAA,QAAGA,EAAGA,CAAEA,MAAOA,KAAIb,EAAJa,CAAQA,IAARA,CAATA,CAGNr9B,SADSs9B,GACE,CAACrG,CAAD,CAAOC,CAAP,CAAc,CAErB,IAAAD,KAAA,CAAYA,CACZ,KAAAC,MAAA,CAAaA,CAHQ,CADYvb,CAAAqhB,CAA5BM,EAA4BN,CAAAA,EAAAA,CAMrChQ,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,MAAIA,KAAAiK,KAAJjK,WAAyB8O,GAAzB9O,CACQA,IAAAkK,MAAJlK,WAA0B8O,GAA1B9O,CACWA,IAAAuQ,GAAAvQ,CAAwBA,IAAAiK,KAAxBjK,CAAmCA,IAAAkK,MAAnClK,CADXA,CAIWA,IAAAwQ,GAAAxQ,CAAiB8P,CAAjB9P,CAAwBA,IAAAiK,KAAxBjK,CAAmCA,IAAAkK,MAAnClK,CALfA,CASQA,IAAAkK,MAAJlK,WAA0B8O,GAA1B9O,CACWA,IAAAyQ,GAAAzQ,CAAiB8P,CAAjB9P,CAAwBA,IAAAiK,KAAxBjK,CAAmCA,IAAAkK,MAAnClK,CADXA,CAIWA,IAAA0Q,GAAA1Q,CAAiB8P,CAAjB9P,CAAwBA,IAAAiK,KAAxBjK,CAAmCA,IAAAkK,MAAnClK,CAdPA,CAoBZhtB;QADS29B,GACE,CAAC,CAAD,CAAc,CAAb,IAAA,IAAa,EAAb,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAa,CAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAER,KAAA5yB,SAAA,CAFqBA,CAAA,CADa4Q,CAAAqhB,CAA7BW,EAA6BX,CAAAA,EAAAA,CAO1CW,GAAAnsB,UAAAzG,SAAA,CAA0CuV,MAAAsd,OAAA,CAAc,EAAd,CAEtC59B,SADSk9B,GACE,CAAC,CAAD,CAAc,CAAb,IAAA,IAAa,EAAb,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAa,CAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAERnyB,EAAA,CAFqBA,CAEV2Q,OAAA,CAAgB,QAAA,CAACmiB,CAAD,CAAQnD,CAAR,CAAc,CACrC,MAAOmD,EAAA3M,OAAA,CAAawJ,CAAA,WAAawC,GAAb,CAAmBxC,CAAA3vB,SAAnB,CAAgC2vB,CAA7C,CAD8B,CAA9B,CAER,EAFQ,CAGX,GAAA,MAAA,CAAA,IAAA,CAAA7S,CAAA,CAAS9c,CAAT,CAAA,CALqB,CADJ4Q,CAAAgiB,CAAZT,EAAYS,CAAAA,EAAAA,CAQrB3Q,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,IAAM8Q,EAAQ9Q,IAAAjiB,SAAAsR,IAAA2Q,CAAkBA,QAAAA,CAAC0N,CAAD1N,CAAOA,CAAAA,MAAA0N,EAAA1N,KAAAA,CAAO8P,CAAP9P,CAAAA,CAAzBA,CACdA,OAAOA,SAAAA,CAAC/G,CAAD+G,CAAM8P,CAAN9P,CAAgBA,CAAAA,MAAA8Q,EAAA7N,MAAAjD,CAAYA,QAAAA,CAAC0N,CAAD1N,CAAOA,CAAAA,MAAA0N,EAAA1N,CAAE/G,CAAF+G,CAAO8P,CAAP9P,CAAAA,CAAnBA,CAAAA,CAFfA,CAMZhtB;QADSo9B,GACE,CAAC,CAAD,CAAc,CAAb,IAAA,IAAa,EAAb,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAa,CAAb,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAERryB,EAAA,CAFqBA,CAEV2Q,OAAA,CAAgB,QAAA,CAACmiB,CAAD,CAAQnD,CAAR,CAAc,CACrC,MAAOmD,EAAA3M,OAAA,CAAawJ,CAAA,WAAa0C,GAAb,CAAkB1C,CAAA3vB,SAAlB,CAA+B2vB,CAA5C,CAD8B,CAA9B,CAER,EAFQ,CAGX,GAAA,MAAA,CAAA,IAAA,CAAA7S,CAAA,CAAS9c,CAAT,CAAA,CALqB,CADL4Q,CAAAgiB,CAAXP,EAAWO,CAAAA,EAAAA,CAQpB3Q,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,IAAM8Q,EAAQ9Q,IAAAjiB,SAAAsR,IAAA2Q,CAAkBA,QAAAA,CAAC0N,CAAD1N,CAAOA,CAAAA,MAAA0N,EAAA1N,KAAAA,CAAO8P,CAAP9P,CAAAA,CAAzBA,CACdA,OAAOA,SAAAA,CAAC/G,CAAD+G,CAAM8P,CAAN9P,CAAgBA,CAAAA,MAAA8Q,EAAAC,KAAA/Q,CAAWA,QAAAA,CAAC0N,CAAD1N,CAAOA,CAAAA,MAAA0N,EAAA1N,CAAE/G,CAAF+G,CAAO8P,CAAP9P,CAAAA,CAAlBA,CAAAA,CAFfA,CAKT,SAAM+O,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAqBpgB,CAAA2hB,CAAfvB,EAAeuB,CAAAA,EAAAA,CACxBC,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAStG,CAATsG,CAAerG,CAAfqG,CAAsBA,CAC7BA,IAAMS,EAAO/G,CAAA/W,EAAP8d,EAAiB9G,CAAAhX,EACvBqd,OAAOA,SAAAA,EAAMS,CAAAA,MAAAA,EAAAA,CAFgBT,CAIjCG;EAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACZ,CAADY,CAAQzG,CAARyG,CAAcxG,CAAdwG,CAAqBA,CAC5BA,IAAMO,EAAYhH,CAAAjK,KAAA0Q,CAAUZ,CAAVY,CAAlBA,CACMQ,EAAahH,CAAAlK,KAAA0Q,CAAWZ,CAAXY,CACnBA,OAAOA,SAAAA,CAACzX,CAADyX,CAAMZ,CAANY,CAAgBA,CAAAA,MAAAO,EAAAP,CAAUzX,CAAVyX,CAAeZ,CAAfY,CAAAA,EAAyBQ,CAAAR,CAAWzX,CAAXyX,CAAgBZ,CAAhBY,CAAzBA,CAHKA,CAKhCD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACX,CAADW,CAAQU,CAARV,CAAaW,CAAbX,CAAkBA,CACzBA,IAAMY,EAAWF,CAAAnR,KAAAyQ,CAASX,CAATW,CACjBA,IAAIU,CAAAlf,EAAJwe,WAA0BrJ,GAA1BqJ,CAA4CA,CACxCA,IACMxe,EAASkf,CAAAlf,EACfwe,IAAIxe,CAAAnU,WAAJ2yB,GAA0BA,IAAAa,GAA1Bb,CAA+CA,CAC3CA,IAAAx0B,EAAMgW,CAAAuV,cAAAiJ,CAAqBW,CAAAle,EAArBud,CACNA,KAAAa,GAAAb,CAAsBxe,CAAAnU,WACtB2yB,KAAAc,GAAAd,CAAex0B,CAH4Bw0B,CAA/CA,IAMIx0B,EAAAw0B,CAAMA,IAAAc,GAEVd,OAAaA,EAAbA,GAAIx0B,CAAJw0B,CAMWA,QAAAA,EAAMA,CAAAA,MAAAA,CAAAA,CAAAA,CANjBA,CASWA,QAAAA,CAACxX,CAADwX,CAASA,CACZA,MAAOxe,EAAAsV,OAAAkJ,CAAcxX,CAAdwX,CAAPA,GAA8Bx0B,CADlBw0B,CApBoBA,CA0BxCA,MAAOA,SAAAA,CAACxX,CAADwX,CAAMjL,CAANiL,CAAeA,CAAAA,MAAAY,EAAAZ,CAASxX,CAATwX,CAAcjL,CAAdiL,CAAAA,EAAuBW,CAAAle,EAAvBud,CA5BDA,CA+B7BD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACV,CAADU,CAAQY,CAARZ,CAAaW,CAAbX,CAAkBA,CAEzBA,MAAOA,KAAAC,GAAAD,CAAiBV,CAAjBU,CAAwBW,CAAxBX,CAA6BY,CAA7BZ,CAFkBA,CAK1B,SAAMtB,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAmBvgB,CAAA2hB,CAAbpB,EAAaoB,CAAAA,EAAAA,CACtBC;EAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAStG,CAATsG,CAAerG,CAAfqG,CAAsBA,CAC7BA,IAAMS,EAAO/G,CAAA/W,EAAP8d,EAAiB9G,CAAAhX,EACvBqd,OAAOA,SAAAA,EAAMS,CAAAA,MAAAA,EAAAA,CAFgBT,CAIjCG,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACZ,CAADY,CAAQzG,CAARyG,CAAcxG,CAAdwG,CAAqBA,CAC5BA,IAAMO,EAAYhH,CAAAjK,KAAA0Q,CAAUZ,CAAVY,CAAlBA,CACMQ,EAAahH,CAAAlK,KAAA0Q,CAAWZ,CAAXY,CACnBA,OAAOA,SAAAA,CAACzX,CAADyX,CAAMlL,CAANkL,CAAeA,CAAAA,MAAAO,EAAAP,CAAUzX,CAAVyX,CAAelL,CAAfkL,CAAAA,EAAwBQ,CAAAR,CAAWzX,CAAXyX,CAAgBlL,CAAhBkL,CAAxBA,CAHMA,CAKhCD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACX,CAADW,CAAQU,CAARV,CAAaW,CAAbX,CAAkBA,CACzBA,IAAMY,EAAWF,CAAAnR,KAAAyQ,CAASX,CAATW,CACjBA,OAAOA,SAAAA,CAACxX,CAADwX,CAAMjL,CAANiL,CAAeA,CAAAA,MAAAY,EAAAZ,CAASxX,CAATwX,CAAcjL,CAAdiL,CAAAA,EAAuBW,CAAAle,EAAvBud,CAFGA,CAI7BD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACV,CAADU,CAAQY,CAARZ,CAAaW,CAAbX,CAAkBA,CACzBA,IAAMa,EAAWF,CAAAnR,KAAAwQ,CAASV,CAATU,CACjBA,OAAOA,SAAAA,CAACvX,CAADuX,CAAMhL,CAANgL,CAAeA,CAAAA,MAAAY,EAAAle,EAAAsd,EAASa,CAAAb,CAASvX,CAATuX,CAAchL,CAAdgL,CAATA,CAFGA,CAK1B,SAAMnB,GAAN,CAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,CAAmB1gB,CAAA2hB,CAAbjB,EAAaiB,CAAAA,EAAAA,CACtBC,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAStG,CAATsG,CAAerG,CAAfqG,CAAsBA,CAC7BA,IAAMS,EAAO/G,CAAA/W,EAAP8d,EAAiB9G,CAAAhX,EACvBqd,OAAOA,SAAAA,EAAMS,CAAAA,MAAAA,EAAAA,CAFgBT,CAIjCG;EAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACZ,CAADY,CAAQzG,CAARyG,CAAcxG,CAAdwG,CAAqBA,CAC5BA,IAAMO,EAAYhH,CAAAjK,KAAA0Q,CAAUZ,CAAVY,CAAlBA,CACMQ,EAAahH,CAAAlK,KAAA0Q,CAAWZ,CAAXY,CACnBA,OAAOA,SAAAA,CAACzX,CAADyX,CAAMlL,CAANkL,CAAeA,CAAAA,MAAAO,EAAAP,CAAUzX,CAAVyX,CAAelL,CAAfkL,CAAAA,EAAwBQ,CAAAR,CAAWzX,CAAXyX,CAAgBlL,CAAhBkL,CAAxBA,CAHMA,CAKhCD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACX,CAADW,CAAQU,CAARV,CAAaW,CAAbX,CAAkBA,CACzBA,IAAMY,EAAWF,CAAAnR,KAAAyQ,CAASX,CAATW,CACjBA,OAAOA,SAAAA,CAACxX,CAADwX,CAAMjL,CAANiL,CAAeA,CAAAA,MAAAY,EAAAZ,CAASxX,CAATwX,CAAcjL,CAAdiL,CAAAA,EAAuBW,CAAAle,EAAvBud,CAFGA,CAI7BD,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAACV,CAADU,CAAQY,CAARZ,CAAaW,CAAbX,CAAkBA,CACzBA,IAAMa,EAAWF,CAAAnR,KAAAwQ,CAASV,CAATU,CACjBA,OAAOA,SAAAA,CAACvX,CAADuX,CAAMhL,CAANgL,CAAeA,CAAAA,MAAAY,EAAAle,EAAAsd,EAASa,CAAAb,CAASvX,CAATuX,CAAchL,CAAdgL,CAATA,CAFGA,CAM7Bx9B,SADSw8B,GACE,CAAC9W,CAAD,CAAQ,CAEf,IAAAA,GAAA,CAAaA,CAFE,CADE/J,CAAAqhB,CAAZR,EAAYQ,CAAAA,EAAAA,CAKrBhQ,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,IAAMwR,EAAOxR,IAAAtH,GAAAsH,KAAAA,CAAgB8P,CAAhB9P,CACbA,OAAOA,SAAAA,CAAC/G,CAAD+G,CAAM8P,CAAN9P,CAAgBA,CAAAA,MAAAA,CAACwR,CAAAxR,CAAK/G,CAAL+G,CAAU8P,CAAV9P,CAADA,CAFfA,CAMZhtB,SADSy+B,GACE,CAAClF,CAAD,CAAOmF,CAAP,CAAc,CAErB,IAAAnF,KAAA,CAAYA,CACZ,KAAAmF,GAAA,CAAaA,CAHQ,CADQ/iB,CAAAqhB,CAAxByB,EAAwBzB,CAAAA,EAAAA,CAMjChQ,GAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAAC8P,CAAD9P,CAAQA,CACRA,IAAA0R,GAAA1R,CAAW8P,CAAX9P,CACAA,OAAOA,KAAAuM,KAFCvM,C,CRxNZhtB,QAJSqO,GAIE,CAAC,CAAD,CAAU,CAAT,IAAA,IAAS,EAAT,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAS,CAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CACR,IAAuB,QAAvB,GAAI,MADaswB,EACN,CAAK,CAAL,CAAX,CACU96B,CAGN,CALa86B,CAEA,CAAK,CAAL,CAGb,CAFA,EAAA,KAAA,CAAA,IAAA,CAAM96B,CAAN,CAHa86B,CAGD,CAAK,CAAL,CAAZ,CAEA,CADA,IAAArjB,OACA,CALaqjB,CAIC,CAAK,CAAL,CACd,CAAA,IAAA56B,OAAA,CAAcF,CAAAE,OAJlB,KAMK,CACK,IAAA,EAAAhF,CAAA,CARO4/B,CAQP,CAACrjB,EAAAA,CAAD,CAAA,KAAA,EAAA,MAASsjB,EAAAA,CAAT,CAAA,KAAA,EAAA,MAAkBpM,EAAAA,CAAlB,CAAA,KAAA,EAAA,MAEN,KADA,IAAM/M,EAAgBrD,KAAJ,CAAUoQ,CAAAzuB,OAAV,CAAlB,CACSjB,EAAS,EADlB,CACqBiB,EAASyuB,CAAAzuB,OAA9B,CAA2C,EAAEjB,CAA7C,CAAqDiB,CAArD,CAAA,CAA8D,CAC1D,IAAMo6B,EAAM3L,CAAA,CAAK1vB,CAAL,CACZ2iB,EAAA,CAAU3iB,CAAV,CAAA,CAAmBq7B,CAAA,WAAevW,EAAf,CAAwBuW,CAAAt6B,KAAxB,CAAmCs6B,CAFI,CAI9D,EAAA,KAAA,CAAA,IAAA,CAAM,IAAI3Y,EAAJ,CAAe,IAAIrH,EAAJ,CAAW7C,CAAAxO,OAAX,CAAf,CAA0C8xB,CAA1C,CAAmD,IAAnD,CAAyDnZ,CAAzD,CAAN,CACA,KAAAnK,OAAA,CAAcA,CACd,KAAAvX,OAAA,CAAc66B,CATb,CAWL,IAAAC,QAAA,CAAe,IAAAvjB,OAAAxO,OAAA/I,OAlBE,CAJQ4X,CAAAsY,CAApB5lB,EAAoB4lB,CAAAA,EAAAA,CAC7BhU;QAAOA,GAAIA,CAACd,CAADc,CAAUA,CACjBA,MAAOA,KAAI5R,EAAJ4R,CAAgB6e,EAAA7e,CAAYd,CAAZc,CAAhBA,CAAsCkE,IAAAE,IAAApE,MAAAA,CAAAkE,IAAAlE,CAAA4H,CAAA5H,CAAYd,CAAA9C,IAAA4D,CAAYA,QAAAA,CAACC,CAADD,CAAOlc,CAAAA,MAAAmc,EAAAnc,OAAAA,CAAnBkc,CAAZA,CAAAA,CAAtCA,CAAiFd,CAAjFc,CADUA,CAuBrBsE,EAAAA,UAAAA,MAAAA,CAAAA,QAAKA,CAAC1gB,CAAD0gB,CAAO5J,CAAP4J,CAAqCA,CAA9B5J,CAAA4J,CAAAA,IAAAA,EAAAA,GAAA5J,CAAA4J,CAAOA,IAAA5J,KAAA4J,MAAAA,CAAgB1gB,CAAhB0gB,CAAPA,CAAA5J,CACR4J,OAAOA,KAAIlW,EAAJkW,CAAgBA,IAAAjJ,OAAhBiJ,CAA6B1gB,CAA7B0gB,CAAmC5J,CAAnC4J,CAD+BA,CAG1CiD,GAAAA,UAAAA,WAAAA,CAAAA,QAAUA,CAAC1kB,CAAD0kB,CAAQA,CACdA,MAAeA,EAARA,CAAA1kB,CAAA0kB,EAAa1kB,CAAb0kB,EAAsBA,IAAAqX,QAAtBrX,CAAqCA,IAArCA,CAA4CA,EAAAA,UAAAA,WAAAA,KAAAA,CAAAA,IAAAA,CAAiB1kB,CAAjB0kB,CADrCA,CAGlBrH;EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAACA,CAADA,CAAiBA,CAAhBA,IAAAA,IAAgBA,EAAhBA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAgBA,CAAhBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CACHA,KAAMrT,EAASqT,IAAA7E,OAAAxO,OAAfqT,CACMC,EAFaD,CAECzE,OAAAyE,CAAmBA,QAAAA,CAACxG,CAADwG,CAAKE,CAALF,CAAWA,CAAAA,MAACxG,EAAAwG,CAAGE,CAAHF,CAADA,CAASA,CAAAA,CAATA,CAAkBxG,CAAlBwG,CAA9BA,CAAoDG,MAAAC,OAAAJ,CAAcA,IAAdA,CAApDA,CACpBA,OAAOA,KAAI9R,EAAJ8R,CAAgBA,IAAA7E,OAAA6E,OAAAA,MAAAA,CAAAA,IAAA7E,OAAA6E,CAAA0H,CAAA1H,CAHJA,CAGIA,CAAAA,CAAhBA,CAAoDA,IAAApc,OAApDoc,CAAiEA,IAAAsF,UAAA/E,OAAAP,CAAsBA,QAAAA,CAACsS,CAADtS,CAAI/f,CAAJ+f,CAAUA,CAAAA,MAAAC,EAAAD,CAAYrT,CAAAqT,CAAO/f,CAAP+f,CAAA1V,KAAZ0V,CAAAA,CAAhCA,CAAjEA,CAHYA,CAKvB4e,GAAAA,UAAAA,aAAAA,CAAAA,QAAYA,CAACC,CAADD,CAAoBE,CAApBF,CAAmCG,CAAnCH,CAAyDA,CAAtBG,CAAAH,CAAAA,IAAAA,EAAAA,GAAAG,CAAAH,CAAkBA,EAAlBA,CAAAG,CAC3CH,OAAOA,KAAInE,EAAJmE,CAAiBI,EAAAJ,CAAwBA,IAAxBA,CADfA,IAAAA,EAAAA,GAAAC,CAAAD,CAAYA,KAAZA,CAAAC,CACeD,CADIA,IAAAA,EAAAA,GAAAE,CAAAF,CAAYA,CAAZA,CAAAE,CACJF,CAAoDG,CAApDH,CAAjBA,CAAuFA,MAAvFA,CAD0DA,CAIzEI;QAAUA,GAAuB,CAACC,CAAD,CAAcJ,CAAd,CAAiCC,CAAjC,CAAgDC,CAAhD,CAAsE,CACnG,IAAMpyB,CAAN,CACMqD,CADN,CAMS/P,CANT,CAMiBsZ,CANjB,CAOQ2lB,CAPR,CAOaC,CAPb,CAQazpB,CARb,CAQqB0pB,CARrB,CAaSn/B,CAd0F,OAAA8Z,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAxD8kB,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAY,KAAZ,CAAAA,CAAmBC,EAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAY,CAAZ,CAAAA,CAAeC,EAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAkB,EAAlB,CAAAA,CACvEpyB,EAAN,CAAesyB,CAAA9jB,OAAAxO,OACTqD,EAAN,CAAe,CAAC,QAAD,CAAA,OAAA,CAAA0X,CAAA,CAAc/a,CAAAuP,IAAA,CAAW,QAAA,CAACsE,CAAD,CAAO,CAAA,MAAA,EAAA,CAAGA,CAAH,CAAlB,CAAd,CAAA,CAAAtE,IAAA,CAA6C4R,EAA7C,CACf9d,EAAAyQ,QAAA,CAAe,QAAA,CAACP,CAAD,CAAIjgB,CAAJ,CAAU,CACrB8+B,CAAA,CAAgB9+B,CAAhB,CAAA,CAAqB+jB,IAAAE,IAAA,CAAS6a,CAAA,CAAgB9+B,CAAhB,CAAT,EAA+B,CAA/B,CAAkCigB,CAAAtc,OAAlC,CADA,CAAzB,CAIS3D,EAAQsZ,CAAH,EAAd,KAAiBA,CAAjB,CAAqB0lB,CAAAr7B,OAArB,CAA0C,CAA1C,CAA6C,EAAE3D,CAA/C,CAAmDsZ,CAAnD,CAAA,CAEI,IADI2lB,CACaE,CADbF,IAAAA,EACaE,CADRD,CACQC,CADF,CAACN,CAAD,CAAa7+B,CAAb,CAAA,OAAA,CAAAynB,CAAA,CAAmBuX,CAAArlB,IAAA,CAAgB3Z,CAAhB,CAAnB,CAAA,CACEm/B,CAAR1pB,CAAQ0pB,CAAH,EAAGA,CAAAA,CAAAA,CAAID,CAAAv7B,OAArB,CAAiC,EAAE8R,CAAnC,CAAuC0pB,CAAvC,CAAA,CACIF,CACA,CADMpR,EAAA,CAAcqR,CAAA,CAAIzpB,CAAJ,CAAd,CACN,CAAAqpB,CAAA,CAAgBrpB,CAAhB,CAAA,CAAqBsO,IAAAE,IAAA,CAAS6a,CAAA,CAAgBrpB,CAAhB,CAAT,EAA+B,CAA/B,CAAkCwpB,CAAAt7B,OAAlC,CAGpB3D,EAAJ,CAAS,EAdqF,CAAA,MAAA,EAAA,EAAA,CAAA,EAAA,CAclF,EAAEA,CAAnB,CAAuBg/B,CAAAr7B,OAAvB,CACmC,CAA/B,IAAKk7B,CAAL,CAAiB7+B,CAAjB,EAAsB,GAAtB,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CACI,CAAA,CAAA,CAAA,CAAM+P,CAAAkM,IAAA,CAAW,QAAA,CAACgE,CAAD,CAAIxK,CAAJ,CAAU,CAAA,MAAAiY,GAAA,CAAQzN,CAAR,CAAgB6e,CAAA,CAAgBrpB,CAAhB,CAAhB,CAAA,CAArB,CAAA0N,KAAA,CAA+Dyb,CAA/D,CAAN;AAAA,CAAA,CAFR,CAAA,CAAA,EAAA,CAAA,CAAA,CAdmG,CAkB/F,CAAA,CAAA,CAAA,CAAM,CAACC,CAAD,CAAa7+B,CAAb,CAAA,OAAA,CAAAynB,CAAA,CAAmBuX,CAAArlB,IAAA,CAAgB3Z,CAAhB,CAAnB,CAAA,CAAAic,IAAA,CACG,QAAA,CAACgE,CAAD,CAAO,CAAA,MAAA4N,GAAA,CAAc5N,CAAd,CAAA,CADV,CAAAhE,IAAA,CAEG,QAAA,CAACgE,CAAD,CAAIxK,CAAJ,CAAU,CAAA,MAAAiY,GAAA,CAAQzN,CAAR,CAAgB6e,CAAA,CAAgBrpB,CAAhB,CAAhB,CAAA,CAFb,CAAA0N,KAAA,CAGIyb,CAHJ,CAAN,CAAA,CAAA,CAlB+F,CAAA,CAAA,C,CSrChGQ,QAAUA,GAAiB,CAACC,CAAD,CAAW,CAAA,IACzC,CADyC,CACzC,CADyC,CAC9B,CAD8B,CAC9B,CAD8B,CAC5BnkB,CAD4B,CACpBokB,CADoB,CACXC,CADW,OAAAzlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GACzC,CAAA,CAAAnb,CAAA,CAA0C0gC,CAA1C,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EADyC,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CACzC,GAAA,CAAA,KAAA,CAAA,MAAA,EAAA,EAAA,CAAA,CAAA,CAAW,EAAA,CAAA,CAAA,CAAX,CAAA,MAAankB,EAAA,CAAA,CAAA,OAAQokB,EAAA,CAAA,CAAA,QAASC,EAAA,CAAA,CAAA,GAC1B,OAAA,GAAA,CAAA,CAAA,CAAOC,EAAA,CAAgBtkB,CAAhB,CAAwBokB,CAAxB,CAAiCC,CAAjC,CAAP,CAAA,CAAA,CAFqC,CACzC,CAAA,CAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,CADyC,CAAA,CAAA;AAKtCE,QAASA,GAAsB,CAACJ,CAAD,CAAW,CAC7C,MAAe1F,GAAR,CAAyB,IAAzB,CAA+B+F,SAA/B,CAA0CC,QAAUA,EAAwB,EAAG,CAAA,IAC9EC,CAD8E,CACzEC,CADyE,CAGrEC,CAHqE,CAGvBC,CAHuB,CAIpE,CAJoE,CAIlE7kB,CAJkE,CAI1DokB,CAJ0D,CAIjDC,CAJiD,CAK5D7F,CAL4D,CAQ3EsG,CAR2E,OAAAlmB,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAE9E,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACSgmB,CAAAA,CAAAA,CAAqBvF,EAAR,CAAsB8E,CAAtB,CAHwD,MAAA,CAAA,CAGM,MAAA,EAAA,CAAA,CAAA,CAAc3F,CAAR,CAAgBoG,CAAA3G,KAAA,EAAhB,CAAN,CAAA,CAAA,CAHN,MAAA,CAAA,CAG9E,GAAqE4G,CAAA,CAAe,CAAA,EAAf,CAA0DA,CAAAzG,KAA/H,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACU,CAAA,CAA8ByG,CAAAj8B,MAA5BoX,EAAA,CAAA,CAAA,OAAQokB,EAAA,CAAA,CAAA,QAASC,EAAA,CAAA,CAAA,GACX7F,EAAAA,CAAAA,CAAQ,OAAA,GAAA,CAAA,CAAA,CAAeW,EAAR,CAAiCE,EAAR,CAAsBiF,EAAA,CAAgBtkB,CAAhB,CAAwBokB,CAAxB,CAAiCC,CAAjC,CAAtB,CAAzB,CAAP,CAAA,EAAA,CALoD,MAAA,EAAA,CAK1E,MAAA,EAAA,CAAA,CAAA,CAAc7F,CAAR,CAAgB,CAAA,EAAhB,CAAN,CAAA,CAAA,CAL0E,MAAA,CAAA,CAS1E,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,EAAA,CACA,IAAIqG,CAAAA,CAAJ,EAAqBA,CAAAzG,KAArB,EAA2C,EAAAuG,CAAA,CAAKC,CAAApF,OAAL,CAA3C,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAoE,MAAA,EAAA,CAAA,CAAA,CAAchB,CAAR,CAAgBmG,CAAAlW,KAAA,CAAQmW,CAAR,CAAhB,CAAN,CAAA,EAAA,CAXM,MAAA,EAAA,CAatE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,IAAIF,CAAJ,CAAS,KAAMA,EAAAnF,MAAN,CAAX,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAbsE,MAAA,EAAA,CAS1E,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAT0E,MAAA,CAAA,CAQ3EuF,CAAO,CAAPA,EAAAA,CAAAA,CAAAA,CAAO;AAAEJ,CAAF,CAAQ,CAAEnF,MAAOuF,CAAT,CAAR,CAAA,CAAA,EAAA,CAAA,CAAA,CARoE,CAAA,CAAA,CAAA,CAA/E,CADsC,CAkB1CR,QAAUA,GAAe,CAACtkB,CAAD,CAASokB,CAAT,CAAkBC,CAAlB,CAA0B,CAKlD,IAAMU,CAAN,CACMtgB,CADN,CAEMugB,CAFN,CAGMC,CAHN,CAIIC,CAT8C,OAAAtmB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CACtD,MAA0BwlB,EnBPOxvB,EmBOjC,GnBPkDlC,EAAAK,YmBOlD,EAGmCqxB,CnBTExvB,EmBShC,GnBTiDlC,EAAAqB,gBmBSjD,GACKgxB,CAQN,CARqBX,CAAAh2B,GAQrB,CAPMqW,CAON,CAPqB4f,CAAA5f,aAOrB,CANMugB,CAMN,CANwBhlB,CAAAyE,aAAAhG,IAAA,CAAwBsmB,CAAxB,CAMxB,CALME,CAKN,CAL2BD,CAAA53B,KAAAoC,WAK3B,CAJI01B,CAIJ,CPtBOjT,EAAAhN,COkB8Bof,CAAA1jB,MAAApY,CAAa08B,CAAb18B,CPlB9B0c,COsBP,CAHImf,CAAAnwB,GAGJ,EAHuBwQ,CAAA0gB,IAAA,CAAiBJ,CAAjB,CAGvB,GAFIG,CAEJ,CAFuBzgB,CAAAhG,IAAA,CAAiBsmB,CAAjB,CAAAnP,OAAA,CAAsCsP,CAAtC,CAEvB,EAAAzgB,CAAA3M,IAAA,CAAiBitB,CAAjB,CAA+BG,CAA/B,CATC,EAAA,CAAA,EAAA,CAAA,CAAA,CAHL,EACI,CAAA,CAAA,CAAA,CAAM,IAAInyB,EAAJ,CAAgBiN,CAAhB,CAAwBokB,CAAA37B,OAAxB,CAAwC28B,EAAA,CAAAf,CAAA,CAAmBrkB,CAAAxO,OAAnB,CAAxC,CAAN,CAAA,CAAA,CAFkD,CAAA,CAAA,CAiBtD9M,QADS2gC,GACE,CAACpyB,CAAD,CAAQE,CAAR,CAAiBsR,CAAjB,CAA+B,CAEtC,IAAAxR,EAAA,CAAaA,CACb,KAAAE,EAAA,CAAeA,CACf,KAAAsR,aAAA,CAAoBA,CAJkB,CADVpE,CAAAK,CAAvB2kB,EAAuB3kB,CAAAA,EAAAA,CAOhC0kB,SAAAA,GAAWA,CAAXA,CAAWA,CAAC5zB,CAAD4zB,CAASA,CAAEA,MAAO5zB,EAAAuP,IAAAqkB,CAAWA,QAAAA,CAACE,CAADF,CAAWA,CAAAA,MAA/BA,EAA+BzkB,MAAAykB,CAAWE,CAAAl4B,KAAXg4B,CAAAA,CAAtBA,CAATA,CACpBhkB,CAAAA,CAAAA,EAAAA,UAAAgY;CAAAhY,UAAAA,CAAAA,QAASA,CAAChU,CAADgU,CAAOA,CAyBImkB,IAAAA,EAAwBC,EAAAD,CAzBnBnkB,IAyBmBmkB,CAAxBA,CAAU3yB,EAAA2yB,CAAAA,UAzBZnkB,OA0BPmkB,KAAI5b,CAAJ4b,CA1BiCn4B,CA0BjCm4B,CADWA,CAAAA,OACXA,CA1BcnkB,IA0BaqkB,EAAAF,CA1BMn4B,CA0BNm4B,CAA0B3yB,CAA1B2yB,CAA3BA,CAAiEA,IAAI1vB,UAAJ0vB,CAAeA,CAAfA,CAAjEA,CAAoFA,CAApFA,CAAuF3yB,CAAvF2yB,CA1BKnkB,CAChBiY,EAAA/X,SAAAA,CAAAA,QAAQA,CAAClU,CAADkU,CAAOA,CAAEA,MAAOokB,GAAApkB,CAAAA,IAAAA,CAAmBlU,CAAnBkU,CAATA,CACfgY,EAAA7X,WAAAA,CAAAA,QAAUA,CAACrU,CAADqU,CAAOA,CAAEA,MAAOikB,GAAAjkB,CAAAA,IAAAA,CAAmBrU,CAAnBqU,CAATA,CACjB8X,EAAA5X,YAAAA,CAAAA,QAAWA,CAACvU,CAADuU,CAAOA,CAAEA,MAAOgkB,GAAAhkB,CAAAA,IAAAA,CAAmBvU,CAAnBuU,CAATA,CAClB6X,EAAA3X,UAAAA,CAAAA,QAASA,CAACzU,CAADyU,CAAOA,CAAEA,MAAO8jB,GAAA9jB,CAAAA,IAAAA,CAAmBzU,CAAnByU,CAATA,CAChB4X,EAAA1X,UAAAA,CAAAA,QAASA,CAAC3U,CAAD2U,CAAOA,CA0BI6jB,IAAAA,EAAwBJ,EAAAI,CA1BnB7jB,IA0BmB6jB,CAAxBA,CAAUhzB,EAAAgzB,CAAAA,UA1BZ7jB,OA2BP6jB,KAAIhc,EAAJgc,CA3BiCx4B,CA2BjCw4B,CADWA,CAAAA,OACXA,CA3Bc7jB,IA2Ba0jB,EAAAG,CA3BMx4B,CA2BNw4B,CAA0BhzB,CAA1BgzB,CAA3BA,CA3Bc7jB,IA2B2D8jB,EAAAD,CA3BxCx4B,CA2BwCw4B,CAAzEA,CAA8FA,CAA9FA,CAAiGhzB,CAAjGgzB,CA3BK7jB,CAChB2X,EAAAzX,aAAAA,CAAAA,QAAYA,CAAC7U,CAAD6U,CAAOA,CAAEA,MAAOyjB,GAAAzjB,CAAAA,IAAAA,CAAmB7U,CAAnB6U,CAATA,CACnB0X,EAAAxX,UAAAA,CAAAA,QAASA,CAAC/U,CAAD+U,CAAOA,CAAEA,MAAOujB,GAAAvjB,CAAAA,IAAAA,CAAmB/U,CAAnB+U,CAATA,CAChByX;CAAAvX,UAAAA,CAAAA,QAASA,CAACjV,CAADiV,CAAOA,CAAEA,MAAOqjB,GAAArjB,CAAAA,IAAAA,CAAmBjV,CAAnBiV,CAATA,CAChBwX,EAAAtX,eAAAA,CAAAA,QAAcA,CAACnV,CAADmV,CAAOA,CAAEA,MAAOmjB,GAAAnjB,CAAAA,IAAAA,CAAmBnV,CAAnBmV,CAATA,CACrBuX,EAAArX,cAAAA,CAAAA,QAAaA,CAACrV,CAADqV,CAAOA,CAAEA,MAAOijB,GAAAjjB,CAAAA,IAAAA,CAAmBrV,CAAnBqV,CAATA,CACpBsX,EAAApX,UAAAA,CAAAA,QAASA,CAACvV,CAADuV,CAAOA,CA0BImjB,IAAAA,EAAwBN,EAAAM,CA1BnBnjB,IA0BmBmjB,CAAxBA,CAAUlzB,EAAAkzB,CAAAA,UA1BZnjB,OA2BPmjB,KAAItb,EAAJsb,CA3BiC14B,CA2BjC04B,CADWA,CAAAA,OACXA,CA3BcnjB,IA2Ba8iB,EAAAK,CA3BM14B,CA2BN04B,CAA0BlzB,CAA1BkzB,CAA3BA,CA3BcnjB,IA2BmDojB,GAAAD,CA3BhC14B,CA2BgC04B,CAAjEA,CA3BcnjB,IA2B2EhC,MAAAmlB,CA3BxD14B,CA2BmEqC,SAAAq2B,CAAcA,CAAdA,CAAA14B,KAAX04B,CAAzFA,CAA4HA,CAA5HA,CAA+HlzB,CAA/HkzB,CA3BKnjB,CAChBqX,EAAAlX,YAAAA,CAAAA,QAAWA,CAAC1V,CAAD0V,CAAOA,CAAEA,MAAOkjB,GAAAljB,CAAAA,IAAAA,CAAqB1V,CAArB0V,CAATA,CAClBmX;CAAAjX,WAAAA,CAAAA,QAAUA,CAAC5V,CAAD4V,CAAOA,CAiCIijB,IAAAA,EAAwBT,EAAAS,CAjCnBjjB,IAiCmBijB,CAAxBA,CAAEx9B,EAAAw9B,CAAAA,OAAQrzB,EAAAA,CAAAqzB,CAAAA,UAjCZjjB,OAA2B5V,EAkCnChG,KAAA6+B,GAAc/hC,EAAAoD,OAAd2+B,CACHA,IAAIrb,EAAJqb,CAnCsC74B,CAmCtC64B,CAA0Bx9B,CAA1Bw9B,CAnCkBjjB,IAmCgByiB,EAAAQ,CAnCI74B,CAmCJ64B,CAA0BrzB,CAA1BqzB,CAAlCA,CAnCkBjjB,IAmCsDkjB,GAAAD,CAnClC74B,CAmCkC64B,CAAxEA,CAAgGb,EAAAa,CAnC9EjjB,IAmC8EijB,CAnC1D74B,CAmC2EqC,SAAjBw2B,CAAhGA,CAAiIA,CAAjIA,CAAoIrzB,CAApIqzB,CADGA,CAEHA,IAAIpb,EAAJob,CApCsC74B,CAoCtC64B,CAAyBx9B,CAAzBw9B,CApCkBjjB,IAoCeyiB,EAAAQ,CApCK74B,CAoCL64B,CAA0BrzB,CAA1BqzB,CAAjCA,CApCkBjjB,IAoCqDkjB,GAAAD,CApCjC74B,CAoCiC64B,CAAvEA,CApCkBjjB,IAoC6E+iB,GAAAE,CApCzD74B,CAoCyD64B,CAA/FA,CAAuHb,EAAAa,CApCrGjjB,IAoCqGijB,CApCjF74B,CAoCkGqC,SAAjBw2B,CAAvHA,CAAwJA,CAAxJA,CAA2JrzB,CAA3JqzB,CApCSjjB,CACjBkX,EAAAhX,qBAAAA,CAAAA,QAAoBA,CAAC9V,CAAD8V,CAAOA,CAAEA,MAAOwiB,GAAAxiB,CAAAA,IAAAA,CAAmB9V,CAAnB8V,CAATA,CAC3BiX,EAAA/W,mBAAAA,CAAAA,QAAkBA,CAAChW,CAADgW,CAAOA,CAyBI+iB,IAAAA,EAAwBX,EAAAW,CAzBnB/iB,IAyBmB+iB,CAAxBA,CAAUvzB,EAAAuzB,CAAAA,UAzBZ/iB,OA0BhB+iB,KAAI9b,EAAJ8b,CA1BmD/4B,CA0BnD+4B,CADoBA,CAAAA,OACpBA,CA1BuB/iB,IA0BYqiB,EAAAU,CA1BgB/4B,CA0BhB+4B,CAA0BvzB,CAA1BuzB,CAAnCA,CA1BuB/iB,IA0BkDzC,MAAAwlB,CA1BtB/4B,CA0BiCqC,SAAA02B,CAAcA,CAAdA,CAAA/4B,KAAX+4B,CAAzEA,CAA4GA,CAA5GA,CAA+GvzB,CAA/GuzB,CA1Bc/iB,CACzBgX,EAAA9W,SAAAA,CAAAA,QAAQA,CAAClW,CAADkW,CAAOA,CAAEA,MAAO0iB,GAAA1iB,CAAAA,IAAAA,CAAqBlW,CAArBkW,CAATA,CACf+W;CAAA5W,gBAAAA,CAAAA,QAAeA,CAACrW,CAADqW,CAAOA,CAClBA,MAAOA,KAAIsG,EAAJtG,CAAmBrW,CAAnBqW,CAAyBA,IAAAgB,aAAAhG,IAAAgF,CAAsBrW,CAAAgB,GAAtBqV,CAAzBA,CAAyDA,IAAA9C,MAAA8C,CAAWrW,CAAA0Y,QAAXrC,CAAzDA,CADWA,CAGtB+hB,SAAAA,GAAgBA,CAAhBA,CAAgBA,CAAGA,CAAEA,MAAOA,EAAAvyB,EAAAgrB,KAAAuH,EAAA58B,MAAT48B,CACnBY,QAAAA,GAAiBA,CAAjBA,CAAiBA,CAAGA,CAAEA,MAAOA,EAAAjzB,EAAA8qB,KAAAmI,EAAAx9B,MAATw9B,CACpBC,CAAAZ,EAAAA,CAAAA,QAAcA,CAACr4B,CAADq4B,CAAO7yB,CAAP6yB,CAAqDA,CAAnCA,IAAA59B,EAAA49B,IAAAA,EAAAA,GAAA59B,CAAA49B,CAASW,EAAAX,CAAAA,IAAAA,CAATA,CAAA59B,CAC5B49B,OAAmBA,EAAnBA,CAAO7yB,CAAP6yB,EAAwBA,IAAAI,EAAAJ,CAAcr4B,CAAdq4B,CAAoB59B,CAApB49B,CAAxBA,EAAuDA,IAAI5vB,UAAJ4vB,CAAeA,CAAfA,CADQA,CAMnEC,SAAAA,GAAaA,CAAbA,CAAaA,CAACt4B,CAADs4B,CAAwDA,CAAjDA,IAAAA,EAAwBF,EAAAE,CAAAA,CAAAA,CAAxBA,CAAU9yB,EAAA8yB,CAAAA,UAC1BA,OAAOA,KAAI/b,CAAJ+b,CAAat4B,CAAbs4B,CADWA,CAAAA,OACXA,CAA2BA,CAAAD,EAAAC,CAAoBt4B,CAApBs4B,CAA0B9yB,CAA1B8yB,CAA3BA,CAAiEA,CAAAG,EAAAH,CAAct4B,CAAds4B,CAAjEA,CAAsFA,CAAtFA,CAAyF9yB,CAAzF8yB,CAD0DA,CAMrEC,QAAAA,GAAaA,CAAbA,CAAaA,CAACv4B,CAADu4B,CAAwDA,CAAjDA,IAAAA,EAAwBH,EAAAG,CAAAA,CAAAA,CAAxBA,CAAU/yB,EAAA+yB,CAAAA,UAC1BA,OAAOA,KAAI9b,EAAJ8b,CAAiBv4B,CAAjBu4B,CADWA,CAAAA,OACXA,CAA+BA,CAAAF,EAAAE,CAAoBv4B,CAApBu4B,CAA0B/yB,CAA1B+yB,CAA/BA,CAAqEA,CAAAI,GAAAJ,CAAiBv4B,CAAjBu4B,CAArEA,CAA6FA,CAAAE,EAAAF,CAAcv4B,CAAdu4B,CAA7FA,CAAkHA,CAAlHA,CAAqH/yB,CAArH+yB,CAD0DA;AASrEK,QAAAA,GAAeA,CAAfA,CAAeA,CAAC54B,CAAD44B,CAAwDA,CAAjDA,IAAAA,EAAwBR,EAAAQ,CAAAA,CAAAA,CAAxBA,CAAUpzB,EAAAozB,CAAAA,UAC5BA,OAAOA,KAAI9b,EAAJ8b,CAAe54B,CAAf44B,CADaA,CAAAA,OACbA,CAA6BA,CAAAP,EAAAO,CAAoB54B,CAApB44B,CAA0BpzB,CAA1BozB,CAA7BA,CAAmEZ,EAAAY,CAAAA,CAAAA,CAAiB54B,CAAAqC,SAAjBu2B,CAAnEA,CAAoGA,CAApGA,CAAuGpzB,CAAvGozB,CAD4DA,C,CCxFpEM,QAAUA,GAAQ,CAACC,CAAD,CAAO,CAC5B,IAAMvmB,CAAN,CACMyE,CADN,CAEA,CAFA,CAEA,CAFA,CAEW+c,CAFX,CAGU4C,CAHV,CASA,CATA,CASW5C,CATX,CAUU4C,CAXkB,OAAAxlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CACE,IAAA,EAAA2nB,CAAA,OAAA,CAgHxBC,EAAmB,IAAI9/B,GAhHvBsZ,EAAN,CAiHO,IAAI1O,EAAJ,CAAWm1B,EAAA,CAAerrB,CAAA,OAAf,CAA4BorB,CAA5B,CAAX,CA0DA,IAAI9/B,GAAJ,CAAQse,MAAA0hB,QAAA,CA1DiEtrB,CAAAoJ,eA0DjE,EAA2B,EAA3B,CAAR,CA1DA,CAA+FvgB,EAAAygB,GAA/F,CAAmH8hB,CAAnH,CAhHD/hB,EAAN,CAAqB,IAAI/d,GACzB,EAAA,CAAAjD,CAAA,CAAqB8iC,CAAA,aAArB,EAA6C,EAA7C,CAAA,EAAA,CAAA,CAAA,KAAA,EAH4B,MAAA,CAAA,CAG5B,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAW/E,CAAX,CAAA,CAAA,MACU4C,EAAN,CAoHG,IAAIrwB,EAAJ,CAAoB9P,EAAAygB,GAApB,CAAwCiiB,EAAA,CApHHnF,CAoHuB,KAApB,CAAxC,CApHqCA,CAoHmC,GAAxE,CApHqCA,CAoH4C,QAAjF,CAnHH,OAAA,EAAA,CAAA,CAAA,CAAM,CACFxhB,OAAAA,CADE,CACMokB,QAAAA,CADN,CAEFC,GAAQ,IAAIuC,EAAJ,CAAmBC,EAAA,CAAmBrF,CAAA,KAAA,QAAnB,CAAnB,CAAiEsF,EAAA,CAAc1C,CAAAnxB,EAAd,CAAjE,CAA+F6zB,EAAA,CAAc1C,CAAAjxB,EAAd,CAA/F,CAA+HsR,CAA/H,CAFN,CAAN,CAAA,CAAA,CALwB,MAAA,CAAA,CAG5B,CAAA,CAAA,CAAA,KAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAH4B,MAAA,CAAA,CAU5B,CAAA,CAAAhhB,CAAA,CAAqB8iC,CAAA,QAArB,EAAwC,EAAxC,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAV4B,MAAA,CAAA,CAU5B,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAW/E,CAAX,CAAA,CAAA,MACU4C;CAAN,CAAgBuC,EAAA,CAAoBnF,CAApB,CAChB,OAAA,EAAA,CAAA,CAAA,CAAM,CACFxhB,OAAAA,CADE,CACMokB,QAAAA,CADN,CAEFC,GAAQ,IAAIuC,EAAJ,CAAmBC,EAAA,CAAmBrF,CAAA,QAAnB,CAAnB,CAAyDsF,EAAA,CAAc1C,CAAAnxB,EAAd,CAAzD,CAAuF6zB,EAAA,CAAc1C,CAAAjxB,EAAd,CAAvF,CAAuHsR,CAAvH,CAFN,CAAN,CAAA,CAAA,CAZwB,MAAA,CAAA,CAU5B,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAV4B,CAAA,CAAA,CAAA,CAkBhCqiB,QAAUA,GAAa,CAAC1d,CAAD,CAAM,CAAA,MAAAxK,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAE,MAAA,GAAA,CAAA,CAAA,CAAOwK,CAAP,CAAA,CAAA,CAAF,CAAA,CAAA,CAC7Byd,QAASA,GAAkB,CAACxoB,CAAD,CAAK,CAC5B,MAAO+B,CAAC/B,CAAD+B,EAAO,EAAPA,QAAA,CAAkB,QAAA,CAACjN,CAAD,CAAU4zB,CAAV,CAAqB,CAAA,MAAA,EAAA,OAAA,CAAAxa,CAAA,CACvCpZ,CADuC,CAAA,CAAAoZ,CAAA,CAEtCwa,CAAA,SAFsC,EAEhB,CAACA,CAAA,SAAD,CAFgB,EAEQ,EAFR,CAAA,CAAAxa,CAAA,CAGtCwa,CAAA,OAHsC,EAGlB,CAACA,CAAA,OAAD,CAHkB,EAGI,EAHJ,CAAA,CAAAxa,CAAA,CAItCwa,CAAA,KAJsC,EAIpB,CAACA,CAAA,KAAD,CAJoB,EAIA,EAJA,CAAA,CAAAxa,CAAA,CAKtCwa,CAAA,KALsC,EAKpB,CAACA,CAAA,KAAD,CALoB,EAKA,EALA,CAAA,CAAAxa,CAAA,CAMvCsa,EAAA,CAAmBE,CAAA,SAAnB,CANuC,CAAA,CAAA,CAAvC,CAOJ,EAPI,CADqB,CAUhC,IAAMC,GAAc,IAAI1W,EAAJ,CAAgB,OAAhB,CAEhB5rB,SADSkiC,GACE,CAAC3Z,CAAD,CAAUha,CAAV,CAAiBE,CAAjB,CAA0BsR,CAA1B,CAAwC,CAC/C,EAAA,KAAA,CAAA,IAAA,CAAMxR,CAAN,CAAaE,CAAb,CAAsBsR,CAAtB,CACA,KAAAwI,GAAA,CAAeA,CAFgC,CADnB5M,CAAAglB,CAAvBuB,EAAuBvB,CAAAA,EAAAA,CAKhCI;EAAAA,UAAAA,EAAAA,CAAAA,QAAcA,CAACwB,CAADxB,CAAQ7yB,CAAR6yB,CAA0DA,CAArCr/B,CAAAA,CAAWggC,EAAAX,CAAAA,IAAAA,CAAXA,OAC/BA,OAAoBA,EAAbA,EAAA7yB,CAAA6yB,CAAiBA,IAAI5vB,UAAJ4vB,CAAeA,CAAfA,CAAjBA,CAAqCvnB,EAAAunB,CAAUA,IAAAxY,GAAAwY,CAAar/B,CAAbq/B,CAAVA,CADwBA,CAGxEM,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,EAA+CA,CAArCA,IAAA3/B,EAAWggC,EAAAL,CAAAA,IAAAA,CAAXA,OACjBA,OAAOA,KAAIp+B,UAAJo+B,CAAeA,IAAA9Y,GAAA8Y,CAAa3/B,CAAb2/B,CAAfA,CAD+CA,CAG1DG,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,EAA+CA,CAArCA,IAAA9/B,EAAWggC,EAAAF,CAAAA,IAAAA,CAAXA,OACjBA,OAAOA,KAAInf,SAAJmf,CAAcA,IAAAjZ,GAAAiZ,CAAa9/B,CAAb8/B,CAAdA,CAD+CA,CAG1DL;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACz4B,CAADy4B,CAAOA,CAAPA,CAA8CA,CAArCz/B,CAAAA,CAAAy/B,CAAFA,IAAAA,EAAAA,GAAAA,CAAAA,CAAaO,EAAAP,CAAAA,IAAAA,CAAbA,CAAAA,CAAEA,QACLA,KAAA5Y,EAAY4Y,IAAZA,GACRA,OAAmCA,CAAAA,CAAnCA,GAAIqB,EAAArB,CAAqBz4B,CAArBy4B,CAAJA,CACWA,IAAIhwB,UAAJgwB,CAAesB,EAAAtB,CAAkB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAlBA,CAAfA,CADXA,CAGKA,CAAKuB,EAAAvB,CAAez4B,CAAfy4B,CAALA,EAA6BwB,EAAAxB,CAAgBz4B,CAAhBy4B,CAA7BA,GAAyEA,EAAzEA,GAAuDz4B,CAAAjE,EAAvD08B,CACMA,IAAIhwB,UAAJgwB,CAAesB,EAAAtB,CAAkB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAlBA,CAAfA,CADNA,CAGIyB,EAAAzB,CAAgBz4B,CAAhBy4B,CAAJA,EAA6Bz4B,CAAA1B,EAA7Bm6B,GAA2CzhC,EAAAuH,YAA3Ck6B,CACMA,IAAIhwB,UAAJgwB,CAAesB,EAAAtB,CAAkB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAlBA,CAAfA,CADNA,CAGiCA,CAAAA,CAAjCA,GAAI0B,EAAA1B,CAAmBz4B,CAAnBy4B,CAAJA,CACMA,IAAIhwB,UAAJgwB,CAAe2B,EAAA3B,CAAoB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAApBA,CAAfA,CADNA,CAGgCA,CAAAA,CAAhCA,GAAI4B,EAAA5B,CAAkBz4B,CAAlBy4B,CAAJA,EAA6EA,CAAAA,CAA7EA,GAAwC6B,EAAA7B,CAA2Bz4B,CAA3By4B,CAAxCA,CACMA,IAAIhwB,UAAJgwB,CAAe8B,EAAA9B,CAAmB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAnBA,CAAfA,CADNA,CAG8BA,CAAAA,CAA9BA,GAAI+B,EAAA/B,CAAgBz4B,CAAhBy4B,CAAJA,CACMA,IAAIhwB,UAAJgwB,CAAe3nB,EAAA2nB,CAAU5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAVA,CAAAh+B,OAAfg+B,CADNA,CAG8BA,CAAAA,CAA9BA,GAAIgC,EAAAhC,CAAgBz4B,CAAhBy4B,CAAJA,CACMmB,EAAAxW,OAAAqV,CAAmB5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAA5d,KAAA4d,CAAqBA,EAArBA,CAAnBA,CADNA,CAIMrd,EAAAqd,CAAaz4B,CAAAyZ,UAAbgf,CAA6B5Y,CAAA4Y,CAAQz/B,CAARy/B,CAAA9kB,IAAA8kB,CAAoBA,QAAAA,CAAC9gB,CAAD8gB,CAAOA,CAAAA,MAAAA,CAAC9gB,CAAD8gB,CAA3BA,CAA7BA,CAxBuCA,CA4B1DsB;QAASA,GAAiB,CAAChpB,CAAD,CAAS,CAE/B,IADA,IAAM5V,EAAO,IAAI0e,WAAJ,CAAgC,CAAhC,CAAgB9I,CAAA1V,OAAhB,CAAb,CACS3D,EAAK,EADd,CACiBsZ,EAAID,CAAA1V,OAArB,CAAoC,EAAE3D,CAAtC,CAA0CsZ,CAA1C,CAAA,CAOI0pB,EAAA,CAAyB3pB,CAAA,CAAOrZ,CAAP,CAAA8gB,SAAA,EAAzB,CAA+C,IAAIqB,WAAJ,CAAgB1e,CAAAV,OAAhB,CAA6BU,CAAAT,WAA7B,CAAuD,CAAvD,CAAmDhD,CAAnD,CAA0D,CAA1D,CAA/C,CAEJ,OAAOyD,EAAAV,OAXwB,CAanC2/B,QAASA,GAAmB,CAACrpB,CAAD,CAAS,CAEjC,IADA,IAAM5V,EAAO,IAAI0e,WAAJ,CAAgC,CAAhC,CAAgB9I,CAAA1V,OAAhB,CAAb,CACS3D,EAAK,EADd,CACiBsZ,EAAID,CAAA1V,OAArB,CAAoC,EAAE3D,CAAtC,CAA0CsZ,CAA1C,CAAA,CACI2pB,EAAA,CAA0B5pB,CAAA,CAAOrZ,CAAP,CAA1B,CAAqC,IAAImiB,WAAJ,CAAgB1e,CAAAV,OAAhB,CAA6BU,CAAAT,WAA7B,CAA+C,EAA/C,CAAuDhD,CAAvD,CAA0D,CAA1D,CAArC,CAEJ,OAAOyD,EAAAV,OAL0B,CAOrC8/B,QAASA,GAAkB,CAACxpB,CAAD,CAAS,CAI1B6pB,CAAAA,CAAS7pB,CAAA8J,KAAA,CAAY,EAAZ,CAEf,KADA,IAAM1f,EAAO,IAAIsN,UAAJ,CAAemyB,CAAAv/B,OAAf,CAA+B,CAA/B,CAAb,CACS3D,EAAI,CAAb,CAAgBA,CAAhB,CAAoBkjC,CAAAv/B,OAApB,CAAmC3D,CAAnC,EAAwC,CAAxC,CACIyD,CAAA,CAAKzD,CAAL,EAAU,CAAV,CAAA,CAAey3B,QAAA,CAASyL,CAAAxL,OAAA,CAAc13B,CAAd,CAAiB,CAAjB,CAAT,CAA8B,EAA9B,CAEnB,OAAOyD,EAAAV,OATyB;AAYpC,IAAItD,EAAOwf,CAAAjgB,EAAAC,EAAAC,EAAAO,KAAX,CACIH,GAAW4f,CAAAlgB,EAAAC,EAAAC,EAAAI,SADf,CAEIC,GAAW4f,CAAAngB,EAAAC,EAAAC,EAAAK,SAFf,CAGIH,GAAYigB,CAAArgB,EAAAC,EAAAC,EAAAE,UAHhB,CAIIC,GAAY+f,CAAApgB,EAAAC,EAAAC,EAAAG,UAJhB,CAKIG,GAAe+f,CAAAvgB,EAAAC,EAAAC,EAAAM,aALnB,CAMIL,GAAkBsgB,CAAAzgB,EAAAC,EAAAC,EAAAC,gBAMtB0iC,SAASA,GAAmB,CAACprB,CAAD,CAAI,CAC5B,MAAO,KAAI4E,EAAJ,CAAwBlc,EAAAygB,GAAxB,CAA4CnJ,CAAA,MAA5C,CAAwD0sB,EAAA,CAAmB1sB,CAAA,QAAnB,CAAxD,CAA0F2sB,EAAA,CAAgB3sB,CAAA,QAAhB,CAA1F,CADqB;AAMhCkrB,QAASA,GAAc,CAAC0B,CAAD,CAAK3B,CAAL,CAAuB,CAC1C,MAAOzlB,CAAConB,CAADpnB,EAAO,EAAPA,KAAA,CACE,QAAA,CAACsE,CAAD,CAAO,CAyBhB,IAAIlW,EAzB0BkW,CAyBnB,KAAX,CAEIjW,EA3B0BiW,CA2Bf,SAFf,CAIIjX,CAJJ,CAIQg6B,CAJR,CAIkBC,CAJlB,CAKI7jB,EAkBG,IAAI9d,GAAJ,CAAQse,MAAA0hB,QAAA,CAhDerhB,CA8BAb,eAkBf,EAA2B,EAA3B,CAAR,CAjBP,IAAI,CA/B6BgiB,CA+BjC,EAAyB,EAAE6B,CAAF,CA/BKhjB,CA+BQ,WAAb,CAAzB,CACI,IAAIijB,CAAJ,CAAeC,EAAA,CAhCWljB,CAgCE,KAAb,CAAwBohB,EAAA,CAhCbphB,CAgC4B,SAAf,CAhCVmhB,CAgCU,CAAxB,CAAf,CACI,IAAAlB,EAAQ,IAAIr2B,EAAJ,CAAUE,CAAV,CAAgBm5B,CAAhB,CAA0Bl5B,CAA1B,CAAoCoV,CAApC,CADZ,CADJ,IAKK,IAAI8jB,CAAJ,CApC4B9B,CAoCbrB,IAAA,CAAqB/2B,CAArB,CAA0Bi6B,CAAA,GAA1B,CAAA,CApCa7B,CAqC3B/nB,IAAA,CAAqBrQ,CAArB,CAAAhB,KAAAoC,WADc,CAEd+4B,EAAA,CAtCwBljB,CAsCX,KAAb,CAAwBohB,EAAA,CAtCAphB,CAsCe,SAAf,CAA8B,IAA9B,CAAxB,CAFD,CAGDijB,CAIA,CAJW,IAAI9kB,EAAJ,CAAe8kB,CAAf,CAEX,CAACF,CAAD,CAAYC,CAAA,UAAZ,EAAqCG,EAAA,CAAYJ,CAAZ,CAArC,CAA6D,IAAIhhB,EAFtD,CAE+DhZ,CAF/D,CAEmEi6B,CAAA,UAFnE,CAIX,CADA/C,CACA,CADQ,IAAIr2B,EAAJ,CAAUE,CAAV,CAAgBm5B,CAAhB,CAA0Bl5B,CAA1B,CAAoCoV,CAApC,CACR,CA3C6BgiB,CA2C7BrB,IAAA,CAAqB/2B,CAArB,CAAA,EA3C6Bo4B,CA2CD1uB,IAAA,CAAqB1J,CAArB,CAAyBk3B,CAAzB,CA3ChB,OA6CTA,EA7CS,EA6CA,IA7CA,CADT,CAAAlgB,OAAA,CAEK,QAAA,CAACC,CAAD,CAAO,CAAA,MAAK,KAAL,EAAAA,CAAA,CAFZ,CADmC;AAK9C4iB,QAASA,GAAkB,CAAC5pB,CAAD,CAAK,CAC5B,MAAO+B,CAAC/B,CAAD+B,EAAO,EAAPA,QAAA,CAAkB,QAAA,CAACqoB,CAAD,CAAa1B,CAAb,CAAwB,CAAA,MAAA,EAAA,OAAA,CAAAxa,CAAA,CAC1Ckc,CAD0C,CAAA,CAAA,CAE7C,IAAIhoB,EAAJ,CAAkB,IAnIfxK,CAmIe,CAAS8wB,CAAA,MAAT,CAA0B,CAA1B,CAAlB,CAAgD,IAnI7C9wB,CAmI6C,CAASyyB,EAAA,CAAkB3B,CAAA,SAAlB,CAAT,CAAgD,CAAhD,CAAhD,CAF6C,CAAA,CAAAxa,CAAA,CAG1C0b,EAAA,CAAmBlB,CAAA,SAAnB,CAH0C,CAAA,CAAA,CAA1C,CAIJ,EAJI,CADqB;AAOhCmB,QAASA,GAAe,CAAC7pB,CAAD,CAAKlL,CAAL,CAAmB,CAAdA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAU,EAAV,CAAAA,CACzB,KADuC,IAC9BrO,EAAK,EADyB,CACtBsZ,EAAI3V,CAAC4V,CAAD5V,EAAO,EAAPA,QAArB,CAAwC,EAAE3D,CAA1C,CAA8CsZ,CAA9C,CAAA,CAAkD,CAC9C,IAAM2oB,EAAS1oB,CAAA,CAAGvZ,CAAH,CACfiiC,EAAA,SAAA,EAAsB5zB,CAAAqH,KAAA,CAAa,IAAIgG,EAAJ,CAAmB,IA1InDvK,CA0ImD,CAAS9C,CAAA1K,OAAT,CAAyB,CAAzB,CAAnB,CAAgD,IA1IhFwN,CA0IgF,CAAS8wB,CAAA,SAAAt+B,OAAT,CAAoC,CAApC,CAAhD,CAAb,CACtBs+B,EAAA,OAAA,EAAoB5zB,CAAAqH,KAAA,CAAa,IAAIgG,EAAJ,CAAmB,IA3IjDvK,CA2IiD,CAAS9C,CAAA1K,OAAT,CAAyB,CAAzB,CAAnB,CAAgD,IA3I9EwN,CA2I8E,CAAS8wB,CAAA,OAAAt+B,OAAT,CAAkC,CAAlC,CAAhD,CAAb,CACpBs+B,EAAA,KAAA,EAAkB5zB,CAAAqH,KAAA,CAAa,IAAIgG,EAAJ,CAAmB,IA5I/CvK,CA4I+C,CAAS9C,CAAA1K,OAAT,CAAyB,CAAzB,CAAnB,CAAgD,IA5I5EwN,CA4I4E,CAAS8wB,CAAA,KAAAt+B,OAAT,CAAgC,CAAhC,CAAhD,CAAb,CAClBs+B,EAAA,KAAA,EAAkB5zB,CAAAqH,KAAA,CAAa,IAAIgG,EAAJ,CAAmB,IA7I/CvK,CA6I+C,CAAS9C,CAAA1K,OAAT,CAAyB,CAAzB,CAAnB,CAAgD,IA7I5EwN,CA6I4E,CAAS8wB,CAAA,KAAAt+B,OAAT,CAAgC,CAAhC,CAAhD,CAAb,CAClB0K,EAAA,CAAU+0B,EAAA,CAAgBnB,CAAA,SAAhB,CAAoC5zB,CAApC,CANoC,CAQlD,MAAOA,EATgC,CAW3Cu1B,QAASA,GAAiB,CAACC,CAAD,CAAW,CACjC,MAAOvoB,CAACuoB,CAADvoB,EAAa,EAAbA,QAAA,CAAwB,QAAA,CAACpB,CAAD,CAAM+kB,CAAN,CAAc,CAAA,MAAA/kB,EAAA,CAAM,GAAU,CAAV,GAAE+kB,CAAF,CAAN,CAAtC,CAA0D,CAA1D,CAD0B;AA6BrC,IAAM6E,GAAiB,CACnB,KAAQrkC,CAAA+K,KADW,CAEnB,OAAQ/K,CAAAI,KAFW,CAGnB,MAAOJ,CAAA0E,IAHY,CAInB,cAAiB1E,CAAAkF,cAJE,CAKnB,OAAUlF,CAAA6F,OALS,CAMnB,KAAQ7F,CAAAuG,KANW,CAOnB,KAAQvG,CAAAyF,KAPW,CAQnB,QAAWzF,CAAA2G,QARQ,CASnB,KAAQ3G,CAAAiH,KATW,CAUnB,KAAQjH,CAAAwH,KAVW,CAWnB,UAAaxH,CAAA4H,UAXM,CAYnB,SAAY5H,CAAAsI,SAZO,CAanB,KAAQtI,CAAAsB,KAbW,CAcnB,OAAUtB,CAAAkB,QAdS,CAenB,MAASlB,CAAA2C,MAfU,CAgBnB,gBAAmB3C,CAAAiG,gBAhBA,CAiBnB,cAAiBjG,CAAA0B,cAjBE,CAkBnB,IAAO1B,CAAAmC,IAlBY,CAoBvB6hC;QAASA,GAAY,CAAC3rB,CAAD,CAAInN,CAAJ,CAAc,CAC/B,OAAQm5B,EAAA,CAAehsB,CAAA,KAAf,CAAR,EACI,KAAKrY,CAAA+K,KAAL,CAAgB,MAAO,KACvB,MAAK/K,CAAAI,KAAL,CAAgB,MAoBc,KAAIA,EAnBlC,MAAKJ,CAAA0E,IAAL,CAAe,MAAOu/B,GAAA,CAAY5rB,CAAZ,CACtB,MAAKrY,CAAAkF,cAAL,CAAyB,MAAOo/B,GAAA,CAAsBjsB,CAAtB,CAChC,MAAKrY,CAAA6F,OAAL,CAAkB,MAmCc,KAAIA,EAlCpC,MAAK7F,CAAAyF,KAAL,CAAgB,MAmCc,KAAIA,EAlClC,MAAKzF,CAAAuG,KAAL,CAAgB,MAmCc,KAAIA,EAlClC,MAAKvG,CAAA2G,QAAL,CAAmB,MAmCc,KAAIA,EAAJ,CAnCS0R,CAmCG,MAAZ,CAnCSA,CAmCmB,UAA5B,CAlCjC,MAAKrY,CAAAiH,KAAL,CAAgB,MAmCc,KAAIuc,EAAJ,CAAU3jB,EAAA,CAnCJwY,CAmCa,KAAT,CAAV,CAlC9B,MAAKrY,CAAAwH,KAAL,CAAgB,MAmCc,KAAIA,EAAJ,CAAS1H,EAAA,CAnCHuY,CAmCY,KAAT,CAAT,CAnCMA,CAmC4B,SAAlC,CAlC9B,MAAKrY,CAAA4H,UAAL,CAAqB,MAmCc,KAAIA,EAAJ,CAAc9H,EAAA,CAnCHuY,CAmCY,KAAT,CAAd,CAnCWA,CAmC4B,SAAvC,CAlCnC,MAAKrY,CAAAsI,SAAL,CAAoB,MAmCc,KAAIA,EAAJ,CAAavI,EAAA,CAnCHsY,CAmCgB,KAAb,CAAb,CAlClC,MAAKrY,CAAAsB,KAAL,CAAgB,MAmCwB,KAAIA,EAAJ,CAnCD4J,CAmCC,EAnCW,EAmCX,CAlCxC,MAAKlL,CAAAkB,QAAL,CAAmB,MAmCuB,KAAIod,EAAJ,CAnCEpT,CAmCF;AAnCc,EAmCd,CAlC1C,MAAKlL,CAAA2C,MAAL,CAAiB,MAmCwB,KAAIA,EAAJ,CAAUhD,EAAA,CAnCb0Y,CAmCuB,KAAV,CAAV,CAnCHA,CAmCwC,QAArC,EAAyD,EAAzD,CAnCAnN,CAmCA,EAnCY,EAmCZ,CAlCzC,MAAKlL,CAAAiG,gBAAL,CAA2B,MAmCc,KAAIA,EAAJ,CAnCiBoS,CAmCG,UAApB,CAlCzC,MAAKrY,CAAA0B,cAAL,CAAyB,MAmCwB,KAAIA,EAAJ,CAnCK2W,CAmCa,SAAlB,CAnCQnN,CAmCR,EAnCoB,EAmCpB,CAlCjD,MAAKlL,CAAAmC,IAAL,CAAe,MAmCwB,KAAI2hB,EAAJ,CAnCLzL,CAmCc,WAAT,CAnCFnN,CAmCE,EAnCU,EAmCV,CArD3C,CAoBA,KAAUiI,MAAJ,CAAU,oBAAV,CAA+BkF,CAAA,KAA/B,CAAN,CArB+B,CAwBnC4rB,QAASA,GAAW,CAACvB,CAAD,CAAQ,CACxB,OAAQA,CAAA,SAAR,EACI,KAAK,CAAL,CAAQ,MAAOA,EAAA,SAAA,CAAoB,IAAI/f,EAAxB,CAAiC,IAAII,EACpD,MAAK,EAAL,CAAS,MAAO2f,EAAA,SAAA,CAAoB,IAAI9f,EAAxB,CAAkC,IAAII,EACtD,MAAK,EAAL,CAAS,MAAO0f,EAAA,SAAA,CAAoB,IAAI7f,EAAxB,CAAkC,IAAII,EACtD,MAAK,EAAL,CAAS,MAAOyf,EAAA,SAAA,CAAoB,IAAI5f,EAAxB,CAAkC,IAAII,EAJ1D,CAMA,MAAO,KAPiB;AAS5BohB,QAASA,GAAqB,CAAC5B,CAAD,CAAQ,CAClC,OAAQ9iC,EAAA,CAAU8iC,CAAA,UAAV,CAAR,EACI,KAAK9iC,EAAAyF,KAAL,CAAqB,MAAO,KAAIge,EAChC,MAAKzjB,EAAAujB,OAAL,CAAuB,MAAO,KAAIG,EAClC,MAAK1jB,EAAAwjB,OAAL,CAAuB,MAAO,KAAIG,EAHtC,CAKA,MAAO,KAN2B,C,CCzOtC,IADO,IAAMghB,GAAQ,IAAIjzB,UAAJ,CAAepN,CAAf,CAAd,CACE3D,GAAI,CAAb,CAAoB2D,CAApB,CAAgB3D,EAAhB,CAAsCA,EAAtC,EAA2C,CAA3C,CACIgkC,EAAA,CAAMhkC,EAAN,CAAA,CAHqBikC,QAGVluB,WAAA,CAAqB/V,EAArB,CAERkkC,SAASA,GAAwB,CAACnhC,CAAD,CAASL,CAAT,CAAoB,CAAXA,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAQ,CAAR,CAAAA,CAC7C,KADwD,IAC/C1C,EAAK,EAD0C,CACvCsZ,EAAI0qB,EAAArgC,OAArB,CAAmC,EAAE3D,CAArC,CAAyCsZ,CAAzC,CAAA,CACI,GAAI0qB,EAAA,CAAMhkC,CAAN,CAAJ,GAAiB+C,CAAA,CAAOL,CAAP,CAAe1C,CAAf,CAAjB,CACI,MAAO,CAAA,CAGf,OAAO,CAAA,CANiD,CAQrDmkC,QAASA,GAAgB,CAAClkC,CAAD,CAAK,CAAA,IAC7BmkC,EAAankC,CzBg0BZ8B,EAAA4B,OyBj0B4B,CACD0gC,CADC,CACaC,CAC9C,OAAKF,EAAL,CAAkBG,EAAlB,EACK,CAACL,EAAA,CAAyBjkC,CAAA6C,EAAA,EAAzB,CAAqC,CAArC,CADN,EAEK,CAACohC,EAAA,CAAyBjkC,CAAA6C,EAAA,EAAzB,CAAqCshC,CAArC,CAAkDI,EAAlD,CAFN,EAGkK,CAHlK,EAGsFH,CAHtF,CAGqGjkC,CAAA,CAAAH,CAAA,CAAaqkC,CAAb,CAA4BF,CAA5B,CAAyCK,EAAzC,CAHrG,GAISJ,CAJT,CAIwBC,CAJxB,CAIuCF,CAJvC,CAKW,CAAA,CALX,CAOO,CAAA,CAT0B,CAW9B,IAAMI,GAAcR,EAAArgC,OAApB,CACM8gC,GAAkBD,EAAlBC,CA1BUC,CAyBhB,CAEMH,GAAkC,CAAlCA,CAAoBC,EAApBD,CA3BUG,C,CCIvB,IAAIC,GAAWC,EAAA5lC,EAAAC,EAAAC,EAAAuQ,GAERo1B;QAASA,GAAkB,CAACxY,CAAD,CAAS,CACvC,MAAesN,GAAR,CAAyB,IAAzB,CAA+B+F,SAA/B,CAA0CoF,QAAUA,EAAoB,EAAG,CAAA,IAC1ElF,CAD0E,CACrEC,CADqE,CAE1E5/B,CAF0E,CAG1E8kC,CAH0E,CAG3DjiC,CAH2D,CAI1EkiC,CAJ0E,CAIvD1F,CAJuD,CAMjE2F,CANiE,CAM7BC,CAN6B,CAOlExd,CAPkE,CAWhEyd,CAXgE,CAgBzDnlC,EAhByD,CAgBjDyV,EAhBiD,CAgB3B6D,EAhB2B,CA2B7CogB,EA3B6C,CAkDvEsG,EAlDuE,OAAAlmB,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAG1EirB,CAGSE,CAHG,CAGHA,CAHMniC,CAGNmiC,CAHc,IAAIl0B,UAAJ,CAAe,CAAf,CAGdk0B,CAFTD,CAESC,CAFO,CAEPA,CAFU3F,CAEV2F,CAFoB,IAEpBA,CADT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACSA,CAAAA,CAAAA,CAAa1K,EAAR,CAAsBlO,CAAtB,CAN4D,MAAA,CAAA,CAMpB,MAAA,EAAA,CAAA,CAAA,CAAcqN,CAAR,CAAgBuL,CAAA9L,KAAA,EAAhB,CAAN,CAAA,CAAA,CANoB,MAAA,CAAA,CAM1E,GAAiD+L,CAAA,CAAK,CAAA,EAAL,CAAwCA,CAAA5L,KAAzF,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACQ5R,CAAJ,CAAYwd,CAAAphC,MACZ,IAAa,IAAb,EAAI4jB,CAAJ,CAAmB,CACf,CAAA,EAAA,CAAA,CAAA,CAAA,MADe,CAGbyd,CAAN,CAAc,IAAIp0B,UAAJ,CAAejO,CAAA2X,WAAf,CAAkCiN,CAAA/jB,OAAlC,CACd,IAAqB,QAArB,GAAI,MAAO+jB,EAAX,CACIyd,CAAAnyB,IAAA,CAAUlQ,CAAV,CAAiB,CAAjB,CAAA,EAAuBqiC,CAAAnyB,IAAA,CAAU0U,CAAV,CAAiB5kB,CAAA2X,WAAjB,CAD3B,KAII,KAASza,EAA8BsZ,CAAzB,EAAyBA,CAAtB7D,EAAsB6D,CAAlBxW,CAAA2X,WAAkBnB,CAAAA,EAAAA,CAAIoO,CAAA/jB,OAA3C,CAAyD,EAAE3D,EAA3D,CAA+DsZ,EAA/D,CAAA,CACI6rB,CAAA,CAAMnlC,EAAN,CAAUyV,EAAV,CAAA,CAAeiS,CAAA3R,WAAA,CAAiB/V,EAAjB,CAGvB8C,EAAA,CAAQqiC,CAGR,IAAI,CAAAjB,EAAA,CAAyBphC,CAAzB,CAAJ,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,GAAI,CAACqhC,EAAA,CAAiB,IA5BzBzyB,EA4ByB,CAAe5O,CAAf,CAAjB,CAAL,CAA8C,CAC1C,CAAA,EAAA,CAAA,CAAA,CAAA;KAD0C,CAGzB42B,EAAAA,CAAAA,CAAc,OAAA,EAAA,CAAA,CAAA,CAAcA,CAAR,CAAgB52B,CAAhB,CAAN,CAAA,EAAA,CA3B+B,MAAA,EAAA,CA2BrC,MAAA,EAAA,CAAA,CAAA,CAAM,CAAA,EAAN,CAAA,EAAA,CA3BqC,MAAA,EAAA,CA2B3D,MAAA,EAAA,CAAA,CAAA,CAAc42B,EAAR,CAAgB,CAAA,EAAhB,CAAN,CAAA,EAAA,CA3B2D,MAAA,EAAA,CA2BlE,MAAA,EAAA,OAAA,CAAO,CAAA,EAAP,CA3BkE,MAAA,CAAA,CA6B/C,CAAvB,CAAI52B,CAAA2X,WAAJ,EAA6C,CAA7C,EAA4BuqB,CAA5B,GACIA,CADJ,CACoBI,CAAA,IAAI5qB,QAAJ,CAAa1X,CAAAC,OAAb,CAAAqiC,UAAA,CAAoC,CAApC,CAAuC,CAAA,CAAvC,CADpB,CA7BsE,MAAA,EAAA,CAgCtE,GAAO,EAAgB,CAAhB,CAAAJ,CAAA,EAAqBA,CAArB,EAAsCliC,CAAA2X,WAAtC,CAAP,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,GAAI,CAAC6kB,CAAL,CAAc,CACVvsB,CAAC9S,CAAD8S,CAAM,IAtCbrB,EAsCa,CAAe5O,CAAf,CAANiQ,aAAA,CAAyC,CAAzC,CACA,IAAIusB,CAAJ,CAAcqF,EAAAj1B,GAAA,CAA0BzP,CAA1B,CAAd,CAA6C,CACzC+kC,CAAA,EAAiB1F,CAAAtvB,EAAA,EAAAiB,IACjB,EAAA,EAAA,CAAA,EAAA,CAAA,MAFyC,CAI7C,KAAU2B,MAAJ,CAAU,8BAAV,CAAyCmyB,CAAzC,CAAN,CANU,CAQdA,CAAA,EAAaC,CAAb,CDhDGN,CCiDG,OAAA,EAAA,CAAA,CAAA,CAAchL,CAAR,CAAgB52B,CAAAwP,SAAA,CAAe,CAAf,CAAkB0yB,CAAlB,CDjDzBN,CCiDyB,CAAhB,CAAN,CAAA,EAAA,CA1C4D,MAAA,EAAA,CA0ClE,MAAA,EAAA,CAAA,CAAA,CAAM,CAAA,EAAN,CAAA,EAAA,CA1CkE,MAAA,EAAA,CA2ClE5hC,CAAA,CAAQA,CAAAwP,SAAA,CAAe0yB,CAAf,CDlDLN,CCkDK,CACRM,EAAA,CAAmC,CAAnB,CAAAliC,CAAA2X,WAAA,CAAuB,CAAvB,CACZ2qB,CAAA,IAAI5qB,QAAJ,CAAa1X,CAAAC,OAAb,CAAAqiC,UAAA,CAAoCtiC,CAAAE,WAApC;AAAsD,CAAA,CAAtD,CACJs8B,EAAA,CAAU,IAdd,EAAA,EAAA,CAAA,EAAA,CAAA,MAhCsE,MAAA,CAAA,CAmDtE,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,EAAA,CACA,IAAI4F,CAAAA,CAAJ,EAAWA,CAAA5L,KAAX,EAAuB,EAAAuG,CAAA,CAAKoF,CAAAvK,OAAL,CAAvB,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAwC,MAAA,EAAA,CAAA,CAAA,CAAchB,CAAR,CAAgBmG,CAAAlW,KAAA,CAAQsb,CAAR,CAAhB,CAAN,CAAA,EAAA,CArD8B,MAAA,EAAA,CAuDlE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,IAAIrF,CAAJ,CAAS,KAAMA,EAAAnF,MAAN,CAAX,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAvDkE,MAAA,EAAA,CAmDtE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAnDsE,MAAA,CAAA,CAkDvEuF,EAAO,CAAPA,EAAAA,CAAAA,CAAAA,CAAO,CAAEJ,CAAF,CAAQ,CAAEnF,MAAOuF,EAAT,CAAR,CAAA,CAAA,EAAA,CAAA,CAAA,CAlDgE,CAAA,CAAA,CAAA,CAA3E,CADgC,C,CCbpC,IAAIjhC,EACV;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADEmb,EACS,EAAG,CAIV,IAAAjb,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUPslC,EAAAA,GAAPA,CAAAA,QAAsBA,CAACplC,CAADolC,CAAUA,CAC5BA,MAAOtlC,CAAQslC,IAAItqB,CAAZhb,GAAAslC,CAA2BjlC,CAAAilC,CAAAplC,CAAAolC,CAAaplC,CAAAI,SAAAglC,EAAbA,CAA3BA,CAAyDplC,CAAAI,SAAAglC,EAAzDA,CAAwEplC,CAAxEolC,CADqBA,CAMhC11B,EAAAA,UAAAA,QAAAA,CAAAA,QAAOA,EAAGA,CACNA,IAAIrO,EAASC,CAAAoO,CAAAA,IAAA1P,EAAA0P,CAAiBA,IAAA7P,EAAjB6P,CAA8BA,CAA9BA,CACbA,OAAOrO,EAAAqO,CAAkEpN,EAAAoN,CAAAA,IAAA1P,EAAA0P,CAAkBA,IAAA7P,EAAlB6P,CAAgCrO,CAAhCqO,CAAlEA,CAA6GC,CAAA5Q,EAAAC,EAAAC,EAAAC,gBAAA0Q,GAF9GF,CAQVuL,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAAC/a,CAAD+a,CAAMA,CACRA,IAAI5Z,EAASC,CAAA2Z,CAAAA,IAAAjb,EAAAib,CAAiBA,IAAApb,EAAjBob,CAA8BA,CAA9BA,CACbA,OAAO5Z,EAAA4Z,CAASnb,CAACI,CAADJ,EAAQmb,IAAIvN,CAAA3O,EAAAC,EAAAC,EAAAsN,OAAZzM,GAAAmb,CAA2ExR,EAAAwR,CAAAA,IAAAjb,EAAAib,CAAmBA,IAAApb,EAAnBob,CAAiC5Z,CAAjC4Z,CAA3EA,CAAqHA,IAAAjb,EAArHib,CAATA,CAAyIA,IAFxIA,CASZyE,EAAAA,UAAAA,aAAAA,CAAAA,QAAYA,CAACjd,CAADid,CAAQxf,CAARwf,CAAaA,CACrBA,IAAIre,EAASC,CAAAoe,CAAAA,IAAA1f,EAAA0f,CAAiBA,IAAA7f,EAAjB6f,CAA8BA,CAA9BA,CACbA;MAAOre,EAAAqe,CAAS5f,CAACI,CAADJ,EAAQ4f,IAAI5gB,CAAAC,EAAAC,EAAAC,EAAAomC,GAAZvlC,GAAA4f,CAAmDhd,EAAAgd,CAAAA,IAAA1f,EAAA0f,CAAiBA,IAAA7f,EAAjB6f,CAA+Bre,CAA/Bqe,CAAnDA,CAAoGA,EAApGA,CAA4Fjd,CAA5Fid,CAAwGA,IAAA1f,EAAxG0f,CAATA,CAA4HA,IAF9GA,CAOzB4lB,EAAAA,UAAAA,GAAAA,CAAAA,QAAkBA,EAAGA,CACjBA,IAAIjkC,EAASC,CAAAgkC,CAAAA,IAAAtlC,EAAAslC,CAAiBA,IAAAzlC,EAAjBylC,CAA8BA,CAA9BA,CACbA,OAAOjkC,EAAAikC,CAAStiC,EAAAsiC,CAAAA,IAAAtlC,EAAAslC,CAAqBA,IAAAzlC,EAArBylC,CAAmCjkC,CAAnCikC,CAATA,CAAsDA,CAF5CA,CASrBtqB,EAAAA,UAAAA,GAAAA,CAAAA,QAAaA,CAACvY,CAADuY,CAAQ9a,CAAR8a,CAAaA,CACtBA,IAAI3Z,EAASC,CAAA0Z,CAAAA,IAAAhb,EAAAgb,CAAiBA,IAAAnb,EAAjBmb,CAA8BA,EAA9BA,CACbA,OAAO3Z,EAAA2Z,CAASlb,CAACI,CAADJ,EAAQkb,IAAIlc,CAAAC,EAAAC,EAAAC,EAAAomC,GAAZvlC,GAAAkb,CAAmDtY,EAAAsY,CAAAA,IAAAhb,EAAAgb,CAAiBA,IAAAnb,EAAjBmb,CAA+B3Z,CAA/B2Z,CAAnDA,CAAoGA,EAApGA,CAA4FvY,CAA5FuY,CAAwGA,IAAAhb,EAAxGgb,CAATA,CAA4HA,IAF7GA,CAO1BuqB,EAAAA,UAAAA,GAAAA,CAAAA,QAAmBA,EAAGA,CAClBA,IAAIlkC,EAASC,CAAAikC,CAAAA,IAAAvlC,EAAAulC,CAAiBA,IAAA1lC,EAAjB0lC,CAA8BA,EAA9BA,CACbA,OAAOlkC,EAAAkkC,CAASviC,EAAAuiC,CAAAA,IAAAvlC,EAAAulC,CAAqBA,IAAA1lC,EAArB0lC,CAAmClkC,CAAnCkkC,CAATA,CAAsDA,CAF3CA,CAOfC,EAAAA,GAAPA,CAAAA,QAAkBA,CAACllC,CAADklC,CAAUA,CACxBjlC,CAAAilC,CAAAllC,CAAAklC,CAAoBA,CAApBA,CADwBA,CAOrBv1B,EAAAA,GAAPA,CAAAA,QAAiBA,CAAC3P,CAAD2P,CAAUP,CAAVO,CAAmBA,CAChC9M,EAAA8M,CAAA3P,CAAA2P,CAAsBA,CAAtBA,CAAyBP,CAAzBO,CAAkCN,CAAA5Q,EAAAC,EAAAC,EAAAC,gBAAA0Q,GAAlCK,CADgCA,CAO7Bw1B,EAAAA,GAAPA,CAAAA,QAAgBA,CAACnlC,CAADmlC,CAAUC,CAAVD,CAAwBA,CACpCniC,CAAAmiC,CAAAnlC,CAAAmlC,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADoCA,CAOjCE,EAAAA,GAAPA,CAAAA,QAAsBA,CAACrlC,CAADqlC,CAAUC,CAAVD,CAA8BA,CAChDriC,CAAAqiC,CAAArlC,CAAAqlC,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADgDA,CAO7CE;CAAAA,GAAPA,CAAAA,QAA8BA,CAACvlC,CAADulC,CAAU7hC,CAAV6hC,CAAoBA,CAC9CpiC,EAAAoiC,CAAAvlC,CAAAulC,CAAoBA,EAApBA,CAAwB7hC,CAAxB6hC,CAAkCA,CAAlCA,CAD8CA,CAO3CC,EAAAA,GAAPA,CAAAA,QAAuBA,CAACxlC,CAADwlC,CAAUC,CAAVD,CAA+BA,CAClDxiC,CAAAwiC,CAAAxlC,CAAAwlC,CAAuBA,CAAvBA,CAA0BC,CAA1BD,CADkDA,CAO/CE,EAAAA,GAAPA,CAAAA,QAA+BA,CAAC1lC,CAAD0lC,CAAUhiC,CAAVgiC,CAAoBA,CAC/CviC,EAAAuiC,CAAA1lC,CAAA0lC,CAAoBA,EAApBA,CAAwBhiC,CAAxBgiC,CAAkCA,CAAlCA,CAD+CA,CAO5CC,EAAAA,GAAPA,CAAAA,QAAgBA,CAAC3lC,CAAD2lC,CAAUA,CAEtBA,MADaxlC,EAAAwlC,CAAA3lC,CAAA2lC,CADSA,CAQnBC,EAAAA,GAAPA,CAAAA,QAAyBA,CAAC5lC,CAAD4lC,CAAU7kC,CAAV6kC,CAAkBA,CACvC5lC,CAAAkN,OAAA04B,CAAe7kC,CAAf6kC,CADuCA,CAI/CjnC,EAAA6b,GAAA,CAAiBA,CAzID,CAAnB,CAAD,CA0Ia9b,CAAAC,EA1Ib,GA0I+BD,CAAAC,EA1I/B,CA0I+C,EA1I/C,EAFc,CAAjB,CAAD,CA6IWF,CAAAC,EA7IX,GA6I4BD,CAAAC,EA7I5B,CA6I2C,EA7I3C,EAFe,CAAlB,CAAD,CAgJYF,CAAAC,EAhJZ,GAgJ2BD,CAAAC,EAhJ3B,CAgJwC,EAhJxC,EAFY,CAAf,CAAD,CAmJGD,EAnJH,GAmJWA,EAnJX,CAmJiB,EAnJjB,EAuJC;SAAS,CAACA,CAAD,CAAM,CAEX,SAAS,CAACC,CAAD,CAAS,CAEd,SAAS,CAACC,CAAD,CAAQ,CAEb,SAAS,CAACC,CAAD,CAAU,CAEZU,QADE0lC,EACS,EAAG,CAIV,IAAAxlC,EAAA,CAAc,CAJJ,CAWdC,CAAAA,UAAAA,EAAAA,CAAAA,QAAMA,CAACC,CAADD,CAAIE,CAAJF,CAAQA,CACVA,IAAAD,EAAAC,CAAcC,CACdD,KAAAE,EAAAF,CAAUE,CACVF,OAAOA,KAHGA,CAUduB,EAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CACLA,MAAOiI,GAAAjI,CAAAA,IAAArB,EAAAqB,CAAkBA,IAAAxB,EAAlBwB,CADFA,CAQT8Z,EAAAA,UAAAA,GAAAA,CAAAA,QAAcA,EAAGA,CACbA,MAAOhb,EAAAgb,CAAAA,IAAAnb,EAAAmb,CAAkBA,IAAAtb,EAAlBsb,CAAgCA,CAAhCA,CADMA,CASjBpL,EAAAA,UAAAA,EAAAA,CAAAA,QAAUA,EAAGA,CACTA,MAAOzG,GAAAyG,CAAAA,IAAA/P,EAAA+P,CAAkBA,IAAAlQ,EAAlBkQ,CAAgCA,EAAhCA,CADEA,CAUNo2B,EAAAA,GAAPA,CAAAA,QAAkBA,CAAC7lC,CAAD6lC,CAAU9kC,CAAV8kC,CAAkBhrB,CAAlBgrB,CAAkCp2B,CAAlCo2B,CAA8CA,CAC5DxiC,EAAAwiC,CAAA7lC,CAAA6lC,CAAaA,CAAbA,CAAgBA,EAAhBA,CACA7lC,EAAAgM,EAAA65B,CAAmBp2B,CAAnBo2B,CACAnzB,GAAAmzB,CAAA7lC,CAAA6lC,CAAYA,CAAZA,CACA7lC,EAAAsD,EAAAuiC,CAAmBhrB,CAAnBgrB,CACA7lC,EAAAgM,EAAA65B,CAAmB9kC,CAAnB8kC,CACAA,OAAO7lC,EAAAe,OAAA8kC,EANqDA,CASpElnC,EAAAomC,GAAA,CAAgBA,CA3DA,CAAnB,CAAD,CA4DarmC,CAAAC,EA5Db,GA4D+BD,CAAAC,EA5D/B,CA4D+C,EA5D/C,EAFc,CAAjB,CAAD,CA+DWF,CAAAC,EA/DX,GA+D4BD,CAAAC,EA/D5B,CA+D2C,EA/D3C,EAFe,CAAlB,CAAD,CAkEYF,CAAAC,EAlEZ,GAkE2BD,CAAAC,EAlE3B,CAkEwC,EAlExC,EAFY,CAAf,CAAD,CAqEGD,EArEH,GAqEWA,EArEX,CAqEiB,EArEjB,EAxJWA,KAAAsnC,GAAAtnC,E,CCeJunC,QAAUA,GAAW,CAACne,CAAD,CAAU,CAClC,IAAIjN,CAAJ,CACIyE,CADJ,CAEI4mB,CAFJ,CAMA,CANA,CAMA,CANA,CAMA,CANA,CAMWle,CANX,CASQ,CATR,CASQ,CATR,CASmBiX,CAVe,OAAAxlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAC9BoB,CAAJ,CAAa,IACTyE,EAAJ,CAAmB,IAAI/d,GACnB2kC,EAAJ,CAAmB,IACnB,IAAI5iB,WAAAC,OAAA,CAAmBuE,CAAnB,CAAJ,EAAsD,QAAtD,GAAmC,MAAOA,EAA1C,CACIA,CAAA,CAAU,CAACA,CAAD,CAEd,EAAA,CAAA,EAAA,EAAA,CAAAxpB,CAAA,CAAqBwpB,CAArB,CAAA,EAAA,CAAA,CAAA,KAAA,EAPkC,MAAA,CAAA,CAOlC,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAWE,CAAX,CAAA,CAAA,MACUpoB,EAAAA,EAAN,CAAWumC,EAAA,CAAane,CAAb,CACX,KAAK,CAACnN,CAAF,EAAa,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,SAAA,EAAA,CAAA,IAAA,EAA2BurB,EAAA,CAAWxmC,CAAAA,EAAX,CAAzBib,EAAA,CAAF,CAAE,OAAQqrB,EAAA,CAAV,CAAU,GAAV,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAb,CAAoErrB,CAAAA,CAAxE,GAAkFqrB,CAAAA,CAAlF,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,CAAA,CAAA5nC,CAAA,CAAsB4nC,CAAA,CAAatmC,CAAAA,EAAb,CAAtB,CAAA,EAAA,CAAA,CAAA,KAAA,EAV0B,MAAA,CAAA,CAU1B,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAWq/B,CAAX,CAAA,CAAA,MACI,OAAA,EAAA,CAAA,CAAA,CAAM,CACFpkB,OAAAA,CADE,CACMokB,QAAAA,CADN,CAEFC,GAAQ,IAAImH,EAAJ,CAAqBzmC,CAAAA,EAArB,CAAyB+hC,EAAA,CAAc1C,CAAAnxB,EAAd,EAA+B,EAA/B,CAAzB,CAA6D6zB,EAAA,CAAc1C,CAAAjxB,EAAd,EAAiC,EAAjC,CAA7D,CAAmGsR,CAAnG,CAFN,CAAN,CAAA,CAAA,CAXsB,MAAA,CAAA,CAU1B,CAAA,CAAA,CAAA,KAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA;KAV0B,MAAA,CAAA,CAOlC,CAAA,CAAA,CAAA,EACU1f,CAAAA,EADV,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAPkC,CAAA,CAAA,CAAA;AAmB/B0mC,QAASA,GAAgB,CAACxe,CAAD,CAAU,CACtC,MAAewR,GAAR,CAAyB,IAAzB,CAA+B+F,SAA/B,CAA0CkH,QAAUA,EAAkB,EAAG,CAAA,IACxEhH,CADwE,CACnEC,CADmE,CAExE3kB,CAFwE,CAGxEyE,CAHwE,CAIxE4mB,CAJwE,CAMxE,CANwE,CAM/DM,CAN+D,CAMnBC,CANmB,CAO9Dze,CAP8D,CAUhE,CAVgE,CAUhE,CAVgE,CAUrDiX,EAVqD,CAmBrEU,EAnBqE,OAAAlmB,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAExEoB,CAIS2rB,CAJA,IAIAA,CAHTlnB,CAGSknB,CAHM,IAAIjlC,GAGVilC,CAFTN,CAESM,CAFM,IAENA,CADT,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACSA,CAAT,CAASA,CAAT,EAASA,CAAAA,CAAAA,CAAoBtM,EAAR,CAAsBpS,CAAtB,CANmD,MAAA,CAAA,CAMQ,MAAA,EAAA,CAAA,CAAA,CAAcuR,CAAR,CAAgBmN,CAAA1N,KAAA,EAAhB,CAAN,CAAA,CAAA,CANR,MAAA,CAAA,CAMxE,GAAkE2N,CAAA,CAAc,CAAA,EAAd,CAAwDA,CAAAxN,KAA1H,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACUjR,CAAN,CAAeye,CAAAhjC,MACT7D,EAAAA,EAAN,CAAWumC,EAAA,CAAane,CAAb,CACX,KAAK,CAACnN,CAAF,EAAa,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,SAAA,EAAA,CAAA,IAAA,EAA2BurB,EAAA,CAAWxmC,CAAAA,EAAX,CAAzBib,EAAA,CAAF,CAAE,OAAQqrB,EAAA,CAAV,CAAU,GAAV,OAAA,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAb,CAAoErrB,CAAAA,CAAxE,GAAkFqrB,CAAAA,CAAlF,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,CAAA,CAAA5nC,CAAA,CAAsB4nC,CAAA,CAAatmC,CAAAA,EAAb,CAAtB,CAAA,EAAA,CAAA,CAAA,KAAA,EAVgE,MAAA,EAAA,CAUhE,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAWq/B,EAAX,CAAA,CAAA,MACU,OAAA,EAAA,CAAA,CAAA,CAAc5F,CAAR,CAAgB,CACxBxe,OAAAA,CADwB,CAChBokB,QAAAA,EADgB,CAExBC,GAAQ,IAAImH,EAAJ,CAAqBzmC,CAAAA,EAArB,CAAyB+hC,EAAA,CAAc1C,EAAAnxB,EAAd,EAA+B,EAA/B,CAAzB,CAA6D6zB,EAAA,CAAc1C,EAAAjxB,EAAd;AAAiC,EAAjC,CAA7D,CAAmGsR,CAAnG,CAFgB,CAAhB,CAAN,CAAA,EAAA,CAXsD,MAAA,EAAA,CAW5D,MAAA,EAAA,CAAA,CAAA,CAAM,CAAA,EAAN,CAAA,EAAA,CAX4D,MAAA,EAAA,CAUhE,CAAA,CAAA,CAAA,KAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,MAVgE,MAAA,CAAA,CAMxE,CAAA,CAAA,CAAA,EAEU1f,CAAAA,EAFV,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MANwE,MAAA,CAAA,CAoBpE,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,EAAA,CACA,IAAI6mC,CAAAA,CAAJ,EAAoBA,CAAAxN,KAApB,EAAyC,EAAAuG,CAAA,CAAKgH,CAAAnM,OAAL,CAAzC,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAiE,MAAA,EAAA,CAAA,CAAA,CAAchB,CAAR,CAAgBmG,CAAAlW,KAAA,CAAQkd,CAAR,CAAhB,CAAN,CAAA,EAAA,CAtBG,MAAA,EAAA,CAwBhE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,IAAIjH,CAAJ,CAAS,KAAMA,EAAAnF,MAAN,CAAX,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAxBgE,MAAA,EAAA,CAoBpE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MApBoE,MAAA,CAAA,CAmBrEuF,EAAO,CAAPA,EAAAA,CAAAA,CAAAA,CAAO,CAAEJ,CAAF,CAAQ,CAAEnF,MAAOuF,EAAT,CAAR,CAAA,CAAA,EAAA,CAAA,CAAA,CAnB8D,CAAA,CAAA,CAAA,CAAzE,CAD+B,CA8BtCpgC,QADS8mC,GACE,CAACzmC,CAAD,CAAKkO,CAAL,CAAYE,CAAZ,CAAqBsR,CAArB,CAAmC,CAC1C,EAAA,KAAA,CAAA,IAAA,CAAMxR,CAAN,CAAaE,CAAb,CAAsBsR,CAAtB,CACA,KAAA7c,EAAA,CAAa7C,CAAA6C,EAAA,EACb,KAAAikC,GAAA,CAAqB9mC,CAAAI,SAAA,EAHqB,CADZkb,CAAAglB,CAAzBmG,EAAyBnG,CAAAA,EAAAA,CAMlCU,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAC34B,CAAD24B,CAAeA,CAAEA,MAAOA,KAAAF,EAAAE,CAAc34B,CAAd24B,CAAjBl+B,IAAAA,EAAiBk+B,CAATA,CAC1BG,GAAAA,UAAAA,GAAAA,CAAAA,QAAWA,CAAC94B,CAAD84B,CAAeA,CAAEA,MAAOA,KAAAL,EAAAK,CAAc94B,CAAd84B,CAAjBr+B,IAAAA,EAAiBq+B,CAATA,CAC1BL;EAAAA,UAAAA,EAAAA,CAAAA,QAAQA,CAACoB,CAADpB,CAAQA,CAARA,CAAuDA,CAA/CA,CAAAA,CAAAA,IAAAA,EAAAA,GAAAA,CAAAA,CAAqBO,EAAAP,CAAAA,IAAAA,CAArBA,CAAAA,CACZA,OAAOA,KAAIhwB,UAAJgwB,CAAeA,IAAAj+B,EAAAC,OAAfg+B,CAAkCA,IAAAj+B,EAAAE,WAAlC+9B,CAA0DA,IAAAgG,GAA1DhG,CADeA,CAAAA,OACfA,CADOA,CAAAA,OACPA,CADoDA,CAInEiB,SAAUA,GAAa,CAAC1d,CAAD,CAAM,CAAA,MAAAxK,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAE,MAAA,GAAA,CAAA,CAAA,CAAOwK,CAAP,CAAA,CAAA,CAAF,CAAA,CAAA,CAC7BkiB,QAASA,GAAY,CAAC1jC,CAAD,CAAQ,CACzB,IAAIwhB,EAAMxhB,CAANwhB,EAAe,IAAIvT,UAAJ,CAAe,CAAf,CACnB,IAAqB,QAArB,GAAI,MAAOjO,EAAX,CAA+B,CAC3BwhB,CAAA,CAAM,IAAIvT,UAAJ,CAAejO,CAAAa,OAAf,CACN,KAF2B,IAElB3D,EAAK,EAFa,CAEVsZ,EAAIxW,CAAAa,OAArB,CAAmC,EAAE3D,CAArC,CAAyCsZ,CAAzC,CAAA,CACIgL,CAAA,CAAItkB,CAAJ,CAAA,CAAS8C,CAAAiT,WAAA,CAAiB/V,CAAjB,CAHc,CAO/B,MAAO,KAvEM0R,EAuEN,CAAe4S,CAAf,CATkB;AAW7BmiB,QAASA,GAAU,CAACxmC,CAAD,CAAK,CAwCpB,GAAKkkC,EAAA,CAtCuBlkC,CAsCvB,CAAL,CAAA,CAIIqkC,IAAAA,EA1CwBrkC,C5B6vBvB8B,EAAA4B,O4BntBD2gC,CAA4BG,EA1CJxkC,EA4C5B8S,YAAA,CAAeuxB,CAAf,CADmBlkC,CAAAikC,CA3CSpkC,CA2CTokC,CAAaC,CAAbD,CACnB,CAiEM3C,EAAAA,CAAmB,IAAI9/B,GAyB7B,KAxBA,IAAM2e,EAAIymB,EAAA3B,GAAA,CA9GkBplC,CA8GlB,CAAV,CAAuCqW,EAAIiK,CAAArF,OAAA,EAA3C,CAuBM+rB,EAAS,EAvBf,CAwBSxwB,EAAAA,IAAAA,EAxBT,CAwBYzW,EAAK,EAxBjB,CAwBoBsZ,EAvB0BiH,CAuB1BjH,EAvB0BiH,CAuBjBglB,GAAA,EAA7B,CAAqD,EAAEvlC,CAAvD,CAA2DsZ,CAA3D,CAAA,CACI,CAAI7C,CAAJ,CAxB0C8J,CAwBlCZ,aAAA,CAAe3f,CAAf,CAAR,GACIinC,CAAAvxB,KAAA,CAAY,IAAIyF,EAAJ,CAAc1E,CAAA2E,GAAA,EAAd,CAAkC3E,CAAAzG,EAAA,EAAlC,CAAkDyG,CAAAnV,OAAA,EAAlD,CAAZ,CAMF2lC,EAAAA,CAAS,EACNxwB,EAAAA,CAAAA,IAAAA,EAAGzW,EAAAA,CAAK,EAAjB,KAAK,IAAesZ,EAhCsDiH,CAgCtDjH,EAhCsDiH,CAgC7CilB,GAAA,EAA7B,CAAsD,EAAExlC,CAAxD,CAA4DsZ,CAA5D,CAAA,CACI,CAAI7C,CAAJ,CAjCsE8J,CAiC9DtF,GAAA,CAAgBjb,CAAhB,CAAR,GACIinC,CAAAvxB,KAAA,CAAY,IAAIyF,EAAJ,CAAc1E,CAAA2E,GAAA,EAAd,CAAkC3E,CAAAzG,EAAA,EAAlC,CAAkDyG,CAAAnV,OAAA,EAAlD,CAAZ,CAlCR,EAAA,CAAO,IAAIyZ,EAAJ,CA4BAksB,CA5BA,CAqCAA,CArCA,CAAuE,IAAIz6B,EAAJ,CAAW06B,EAAA,CAAiB5wB,CAAjB,CAAoBorB,CAApB,CAAX,CAAkD72B,EAAA,CAAeyL,CAAf,CAAlD,CAAqEiK,CAAA5Q,QAAA,EAArE,CAAkF+xB,CAAlF,CAAvE,CAzEP,CAAA,IACI,EAAA,CAAO,IAvCX,IAAa,CAAb,CACIxmB,CACA,CADSisB,CAAAjsB,OACT,CAAAqrB,CAAA,CAAea,EAAA,CAAiBD,CAAjB,CAFnB,KAIK,CAQqB,CAAA,CAAA,CAC1B,GAAI,CAACjD,EAAA,CAT8BjkC,CASL6C,EAAA,EAAzB,CAAqC,CAArC,CAAL,CACI,IAAA,CAAA,CAAAnE,CAAA,CAAsB4nC,EAAA,CAVStmC,CAUT,CAAtB,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CACI,GADOq/B,CxBzEa+H,CwByExB,CAAA,MxBzEwBA,CwB0EC/H,CxB1EDxvB,EAAAu3B,GAAiBz5B,EAAApB,OwB0ErC,CAA+B,CAC3B,CAAA,CAAO8yB,CAAP,OAAA,CAD2B,CAKvC,CAAA;AAAO,IARmB,CARrB,GAAa,CAAb,CACDiH,CAAA,CAAee,EADd,KAID,MAAU10B,MAAJ,CAAU,sBAAV,CAAN,CAJC,CAML,MAAO,CAAEsI,OAAAA,CAAF,CAAUqrB,GAAAA,CAAV,CAZa,CAwBxBe,QAAUA,GAAkB,CAACrnC,CAAD,CAAK,CAAA,IAC7B,CAD6B,CAC7B,CAD6B,CAClBq/B,CADkB,OAAAxlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAC7B,CAAA,CAAAnb,CAAA,CAAsB4nC,EAAA,CAAatmC,CAAb,CAAtB,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAD6B,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAC7B,GAAA,CAAA,KAAA,CAAA,MAAA,EAAA,EAAA,CAAA,CAAA,CAAWq/B,EAAX,CAAA,CAAA,MACI,OACI,EAAA,CAAA,CAAA,CAAMA,CAAN,CAAA,CAAA,CAHqB,CAYzBr/B,CAAA8S,YAAA,CAAe9S,CAAAI,SAAA,EAAf,CAA+Bi/B,CAAAtvB,EAA/B,CAXJ,EAAA,CAAA,CAAA,KAAA,EAAA,OAAA,EAAA,EAAA,CAAA,CAAA,CAD6B,CAAA,CAAA;AAyBjCo3B,QAASA,GAAgB,CAACD,CAAD,CAAS,CAC9B,MAAO,SAAA,EAAU,CAAClnC,CAAD,CAAK,CAClB,IAAIq/B,CAAJ,CACSt/B,CADT,CACiBunC,CADjB,CACqDjuB,CADrD,CAOStZ,CAPT,CAOiBunC,CAPjB,CAOiDjuB,CAR/B,OAAAQ,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAET9Z,CAA4CsZ,CAAvC,EAAuCA,CAApCiuB,CAAoCjuB,CAA1B6tB,CAAAnsB,GAA0B1B,CAAAA,CAAAA,CAAIiuB,CAAA5jC,OAFvC,MAAA,CAAA,CAElB,GAAyE,EAAA,EAAE3D,CAAF,CAAMsZ,CAAN,CAAzE,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACIrZ,CAAA8S,YAAA,CAAew0B,CAAA,CAAQvnC,CAAR,CAAAsB,OAAf,CACA,IAAI,EAAAg+B,CAAA,CAAUkI,EAAA,CAAYvnC,CAAZ,CAAgBG,CAAA,CAAAH,CAAA,CAAaA,CAAAI,SAAA,EAAb,CAAhB,CAAV,CAAJ,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,MAAA,EAAA,CAAA,CAAA,CAAMi/B,CAAN,CAAA,CAAA,CALU,MAAA,CAAA,CAQTt/B,CAAwCsZ,CAAnC,EAAmCA,CAAhCiuB,CAAgCjuB,CAAtB6tB,CAAAlsB,GAAsB3B,CAAAA,CAAAA,CAAIiuB,CAAA5jC,OARnC,MAAA,CAAA,CAQlB,GAAqE,EAAE3D,CAAvE,CAA2EsZ,CAA3E,CAAA,CACIrZ,CAAA8S,YAAA,CAAew0B,CAAA,CAAQvnC,CAAR,CAAAsB,OAAf,CACA,IAAIg+B,CAAJ,CAAckI,EAAA,CAAYvnC,CAAZ,CAAgBG,CAAA,CAAAH,CAAA,CAAaA,CAAAI,SAAA,EAAb,CAAhB,CAAd,CACI,MAAA,EAAA,CAAA,CAAA,CAAMi/B,CAAN,CAAA,CAAA,CADJ,EAAA,EAAA,CAAA,CAAA,CAFJ,CAAA,IAAA,EAAA,EAAA,CAAA,CAAA,CARkB,CAAA,CAAA,CAAA,CADQ;AAiBlCiH,QAAUA,GAAY,CAACtmC,CAAD,CAAK,CAAA,IACnB0D,CADmB,CACX27B,CADW,OAAAxlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAEvB,MAAO7Z,EAAAI,SAAA,EAAP,CAAuBJ,C5B2rBlB8B,EAAA4B,O4B3rBL,EAC6C,CAD7C,EACKA,CADL,CACcvD,CAAA,CAAAH,CAAA,CAAaA,CAAAI,SAAA,EAAb,CADd,EAEI,CAAIi/B,CAAJ,CAAckI,EAAA,CAAYvnC,CAAZ,CAAgB0D,CAAhB,CAAd,EACI,CAAA,CAAA,CAAA,CAAM27B,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAFJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAFuB,CAAA,CAAA,CAS3BkI,QAASA,GAAW,CAACvnC,CAAD,CAAK0D,CAAL,CAAa,CAC7B1D,CAAA8S,YAAA,CAAe9S,CAAAI,SAAA,EAAf,CH5JmBqkC,CG4JnB,CACA,KAAMpF,EAAUmI,EAAA,CAAsBxnC,CAAtB,CAChBA,EAAA8S,YAAA,CAAe9S,CAAAI,SAAA,EAAf,CAA+BsD,CAA/B,CACA,OAAO27B,EAJsB;AASjC,IAAI7/B,GAAOwf,CAAAjgB,EAAAC,EAAAC,EAAAO,KAAX,CACIJ,GAAY+f,CAAApgB,EAAAC,EAAAC,EAAAG,UADhB,CAEIuO,GAAgB4R,EAAAxgB,EAAAC,EAAAC,EAAA0O,cAFpB,CAGIzO,GAAkBsgB,CAAAzgB,EAAAC,EAAAC,EAAAC,gBAHtB,CAII6nC,GAAUU,EAAA1oC,EAAAC,EAAAC,EAAA6b,GAJd,CAKI4pB,GAAWC,EAAA5lC,EAAAC,EAAAC,EAAAuQ,GALf,CAMIk4B,GAAUh6B,CAAA3O,EAAAC,EAAAC,EAAAsN,OANd,CAOIo7B,GAAeC,EAAA7oC,EAAAC,EAAAC,EAAA+O,YAPnB,CAQI65B,GAAmBC,EAAA/oC,EAAAC,EAAAC,EAAA+P,gBARvB,CASI+4B,GAAQC,CAAAjpC,EAAAC,EAAAC,EAAAW,KATZ,CAUIqoC,GAAOC,CAAAnpC,EAAAC,EAAAC,EAAAiF,IAVX,CAWIikC,GAAiBC,CAAArpC,EAAAC,EAAAC,EAAAyF,cAXrB,CAYI2jC,GAAUC,CAAAvpC,EAAAC,EAAAC,EAAAoG,OAZd,CAaIkjC,GAAQC,CAAAzpC,EAAAC,EAAAC,EAAA8G,KAbZ,CAcI0iC,GAAQC,CAAA3pC,EAAAC,EAAAC,EAAAgG,KAdZ,CAeI0jC,GAAWC,CAAA7pC,EAAAC,EAAAC,EAAAkH,QAff,CAgBI0iC,GAAQC,CAAA/pC,EAAAC,EAAAC,EAAAwH,KAhBZ,CAiBIsiC,GAAQC,CAAAjqC,EAAAC,EAAAC,EAAA+H,KAjBZ,CAkBIiiC,GAAaC,CAAAnqC,EAAAC,EAAAC,EAAAmI,UAlBjB,CAmBI+hC,GAAYC,CAAArqC,EAAAC,EAAAC,EAAA6I,SAnBhB,CAoBIuhC,GAAQC,CAAAvqC,EAAAC,EAAAC,EAAA6B,KApBZ,CAqBIyoC,GAAUC,CAAAzqC,EAAAC,EAAAC,EAAAyB,QArBd,CAsBI+oC,GAASC,CAAA3qC,EAAAC,EAAAC,EAAAkD,MAtBb,CAuBIwnC,GAAmBC,CAAA7qC,EAAAC,EAAAC,EAAAwG,gBAvBvB,CAwBIokC,GAAiBC,CAAA/qC,EAAAC,EAAAC,EAAAiC,cAxBrB,CAyBI6oC,GAAOC,CAAAjrC,EAAAC,EAAAC,EAAA0C,IAMX6lC;QAASA,GAAqB,CAACxnC,CAAD,CAAK,CAC/B,IAAMw5B,EAAIkL,EAAAj1B,GAAA,CAA0BzP,CAA1B,CAAV,CAAyCqI,EAAOmxB,CAAA3pB,EAAA,EAAgBH,EAAAA,CAAU8pB,CAAA9pB,QAAA,EAC1E,QAAQrH,CAAR,EACI,KAAKsF,EAAApB,OAAL,CAA2B,MAAkC,EAQ1D,CAR0DitB,CAAA1pB,GAAA,CAAS,IAAI43B,EAAb,CAQ1D,CAD4BjG,CAC5B,CARmF,IAAI9/B,GAQvF,CAAA,IAAI4K,EAAJ,CAAW06B,EAAA,CAAiB5wB,CAAjB,CAAoBorB,CAApB,CAAX,CAAkD72B,EAAA,CAAeyL,CAAf,CAAlD,CARiD3G,CAQjD,CAA8E+xB,CAA9E,CAPH,MAAK9zB,EAAAK,YAAL,CAAgC,MAAOi8B,GAAA,CAAuBv6B,CAAvB,CAAgC8pB,CAAhC,CAAmCA,CAAA1pB,GAAA,CAAS,IAAI63B,EAAb,CAAnC,CACvC,MAAKh6B,EAAAqB,gBAAL,CAAoC,MAA8C,EAY/E,CAZ+EwqB,CAAA1pB,GAAA,CAAS,IAAI+3B,EAAb,CAY/E,CAAA,IAAI74B,EAAJ,CAZmEU,CAYnE,CAA6Bu6B,EAAA,CAZsCv6B,CAYtC,CAZ+C8pB,CAY/C,CAAmCphB,CAAA5U,KAAA,EAAnC,CAA7B,CAA2E4U,CAAA/O,GAAA,EAA3E,CAAmF+O,CAAAlJ,GAAA,EAAnF,CAfP,CAKA,MAAO,KAPwB;AAanC+6B,QAASA,GAAsB,CAACv6B,CAAD,CAAU8pB,CAAV,CAAahjB,CAAb,CAAgB,CA4C3C,IA3CwC,IAAA,EAAAA,CAAA9S,OAAA,EAAA,CA0ClCggC,EAAa,EA1CqB,CA2C/B3jC,EAAK,EA3C0B,CA2CvBsZ,EA3C6D7C,CA2CzDrI,GAAA,EAArB,CAAsC,EAAEpO,CAAxC,CAA4CsZ,CAA5C,CAAA,CAAgD,CAC5CqqB,IAAAA,EAAAA,CAAAA,CAAAjuB,EAAAiuB,CAAAjuB,KAAyC,KAAA,EA5CiCe,CA4CjCtI,EAAA,CAAQnO,CAAR,CAsD7C,EAAA,CAAO,IAAI2b,EAAJ,CAAkB4E,CAAA5c,OAAA,EAAlB,CAA8B4c,CAAAzS,UAAA,EAA9B,CAtDH4H,EAAA,KAAA,CAAAiuB,CAAA,CAAgB,CAAhB,CAD4C,CAM1Ct1B,CAAAA,CAAU,EACPrO,EAAAA,CAAK,EAAd,KAAiBsZ,CAAjB,CAlDyG7C,CAkDpFlI,GAAA,EAArB,CAAwC,EAAEvO,CAA1C,CAA8CsZ,CAA9C,CAAA,CAAkD,CAC9C,IAAIvW,EAnDiG0T,CAmDxFpI,EAAA,CAAUrO,CAAV,CAnD2F2P,EAuDxG,CAAcxQ,EAAAygB,GAAd,GACI7c,CAAAjD,EADJ,EACsB,CADtB,EAC2BE,CAD3B,CAC+B,CAD/B,EAGAqO,EAAAA,CAAAA,CAAAqH,EAAAA,CAAArH,CAAAqH,KA2CJ,EAAA,CAAO,IAAIgG,EAAJ,CAAmBjF,CAAAnV,OAAA,EAAnB,CAA+BmV,CAAA9S,OAAA,EAA/B,CA3CH+R,EAAA,KAAA,CAAArH,CAAA,CAAa,CAAb,CAR8C,CAlDlD,MAAO,KAAIgN,EAAJ,CAAwB1L,CAAxB,CAAiC,CAAjC,CA8CAg0B,CA9CA,CA4DAt1B,CA5DA,CAA+GorB,CAAAzpB,EAAA,EAA/G,CADoC,CAwB/Ck3B,QAASA,GAAgB,CAAC5wB,CAAD,CAAIorB,CAAJ,CAAsB,CAE3C,IADA,IAAMh1B,EAAS,EAAf,CACS1M,EAAK,EADd,CACiBoY,EAAAA,IAAAA,EADjB,CACoBkB,EAAIhD,CAAJgD,EAAShD,CAAA3J,GAAA,EAA7B,CAA+C,EAAE3M,CAAjD,CAAqDsZ,CAArD,CAAA,CACI,CAAIlB,CAAJ,CAAQooB,EAAA,CAAMlqB,CAAA5J,OAAA,CAAS1M,CAAT,CAAN,CAAmB0hC,CAAnB,CAAR,GACIh1B,CAAAgJ,KAAA,CAAY0C,CAAZ,CAGR,OAAO1L,EAPoC;AAS/Cy9B,QAASA,GAAe,CAAC5pB,CAAD,CAAImhB,CAAJ,CAAsB,CAE1C,IADA,IAAMh1B,EAAS,EAAf,CACS1M,EAAK,EADd,CACiBoY,EAAAA,IAAAA,EADjB,CACoBkB,EAAIiH,CAAJjH,EAASiH,CAAA3V,GAAA,EAA7B,CAAiD,EAAE5K,CAAnD,CAAuDsZ,CAAvD,CAAA,CACI,CAAIlB,CAAJ,CAAQooB,EAAA,CAAMjgB,CAAA5V,SAAA,CAAW3K,CAAX,CAAN,CAAqB0hC,CAArB,CAAR,GACIh1B,CAAAgJ,KAAA,CAAY0C,CAAZ,CAGR,OAAO1L,EAPmC,CA8B9C8zB,QAASA,GAAK,CAACjgB,CAAD,CAAImhB,CAAJ,CAAsB,CAChC,IAAIr3B,EAAOkW,CAAAlW,KAAA,EAAX,CAEIC,EAAWiW,CAAAjW,SAAA,EAFf,CAGIoV,EAAW7U,EAAA,CAAe0V,CAAf,CAHf,CAKI+iB,CALJ,CAKch6B,CALd,CAMIi6B,CACJ,IAAI,CAAC7B,CAAL,EAAyB,EAAE6B,CAAF,CAAahjB,CAAA7V,WAAA,EAAb,CAAzB,CACI,IAAI84B,CAAJ,CAAe4G,EAAA,CAAc7pB,CAAd,CAAiB4pB,EAAA,CAAgB5pB,CAAhB,CAAmBmhB,CAAnB,CAAjB,CAAf,CACI,IAAAlB,EAAQ,IAAIr2B,EAAJ,CAAUE,CAAV,CAAgBm5B,CAAhB,CAA0Bl5B,CAA1B,CAAoCoV,CAApC,CADZ,CADJ,IAKK,IAAI8jB,CAAJ,CAAe9B,CAAArB,IAAA,CAAqB/2B,CAArB,CAA0Bi6B,CAAAj6B,GAAA,EAAA2H,IAA1B,CAAA,CACdywB,CAAA/nB,IAAA,CAAqBrQ,CAArB,CAAAhB,KAAAoC,WADc,CAEd0/B,EAAA,CAAc7pB,CAAd,CAAiB4pB,EAAA,CAAgB5pB,CAAhB,CAAmB,IAAnB,CAAjB,CAFD,CAGDijB,CAIA,CAJW,IAAI9kB,EAAJ,CAAe8kB,CAAf,CAEX,CAACF,CAAD,CAAYC,CAAA95B,GAAA,EAAZ,EAAoC4gC,EAAA,CAAa/G,CAAb,CAApC,CAA6D,IAAIhhB,EAFtD,CAE+DhZ,CAF/D,CAEmEi6B,CAAA55B,GAAA,EAFnE,CAIX,CADA62B,CACA,CADQ,IAAIr2B,EAAJ,CAAUE,CAAV,CAAgBm5B,CAAhB,CAA0Bl5B,CAA1B,CAAoCoV,CAApC,CACR,CAAAgiB,CAAArB,IAAA,CAAqB/2B,CAArB,CAAA,EAA4Bo4B,CAAA1uB,IAAA,CAAqB1J,CAArB,CAAyBk3B,CAAzB,CAEhC,OAAOA,EAAP,EAAgB,IAtBgB;AAwBpC31B,QAASA,GAAc,CAACy/B,CAAD,CAAS,CAC5B,IAAM7mC,EAAO,IAAI7B,GACjB,IAAI0oC,CAAJ,CACI,IADQ,IACCC,EAAAA,IAAAA,EADD,CACQ1hC,EAAAA,IAAAA,EADR,CACa7I,EAAK,EADlB,CACqBsZ,EAAIgxB,CAAAx/B,GAAA,EAAJwO,CAAoC,CAAjE,CAAoE,EAAEtZ,CAAtE,CAA0EsZ,CAA1E,CAAA,CACI,CAAKixB,CAAL,CAAaD,CAAAz/B,GAAA,CAAsB7K,CAAtB,CAAb,GAAiE,IAAjE,GAA2C6I,CAA3C,CAAiD0hC,CAAA1hC,IAAA,EAAjD,GACIpF,CAAAuP,IAAA,CAASnK,CAAT,CAAc0hC,CAAAzmC,MAAA,EAAd,CAIZ,OAAOL,EATqB;AAiBhC2mC,QAASA,GAAa,CAAC7pB,CAAD,CAAI5V,CAAJ,CAAc,CAChC,OAAQ4V,CAAAhW,GAAA,EAAR,EACI,KAAK9K,EAAA+K,KAAL,CAAgB,MAAO,KACvB,MAAK/K,EAAAI,KAAL,CAAgB,MAAqB0gB,EAAAjY,KAAA,CAAO,IAAI0/B,EAAX,CAoBN,CAAA,IAAInoC,EAnBnC,MAAKJ,EAAA0E,IAAL,CAAe,MAAOkmC,GAAA,CAAa9pB,CAAAjY,KAAA,CAAO,IAAI4/B,EAAX,CAAb,CACtB,MAAKzoC,EAAAkF,cAAL,CAAyB,MAAO6lC,GAAA,CAAejqB,CAAAjY,KAAA,CAAO,IAAI8/B,EAAX,CAAf,CAChC,MAAK3oC,EAAA6F,OAAL,CAAkB,MAAuBib,EAAAjY,KAAA,CAAO,IAAIggC,EAAX,CAmCR,CAAA,IAAIhjC,EAlCrC,MAAK7F,EAAAyF,KAAL,CAAgB,MAAqBqb,EAAAjY,KAAA,CAAO,IAAIogC,EAAX,CAmCN,CAAA,IAAIxjC,EAlCnC,MAAKzF,EAAAuG,KAAL,CAAgB,MAAqBua,EAAAjY,KAAA,CAAO,IAAIkgC,EAAX,CAmCN,CAAA,IAAIxiC,EAlCnC,MAAKvG,EAAA2G,QAAL,CAAmB,MAAwB,EAmCT,CAnCSma,CAAAjY,KAAA,CAAO,IAAIsgC,EAAX,CAmCT,CAAA,IAAIxiC,EAAJ,CAAY+7B,CAAA77B,MAAA,EAAZ,CAA2B67B,CAAAt9B,UAAA,EAA3B,CAlClC,MAAKpF,EAAAiH,KAAL,CAAgB,MAmCe,KAAIuc,EAAJ,CAnCM1C,CAAAjY,KAAA65B,CAAO,IAAI2G,EAAX3G,CAmCIv7B,EAAA,EAAV,CAlC/B,MAAKnH,EAAAwH,KAAL,CAAgB,MAAqB,EAmCN,CAnCMsZ,CAAAjY,KAAA,CAAO,IAAI0gC,EAAX,CAmCN,CAAA,IAAI/hC,EAAJ,CAASk7B,CAAAv7B,EAAA,EAAT,CAAuBu7B,CAAA99B,EAAA,EAAvB,CAlC/B,MAAK5E,EAAA4H,UAAL,CAAqB,MAA0B,EAmCX;AAnCWkZ,CAAAjY,KAAA,CAAO,IAAI4gC,EAAX,CAmCX,CAAA,IAAI7hC,EAAJ,CAAc86B,CAAAv7B,EAAA,EAAd,CAA4Bu7B,CAAA36B,GAAA,EAA5B,CAlCpC,MAAK/H,EAAAsI,SAAL,CAAoB,MAmCe,KAAIA,EAAJ,CAnCUwY,CAAAjY,KAAA65B,CAAO,IAAIiH,EAAXjH,CAmCGv7B,EAAA,EAAb,CAlCnC,MAAKnH,EAAAsB,KAAL,CAAgB,MAAqBwf,EAAAjY,KAAA,CAAO,IAAIghC,EAAX,CAmCI,CAAA,IAAIvoC,EAAJ,CAnCiB4J,CAmCjB,EAnC6B,EAmC7B,CAlCzC,MAAKlL,EAAAkB,QAAL,CAAmB,MAAuB4f,EAAAjY,KAAA,CAAO,IAAIkhC,EAAX,CAmCC,CAAA,IAAIzrB,EAAJ,CAnCsBpT,CAmCtB,EAnCkC,EAmClC,CAlC3C,MAAKlL,EAAA2C,MAAL,CAAiB,MAAsB,EAmCG,CAnCHme,CAAAjY,KAAA,CAAO,IAAIohC,EAAX,CAmCG,CAnCmB,CAmCnB,CAnCmB/+B,CAmCnB,EAnC+B,EAmC/B,CAAA,IAAIvI,EAAJ,CAAU+/B,CAAA7/B,KAAA,EAAV,CAAyB6/B,CAAAv/B,GAAA,EAAzB,EAAiD,EAAjD,CAAsD+H,CAAtD,CAlC1C,MAAKlL,EAAAiG,gBAAL,CAA2B,MAmCe,KAAIA,EAAJ,CAnCiB6a,CAAAjY,KAAA65B,CAAO,IAAIyH,EAAXzH,CAmCGv8B,GAAA,EAApB,CAlC1C,MAAKnG,EAAA0B,cAAL,CAAyB,MAA8B,EAmCL,CAnCKof,CAAAjY,KAAA,CAAO,IAAIwhC,EAAX,CAmCL,CAnCmC,CAmCnC,CAnCmCn/B,CAmCnC,EAnC+C,EAmC/C,CAAA,IAAIxJ,EAAJ,CAAkBghC,CAAA9gC,GAAA,EAAlB,CAAoCsJ,CAApC,CAlClD,MAAKlL,EAAAmC,IAAL,CAAe,MAAoB,EAmCK,CAnCL2e,CAAAjY,KAAA,CAAO,IAAI0hC,EAAX,CAmCK,CAnCe,CAmCf,CAnCer/B,CAmCf,EAnC2B,EAmC3B,CAAA,IAAI4Y,EAAJ,CAAS4e,CAAArgC,GAAA,EAAT,CAA6B6I,CAA7B,CArD5C,CAoBA,KAAUiI,MAAJ,CAAU,oBAAV,CAA+B2N,CAAAhW,GAAA,EAA/B,CAAN,CArBgC;AAwBpC8/B,QAASA,GAAY,CAAClI,CAAD,CAAQ,CACzB,OAAQA,CAAA99B,EAAA,EAAR,EACI,KAAK,CAAL,CAAQ,MAAO89B,EAAA79B,EAAA,EAAA,CAAmB,IAAI8d,EAAvB,CAAgC,IAAII,EACnD,MAAK,EAAL,CAAS,MAAO2f,EAAA79B,EAAA,EAAA,CAAmB,IAAI+d,EAAvB,CAAiC,IAAII,EACrD,MAAK,EAAL,CAAS,MAAO0f,EAAA79B,EAAA,EAAA,CAAmB,IAAIge,EAAvB,CAAiC,IAAII,EACrD,MAAK,EAAL,CAAS,MAAOyf,EAAA79B,EAAA,EAAA,CAAmB,IAAIie,EAAvB,CAAiC,IAAII,EAJzD,CAMA,MAAO,KAPkB,CAS7B6nB,QAASA,GAAc,CAACrI,CAAD,CAAQ,CAC3B,OAAQA,CAAAt9B,UAAA,EAAR,EACI,KAAKxF,EAAAyF,KAAL,CAAqB,MAAO,KAAIge,EAChC,MAAKzjB,EAAAujB,OAAL,CAAuB,MAAO,KAAIG,EAClC,MAAK1jB,EAAAwjB,OAAL,CAAuB,MAAO,KAAIG,EAHtC,CAKA,MAAO,KANoB,C,CChVxB6G,QAAUA,GAAI,CAAC1B,CAAD,CAAU,CAC3B,IAAI6C,CAAJ,CACIqU,CAFuB,OAAAvlB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CACvBkR,CAAJ,CAAY7C,CAEZ,IAAqB,QAArB,GAAI,MAAO6C,EAAX,CACI,GAAI,CACAA,CAAA,CAAQ8C,IAAA2c,MAAA,CAAWzf,CAAX,CADR,CAGJ,MAAOoO,CAAP,CAAU,CACNpO,CAAA,CAAQ7C,CADF,CAIT6C,CAAL,EAA+B,QAA/B,GAAc,MAAOA,EAArB,EAII/sB,CAAA,EAAA,CAAAI,CAAA,EAAA,CAAAghC,CAAA,CAA8C,UAAnC,GAAC,MAAOrU,EAAA,CAAMnK,MAAAsG,SAAN,CAAR,CAAiDmf,EAAA,CAAYtb,CAAZ,CAAjD,CAAsEwW,EAAA,CAASxW,CAAT,CAJrF,EACIqU,CADJ,CACiC,QAAlB,GAAC,MAAOrU,EAAR,CAA8Bsb,EAAA,CAAY,CAACtb,CAAD,CAAZ,CAA9B,CAAqD,EAKpE,OAAA,GAAA,CAAA,CAAA,CAAOoU,EAAA,CAAkBC,CAAlB,CAAP,CAAA,CAAA,CAjB2B,CAAA,CAAA;AAmBxBqL,QAASA,GAAS,CAACviB,CAAD,CAAU,CAC/B,MAAewR,GAAR,CAAyB,IAAzB,CAA+B+F,SAA/B,CAA0CiL,QAAUA,EAAW,EAAG,CAAA,IACjE/K,CADiE,CAC5DC,CAD4D,CAGxDoF,CAHwD,CAGuBC,CAHvB,CAIzDlG,CAJyD,CAQ9DgB,CAR8D,OAAAlmB,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAEjE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACSmrB,CAAAA,CAAAA,CAAa1K,EAAR,CAAsBkF,EAAA,CAAuBkH,EAAA,CAAiBxe,CAAjB,CAAvB,CAAtB,CAHmD,MAAA,CAAA,CAGgC,MAAA,EAAA,CAAA,CAAA,CAAcuR,CAAR,CAAgBuL,CAAA9L,KAAA,EAAhB,CAAN,CAAA,CAAA,CAHhC,MAAA,CAAA,CAGjE,GAA4F+L,CAAA,CAAK,CAAA,EAAL,CAAwCA,CAAA5L,KAApI,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACQ0F,CAAJ,CAAkBkG,CAAAphC,MACZ,OAAA,EAAA,CAAA,CAAA,CAAc41B,CAAR,CAAgBsF,CAAhB,CAAN,CAAA,EAAA,CALuD,MAAA,EAAA,CAK7D,MAAA,EAAA,CAAA,CAAA,CAAM,CAAA,EAAN,CAAA,CAAA,CAL6D,MAAA,CAAA,CAS7D,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,EAAA,CACA,IAAIkG,CAAAA,CAAJ,EAAWA,CAAA5L,KAAX,EAAuB,EAAAuG,CAAA,CAAKoF,CAAAvK,OAAL,CAAvB,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAwC,MAAA,EAAA,CAAA,CAAA,CAAchB,CAAR,CAAgBmG,CAAAlW,KAAA,CAAQsb,CAAR,CAAhB,CAAN,CAAA,EAAA,CAXqB,MAAA,EAAA,CAazD,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,IAAIrF,CAAJ,CAAS,KAAMA,EAAAnF,MAAN,CAAX,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAbyD,MAAA,EAAA,CAS7D,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAT6D,MAAA,CAAA,CAQ9DuF,CAAO,CAAPA,EAAAA,CAAAA,CAAAA,CAAO,CAAEJ,CAAF,CAAQ,CAAEnF,MAAOuF,CAAT,CAAR,CAAA,CAAA,EAAA,CAAA,CAAA,CARuD,CAAA,CAAA,CAAA,CAAlE,CADwB;AAkB5B4K,QAASA,GAAU,CAACve,CAAD,CAAS,CAC/B,MAAesN,GAAR,CAAyB,IAAzB,CAA+B+F,SAA/B,CAA0CmL,QAAUA,EAAY,EAAG,CAAA,IAClEC,CADkE,CAC7DjL,CAD6D,CAGzDoF,CAHyD,CAGUC,CAHV,CAIxDlG,CAJwD,CAQ/D+L,CAR+D,OAAAjxB,EAAA,CAAA,CAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CAElE,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CACSmrB,CAAAA,CAAAA,CAAa1K,EAAR,CAAsBmQ,EAAA,CAAU7F,EAAA,CAAmBxY,CAAnB,CAAV,CAAtB,CAHoD,MAAA,CAAA,CAGmB,MAAA,EAAA,CAAA,CAAA,CAAcqN,CAAR,CAAgBuL,CAAA9L,KAAA,EAAhB,CAAN,CAAA,CAAA,CAHnB,MAAA,CAAA,CAGlE,GAAgF+L,CAAA,CAAK,CAAA,EAAL,CAAwCA,CAAA5L,KAAxH,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACU0F,CAAN,CAAoBkG,CAAAphC,MACd,OAAA,EAAA,CAAA,CAAA,CAAc41B,CAAR,CAAgBsF,CAAhB,CAAN,CAAA,EAAA,CALwD,MAAA,EAAA,CAK9D,MAAA,EAAA,CAAA,CAAA,CAAM,CAAA,EAAN,CAAA,CAAA,CAL8D,MAAA,CAAA,CAS9D,EAAA,CAAA,CAAA,CACA,GAAA,CAAA,CAAA,CAAA,EAAA,CACA,IAAIkG,CAAAA,CAAJ,EAAWA,CAAA5L,KAAX,EAAuB,EAAAuG,CAAA,CAAKoF,CAAAvK,OAAL,CAAvB,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,MAAA,CAAwC,MAAA,EAAA,CAAA,CAAA,CAAchB,CAAR,CAAgBmG,CAAAlW,KAAA,CAAQsb,CAAR,CAAhB,CAAN,CAAA,EAAA,CAXsB,MAAA,EAAA,CAa1D,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAE,IAAI6F,CAAJ,CAAS,KAAMA,EAAArQ,MAAN,CAAX,EAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAb0D,MAAA,EAAA,CAS9D,EAAA,CAAA,CAAA,CAAA,CAAA,CAAA,MAT8D,MAAA,CAAA,CAQ/DsQ,CAAO,CAAPA,EAAAA,CAAAA,CAAAA,CAAO,CAAED,CAAF,CAAQ,CAAErQ,MAAOsQ,CAAT,CAAR,CAAA,CAAA,EAAA,CAAA,CAAA,CARwD,CAAA,CAAA,CAAA,CAAnE,CADwB,C,C5BxC5BC,QAAUA,GAAe,CAACC,CAAD,CAAQ,CAAA,IAEpC,CAFoC,CAEpC,CAFoC,CAEzB,CAFyB,CAEzB,CAFyB,CAExB3hC,CAFwB,CAEpBk3B,CAFoB,CAG1Bla,CAH0B,CAQpC,CARoC,CAQpC,CARoC,CAQzB0Y,CARyB,OAAAllB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,OAAA,CAAA,EAAA,EAAA,KAAA,CAAA,CACpC,MAAA,EAAA,CAAA,CAAA,CAAMoxB,EAAA,CAAiBD,CAAA/vB,OAAjB,CAAAnY,OAAN,CAAA,CAAA,CADoC,MAAA,CAAA,CAEpC,CAAA,CAAApE,CAAA,CAA0BssC,CAAA/vB,OAAAyE,aAA1B,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAFoC,MAAA,CAAA,CAEpC,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAW,CAAX,CAAA,CAAA,MAAW,EAAA,CAAAhhB,CAAA,CAAA,CAAA,CAAC2K,EAAD,CAAA,CAAA,KAAA,EAAA,MAAKk3B,EAAL,CAAA,CAAA,KAAA,EAAA,MACDla,EAAN,CAAY2kB,CAAAE,UAAA,CAAgB3K,CAAAn2B,KAAhB,CACZ,IAAIic,CAAAA,CAAJ,EAAW5b,CAAA4b,CAAA5b,WAAX,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACI,MAAA,EAAA,CAAA,CAAA,CAAM0gC,EAAA,CAAyB9kB,CAAA5b,WAAzB,CAAyCpB,CAAzC,CAAAvG,OAAN,CAAA,CAAA,CAL4B,MAAA,CAAA,CAEpC,CAAA,CAAA,CAAA,KAAA,EAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAFoC,MAAA,CAAA,CAQpC,CAAA,CAAApE,CAAA,CAA0BssC,CAAA1D,QAA1B,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EARoC,MAAA,CAAA,CAQpC,GAAA,CAAA,KAAA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAWvI,CAAX,CAAA,CAAA,MACI,OAAA,EAAA,CAAA,CAAA,CAAMqM,EAAA,CAAqBrM,CAArB,CAAAj8B,OAAN,CAAA,CAAA,CATgC,MAAA,CAAA,CAQpC,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CARoC,CAAA,CAAA,CAAA;AAYjCuoC,QAAUA,GAAa,CAACL,CAAD,CAAQ,CAClC,IAAA,CAAA,CAAA,CAAA,CAAMhwB,CAAN,CACMD,CADN,CAGIjY,CAHJ,CAIIwoC,CAJJ,CAIoB9wB,CAJpB,CAQC,CARD,CAWA,CAXA,CAWA,CAXA,CAWW,CAXX,CAWW,CAXX,CAWYnR,CAXZ,CAWgBk3B,EAXhB,CAYUla,EAZV,CAcS,EAdT,CAoBA,EApBA,CAoBA,EApBA,CAoBW0Y,EApBX,CAqBK,EAtB6B,OAAAllB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,CAAA,CAOlC,MANMmB,EAMN,CANsB,EAMtB,CALMD,CAKN,CAL0B,EAK1B,CAHIjY,CAGJ,CAHa,IAAIgO,UAAJ,CAAe6H,EAAA,CAAM4rB,EAAN,CAAf,CAGb,CAFoB/pB,CAEpB,CAFiC1X,CAAA0X,WAEjC,CADA1X,CAAAiQ,IAAA,CAAWgxB,EAAX,CAAkB,CAAlB,CACA,CAAA,CAAA,CAAA,EAAA,CAAMjhC,CAAN,CAAA,CAAA,CAPkC,MAAA,CAAA,CAWlC,MAFC,EAED,CAF8BmoC,EAAA,CAAiBD,CAAA/vB,OAAjB,CAE9B,CAFGqwB,CAEH,CAFG,CAAA,GAEH,CAFmBxoC,CAEnB,CAFmB,CAAA,OAEnB,CADA0X,CACA,EADc1X,CAAA0X,WACd,CAAA,CAAA,CAAA,EAAA,CAAM1X,CAAN,CAAA,CAAA,CAXkC,MAAA,CAAA,CAYlC,CAAA,CAAApE,CAAA,CAA0BssC,CAAA/vB,OAAAyE,aAA1B,CAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAZkC,MAAA,CAAA,CAYlC,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAW,CAAX,CAAA,CAAA,MAAW,EAAA,CAAAhhB,CAAA,CAAA,CAAA,CAAC2K,EAAD,CAAA,CAAA,KAAA,EAAA,MAAKk3B,GAAL,CAAA,CAAA,KAAA,EAAA,MACDla,GAAN,CAAY2kB,CAAAE,UAAA,CAAgB3K,EAAAn2B,KAAhB,CACZ,IAAIic,CAAAA,EAAJ,EAAW5b,CAAA4b,EAAA5b,WAAX,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CACK,EAAA,CAA6B0gC,EAAA,CAAyB9kB,EAAA5b,WAAzB,CAAyCpB,CAAzC,CAA3BiiC,EAAA,CAAA,EAAA,GAAgBxoC,EAAA,CAAA,EAAA,OACnBiY,EAAAtF,KAAA,CAAuB,IAAIyF,EAAJ,CAAcowB,CAAd;AAA8BxoC,CAAA0X,WAA9B,CAAiDA,CAAjD,CAAvB,CACAA,EAAA,EAAc1X,CAAA0X,WACd,OAAA,EAAA,CAAA,EAAA,CAAM1X,CAAN,CAAA,CAAA,CAlB0B,MAAA,CAAA,CAYlC,CAAA,CAAA,CAAA,KAAA,EAAA,GAAA,EAAA,CAAA,CAAA,CAAA,MAZkC,MAAA,CAAA,CAqBlC,EAAA,CAAApE,CAAA,CAA0BssC,CAAA1D,QAA1B,CAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EArBkC,MAAA,CAAA,CAqBlC,GAAA,EAAA,KAAA,CArBkC,CA4BY,IAAA,GAAA,IAAIxsB,EAAJ,CAAWC,CAAX,CAA8BC,CAA9B,CAA6CgwB,CAAA/vB,OAA7C,CAAA,CA8CxCzE,GAAI,IAgNA+0B,EA/MVxE,GAAAb,GAAA,CAA2B1vB,EAA3B,CAA8Bg1B,EAAA,CAAYh1B,EAAZ,CAAe0wB,EAAf,CAA9B,CAEMuE,GAAAA,CAAcC,EAAA,CAAAl1B,EAAA,CAEpB,EAAA,CADuBi1B,EAAAjxB,WACvB,EAAA,CAAiCixB,EAnD9BH,EAAA,CAAA,CAAgBxoC,EAAA,CAAA,CACnB,OAAA,EAAA,CAAA,EAAA,CAAMA,CAAN,CAAA,EAAA,CA7BkC,CAqBvBi8B,EAAX,CAAA,EAAA,MACK,GAAA,CAA6BqM,EAAA,CAAqBrM,EAArB,CAA3BuM,EAAA,CAAA,EAAA,GAAgBxoC,EAAA,CAAA,EAAA,OACnBkY,EAAAvF,KAAA,CAAmB,IAAIyF,EAAJ,CAAcowB,CAAd,CAA8BxoC,CAAA0X,WAA9B,CAAiDA,CAAjD,CAAnB,CACAA,EAAA,EAAc1X,CAAA0X,WACd,OAAA,EAAA,CAAA,EAAA,CAAM1X,CAAN,CAAA,EAAA,CAzB8B,MAAA,EAAA,CAqBlC,EAAA,CAAA,EAAA,KAAA,EAAA,GAAA,EAAA,CAAA,CAAA,CAAA,MArBkC,MAAA,EAAA,CAkClC,MAHAA,EAGA,CAHS,IAAIgO,UAAJ,CAAe0zB,EAAf,CAGT,CAFAmH,CAAA,IAAIpxB,QAAJ,CAAazX,CAAAA,OAAb,CAAA6oC,UAAA,CAAqC,CAArC,CAAwCL,CAAxC,CAAwDz+B,EAAxD,CAEA,CADA/J,CAAAiQ,IAAA,CAAWgxB,EAAX,CAAkBjhC,CAAA0X,WAAlB,CAAsC+pB,EAAtC,CACA,CAAA,CAAA,CAAA,EAAA;AAAMzhC,CAAN,CAAA,CAAA,CAlCkC,CAAA,CAAA,CAAA,CAoC/BsoC,QAASA,GAAoB,CAACrM,CAAD,CAAc,CACxC,IAAA,EAAmD6M,EAAA,CAA6C7M,CAA7C,CAAnD,CAAEvkB,EAAA,CAAA,WAAF,CAA0BpM,EAAA,CAAA,EAA1B,CAAmCy9B,EAAA,CAAA,GACnCC,EAAAA,CAAS,IAAI1wB,EAAJ,CAAwBlc,EAAAygB,GAAxB,CAA4Cof,CAAAr7B,OAA5C,CADK,CAAAggC,GACL,CAA4EmI,CAA5E,CACTE,EAAAA,CAASC,EAAA,CAA0BxxB,CAA1B,CAAsCpM,CAAtC,CAA+Cy9B,CAA/C,CACf,OAAOZ,GAAA,CAAiBa,CAAjB,CAAyBC,CAAzB,CAJuC,CAM3CZ,QAASA,GAAwB,CAAC1gC,CAAD,CAAapB,CAAb,CAAkC,CAAjB,IAAA6F,EAAA,IAAA,EAAA,GAAAA,CAAA,CAAU,CAAA,CAAV,CAAAA,CAC/C,KAAA,EAAmD08B,EAAA,CAA6CK,EAAA,CAAiB,CAACxhC,CAAD,CAAjB,CAA7C,CAAnD,CAAE+P,EAAA,CAAA,WAAF,CAA0BpM,EAAA,CAAA,EAA1B,CAAmCy9B,EAAA,CAAA,GACnCC,EAAAA,CAAS,IAAI1wB,EAAJ,CAAwBlc,EAAAygB,GAAxB,CAA4ClV,CAAA/G,OAA5C,CADK,CAAAggC,GACL,CAA2EmI,CAA3E,CACTK,EAAAA,CAAS,IAAIl9B,EAAJ,CAAoB9P,EAAAygB,GAApB,CAAwCmsB,CAAxC,CAAgDziC,CAAhD,CAAoD6F,CAApD,CACT68B,EAAAA,CAASC,EAAA,CAA0BxxB,CAA1B,CAAsCpM,CAAtC,CAA+Cy9B,CAA/C,CACf,OAAOZ,GAAA,CAAiBiB,CAAjB,CAAyBH,CAAzB,CAL+D;AAOnEd,QAASA,GAAgB,CAAC5L,CAAD,CAAU77B,CAAV,CAAgB,CAC5C,IAAMgT,EAAI,IAwOA+0B,EAxOV,CACA7G,EAAAA,EADA,CACAn0B,EAAAm0B,CAAAn0B,GADA,CA6ZI47B,EAAsB,CA5ZsB9M,EG9CpBxvB,EH2c5B,GG3c6ClC,EAAApB,OH2c7C,CACI4/B,CADJ,CAC0BC,EAAA,CA9ZmB51B,CA8ZnB,CA9ZsB6oB,CA8ZtB,CAD1B,CA7ZgDA,CG7CfxvB,EH6c5B,GG7c6ClC,EAAAK,YH6c7C,CACDm+B,CADC,CACqBE,EAAA,CAjamB71B,CAianB,CAjasB6oB,CAiatB,CADrB,CAha2CA,CG5CXxvB,EH4chC,GG5ciDlC,EAAAqB,gBH4cjD,GAkDCK,CACN,CADmBg9B,EAAA,CAld0B71B,CAkd1B,CAld6B6oB,CAkdT77B,KAApB,CACnB,CAAA,CAAA,CAAQqkC,EAAA14B,GAAA,CAndqCqH,CAmdrC,CAAR,EACIqxB,EAAAj+B,GAAA,CApdyC4M,CAodzC,CAA0B,IA9OvBtF,CA8OuB,CApdkBmuB,CAodTh2B,GAAT,CAAkB,CAAlB,CAA1B,CADJ,EAEIw+B,EAAAv4B,GAAA,CArdyCkH,CAqdzC,CArd4C6oB,CAqdbnwB,GAA/B,CAFJ,EAGI24B,EAAAz4B,GAAA,CAtdyCoH,CAsdzC,CAA4BnH,CAA5B,CAHJ,EAIIw4B,EAAAt4B,GAAA,CAvdyCiH,CAudzC,CAvDC,CAML,EAAA,CAAQkuB,EAAA10B,GAAA,CAtaqCwG,CAsarC,CAAR,EACIkuB,EAAAz0B,GAAA,CAvayCuG,CAuazC,CAva4C6oB,CAuarB3vB,QAAvB,CADJ,EAEIg1B,EAAAv0B,GAAA,CAxayCqG,CAwazC,CAAsB21B,CAAtB,CAFJ,EAGIzH,EAAAx0B,GAAA,CAzayCsG,CAyazC,CAza4C6oB,CAyalBxvB,EAA1B,CAHJ,EAII60B,EAAAr0B,GAAA,CA1ayCmG,CA0azC,CAA0B,IApMvBtF,CAoMuB,CA1akBmuB,CA0aTtvB,EAAT,CAA0B,CAA1B,CAA1B,CAJJ,EAKI20B,EAAAp0B,GAAA,CA3ayCkG,CA2azC,CA3aJjG,EAAA,KAAA,CAAAm0B,CAAA,CAA6BluB,CAA7B,CAAgC,CAAhC,CAEM81B,EAAAA,CAAgBZ,EAAA,CAAAl1B,CAAA,CAIhB80B,EAAAA,CAAiB3yB,EAAA,CwB3EJ8rB,CxB2EI,CAAgB6H,CAAA9xB,WAAhB,CAEjB+xB,EAAAA,CAAiB/oC,CAAA,CAAOA,CAAAgX,WAAP,CAAyB,CAE1CgyB,EAAAA,CAAe,IAAI17B,UAAJ,CAAe6H,EAAA,CAAM2yB,CAAN,CAAuBiB,CAAvB,CAAf,CAGrBZ,EAAA,IAAIpxB,QAAJ,CAAaiyB,CAAA1pC,OAAb,CAAA6oC,UAAA,CAA2C,CAA3C,CAA8CL,CAA9C,CwBlFmB7G,CxBkFnB,CAAwE53B,EAAxE,CAEA2/B,EAAAz5B,IAAA,CAAiBu5B,CAAjB,CwBpFmB7H,CxBoFnB,CAECjhC,EAAD,EAA0B,CAA1B,CAAS+oC,CAAT,EAAgCC,CAAAz5B,IAAA,CAAiBvP,CAAjB,CAAuB8nC,CAAvB,CAGhC,OAAO,CAAEA,GAAAA,CAAF,CAAkBxoC,OAAQ0pC,CAA1B,CAtBqC;AAiC5C7sC,QADS8sC,GACE,EAAG,CAEV,IAAAjyB,WAAA,CAAkB,CAClB,KAAApM,EAAA,CAAe,EACf,KAAAs1B,GAAA,CAAkB,EAClB,KAAAmI,GAAA,CAAmB,EALT,CADyBvwB,CAAAqD,CAA9B8tB,EAA8B9tB,CAAAA,EAAAA,CAQvCitB,SAAAA,GAAgBA,CAAC7M,CAAD6M,CAAcA,CAA9BA,IAAAA,EApDyDA,IAAIa,EAqDzDb,EAAAx9B,EAAAw9B,CAAeA,EACfA,EAAApxB,WAAAoxB,CAAkBA,CAClBA,EAAAlI,GAAAkI,CAAkBA,EAClBA,EAAAC,GAAAD,CAAmBA,EACnBA,KAL0BA,IAKjBhtB,EAAAA,IAAAA,EALiBgtB,CAKTnpC,EAASmpC,EALAA,CAKGpN,EAAUO,CAAAP,QAAvCoN,CAA4DA,EAAEnpC,CAA9DmpC,CAAsEpN,CAAtEoN,CAAAA,CACIA,CAAIhtB,CAAJgtB,CAAa7M,CAAA5X,WAAAykB,CAAuBnpC,CAAvBmpC,CAAbA,GACIA,CAAAhwB,MAAAgwB,CAAWhtB,CAAXgtB,CAGRA,OAAOA,EAVmBA,CAY9BhwB,CAAAA,CAAAA,EAAAA,UAAA8wB;CAAA9wB,MAAAA,CAAAA,QAAKA,CAACgD,CAADhD,CAASA,CACVA,GAAIA,CAACoF,EAAApF,CAAsBgD,CAAAvW,KAAtBuT,CAALA,CAAyCA,CAC7BA,IAAApY,EAA4Bob,CAA5BhD,KAAAA,CAAMlY,EAAsBkb,CAAtBhD,OAANA,CAAc/N,EAAc+Q,CAAdhD,UACtBA,IAAaA,UAAbA,CAAIlY,CAAJkY,CACIA,KAAMA,KAAI+wB,UAAJ/wB,CAAeA,oDAAfA,CAANA,CAEJA,IAAA8nB,GAAAjuB,KAAAmG,CAAqBA,IAAIF,EAAJE,CAAkBlY,CAAlBkY,CAA0B/N,CAA1B+N,CAArBA,CACAgxB,GAAAhxB,CAAAA,IAAAA,CAA4BA,CAAbA,EAAA/N,CAAA+N,CACTA,IAAI9K,UAAJ8K,CAAeA,CAAfA,CADSA,CAETixB,EAAAjxB,CAAwBpY,CAAAnC,OAAxBua,CAAqClY,CAArCkY,CAA6CpY,CAAAkhB,WAA7C9I,CAFNA,CANqCA,CAUzCA,MAAOA,GAAAA,UAAAA,MAAAA,KAAAA,CAAAA,IAAAA,CAAYgD,CAAZhD,CAXGA,CAadyY,EAAAhY,UAAAA,CAAAA,QAASA,EAASA,CAAEA,MAAOA,KAATA,CAClBqY,EAAA1X,UAAAA,CAAAA,QAASA,CAAC4B,CAAD5B,CAASA,CAwEd8vB,IAAI1zB,CAAJ0zB,CAActpC,EAxE8Bob,CAwE9BkuB,KAAdA,CAAoBppC,EAxEwBkb,CAwExBkuB,OAGhBC,EAAAD,CA3EwCluB,CAyExC/Q,UAAJi/B,EAAwBppC,CAAxBopC,CAEaA,IAAIh8B,UAAJg8B,CAAeA,CAAfA,CAFbA,CAIKA,CAAO1zB,CAAP0zB,CAAgBtpC,CAAA4V,OAAhB0zB,WAAwCh8B,WAAxCg8B,CAOQD,EAAAC,CAAwBtpC,CAAAnC,OAAxByrC,CAAqCppC,CAArCopC,CAA6C1zB,CAA7C0zB,CAPRA,CAGQ3zB,EAAA2zB,CAhF+BluB,CAgF/BkuB,CAhFG9vB,OAsFT4vB,GAAAE,CAtFgB9vB,IAsFhB8vB,CAAeC,CAAfD,CAtFO9vB,CAClBsX;CAAA/X,SAAAA,CAAAA,QAAQA,CAACqC,CAADrC,CAASA,CAAEA,MAAOywB,GAAAzwB,CAAAA,IAAAA,CAAqBqC,CAArBrC,CAATA,CACjBgY,EAAA7X,WAAAA,CAAAA,QAAUA,CAACkC,CAADlC,CAASA,CAAEA,MAAOswB,GAAAtwB,CAAAA,IAAAA,CAAqBkC,CAArBlC,CAATA,CACnB+X,EAAA3X,UAAAA,CAAAA,QAASA,CAAC8B,CAAD9B,CAASA,CAAEA,MAAOmwB,GAAAnwB,CAAAA,IAAAA,CAAyB8B,CAAzB9B,CAATA,CAClB0X,EAAA5X,YAAAA,CAAAA,QAAWA,CAACgC,CAADhC,CAASA,CAAEA,MAAOqwB,GAAArwB,CAAAA,IAAAA,CAAyBgC,CAAzBhC,CAATA,CACpBgY,EAAAxX,UAAAA,CAAAA,QAASA,CAACwB,CAADxB,CAASA,CAAEA,MAAO4vB,GAAA5vB,CAAAA,IAAAA,CAAqBwB,CAArBxB,CAATA,CAClB0X,EAAAtX,eAAAA,CAAAA,QAAcA,CAACoB,CAADpB,CAASA,CAAEA,MAAOwvB,GAAAxvB,CAAAA,IAAAA,CAAqBoB,CAArBpB,CAATA,CACvBqX,EAAAvX,UAAAA,CAAAA,QAASA,CAACsB,CAADtB,CAASA,CAAEA,MAAO0vB,GAAA1vB,CAAAA,IAAAA,CAAqBsB,CAArBtB,CAATA,CAClBqX,EAAAzX,aAAAA,CAAAA,QAAYA,CAAC0B,CAAD1B,CAASA,CAAEA,MAAO8vB,GAAA9vB,CAAAA,IAAAA,CAAqB0B,CAArB1B,CAATA,CACrB6X,EAAArX,cAAAA,CAAAA,QAAaA,CAACkB,CAADlB,CAASA,CAAEA,MAAOsvB,GAAAtvB,CAAAA,IAAAA,CAAqBkB,CAArBlB,CAATA,CACtBsX,EAAApX,UAAAA,CAAAA,QAASA,CAACgB,CAADhB,CAASA,CAAEA,MAAOsvB,GAAAtvB,CAAAA,IAAAA,CAAqBgB,CAArBhB,CAATA,CAClBqX,EAAAlX,YAAAA,CAAAA,QAAWA,CAACa,CAADb,CAASA,CAAEA,MAAOovB,GAAApvB,CAAAA,IAAAA,CAAuBa,CAAvBb,CAATA,CACpBoX;CAAAhX,qBAAAA,CAAAA,QAAoBA,CAACS,CAADT,CAASA,CAAEA,MAAO6uB,GAAA7uB,CAAAA,IAAAA,CAAqBS,CAArBT,CAATA,CAC7BiX,EAAA/W,mBAAAA,CAAAA,QAAkBA,CAACO,CAADP,CAASA,CAAEA,MAAO6uB,GAAA7uB,CAAAA,IAAAA,CAAqBO,CAArBP,CAATA,CAC3BgX,EAAA9W,SAAAA,CAAAA,QAAQA,CAACK,CAADL,CAASA,CAAEA,MAAO4uB,GAAA5uB,CAAAA,IAAAA,CAAuBK,CAAvBL,CAATA,CACjB+W,EAAA5W,gBAAAA,CAAAA,QAAeA,CAACE,CAADF,CAASA,CAEpBA,MAAOA,KAAA9C,MAAA8C,CAAWE,CAAAmC,QAAXrC,CAFaA,CAIxBwW;CAAAjX,WAAAA,CAAAA,QAAUA,CAACW,CAADX,CAASA,CACPA,IAAAza,EAAuBob,CAAvBX,KAAAA,CAAM5V,EAAiBuW,CAAjBX,KAANA,CAAYva,EAAWkb,CAAXX,OAAZA,CACQmvB,EAAyB5pC,CAAjCya,OADAA,CACqBzb,EAAYgB,CAAZya,QAE7B2uB,GAAA3uB,CAAAA,IAAAA,CAAezb,CAAfyb,CAEAA,IAAI5V,CAAAhG,KAAJ4b,GAAkB9e,EAAAoD,OAAlB0b,CACIA,MAAOkvB,GAAAlvB,CAAAA,IAAAA,CAAuBW,CAAvBX,CAENA,IAAI5V,CAAAhG,KAAJ4b,GAAkB9e,EAAAikB,MAAlBnF,CAAmCA,CAEpCA,IAAM8G,EAAevhB,CAAAuhB,aACrB9G,IAAmBA,CAAnBA,EAAImvB,CAAJnvB,CAIIA,MAFA2uB,GAAA3uB,CAAAA,IAAAA,CAAe8G,CAAf9G,CAEOA,CAAAkvB,EAAAlvB,CAAAA,IAAAA,CAAuBW,CAAvBX,CAMPA,KAAMovB,EAAiBvpB,IAAAE,IAAA/F,MAAAA,CAAA6F,IAAA7F,CAAAuJ,CAAAvJ,CAAY5V,CAAA7F,QAAZyb,CAAAA,CACjBqvB,EAAAA,CAAervB,IAAIrb,UAAJqb,CAAeovB,CAAfpvB,CAAgCA,CAAhCA,CAEf+I,EAAAA,CAAe2G,CAAA1P,IAAIrb,UAAJqb,CAAeovB,CAAfpvB,CAAgCA,CAAhCA,CAAA0P,MAAA1P,CAAyCA,EAAzCA,CACrBA,KAAMsvB,EAAiBtvB,IAAIrb,UAAJqb,CAAeva,CAAfua,CACjBuvB,EAAAA,CAAmBC,EAAAxvB,CAA8BmvB,CAA9BnvB,CAA2Cva,CAA3Cua,CAAmD8G,CAAnD9G,CACzBA,KAVCA,IAUgB4L,CAVhB5L,CAUuBxb,EAASwb,EAAjCA,CAAoCA,EAAExb,CAAtCwb,CAA8Cva,CAA9Cua,CAAAA,CACI6C,CAQA7C,CARSzb,CAAAyb,CAAQxb,CAARwb,CAQTA,CAJwCA,EAIxCA,IAJK4L,CAIL5L,CAJa+I,CAAA/I,CAAa6C,CAAb7C,CAIbA,IAHI4L,CAGJ5L,CAHY+I,CAAA/I,CAAa6C,CAAb7C,CAGZA,CAHmCuvB,CAAAvvB,CAAiB6C,CAAjB7C,CAGnCA,EADAsvB,CAAAtvB,CAAexb,CAAfwb,CACAA,CADwBuvB,CAAAvvB,CAAiBxb,CAAjBwb,CACxBA,CADkD4L,CAClD5L,CAAAA,EAAEqvB,CAAArvB,CAAa6C,CAAb7C,CAEN2uB,GAAA3uB,CAAAA,IAAAA,CAAesvB,CAAftvB,CAESwI,EAAAA,CAAcxI,EAAvBA,KAA0ByI,CAA1BzI,CAAwC5V,CAAAqC,SAAAhH,OAAxCua,CAA8DA,EAAEwI,CAAhExI,CAA6EyI,CAA7EzI,CAAAA,CACU6C,CAEN7C,CAFe5V,CAAA7F,QAAAyb,CAAawI,CAAbxI,CAEfA,CADMoH,CACNpH,CADcW,CAAAuI,WAAAlJ,CAAkBwI,CAAlBxI,CACdA,CAAAA,IAAArC,MAAAqC,CAAWoH,CAAAlB,MAAAlG,CAAY+I,CAAA/I,CAAa6C,CAAb7C,CAAZA;AAAkC6F,IAAA+C,IAAA5I,CAASva,CAATua,CAAiBqvB,CAAArvB,CAAa6C,CAAb7C,CAAjBA,CAAlCA,CAAXA,CAnC4BA,CAuCxCA,MAAOA,KAhDQA,CAqEnB+uB,SAAAA,GAAeA,CAAfA,CAAeA,CAACpuB,CAADouB,CAASA,CAEdA,IAAAA,EADiBpuB,CAATouB,KAGdA,OAAOJ,GAAAI,CAAAA,CAAAA,CAFiBA,CAAAA,OAEF36B,SAAA26B,CAFdA,CAAAA,OAEcA,CAFNA,CAAAA,OAEMA,EAHCpuB,CAAfouB,KAEuBz6B,KACTy6B,EADsBA,CACtBA,EAAfA,CAJaA,CAMxBC,QAAAA,GAAmBA,CAAnBA,CAAmBA,CAACruB,CAADquB,CAASA,CACVA,IAAAvpC,EAAWkb,CAAXquB,OAAAA,CACRA,EADmBruB,CAAjBquB,KACA5rC,EAAAA,CAAA4rC,CAAAA,OAAQA,KAAA7zB,EAAA6zB,CAAAA,OAAQloB,EAAAA,CAAAkoB,CAAAA,aACxBA,KAAMS,EAAc3oB,CAAAkoB,CAAaA,CAAbA,CAApBA,CAEMzyB,EAAasJ,IAAA+C,IAAAomB,CADAloB,CAAAkoB,CAAavpC,CAAbupC,CACAA,CAAsBS,CAAtBT,CAAmC7zB,CAAAoB,WAAnCyyB,CAAuDS,CAAvDT,CAGnBL,GAAAK,CAAAA,CAAAA,CAAeQ,EAAAR,CAA8B5rC,CAA9B4rC,CAAsCvpC,CAAtCupC,CAA8CloB,CAA9CkoB,CAAfA,CAEAL,GAAAK,CAAAA,CAAAA,CAAe7zB,CAAA/G,SAAA46B,CAAgBS,CAAhBT,CAA8B5rC,CAA9B4rC,CAAsCS,CAAtCT,CAAoD5rC,CAApD4rC,CAA6DzyB,CAA7DyyB,CAAfA,CACAA,OAAOA,EAXiBA,CAa5BC,QAAAA,GAAeA,CAAfA,CAAeA,CAACtuB,CAADsuB,CAASA,CACNA,IAAAxpC,EAAWkb,CAAXsuB,OAAAA,CACRA,EADmBtuB,CAAjBsuB,KAAMA,CACN7rC,EAAA6rC,CAAAA,OAERA,EAFgBnoB,CAEhBmoB,CAFgBA,CAAAA,aAEhBA,GACIN,EAAAM,CAAAA,CAAAA,CAAeO,EAAAP,CAA8B7rC,CAA9B6rC,CAAsCxpC,CAAtCwpC,CAA8CnoB,CAA9CmoB,CAAfA,CAGJA,OAAOA,EAAAtxB,MAAAsxB,CAAWtuB,CAAAuI,WAAA+lB,CAAkBA,CAAlBA,CAAXA,CARaA;AAUxBC,QAAAA,GAAiBA,CAAjBA,CAAiBA,CAACvuB,CAADuuB,CAASA,CAGtBA,IADAA,IAAMzmB,EAAchjB,CAACkb,CAAAvW,KAAAqC,SAADhH,EAAyBypC,EAAzBzpC,QAApBypC,CACS9nB,EAAAA,IAAAA,EADT8nB,CACgB1mB,EAAc0mB,EAA9BA,CAAiCA,EAAE1mB,CAAnC0mB,CAAgDzmB,CAAhDymB,CAAAA,CACIA,CAAI9nB,CAAJ8nB,CAAYvuB,CAAAuI,WAAAgmB,CAAkB1mB,CAAlB0mB,CAAZA,GACIA,CAAAvxB,MAAAuxB,CAAW9nB,CAAX8nB,CAGRA,OAAOA,EAReA,CAU1BP,QAAAA,GAASA,CAATA,CAASA,CAACxzB,CAADwzB,CAASA,CACdA,IAAMpyB,EAAa7B,EAAAi0B,CAAMxzB,CAAAoB,WAANoyB,CACnBA,EAAAx+B,EAAAqH,KAAAm3B,CAAkBxzB,CAAlBwzB,CACAA,EAAAf,GAAAp2B,KAAAm3B,CAAsBA,IAAInxB,EAAJmxB,CAAmBA,CAAApyB,WAAnBoyB,CAAoCpyB,CAApCoyB,CAAtBA,CACAA,EAAApyB,WAAAoyB,EAAmBpyB,CACnBoyB,OAAOA,EALOA,CAOlBC,QAAAA,GAAkBA,CAACxrC,CAADwrC,CAASnpC,CAATmpC,CAAiBE,CAAjBF,CAAyBA,CACvCA,IAAMc,EAAgBh1B,EAAAk0B,CAAME,CAAAvyB,WAANqyB,CACtBA,OAAaA,EAAbA,CAAIxrC,CAAJwrC,EAAkBE,CAAAvyB,WAAlBqyB,CAAsCc,CAAtCd,EAEUhqC,CAMCA,CANOgqC,IAAI/7B,UAAJ+7B,CAAec,CAAfd,CAMPhqC,CALPA,CAAAkQ,IAAA85B,CAA0BA,CAAhBA,GAACxrC,CAADwrC,CAAUA,CAAVA,CAEJE,CAAA16B,SAAAw6B,CAAgBxrC,CAAhBwrC,EAA0BA,CAA1BA,CAFIA,CAIJ1zB,EAAA0zB,CAAUtzB,EAAAszB,CAAYE,CAAZF,CAAoBxrC,CAApBwrC,CAA4BnpC,CAA5BmpC,CAAoCA,IAApCA,CAA0Cj0B,EAA1Ci0B,CAAVA,CAJNA,CAKOhqC,CAAAA,CARXgqC,EAUOE,CAZgCF;AAc3CY,QAAAA,GAAwBA,CAACpsC,CAADosC,CAAS/pC,CAAT+pC,CAAiB1oB,CAAjB0oB,CAA+BA,CAInDA,GAAaA,CAAbA,CAAIpsC,CAAJosC,EAAsCA,CAAtCA,GAAkB1oB,CAAA0oB,CAAaA,CAAbA,CAAlBA,CAAyCA,CAC/BG,CAAAA,CAAc7oB,CAAA0oB,CAAaA,CAAbA,CAEpBA,KADAA,IAAMI,EAAcJ,IAAI7qC,UAAJ6qC,CAAe/pC,CAAf+pC,CAAwBA,CAAxBA,CAApBA,CACShrC,EAASgrC,EAAlBA,CAAqBA,EAAEhrC,CAAvBgrC,CAA+B/pC,CAA/B+pC,CAAAA,CACII,CAAAJ,CAAYhrC,CAAZgrC,CAAAA,CAAqB1oB,CAAA0oB,CAAahrC,CAAbgrC,CAArBA,CAA2CG,CAG/CC,EAAAJ,CAAY/pC,CAAZ+pC,CAAAA,CAAsB1oB,CAAA0oB,CAAa/pC,CAAb+pC,CAAtBA,CAA6CG,CAC7CH,OAAOI,EAR8BJ,CAUzCA,MAAO1oB,EAd4C0oB;AAuB3D,IAAIK,GAASC,EAAAhvC,EAAAC,EAAAC,EAAAomC,GAAb,CACI0B,GAAUU,EAAA1oC,EAAAC,EAAAC,EAAA6b,GADd,CAEIkzB,GAASC,CAAAlvC,EAAAC,EAAAC,EAAAiL,MAFb,CAGIw9B,GAAUh6B,CAAA3O,EAAAC,EAAAC,EAAAsN,OAHd,CAII2hC,GAAU7/B,CAAAtP,EAAAC,EAAAC,EAAAmN,GAJd,CAKIs4B,GAAWC,EAAA5lC,EAAAC,EAAAC,EAAAuQ,GALf,CAMI2+B,GAAYC,CAAArvC,EAAAC,EAAAC,EAAAyJ,GANhB,CAOI2lC,GAAaC,EAAAvvC,EAAAC,EAAAC,EAAA2O,GAPjB,CAQI+5B,GAAeC,EAAA7oC,EAAAC,EAAAC,EAAA+O,YARnB,CASI65B,GAAmBC,EAAA/oC,EAAAC,EAAAC,EAAA+P,gBATvB,CAUIu/B,GAAsBC,CAAAzvC,EAAAC,EAAAC,EAAAkK,GAV1B,CAWI4D,GAAc0hC,CAAA1vC,EAAAC,EAAAC,EAAAS,GAXlB,CAYIqoC,GAAQC,CAAAjpC,EAAAC,EAAAC,EAAAW,KAZZ,CAaIqoC,GAAOC,CAAAnpC,EAAAC,EAAAC,EAAAiF,IAbX,CAcIikC,GAAiBC,CAAArpC,EAAAC,EAAAC,EAAAyF,cAdrB,CAeI2jC,GAAUC,CAAAvpC,EAAAC,EAAAC,EAAAoG,OAfd,CAgBIkjC,GAAQC,CAAAzpC,EAAAC,EAAAC,EAAA8G,KAhBZ,CAiBI0iC,GAAQC,CAAA3pC,EAAAC,EAAAC,EAAAgG,KAjBZ,CAkBI0jC,GAAWC,CAAA7pC,EAAAC,EAAAC,EAAAkH,QAlBf,CAmBI0iC,GAAQC,CAAA/pC,EAAAC,EAAAC,EAAAwH,KAnBZ,CAoBIsiC,GAAQC,CAAAjqC,EAAAC,EAAAC,EAAA+H,KApBZ,CAqBIiiC,GAAaC,CAAAnqC,EAAAC,EAAAC,EAAAmI,UArBjB,CAsBI+hC,GAAYC,CAAArqC,EAAAC,EAAAC,EAAA6I,SAtBhB,CAuBIuhC,GAAQC,CAAAvqC,EAAAC,EAAAC,EAAA6B,KAvBZ,CAwBIyoC,GAAUC,CAAAzqC,EAAAC,EAAAC,EAAAyB,QAxBd,CAyBI+oC,GAASC,CAAA3qC,EAAAC,EAAAC,EAAAkD,MAzBb,CA0BIwnC,GAAmBC,CAAA7qC,EAAAC,EAAAC,EAAAwG,gBA1BvB,CA2BIokC,GAAiBC,CAAA/qC,EAAAC,EAAAC,EAAAiC,cA3BrB;AA4BI6oC,GAAOC,CAAAjrC,EAAAC,EAAAC,EAAA0C,IAEPhC,SADS+uC,GACE,CAACpuC,CAAD,CAAU,CAEjB,IAAAA,EAAA,CAAeA,CAFE,CADWgb,CAAAK,CAAvB+yB,EAAuB/yB,CAAAA,EAAAA,CAKhCU,EAAAA,CAAAA,EAAAA,UAAAgY,EAAAhY,UAAAA,CAAAA,QAASA,EAAQA,CACbA,IAAM7F,EAAI6F,IAAA/b,EACV+b,OAAQ0rB,GAAA1nC,GAAAgc,CAAgB7F,CAAhB6F,CAARA,EACI0rB,EAAAvnC,GAAA6b,CAAc7F,CAAd6F,CAHSA,CAKjBiY,EAAA/X,SAAAA,CAAAA,QAAQA,CAACoyB,CAADpyB,CAAOA,CACXA,IAAM/F,EAAI+F,IAAAjc,EACVic,OAAQ0rB,GAAA3jC,GAAAiY,CAAc/F,CAAd+F,CAARA,EACI0rB,EAAA1jC,GAAAgY,CAAiB/F,CAAjB+F,CAAoBoyB,CAAAvqC,EAApBmY,CADJA,EAEI0rB,EAAAzjC,GAAA+X,CAAiB/F,CAAjB+F,CAAoBoyB,CAAAtqC,EAApBkY,CAFJA,EAGI0rB,EAAAxjC,GAAA8X,CAAY/F,CAAZ+F,CALOA,CAOfgY,EAAA7X,WAAAA,CAAAA,QAAUA,CAACiyB,CAADjyB,CAAOA,CACbA,IAAMlG,EAAIkG,IAAApc,EACVoc,OAAQyrB,GAAArjC,GAAA4X,CAAkClG,CAAlCkG,CAARA,EACIyrB,EAAApjC,GAAA2X,CAA4BlG,CAA5BkG,CAA+BiyB,CAAA/pC,UAA/B8X,CADJA,EAEIyrB,EAAAnjC,GAAA0X,CAAgClG,CAAhCkG,CAJSA,CAMjB8X,EAAA5X,YAAAA,CAAAA,QAAWA,EAAQA,CACfA,IAAMpG,EAAIoG,IAAAtc,EACVsc,OAAQyrB,GAAA9iC,GAAAqX,CAAoBpG,CAApBoG,CAARA,EACIyrB,EAAA7iC,GAAAoX,CAAkBpG,CAAlBoG,CAHWA,CAKnB8X,EAAA1X,UAAAA,CAAAA,QAASA,EAAQA,CACbA,IAAMxG,EAAIwG,IAAA1c,EACV0c,OAAQurB,GAAAtiC,GAAA+W,CAAgBxG,CAAhBwG,CAARA,EACIurB,EAAAriC,GAAA8W,CAAcxG,CAAdwG,CAHSA,CAKjByX,EAAA3X,UAAAA,CAAAA,QAASA,EAAQA,CACbA,IAAMtG,EAAIsG,IAAAxc,EACVwc,OAAQ2rB,GAAAtjC,GAAA2X,CAAgBtG,CAAhBsG,CAARA,EACI2rB,EAAArjC,GAAA0X,CAActG,CAAdsG,CAHSA,CAKjB6X;CAAAzX,aAAAA,CAAAA,QAAYA,CAACyxB,CAADzxB,CAAOA,CACfA,IAAM1G,EAAI0G,IAAA5c,EACV4c,OAAQyrB,GAAAriC,GAAA4W,CAAsB1G,CAAtB0G,CAARA,EACIyrB,EAAApiC,GAAA2W,CAAkB1G,CAAlB0G,CAAqByxB,CAAAtoC,MAArB6W,CADJA,EAEIyrB,EAAA5jC,GAAAmY,CAAsB1G,CAAtB0G,CAAyByxB,CAAA/pC,UAAzBsY,CAFJA,EAGIyrB,EAAAniC,GAAA0W,CAAoB1G,CAApB0G,CALWA,CAOnB0X,EAAAxX,UAAAA,CAAAA,QAASA,CAACuxB,CAADvxB,CAAOA,CACZA,IAAM5G,EAAI4G,IAAA9c,EACV8c,OAAOyrB,GAAAhiC,GAAAuW,CAAgB5G,CAAhB4G,CAAPA,EAA6ByrB,EAAA/hC,EAAAsW,CAAc5G,CAAd4G,CAAiBuxB,CAAAhoC,EAAjByW,CAA7BA,EAA4DyrB,EAAA9hC,GAAAqW,CAAc5G,CAAd4G,CAFhDA,CAIhByX,EAAAvX,UAAAA,CAAAA,QAASA,CAACqxB,CAADrxB,CAAOA,CACZA,IAAM9G,EAAI8G,IAAAhd,EACVgd,OAAQyrB,GAAA7hC,UAAAoW,CAAgB9G,CAAhB8G,CAARA,EACIyrB,EAAAjiC,EAAAwW,CAAc9G,CAAd8G,CAAiBqxB,CAAAhoC,EAAjB2W,CADJA,EAEIyrB,EAAAxkC,GAAA+Y,CAAkB9G,CAAlB8G,CAAqBqxB,CAAAvqC,EAArBkZ,CAFJA,EAGIyrB,EAAA5hC,QAAAmW,CAAc9G,CAAd8G,CALQA,CAOhBwX,EAAAtX,eAAAA,CAAAA,QAAcA,CAACmxB,CAADnxB,CAAOA,CACjBA,IAAMhH,EAAIgH,IAAAld,EAAVkd,CACMjW,EAAYonC,CAAApnC,GAAZA,EAA6BqnC,EAAApxB,CAAAhH,CAAAgH,CAAemxB,CAAApnC,GAAfiW,CAA7BjW,EAA+D+hB,IAAAA,EACrE9L,OAAQyrB,GAAAvhC,GAAA8V,CAA0BhH,CAA1BgH,CAARA,EACIyrB,EAAAniC,EAAA0W,CAAmBhH,CAAnBgH,CAAsBmxB,CAAAhoC,EAAtB6W,CADJA,EAEkB8L,IAAAA,EAFlB9L,GAEKjW,CAFLiW,EAE+ByrB,EAAAthC,GAAA6V,CAAuBhH,CAAvBgH,CAA0BjW,CAA1BiW,CAF/BA,EAGIyrB,EAAAphC,GAAA2V,CAAwBhH,CAAxBgH,CANaA,CAQrBuX,EAAArX,cAAAA,CAAAA,QAAaA,CAACixB,CAADjxB,CAAOA,CAChBA,IAAMlH,EAAIkH,IAAApd,EACVod,OAAQyrB,GAAAlhC,GAAAyV,CAAwBlH,CAAxBkH,CAARA,EAAsCyrB,EAAAriC,EAAA4W,CAAkBlH,CAAlBkH,CAAqBixB,CAAAhoC,EAArB+W,CAAtCA,EAAyEyrB,EAAAjhC,GAAAwV,CAAsBlH,CAAtBkH,CAFzDA,CAIpBsX;CAAApX,UAAAA,CAAAA,QAASA,EAAQA,CACbA,IAAMpH,EAAIoH,IAAAtd,EACVsd,OAAQyrB,GAAAroC,GAAA4c,CAAgBpH,CAAhBoH,CAARA,EACIyrB,EAAApoC,GAAA2c,CAAcpH,CAAdoH,CAHSA,CAKjBqX,EAAAlX,YAAAA,CAAAA,QAAWA,EAAQA,CACfA,IAAMvH,EAAIuH,IAAAzd,EACVyd,OAAQwrB,GAAA3oC,GAAAmd,CAAqBvH,CAArBuH,CAARA,EACIwrB,EAAA1oC,GAAAkd,CAAmBvH,CAAnBuH,CAHWA,CAKnBmX,EAAAjX,WAAAA,CAAAA,QAAUA,CAAC0wB,CAAD1wB,CAAOA,CACbA,IAAMzH,EAAIyH,IAAA3d,EAAV2d,CACMzb,EAAUinC,EAAA1lC,GAAAka,CAA0BzH,CAA1ByH,CAA6B0wB,CAAAnsC,QAAAkB,OAA7Bua,CAAVzb,EACFinC,EAAAlmC,GAAA0a,CAA2BzH,CAA3ByH,CAA8B0wB,CAAAnsC,QAA9Byb,CACJA,OAAQwrB,GAAAxmC,GAAAgb,CAAkBzH,CAAlByH,CAARA,EACIwrB,EAAAvmC,GAAA+a,CAAezH,CAAfyH,CAAkB0wB,CAAAtsC,KAAlB4b,CADJA,EAEIwrB,EAAArmC,GAAA6a,CAAkBzH,CAAlByH,CAAqBzb,CAArByb,CAFJA,EAGIwrB,EAAAxlC,GAAAga,CAAgBzH,CAAhByH,CAPSA,CASjBqX,EAAA5W,gBAAAA,CAAAA,QAAeA,CAACiwB,CAADjwB,CAAOA,CAClBA,IAAMlI,EAAIkI,IAAApe,EAAVoe,CACMlV,EAAYkV,IAAA9C,MAAA8C,CAAWiwB,CAAA5tB,QAAXrC,CAClBA,OAAQ6vB,GAAA5kC,GAAA+U,CAA4ClI,CAA5CkI,CAARA,EACI6vB,EAAA3kC,GAAA8U,CAA0BlI,CAA1BkI,CAA6BA,IA7H9BxN,CA6H8BwN,CAASiwB,CAAAtlC,GAATqV,CAAkBA,CAAlBA,CAA7BA,CADJA,EAEI6vB,EAAAvkC,GAAA0U,CAAiClI,CAAjCkI,CAAoCiwB,CAAAjlC,GAApCgV,CAFJA,EAGmB4K,IAAAA,EAHnB5K,GAGKlV,CAHLkV,EAGgC6vB,EAAAzkC,GAAA4U,CAAiClI,CAAjCkI,CAAoClV,CAApCkV,CAHhCA,EAII6vB,EAAAtkC,GAAAyU,CAA0ClI,CAA1CkI,CAPcA,CAStByW;CAAAhX,qBAAAA,CAAAA,QAAoBA,CAACwwB,CAADxwB,CAAOA,CACvBA,IAAM3H,EAAI2H,IAAA7d,EACV6d,OAAQwrB,GAAA/jC,GAAAuY,CAAsC3H,CAAtC2H,CAARA,EACIwrB,EAAA9jC,GAAAsY,CAA8B3H,CAA9B2H,CAAiCwwB,CAAAhpC,GAAjCwY,CADJA,EAEIwrB,EAAA7jC,GAAAqY,CAAoC3H,CAApC2H,CAJmBA,CAM3BiX,EAAA/W,mBAAAA,CAAAA,QAAkBA,CAACswB,CAADtwB,CAAOA,CACrBA,IAAM7H,EAAI6H,IAAA/d,EACV+d,OAAQwrB,GAAAtoC,GAAA8c,CAAkC7H,CAAlC6H,CAARA,EACIwrB,EAAAroC,GAAA6c,CAA2B7H,CAA3B6H,CAA8BswB,CAAAvtC,GAA9Bid,CADJA,EAEIwrB,EAAAnoC,GAAA2c,CAAgC7H,CAAhC6H,CAJiBA,CAMzBgX,EAAA9W,SAAAA,CAAAA,QAAQA,CAACowB,CAADpwB,CAAOA,CACXA,IAAM/H,EAAI+H,IAAAje,EACVie,OAAQwrB,GAAAhoC,GAAAwc,CAAc/H,CAAd+H,CAARA,EACIwrB,EAAA/nC,GAAAuc,CAAmB/H,CAAnB+H,CAAsBowB,CAAA9sC,GAAtB0c,CADJA,EAEIwrB,EAAA7nC,GAAAqc,CAAY/H,CAAZ+H,CAJOA,CAOnBytB,SAASA,GAAyB,CAAC6C,CAAD,CAAkBzgC,CAAlB,CAA2By9B,CAA3B,CAAwC,CAChEroC,CAAAA,CAAO,IAAIsN,UAAJ,CAAe+9B,CAAf,CACb,KAFsE,IAE7D9uC,EAAK,EAFwD,CAErDsZ,EAAIjL,CAAA1K,OAArB,CAAqC,EAAE3D,CAAvC,CAA2CsZ,CAA3C,CAAA,CAA+C,CACrC,IAAA,EAAqBwyB,CAAA,CAAY9rC,CAAZ,CAArB,CAAEsB,EAAA,CAAA,OAAF,CACA,EAAqC+M,CAAA,CAAQrO,CAAR,CADrC,CACE+C,EAAA,CAAA,OADF,CACUC,EAAA,CAAA,WACV+rC,EAAAA,CAAmBhrB,IAAA+C,IAAA,CAFT,CAAAnjB,OAES,CADG,CAAA8W,WACH,CACF,EAAvB,CAAIs0B,CAAJ,EACItrC,CAAAuP,IAAA,CAAS,IAAIjC,UAAJ,CAAehO,CAAf,CAAuBC,CAAvB,CAAmC+rC,CAAnC,CAAT,CAA+DztC,CAA/D,CALuC,CAQ/C,MAAOmC,EAV+D;AAY1EgoC,QAASA,GAAW,CAACh1B,CAAD,CAAIm4B,CAAJ,CAAU,CAC1B,IAAIjJ,EAAe0G,EAAA,CAAY51B,CAAZ,CAAem4B,CAAA1zB,OAAf,CAAnB,CACID,EAAiB2zB,CAAA3zB,GAAjBA,EAAuC,EAD3C,CAEID,EAAqB4zB,CAAA5zB,GAArBA,EAA+C,EAC/CgrB,EAAAA,CAAsBgB,EAAAf,GAAA,CAAiCxvB,CAAjC,CAAoCwE,CAAAtX,OAApC,CAAtBqiC,EACAgJ,EAAA,CAAW/zB,CAAX,CAA0B,QAAA,CAACg0B,CAAD,CAAQ,CAAA,MAAAC,GAAA,CAAWz4B,CAAX,CAAcw4B,CAAd,CAAA,CAAlC,CADAjJ,EAEIjiC,EAAA,CAAA0S,CAAA,CACJ04B,EAAAA,CAA0BnI,EAAAlB,GAAA,CAAgCrvB,CAAhC,CAAmCuE,CAAArX,OAAnC,CAA1BwrC,EACAH,EAAA,CAAWh0B,CAAX,CAA8B,QAAA,CAACo0B,CAAD,CAAQ,CAAA,MAAAF,GAAA,CAAWz4B,CAAX,CAAc24B,CAAd,CAAA,CAAtC,CADAD,EAEIprC,EAAA,CAAA0S,CAAA,CACR,OAAQuwB,GAAAvB,GAAA,CAAoBhvB,CAApB,CAAR,EACIuwB,EAAAtB,GAAA,CAAkBjvB,CAAlB,CAAqBkvB,CAArB,CADJ,EAEIqB,EAAA92B,GAAA,CAAmBuG,CAAnB,CAAsBm4B,CAAA1zB,OAAAvL,QAAtB,CAFJ,EAGIq3B,EAAAjB,GAAA,CAAyBtvB,CAAzB,CAA4BuvB,CAA5B,CAHJ,EAIIgB,EAAApB,GAAA,CAAwBnvB,CAAxB,CAA2B04B,CAA3B,CAJJ,EAKInI,EAAAd,GAAA,CAAkBzvB,CAAlB,CAfsB,CAiB9By4B,QAASA,GAAU,CAACz4B,CAAD,CAAIm4B,CAAJ,CAAU,CACzB,MAAOb,GAAA3H,GAAA,CAAmB3vB,CAAnB,CAAsB,IAnLtBtF,CAmLsB,CAASy9B,CAAAttC,OAAT,CAAsB,CAAtB,CAAtB,CAAgDstC,CAAAxzB,GAAhD,CAAqE,IAnLrEjK,CAmLqE,CAASy9B,CAAA5+B,EAAT,CAA0B,CAA1B,CAArE,CADkB;AAqB7Bq8B,QAASA,GAAW,CAAC51B,CAAD,CAAIm4B,CAAJ,CAAU,CAC1B,IAAMS,EAAeT,CAAAliC,OAAAuP,IAAA,CAAgB,QAAA,CAACsE,CAAD,CAAO,CAAA,MAAA+uB,GAAA,CAAW74B,CAAX,CAAc8J,CAAd,CAAA,CAAvB,CACfnT,EAAAA,CAAeu6B,EAAAr6B,GAAA,CAA0BmJ,CAA1B,CAA6B44B,CAAA1rC,OAA7B,CAAfyJ,EACFu6B,EAAAt6B,GAAA,CAA2BoJ,CAA3B,CAA8B44B,CAA9B,CACJ,KAAI3vB,EAAW6J,IAAAA,EACXqlB,EAAAlvB,SAAJ,EAA0C,CAA1C,CAAqBkvB,CAAAlvB,SAAAlN,KAArB,GACIkN,CADJ,CACeioB,EAAAz7B,GAAA,CAAmCuK,CAAnC,CAAsC,EAAA,OAAA,CAAAgR,CAAA,CAAImnB,CAAAlvB,SAAJ,CAAA,CAAAzD,IAAA,CAAuB,QAAA,CAAC,CAAD,CAAY,CAAX,IAAA,EAAAtd,CAAA,CAAA,CAAA,CAACwgC,EAAAA,CAAD,CAAA,KAAA,EAAA,MAAIrf,EAAAA,CAAJ,CAAA,KAAA,EAAA,MAC/DjX,EAAAA,CAAMgmC,EAAA,CAAAp4B,CAAA,CAAe,EAAf,CAAkB0oB,CAAlB,CACNF,EAAAA,CAAM4P,EAAA,CAAAp4B,CAAA,CAAe,EAAf,CAAkBqJ,CAAlB,CACZ,OAAQsuB,GAAAtlC,GAAA,CAAwB2N,CAAxB,CAAR,EACI23B,EAAArlC,GAAA,CAAiB0N,CAAjB,CAAoB5N,CAApB,CADJ,EAEIulC,EAAAnlC,GAAA,CAAmBwN,CAAnB,CAAsBwoB,CAAtB,CAFJ,EAGImP,EAAAjlC,GAAA,CAAsBsN,CAAtB,CAN4E,CAAnC,CAAtC,CADf,CAUA,OAAQkxB,GAAA/6B,GAAA,CAAoB6J,CAApB,CAAR,EACIkxB,EAAAx6B,GAAA,CAAkBsJ,CAAlB,CAAqBrJ,CAArB,CADJ,EAEIu6B,EAAA96B,GAAA,CAAsB4J,CAAtB,CAFJ,EAGkB8S,IAAAA,EAHlB,GAGK7J,CAHL,EAG+BioB,EAAA37B,GAAA,CAA0ByK,CAA1B,CAA6BiJ,CAA7B,CAH/B,EAIIioB,EAAAp6B,GAAA,CAAkBkJ,CAAlB,CAnBsB;AAqB9B61B,QAASA,GAAgB,CAAC71B,CAAD,CAAIm4B,CAAJ,CAAU,CAC/B,IAAIzgC,EAASygC,CAAAzgC,EAATA,EAAuB,EAA3B,CACIE,EAAWugC,CAAAvgC,EAAXA,EAA2B,EAC3BM,EAAAA,CAAci5B,EAAAh5B,GAAA,CAA8B6H,CAA9B,CAAiCtI,CAAAxK,OAAjC,CAAdgL,EACAqgC,EAAA,CAAW7gC,CAAX,CAAkB,QAAA,CAACmL,CAAD,CAAO,CAAA,MAuBtBg1B,GAAAvgC,GAAA,CAvBqC0I,CAuBrC,CAA8B,IAvP9BtF,CAuP8B,CAvBUmI,CAuBD3V,OAAT,CAAsB,CAAtB,CAA9B,CAAwD,IAvPxDwN,CAuPwD,CAvBhBmI,CAuByBxL,UAAT,CAAyB,CAAzB,CAAxD,CAvBsB,CAAzB,CADAa,EAEI5K,EAAA,CAAA0S,CAAA,CACJ3H,EAAAA,CAAgB84B,EAAA74B,GAAA,CAAgC0H,CAAhC,CAAmCpI,CAAA1K,OAAnC,CAAhBmL,EACAkgC,EAAA,CAAW3gC,CAAX,CAAoB,QAAA,CAACkhC,CAAD,CAAQ,CAAA,MAiBzBpB,GAAA7hC,aAAA,CAjBqCmK,CAiBrC,CAAwB,IApPxBtF,CAoPwB,CAjBgBo+B,CAiBPjuC,OAAT,CAAsB,CAAtB,CAAxB,CAAkD,IApPlD6P,CAoPkD,CAjBVo+B,CAiBmB5rC,OAAT,CAAsB,CAAtB,CAAlD,CAjByB,CAA5B,CADAmL,EAEI/K,EAAA,CAAA0S,CAAA,CACR,OAAQmxB,GAAAp5B,GAAA,CAA8BiI,CAA9B,CAAR,EACImxB,EAAAn5B,GAAA,CAAuBgI,CAAvB,CAA0B,IAtOvBtF,CAsOuB,CAASy9B,CAAAjrC,OAAT,CAAsB,CAAtB,CAA1B,CADJ,EAEIikC,EAAAl5B,GAAA,CAAsB+H,CAAtB,CAAyB9H,CAAzB,CAFJ,EAGIi5B,EAAA/4B,GAAA,CAAwB4H,CAAxB,CAA2B3H,CAA3B,CAHJ,EAII84B,EAAA54B,GAAA,CAA4ByH,CAA5B,CAb2B;AA6BnC64B,QAASA,GAAU,CAAC74B,CAAD,CAAIm4B,CAAJ,CAAU,CACzB,IAAIxjC,EAAc,EAAlB,CACI9C,EAAOsmC,CAAAtmC,KADX,CAEIyY,EAAS6tB,CAAA7tB,OAFb,CAGI1W,EAAOkf,IAAAA,EAHX,CAII7J,EAAW6J,IAAAA,EAJf,CAKI7e,EAAa6e,IAAAA,EACZtI,GAAA,CAAsB3Y,CAAtB,CAAL,EAIIyY,CAEA,CAFSzY,CAAAoC,WAAA0R,EAET,CADA1R,CACA,CADamR,CAAA,IAAI8yB,EAAJ,CAAmBl4B,CAAnB,CAAAoF,OAAA,CAA4BvT,CAA5B,CACb,CAAA8C,CAAA,CAAayQ,CAAA,IAAI8yB,EAAJ,CAAmBl4B,CAAnB,CAAAoF,OAAA,CAA4BvT,CAAAoC,WAA5B,CANjB,EACIU,CADJ,CACiByQ,CAAA,IAAI8yB,EAAJ,CAAmBl4B,CAAnB,CAAAoF,OAAA,CAA4BvT,CAA5B,CAObqC,EAAAA,CAAWsjC,EAAAxiC,GAAA,CAA4BgL,CAA5B,CAA+BwF,CAAC3T,CAAAqC,SAADsR,EAAkB,EAAlBA,KAAA,CAA0B,QAAA,CAACsE,CAAD,CAAO,CAAA,MAAA+uB,GAAA,CAAW74B,CAAX,CAAc8J,CAAd,CAAA,CAAjC,CAA/B,CACXquB,EAAAlvB,SAAJ,EAA0C,CAA1C,CAAqBkvB,CAAAlvB,SAAAlN,KAArB,GACIkN,CADJ,CACeuuB,EAAA/hC,GAAA,CAAkCuK,CAAlC,CAAqC,EAAA,OAAA,CAAAgR,CAAA,CAAImnB,CAAAlvB,SAAJ,CAAA,CAAAzD,IAAA,CAAuB,QAAA,CAAC,CAAD,CAAY,CAAX,IAAA,EAAAtd,CAAA,CAAA,CAAA,CAACwgC,EAAAA,CAAD,CAAA,KAAA,EAAA,MAAIrf,EAAAA,CAAJ,CAAA,KAAA,EAAA,MAC9DjX,EAAAA,CAAMgmC,EAAA,CAAAp4B,CAAA,CAAe,EAAf,CAAkB0oB,CAAlB,CACNF,EAAAA,CAAM4P,EAAA,CAAAp4B,CAAA,CAAe,EAAf,CAAkBqJ,CAAlB,CACZ,OAAQsuB,GAAAtlC,GAAA,CAAwB2N,CAAxB,CAAR,EACI23B,EAAArlC,GAAA,CAAiB0N,CAAjB,CAAoB5N,CAApB,CADJ,EAEIulC,EAAAnlC,GAAA,CAAmBwN,CAAnB,CAAsBwoB,CAAtB,CAFJ,EAGImP,EAAAjlC,GAAA,CAAsBsN,CAAtB,CAN2E,CAAnC,CAArC,CADf,CAUIm4B,EAAAvkC,KAAJ,GACIA,CADJ,CACWwkC,EAAA,CAAAp4B,CAAA,CAAem4B,CAAAvkC,KAAf,CADX,CAGA,OAAQ4jC,GAAAljC,GAAA,CAAkB0L,CAAlB,CAAR,EACIw3B,EAAAxlC,GAAA,CAAegO,CAAf,CAAkBrL,CAAlB,CADJ;AAEI6iC,EAAA9iC,GAAA,CAAmBsL,CAAnB,CAAsBsK,CAAtB,CAFJ,EAGIktB,EAAA1iC,GAAA,CAAmBkL,CAAnB,CAAsB9L,CAAtB,CAHJ,EAIIsjC,EAAA/iC,GAAA,CAAmBuL,CAAnB,CAAsB,CAAC,CAACm4B,CAAAtkC,SAAxB,CAJJ,EAKcif,IAAAA,EALd,GAKKlf,CALL,EAK2B4jC,EAAAjjC,GAAA,CAAeyL,CAAf,CAAkBpM,CAAlB,CAL3B,EAMoBkf,IAAAA,EANpB,GAMK7e,CANL,EAMiCujC,EAAA5iC,GAAA,CAAqBoL,CAArB,CAAwB/L,CAAxB,CANjC,EAOkB6e,IAAAA,EAPlB,GAOK7J,CAPL,EAO+BuuB,EAAAjiC,GAAA,CAAyByK,CAAzB,CAA4BiJ,CAA5B,CAP/B,EAQIuuB,EAAA7hC,GAAA,CAAgBqK,CAAhB,CArCqB,CAuC7Bu4B,QAASA,GAAU,CAAC3mB,CAAD,CAASmnB,CAAT,CAAqB,CAEpC,IADA,IAAMv3B,EAAa+J,KAAJ,CAAUqG,CAAA1kB,OAAV,CAAf,CACiB8R,EAAI4S,CAAA1kB,OAArB,CAA2C,EAA3C,CAAoC,EAAE8R,CAAtC,CAAA,CACIwC,CAAA,CADUjY,EACV,CAAA,CAAYwvC,CAAA,CAAWnnB,CAAA,CAAO5S,CAAP,CAAX,CADFzV,EACE,CAAyBqoB,CAAzB,CAEhB,OAAOpQ,EAL6B,CAQpC,IAAMlV,GAAS,IAAI4gB,WAAJ,CAAgB,CAAhB,CACf8rB,EAAA,IAAIj1B,QAAJ,CAAazX,EAAb,CAAA0sC,UAAA,CAA8B,CAA9B,CAAiC,GAAjC,CAAsC,CAAA,CAAtC,CAFJ,KAAM3iC,GAImC,GAJnCA,GAIK,CAAA,IAAIoV,UAAJ,CAAenf,EAAf,CAAA,EAAuB,CAAvB,C,C6BllBX2sC,QAASA,GAAa,CAACrQ,CAAD,CAAW,CAAA,IACzBhxB,EAAU,EADe,CACXoM,EAAa,CAC/B,EAAA,CAAA9b,CAAA,CAAsB0gC,CAAtB,CAAA,KAAA,IAAA,EAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAWC,CAEP,CAFJ,CAAA,MAEI,CADAjxB,CAAAqH,KAAA,CAAa4pB,CAAb,CACA,CAAA7kB,CAAA,EAAc6kB,CAAA7kB,WAMlB,OAJmBpM,EAAAiN,OAAA,CAAe,QAAA,CAAC,CAAD,CAAyBxY,CAAzB,CAAmC,CAAhC,IAAAC,EAAF,CAAE,OAAQC,EAAAA,CAAV,CAAU,WACzCD,EAAAiQ,IAAA,CAAWlQ,CAAX,CAAkBE,CAAlB,CACA,OAAO,CAAED,OAAAA,CAAF,CAAUC,WAAYA,CAAZA,CAAyBF,CAAA2X,WAAnC,CAF0D,CAAlD,CAGhB,CAAE1X,OAAQ,IAAIgO,UAAJ,CAAe0J,CAAf,CAAV,CAAsCzX,WAAY,CAAlD,CAHgB,CAAXD,OANqB,C,CCO7BnD,QADS+vC,GACE,CAAC,CAAD,CAAU,CAAT,IAAA,IAAS,EAAT,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAS,CAAT,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAER,KAAAC,GAAA,CAAgB,EAGhB,IALiBrR,CAKb,CAAK,CAAL,CAAJ,UAAuB/xB,GAAvB,CAA+B,CAC3B0O,CAAA,CANaqjB,CAMJ,CAAK,CAAL,CACT,KAAAgJ,EAAUvlB,KAAAiI,QAAA,CAPGsU,CAOW,CAAK,CAAL,CAAA,CAAQ,CAAR,CAAd,CAAA,CAPGA,CAOyB,CAAK,CAAL,CAAA,CAAQ,CAAR,CAA5B,CAPGA,CAOsC,CAAK,CAAL,CAFxB,CAA/B,IAKIrjB,EAAA,CAVaqjB,CASR,CAAK,CAAL,CAAJ,UAAuBtwB,GAAvB,CACQ,CAACs5B,CAAD,CAVIhJ,CAUJ,EAAiB,CAAjB,CAAArjB,OADR,CAIQ,CAACqsB,CAAD,CAbIhJ,CAaO,CAAK,CAAL,CAAX,EAAoB,CAApB,CAAArjB,OAEb,KAAAA,OAAA,CAAcA,CACd,KAAAqsB,QAAA,CAAeA,CACf,KAAAsI,aAAA,CAAsC,CAAlB,EAAAtI,CAAA5jC,OAAA,CAChB,IAAIsK,EAAJ,CAAgBiN,CAAhB,CAAwB,CAAxB,CAA2B,EAA3B,CADgB,CAEhBqsB,CAAAjsB,OAAA,CAAe,QAAA,CAACw0B,CAAD,CAAQpT,CAAR,CAAkB,CAAA,MAAAoT,EAAAhf,OAAA,CAAa4L,CAAb,CAAA,CAAjC,CACJ,KAAA/4B,OAAA,CAAc,IAAAksC,aAAAlsC,OACd,KAAA86B,QAAA,CAAe,IAAAoR,aAAApR,QArBE,CAuBrBsR,QAAOA,GAAKA,EAAGA,CAAEA,MAAOA,KAAIJ,EAAJI,CAAUA,IAAIvjC,EAAJujC,CAAWA,EAAXA,CAAVA,CAA0BA,EAA1BA,CAATA;AACflwB,QAAOA,GAAIA,CAACsI,CAADtI,CAAUA,CACjBA,GAAIsI,CAAJtI,CAAaA,CACTA,IACI5E,EAAgB4E,EACpBA,EAAAA,CAAAlhB,CAAAkhB,CAAwBgK,EAAAhK,CAAKsI,CAALtI,CAAxBA,CAAAA,KAAAA,IAAAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CAAuCA,CAA9Bmf,CAAAA,CAATnf,CAAAA,MACIA,KAAA3E,EAASA,CAATA,EAAmB8jB,CAAA9jB,OACnBD,EAAAvF,KAAAmK,CAAmBmf,CAAnBnf,CAFmCA,CAIvCA,MAAOA,KAAI8vB,EAAJ9vB,CAAU3E,CAAV2E,EAAoBA,IAAIrT,EAAJqT,CAAWA,EAAXA,CAApBA,CAAoC5E,CAApC4E,CAPEA,CASbA,MAAOmwB,GAAAnwB,EAVUA,CAkDrBlG,EAAAA,UAAAA,IAAAA,CAAAA,QAAGA,CAACjX,CAADiX,CAAQA,CACPA,MAAOA,KAAAk2B,aAAAl2B,IAAAA,CAAsBjX,CAAtBiX,CADAA,CAGXwxB,GAAAA,UAAAA,UAAAA,CAAAA,QAASA,CAAC9gC,CAAD8gC,CAAOA,CACZA,MAAOA,KAAA8E,YAAA9E,CAAiBA,IAAA+E,eAAA/E,CAAoB9gC,CAApB8gC,CAAjBA,CADKA,CAGhB8E,GAAAA,UAAAA,YAAAA,CAAAA,QAAWA,CAACvtC,CAADutC,CAAQA,CACfA,MAAeA,EAARA,CAAAvtC,CAAAutC,EAAavtC,CAAbutC,EAAsBA,IAAAxR,QAAtBwR,CACDA,IADCA,CAEDA,IAAAL,GAAAK,CAAcvtC,CAAdutC,CAFCA,GAEwBA,IAAAL,GAAAK,CAAcvtC,CAAdutC,CAFxBA,CAE+CA,IAAAJ,aAAAzoB,WAAA6oB,CAA6BvtC,CAA7ButC,CAF/CA,CADQA,CAKnBC;EAAAA,UAAAA,eAAAA,CAAAA,QAAcA,CAAC7lC,CAAD6lC,CAAOA,CACjBA,MAAOA,KAAAh1B,OAAAxO,OAAAyjC,UAAAD,CAA6BA,QAAAA,CAAC3vB,CAAD2vB,CAAOA,CAAAA,MAAA3vB,EAAAlW,KAAA6lC,GAAW7lC,CAAX6lC,CAApCA,CADUA,CAGrBjyC,EAAA,EAAAI,EAAA,EAAA,GAAA,UAAA,CAACwiB,MAAAsG,SAAD,CAAA,CAAA,QAAiB,EAAG,CAChBlpB,CAAA,EAAAI,EAAA,EAAA,OAAO,KAAAwxC,aAAA,CAAkBhvB,MAAAsG,SAAlB,CAAA,EADS,CAGpB7G,EAAAA,CAAAA,EAAAA,UAAA8vB,EAAA9vB,OAAAA,CAAAA,QAAMA,CAAC+vB,CAAD/vB,CAAYA,CACdA,MAAOA,KAAIgwB,EAAJhwB,CAAsBA,IAAAinB,QAAtBjnB,CAAoC+vB,CAApC/vB,CADOA,CAGlBiwB,EAAAC,KAAAA,CAAAA,QAAIA,CAACrX,CAADqX,CAAO5jB,CAAP4jB,CAAaA,CAEbA,IADAA,IAAMjJ,EAAUiJ,IAAAjJ,QAAhBiJ,CAA8BC,EAAalJ,CAAA5jC,OAA3C6sC,CACSE,EAAcF,EAAvBA,CAA0BA,EAAEE,CAA5BF,CAAyCC,CAAzCD,CAAAA,CAAsDA,CAElDA,IAAM9T,EAAQ6K,CAAAiJ,CAAQE,CAARF,CACV5jB,EAAJ4jB,EACI5jB,CAAA4jB,CAAK9T,CAAL8T,CAGJA,KAPkDA,IAOzC9tC,EAAS8tC,EAPgCA,CAO7BhS,EAAU9B,CAAA/4B,OAA/B6sC,CAA6CA,EAAE9tC,CAA/C8tC,CAAuDhS,CAAvDgS,CAAAA,CACIrX,CAAAqX,CAAK9tC,CAAL8tC,CAAY9T,CAAZ8T,CAR8CA,CAFzCA,CAcjBG;CAAAC,QAAAA,CAAAA,QAAOA,CAACvmC,CAADumC,CAAOA,CACVA,IAAMrJ,EAAUqJ,IAAArJ,QAAhBqJ,CAA8BH,EAAalJ,CAAA5jC,OACrCktC,EAAAA,CAA2BD,QAAhBA,GAAAA,MAAOvmC,EAAPumC,CAA2BA,IAAInU,EAAJmU,CAAQvmC,CAARumC,CAA3BA,CAA2CvmC,CAG5DwmC,EAAAjkB,KAAAgkB,CAAcrJ,CAAAqJ,CAAQH,CAARG,CAAqBA,CAArBA,CAAdA,CACAA,KAAM/xB,EAASgyB,CAAAhyB,EACf+xB,IAAIA,EAAE/xB,CAAF+xB,WAAoB5c,GAApB4c,CAAJA,CACIA,KAAUh+B,MAAJg+B,CAAUA,4DAAVA,CAANA,CAKJA,IADAA,IAAME,EAASF,IAAIzuB,WAAJyuB,CAAgB/xB,CAAAnU,WAAA/G,OAAhBitC,CAAfA,CACSF,EAAcE,EAAvBA,CAA0BA,EAAEF,CAA5BE,CAAyCH,CAAzCG,CAAAA,CAAsDA,CAElDA,IAAMlU,EAAQ6K,CAAAqJ,CAAQF,CAARE,CAEdC,EAAAjkB,KAAAgkB,CAAclU,CAAdkU,CACAA,KAAMG,EAAOF,CAAAhyB,EAAAmC,QAAb4vB,CAESluC,EAASkuC,EAAlBA,KAAqBpS,CAArBoS,CAA+BlU,CAAA/4B,OAA/BitC,CAA6CA,EAAEluC,CAA/CkuC,CAAuDpS,CAAvDoS,CAAAA,CAAiEA,CAC7DA,IAAI/nC,EAAMkoC,CAAAp3B,IAAAi3B,CAASluC,CAATkuC,CACEA,KAAZA,GAAI/nC,CAAJ+nC,EACIE,CAAAF,CAAO/nC,CAAP+nC,CAAAA,EAHyDA,CAPfA,CActDA,MAAOA,KAAII,EAAJJ,CAAkB/xB,CAAAnU,WAAlBkmC,CAAqCK,EAAAL,CAAeE,CAAfF,CAArCA,CA3BGA,CA6BdM,EAAAxkB,MAAAA,CAAAA,QAAKA,EAAGA,CACJA,MAAOA,KAAA/oB,OADH+oB,CAGRykB;CAAApxB,OAAAA,CAAAA,QAAMA,CAACA,CAADA,CAAiBA,CAAhBA,IAAAA,IAAgBA,EAAhBA,EAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,OAAAA,CAAAA,EAAAA,CAAAA,CAAgBA,CAAhBA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,SAAAA,CAAAA,CAAAA,CACHA,OAAOA,KAAI4vB,EAAJ5vB,CAAUA,IAAAwnB,QAAAtrB,IAAA8D,CAAiBA,QAAAA,CAAC2c,CAAD3c,CAAWA,CAAAA,MAAA2c,EAAA3c,OAAAA,MAAAA,CAAA2c,CAAA3c,CAAA0H,CAAA1H,CAD1BA,CAC0BA,CAAAA,CAAAA,CAA5BA,CAAVA,CADYA,CAGvBoO,EAAArN,SAAAA,CAAAA,QAAQA,CAAC8d,CAAD9d,CAAYA,CAChBA,IAAI6M,EAAM7M,EACVA,EAAAA,CAAAniB,CAAAmiB,CAAkBA,IAAA6d,aAAA7d,CAAkB8d,CAAlB9d,CAAlBA,CAAAA,KAAAA,IAAAA,EAAAA,CAAAA,KAAAA,EAAAA,CAAAA,CAAAA,CAAAA,KAAAA,CAAAA,CAAAA,CAAAA,CAAAA,KAAAA,EAAAA,CACI6M,CAAA7M,EADJA,CAAAA,MACIA,CAAaA,IAEjBA,OAAO6M,EALS7M,CAQpBswB,EAAAC,UAAAA,CAAAA,QAASA,CAAChnB,CAADgnB,CAAsBhlB,CAAtBglB,CAAqCA,CAAfA,CAAAA,CAAAA,IAAAA,EAAAA,GAAAhlB,CAAAglB,CAASA,CAAAA,CAATA,CAAAhlB,CAC3BglB,ODjKG3B,GAAA2B,CAD6B,IAAA,EACf,GADehlB,CACf,EADeA,CACf,CAAS2e,EAAA,CCiKFqG,IDjKE,CAAT,CAAkC/F,EAAA,CCiK3B+F,IDjK2B,CAAhDA,CCgKuCA,CAG9CC,EAAA3S,aAAAA,CAAAA,QAAYA,CAACC,CAADD,CAAoBA,CAC5BA,MAAOA,KAAInE,EAAJmE,CAAiB4S,EAAA5S,CAAkBA,IAAlBA,CADfA,IAAAA,EAAAA,GAAAC,CAAAD,CAAYA,KAAZA,CAAAC,CACeD,CAAjBA,CAAqDA,MAArDA,CADqBA,CAKhC/+B,SADE0wC,GACS,CAAC/I,CAAD,CAAU8I,CAAV,CAAqB,CAC5B,IAAA9I,QAAA,CAAeA,CACf,KAAA8I,GAAA,CAAiBA,CAFW;AAIhCG,EAAAA,UAAAA,KAAAA,CAAAA,QAAIA,CAACrX,CAADqX,CAAO5jB,CAAP4jB,CAAaA,CAObA,IAFAA,IAAMjJ,EAAUiJ,IAAAjJ,QAAhBiJ,CACMC,EAAalJ,CAAA5jC,OADnB6sC,CAESE,EAAcF,EAAvBA,CAA0BA,EAAEE,CAA5BF,CAAyCC,CAAzCD,CAAAA,CAAsDA,CAElDA,IAAM9T,EAAQ6K,CAAAiJ,CAAQE,CAARF,CAIV5jB,EAAJ4jB,EACI5jB,CAAA4jB,CAAK9T,CAAL8T,CAIJA,KAFAA,IAAMH,EAAYG,IAAAH,GAAAzjB,KAAA4jB,CAAoB9T,CAApB8T,CAAlBA,CAES9tC,EAAS8tC,EAFlBA,CAEqBhS,EAAU9B,CAAA/4B,OAA/B6sC,CAA6CA,EAAE9tC,CAA/C8tC,CAAuDhS,CAAvDgS,CAAAA,CACQH,CAAAG,CAAU9tC,CAAV8tC,CAAiB9T,CAAjB8T,CAAJA,EACIrX,CAAAqX,CAAK9tC,CAAL8tC,CAAY9T,CAAZ8T,CAb0CA,CAPzCA,CAyBjB9jB,GAAAA,UAAAA,MAAAA,CAAAA,QAAKA,EAAGA,CAUJA,IAHAA,IAAIxS,EAAMwS,CAAVA,CACM6a,EAAU7a,IAAA6a,QADhB7a,CAEM+jB,EAAalJ,CAAA5jC,OAFnB+oB,CAGSgkB,EAAchkB,EAAvBA,CAA0BA,EAAEgkB,CAA5BhkB,CAAyC+jB,CAAzC/jB,CAAAA,CAKIA,IAHAA,IAAMgQ,EAAQ6K,CAAA7a,CAAQgkB,CAARhkB,CAAdA,CACM2jB,EAAY3jB,IAAA2jB,GAAAzjB,KAAAF,CAAoBgQ,CAApBhQ,CADlBA,CAGShqB,EAASgqB,EAHlBA,CAGqB8R,EAAU9B,CAAA/4B,OAA/B+oB,CAA6CA,EAAEhqB,CAA/CgqB,CAAuD8R,CAAvD9R,CAAAA,CACQ2jB,CAAA3jB,CAAUhqB,CAAVgqB,CAAiBgQ,CAAjBhQ,CAAJA,EACIA,EAAExS,CAIdwS,OAAOxS,EArBHwS,CAuBRzuB,EAAA,EAAAI,EAAA,EAAA;EAAA,UAAA,CAAEwiB,MAAAsG,SAAF,CAAA,CAAA,QAAA,GAAkB,EAAG,CAAA,IAKD,EAAA,IALC,CAKXogB,CALW,CAMXkJ,CANW,CAORC,CAPQ,CASPhU,CATO,CAaP2T,CAbO,CAeJ3tC,CAfI,CAeQ87B,CAfR,OAAA1kB,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,GAKXytB,CAEGmJ,CAFO,CAAAnJ,QAEPmJ,CADHD,CACGC,CADUnJ,CAAA5jC,OACV+sC,CAAAA,CAAAA,CAAc,EAPN,CAAA,IAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAOjB,GAA0B,EAAA,EAAEA,CAAF,CAAeD,CAAf,CAA1B,CAAA,MAAA,EAAA,EAAA,CAAA,CAAA,CAEU/T,EAAN,CAAc6K,CAAA,CAAQmJ,CAAR,CAIRL,EAAN,CAAkB,CAAAA,GAAAzjB,KAAA,CAAoB8P,CAApB,CAETh6B,EAAJ,CAAa,EAAG87B,EAAAA,CAAU9B,CAAA/4B,OAflB,CAeb,MAA6C,EAAEjB,CAA/C,CAAuD87B,CAAvD,CACQ6R,CAAA,CAAU3tC,CAAV,CAAiBg6B,CAAjB,CAAJ,CACI,CAAA,CAAA,CAAA,CAAMA,CAAA/iB,IAAA,CAAUjX,CAAV,CAAN,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CADJ,CAAA,CAAA,EAAA,CAAA,CAAA,CAfa,CAAA,CAAA,CAsBrB4d,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,CAAC+vB,CAAD/vB,CAAYA,CACdA,MAAOA,KAAIgwB,EAAJhwB,CAAsBA,IAAAinB,QAAtBjnB,CAAoCA,IAAA+vB,GAAAxT,IAAAvc,CAAmB+vB,CAAnB/vB,CAApCA,CADOA,CAGlBswB;EAAAA,UAAAA,QAAAA,CAAAA,QAAOA,CAACvmC,CAADumC,CAAOA,CACVA,IAAMrJ,EAAUqJ,IAAArJ,QAAhBqJ,CAA8BH,EAAalJ,CAAA5jC,OACrCktC,EAAAA,CAA2BD,QAAhBA,GAAAA,MAAOvmC,EAAPumC,CAA2BA,IAAInU,EAAJmU,CAAQvmC,CAARumC,CAA3BA,CAA2CvmC,CAG5DwmC,EAAAjkB,KAAAgkB,CAAcrJ,CAAAqJ,CAAQH,CAARG,CAAqBA,CAArBA,CAAdA,CACAA,KAAM/xB,EAASgyB,CAAAhyB,EACf+xB,IAAIA,EAAE/xB,CAAF+xB,WAAoB5c,GAApB4c,CAAJA,CACIA,KAAUh+B,MAAJg+B,CAAUA,4DAAVA,CAANA,CAKJA,IADAA,IAAME,EAASF,IAAIzuB,WAAJyuB,CAAgB/xB,CAAAnU,WAAA/G,OAAhBitC,CAAfA,CACSF,EAAcE,EAAvBA,CAA0BA,EAAEF,CAA5BE,CAAyCH,CAAzCG,CAAAA,CAAsDA,CAElDA,IAAMlU,EAAQ6K,CAAAqJ,CAAQF,CAARE,CAAdA,CACMP,EAAYO,IAAAP,GAAAzjB,KAAAgkB,CAAoBlU,CAApBkU,CAElBC,EAAAjkB,KAAAgkB,CAAclU,CAAdkU,CAGAA,KAFAA,IAAMG,EAAOF,CAAAhyB,EAAAmC,QAAb4vB,CAESluC,EAASkuC,EAFlBA,CAEqBpS,EAAU9B,CAAA/4B,OAA/BitC,CAA6CA,EAAEluC,CAA/CkuC,CAAuDpS,CAAvDoS,CAAAA,CAAiEA,CAC7DA,IAAI/nC,EAAMkoC,CAAAp3B,IAAAi3B,CAASluC,CAATkuC,CACEA,KAAZA,GAAI/nC,CAAJ+nC,EAAoBP,CAAAO,CAAUluC,CAAVkuC,CAAiBlU,CAAjBkU,CAApBA,EACIE,CAAAF,CAAO/nC,CAAP+nC,CAAAA,EAHyDA,CARfA,CAetDA,MAAOA,KAAII,EAAJJ,CAAkB/xB,CAAAnU,WAAlBkmC,CAAqCK,EAAAL,CAAeE,CAAfF,CAArCA,CA5BGA,CAgCdhxC;QADSoxC,GACE,CAAC33B,CAAD,CAASy3B,CAAT,CAAiB,CACxB,EAAA,KAAA,CAAA,IAAA,CAAM,IAAI7iC,EAAJ,CAAgB,IAAIzB,EAAJ,CAAW,CAC7B,IAAIrC,EAAJ,CAAU,QAAV,CAAoBkP,CAAA/Q,KAApB,CAD6B,CAE7B,IAAI6B,EAAJ,CAAU,QAAV,CAAoB2mC,CAAAxoC,KAApB,CAF6B,CAAX,CAAhB,CAGFwoC,CAAAntC,OAHE,CAGa,CAAC0V,CAAD,CAASy3B,CAAT,CAHb,CAAN,CADwB,CADGv1B,CAAAo0B,CAAtBqB,EAAsBrB,CAAAA,EAAAA,CAO/BzhB,GAAAA,UAAAA,OAAAA,CAAAA,QAAMA,EAAGA,CAILA,IAHAA,IAAM7U,EAAS6U,IAAA+hB,YAAA/hB,CAAiBA,CAAjBA,CAAfA,CACM4iB,EAAS5iB,IAAA+hB,YAAA/hB,CAAiBA,CAAjBA,CADfA,CAEMjW,EAASiW,EAFfA,CAGSluB,EAAKkuB,EAAdA,CAAiBA,EAAEluB,CAAnBkuB,CAAuBA,IAAAvqB,OAAvBuqB,CAAAA,CACIjW,CAAAiW,CAAO7U,CAAAM,IAAAuU,CAAWluB,CAAXkuB,CAAPA,CAAAA,CAAwB4iB,CAAAn3B,IAAAuU,CAAWluB,CAAXkuB,CAE5BA,OAAOjW,EAPFiW,CAUbqjB;QAAUA,GAAiB,CAACtG,CAAD,CAAQrM,CAAR,CAA2B,CAClD,IAAIC,CAAJ,CACI2S,CADJ,CAEI1S,CAFJ,CAGI2S,CAHJ,CAOA,CAPA,CAOA,CAPA,CAOW/U,CAPX,CAQUvV,CARV,CASU,CATV,CASYmS,CATZ,CASkBx1B,CATlB,CAgBA,CAhBA,CAgBA,EAhBA,CAgBWqjB,EAjBuC,OAAArN,EAAA,CAAA,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,CAAA,OAAA,EAAA,EAAA,EAAA,KAAA,CAAA,CAAnB8kB,CAAA,CAAA,IAAA,EAAA,GAAAA,CAAA,CAAY,KAAZ,CAAAA,CAC3BC,EAAJ,CAAgB,CACZ2S,EAAJ,CAAkB,EACd1S,EAAJ,CAAsB,EAClB2S,EAAJ,CAAgB,EAIhB,EAAA,CAAA9yC,CAAA,CAAoBssC,CAAA1D,QAApB,CAAA,KAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,KAAA,EAAA,CAAW7K,CAGP,CAHJ,CAAA,MAGI,CAFMvV,CAEN,CAFiBuV,CAAAiC,aAAA,CAAmBC,CAAnB,CAA8BC,CAA9B,CAAyCC,CAAzC,CAEjB,CADM,CACN,CADwB3X,CAAAgS,KAAA,EACxB,CADQG,CACR,CADQ,CAAA,KACR,CADcx1B,CACd,CADc,CAAA,MACd,CAAKw1B,CAAL,GACIkY,CAAA97B,KAAA,CAAiB5R,CAAjB,CAEA,CADA2tC,CAAA/7B,KAAA,CAAeyR,CAAf,CACA,CAAA0X,CAAA,EAAanC,CAAA/4B,OAHjB,CAMJ,EAAA,CAAAhF,CAAA,CAAuB8yC,CAAvB,CAAA,GAAA,CAAA,CAAA,KAAA,EAjBkD,MAAA,CAAA,CAiBlD,GAAA,EAAA,KAAA,CAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAAA,MAAA,CAAWtqB,EAAX,CAAA,EAAA,MACI,OAAA,EAAA,CAAA,EAAA,CAAMqqB,CAAA1nB,MAAA,EAAN,CAAA,CAAA,CAlB8C,MAAA,CAAA,CAmB9C,MAAA,GAAA,CAAA,EAAA,CAAO3C,EAAP,CAAA,CAAA,CAnB8C,MAAA,CAAA,CAiBlD,EAAA,CAAA,CAAA,KAAA,EAAA,CAAA,EAAA,EAAA,CAAA,CAAA,CAjBkD,CAAA,CAAA,CAAA,C,CChR/C,IAAIuqB,EAAJ,CAQJ,GAAAA,EAAA,GAASA,EAAT,CAAgB,EAAhB,CANCA,GAAA/uB,OAAA,CAAwBA,EACxB+uB,GAAAnvB,MAAA,CAAuBA,EACvBmvB,GAAA/Z,OAAA,CAAwBA,EACxB+Z,GAAAt4B,UAAA,CAA2BA,EAC3Bs4B,GAAAlX,aAAA,CAA8BA,EAC9BkX,GAAAzW,kBAAA,CAAmCA,EAEhC,KAAIx3B,EAAJ,CAaJ,GAAAA,EAAA,GAASA,EAAT,CAAgB,EAAhB,CAXCA,GAAAqgB,SAAA,CAAsBA,EACtBrgB,GAAAohB,SAAA,CAAsBA,CACtBphB,GAAAqhB,SAAA,CAAsBA,EACtBrhB,GAAAshB,aAAA,CAA0BA,EAC1BthB,GAAAwhB,eAAA,CAA4BA,EAC5BxhB,GAAA2hB,WAAA,CAAwBA,EACxB3hB,GAAAiiB,SAAA,CAAsBA,EACtBjiB,GAAAkiB,UAAA,CAAuBA,EACvBliB,GAAAqiB,gBAAA,CAA6BA,EAC7BriB,GAAAsiB,eAAA,CAA4BA,EAC5BtiB,GAAAuiB,YAAA,CAAyBA,EAEtB,KAAI2rB,EAAJ,CAWJ,GAAAA,EAAA,GAAUA,EAAV,CAAkB,EAAlB,CATCA,GAAAlyC,KAAA,CAAmBuf,EACnB2yB,GAAAryC,SAAA,CAAuBA,EACvBqyC,GAAApyC,SAAA,CAAuBA,EACvBoyC,GAAAtyC,UAAA,CAAwBA,EACxBsyC,GAAAvyC,UAAA,CAAwBA,EACxBuyC,GAAAjyC,WAAA,CAAyBA,CACzBiyC,GAAAnyC,aAAA,CAA2BA,EAC3BmyC,GAAA/jC,cAAA,CAA4BA,EAC5B+jC;EAAAxyC,gBAAA,CAA8BA,EAE3B,KAAImJ,EAAJ,CAmCJ,EAAAA,EAAA,GAASA,EAAT,CAAgB,EAAhB,CAjCCA,EAAAkE,OAAA,CAAoBA,EACpBlE,EAAA6B,MAAA,CAAmBA,EACnB7B,EAAAzI,KAAA,CAAkBA,EAClByI,EAAAnE,IAAA,CAAiBA,CACjBmE,EAAA8Z,KAAA,CAAkBA,EAClB9Z,EAAA+Z,MAAA,CAAmBA,EACnB/Z,EAAAga,MAAA,CAAmBA,EACnBha,EAAAia,MAAA,CAAmBA,EACnBja,EAAAka,MAAA,CAAmBA,EACnBla,EAAAma,OAAA,CAAoBA,EACpBna,EAAAoa,OAAA,CAAoBA,EACpBpa,EAAAqa,OAAA,CAAoBA,EACpBra,EAAAoU,MAAA,CAAmBA,EACnBpU,EAAAwa,QAAA,CAAqBA,EACrBxa,EAAAya,QAAA,CAAqBA,EACrBza,EAAA0a,QAAA,CAAqBA,EACrB1a,EAAAhD,OAAA,CAAoBA,EACpBgD,EAAApD,KAAA,CAAkBA,EAClBoD,EAAAtC,KAAA,CAAkBA,EAClBsC,EAAAlC,QAAA,CAAqBA,EACrBkC,EAAA2a,MAAA,CAAmBA,EACnB3a,EAAArB,KAAA,CAAkBA,EAClBqB,EAAAjB,UAAA,CAAuBA,EACvBiB,EAAAP,SAAA,CAAsBA,EACtBO,EAAAvH,KAAA,CAAkBA,EAClBuH,EAAAyV,OAAA,CAAoBA,EACpBzV,EAAAlG,MAAA,CAAmBA,EACnBkG,EAAA8a,WAAA,CAAwBA,EACxB9a,EAAAgb,YAAA,CAAyBA,EACzBhb,EAAA5C,gBAAA,CAA6BA,EAC7B4C,EAAAnH,cAAA,CAA2BA,EAC3BmH,EAAAib,KAAA,CAAkBA,EAClBjb,EAAAoW,WAAA,CAAwBA,EAErB,KAAIG,EAAJ,CAqBJ,GAAAA,EAAA,GAAWA,EAAX,CAAoB,EAApB,CAnBCA,GAAA2I,OAAA,CAAwBA,CACxB3I,GAAAyT,WAAA,CAA4BA,EAC5BzT;EAAA0T,WAAA,CAA4BA,EAC5B1T,GAAAiT,UAAA,CAA2BA,EAC3BjT,GAAA6T,YAAA,CAA6BA,EAC7B7T,GAAA8T,WAAA,CAA4BA,EAC5B9T,GAAAiU,cAAA,CAA+BA,EAC/BjU,GAAAkU,WAAA,CAA4BA,EAC5BlU,GAAAmU,gBAAA,CAAiCA,EACjCnU,GAAAsU,eAAA,CAAgCA,EAChCtU,GAAAuU,aAAA,CAA8BA,EAC9BvU,GAAA0U,sBAAA,CAAuCA,EACvC1U,GAAAyU,WAAA,CAA4BA,EAC5BzU,GAAA4U,WAAA,CAA4BA,EAC5B5U,GAAA6U,oBAAA,CAAqCA,EACrC7U,GAAA8U,UAAA,CAA2BA,EAC3B9U,GAAAgV,aAAA,CAA8BA,EAC9BhV,GAAAkV,YAAA,CAA6BA,EAC7BlV,GAAAmV,iBAAA,CAAkCA,EAE/B,KAAI7X,EAAJ,CAIJ,GAAAA,EAAA,GAAYA,EAAZ,CAAsB,EAAtB,CAFCA,GAAAP,YAAA,CAA+BA,EAC/BO,GAAAyC,cAAA,CAAiCA,EAE9B,KAAIrE,EAAJ,CA8BJ,EAAAA,EAAA,GAASA,EAAT,CAAgB,EAAhB,CA5BCA,EAAA2M,YAAA,CAAmB0qB,CAAA1qB,YACnB3M,EAAA6O,eAAA,CAAsBwoB,CAAAxoB,eACtB7O,EAAA2S,SAAA,CAAgB0kB,CAAA1kB,SAChB3S;CAAA8S,kBAAA,CAAyBukB,CAAAvkB,kBACzB9S,EAAA+S,WAAA,CAAkBskB,CAAAtkB,WAClB/S,EAAAgT,SAAA,CAAgBqkB,CAAArkB,SAChBhT,EAAA+T,UAAA,CAAiBsjB,CAAAtjB,UACjB/T,EAAAoU,eAAA,CAAsBijB,CAAAjjB,eACtBpU,EAAAyT,WAAA,CAAkB4jB,CAAA5jB,WAClBzT,EAAAqU,WAAA,CAAkBgjB,CAAAhjB,WAClBrU,EAAAyU,QAAA,CAAe4iB,CAAA5iB,QACfzU,EAAA4U,SAAA,CAAgByiB,CAAAziB,SAChB5U,EAAA6U,SAAA,CAAgBwiB,CAAAxiB,SAChB7U,EAAA8U,SAAA,CAAgBuiB,CAAAviB,SAChB9U,EAAAyO,aAAA,CAAoB4oB,CAAA5oB,aACpBzO,EAAAgV,cAAA,CAAqBqiB,CAAAriB,cACrBhV,EAAAqV,cAAA,CAAqBgiB,CAAAhiB,cACrBrV,EAAAuV,YAAA,CAAmB8hB,CAAA9hB,YACnBvV,EAAAwV,YAAA,CAAmB6hB,CAAA7hB,YACnBxV,EAAA0V,oBAAA,CAA2B2hB,CAAA3hB,oBAC3B1V,EAAA6V,iBAAA,CAAwBwhB,CAAAxhB,iBACxB7V;CAAA8V,oBAAA,CAA2BuhB,CAAAvhB,oBAC3B9V,EAAA+V,yBAAA,CAAgCshB,CAAAthB,yBAChC/V,EAAAgW,yBAAA,CAAgCqhB,CAAArhB,yBAChChW,EAAAiW,wBAAA,CAA+BohB,CAAAphB,wBAC/BjW,EAAAkW,sBAAA,CAA6BmhB,CAAAnhB,sBAC7BlW,EAAAoW,iBAAA,CAAwBihB,CAAAjhB,iBACxBpW,EAAAqW,kBAAA,CAAyBghB,CAAAhhB,kBAEtB,KAAIyf,EAAJ,CAiBJ,GAAAA,EAAA,GAAcA,EAAd,CAA0B,EAA1B,CAfCA,GAAAtS,IAAA,CV6EGA,QAAY,CAACzkB,CAAD,CAAI,CAAE,MAAO,KAAImjB,EAAJ,CAAQnjB,CAAR,CAAT,CU5EnB+2B,GAAArS,IAAA,CV2EGA,QAAY,CAACle,CAAD,CAAI,CAAE,MAAO,KAAI4b,EAAJ,CAAY5b,CAAZ,CAAT,CU1EnBuwB;EAAAxT,IAAA,CV4EGA,QAAY,CAAC,CAAD,CAAO,CAAN,IAAA,IAAM,EAAN,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAM,CAAN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAQ,OAAO,MAAA,QAAA,UAAA,KAAA,MAAA,CAAIC,EAAJ,CAAA,CAAA,IAAA,CAAA,OAAA,CAAArV,CAAA,CAAT6S,CAAS,CAAA,CAAA,CAAA,CAAT,CU3EtB+V,GAAAtT,GAAA,CV4EGA,QAAW,CAAC,CAAD,CAAO,CAAN,IAAA,IAAM,EAAN,EAAA,CAAA,EAAA,CAAA,CAAA,CAAA,CAAA,SAAA,OAAA,CAAA,EAAA,CAAA,CAAM,CAAN,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,SAAA,CAAA,CAAA,CAAQ,OAAO,MAAA,QAAA,UAAA,KAAA,MAAA,CAAIC,EAAJ,CAAA,CAAA,IAAA,CAAA,OAAA,CAAAvV,CAAA,CAAT6S,CAAS,CAAA,CAAA,CAAA,CAAT,CU3ErB+V,GAAAwB,OAAA,CV4EGA,QAAe,CAAC1Y,CAAD,CAAOvM,CAAP,CAAa,CAC/B,MAAO,KAAIyR,EAAJ,CAAoBlF,CAApB,CAA0BvM,CAA1B,CADwB,CU3E/ByjB,GAAArT,GAAA,CAA0BA,EAC1BqT,GAAA5T,IAAA,CAA2BA,EAC3B4T,GAAAvT,IAAA,CAA2BA,EAC3BuT,GAAAjU,IAAA,CAA2BA,EAC3BiU,GAAApU,KAAA,CAA4BA,EAC5BoU,GAAAvU,KAAA,CAA4BA,EAC5BuU,GAAA9U,MAAA,CAA6BA,EAC7B8U,GAAA1U,OAAA,CAA8BA,EAC9B0U,GAAA3U,QAAA,CAA+BA,EAC/B2U,GAAAzT,UAAA,CAAiCA,EAGrC;GAAI,CACA,IAAIkV,EAAQ1W,IAAA,CAAK,SAAL,CACR0W,EAAJ,EAA8B,QAA9B,GAAa,MAAOA,EAApB,GAEIA,CAAA,KAoBA,CApBgBruC,EAoBhB,CAnBAquC,CAAA,KAmBA,CAnBgBxpC,EAmBhB,CAlBAwpC,CAAA,KAkBA,CAlBgBJ,EAkBhB,CAjBAI,CAAA,KAiBA,CAjBgBv3B,EAiBhB,CAhBAu3B,CAAA,MAgBA,CAhBiBH,EAgBjB,CAfAG,CAAA,OAeA,CAfkBjzB,EAelB,CAdAizB,CAAA,QAcA,CAdmB31B,EAcnB,CAbA21B,CAAA,UAaA,CAbqBzB,EAarB,CAZAyB,CAAA,KAYA,CAZgBjoB,EAYhB,CAXAioB,CAAA,UAWA,CAXqBpH,EAWrB,CAVAoH,CAAA,WAUA,CAVsBlH,EAUtB,CATAkH,CAAA,mBASA,CAT8BjN,EAS9B,CARAiN,CAAA,cAQA,CARyBxG,EAQzB,CAPAwG,CAAA,gBAOA,CAP2B9G,EAO3B,CANA8G,CAAA,KAMA,CANgBruB,CAMhB,CALAquB,CAAA,MAKA,CALiB3nC,EAKjB,CAJA2nC,CAAA,OAIA,CAJkBtlC,EAIlB,CAHAslC,CAAA,OAGA,CAHkBtqB,CAGlB,CAFAsqB,CAAA,YAEA,CAFuB7jC,EAEvB,CADA6jC,CAAA,MACA,CADiBnC,EACjB,CAAAmC,CAAA,cAAA,CAAyBd,EAtB7B,CAFA,CA2BJ,MAAO5X,CAAP,CAAU,EAKV5sB,EAAA,KAAA,CAAiBkyB,EACjBiR,GAAA,KAAA,CAAgBoC,EAChBpC;EAAA,UAAA,CD9JIqC,QAAgBA,CAAC7pB,CAAD6pB,CAAUA,CACtBA,MAAeA,GAARA,CAAkBA,IAAlBA,CAAwCA,QAAAA,EAAUA,EAAGA,CAAAA,IACpDpS,CADoDoS,CAC/CnS,CAD+CmS,CAsB7CrC,CAtB6CqC,CAsB7CnyB,CAtB6CmyB,CAGhD92B,CAHgD82B,CAIhD/2B,CAJgD+2B,CAMvC/M,CANuC+M,CAMS9M,CANT8M,CAOxChT,CAPwCgT,CAY7ChS,CAZ6CgS,OAAAl4B,EAAAk4B,CAAAA,CAAAA,CAAAA,QAAAA,CAAAA,CAAAA,CAAAA,CAAAA,OAAAA,CAAAA,EAAAA,EAAAA,KAAAA,CAAAA,CEpChE/zC,CAAA,EAAAK,GAAA,EFsCQ0zC,IEtCI,IFsCJA,EAAoB7pB,CAApB6pB,EEtCY9xB,MAAA,CFsCQiI,CEtCR,CFsCZ6pB,GAAoB7pB,CAApB6pB,EEtCkE,WFsClEA,GEtC+B,MFsCX7pB,EEtCkB,CAAEtH,MAAAuZ,cAAF,CFsCtC4X,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAmBKA,GEjFD,IFiFCA,EAAc7pB,CAAd6pB,EEjFO9xB,MAAA,CFiFOiI,CEjFP,CFiFP6pB,GAAc7pB,CAAd6pB,EEjF+C,UFiF/CA,GEjF0B,MFiFZ7pB,EEjFmB,KFiFjC6pB,CAGAA,CAAAA,GAAI7pB,CAAJ6pB,CACDA,MAAAA,EAAAA,OAAAA,CAAOD,EAAAC,CAAW7pB,CAAX6pB,CAAPA,CADCA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CAFMrC,CAAAA,CAAAA,EAAA9vB,EAAAA,CAAAkyB,EAAWC,OAAAA,EAAAA,CAAAA,CAAAA,CAAM7pB,CAAN6pB,CAAAA,CAAAA,CAtBkCA,MAAAA,CAAAA,CAsBpDA,MAAAA,EAAAA,OAAAA,CAAOnyB,CAAAmyB,KAAAA,CAAArC,CAAAqC,CAAWA,CAAAA,EAAXA,CAAPA,CAtBoDA,MAAAA,CAAAA,CAIhD/2B,CAESgqB,CAFO+M,EAEP/M,CADT+M,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CACS/M,CAAAA,CAAAA,CAAa+M,EAARA,CAAsBtH,EAAAsH,CAAU7pB,CAAV6pB,CAAtBA,CANkCA,MAAAA,CAAAA,CAMkBA,MAAAA,EAAAA,CAAAA,CAAAA,CAAM/M,CAAA9L,KAAA6Y,EAANA,CAAAA,EAAAA,CANlBA,MAAAA,EAAAA,CAMhDA,GAA6D9M,CAAA8M,CAAKA,CAAAA,EAALA,CAAuB9M,CAAA5L,KAApF0Y,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAAAA,CACQhT,CAAJgT,CAAkB9M,CAAAphC,MAClBoX,EAAA82B,CAAS92B,CAAT82B,EAAmBhT,CAAA9jB,OACnBD;CAAAvF,KAAAs8B,CAAmBhT,CAAnBgT,CAHJA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MANgDA,MAAAA,CAAAA,CAa5CA,EAAAA,CAAAA,CAAAA,CACAA,GAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CACAA,IAAI9M,CAAAA,CAAJ8M,EAAW9M,CAAA5L,KAAX0Y,EAAuBA,EAAAnS,CAAAmS,CAAK/M,CAAAvK,OAALsX,CAAvBA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,EAAAA,CAAAA,MAAAA,CAAwCA,MAAAA,EAAAA,CAAAA,CAAAA,CAAMnS,CAAAlW,KAAAqoB,CAAQ/M,CAAR+M,CAANA,CAAAA,EAAAA,CAfIA,MAAAA,EAAAA,CAiBxCA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAEA,IAAIpS,CAAJoS,CAASA,KAAMpS,EAAAnF,MAANuX,CAAXA,EAAAA,CAAAA,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAjBwCA,MAAAA,EAAAA,CAa5CA,EAAAA,CAAAA,CAAAA,CAAAA,CAAAA,CAAAA,MAb4CA,MAAAA,CAAAA,CAY7ChS,CAAAA,CAAAA,EAAAA,CAAAA,CAAAA,CAASJ,EAAAoS,CAAMA,CAAEvX,MAAOuF,CAATgS,CAARA,EAAAA,EAAAA,CAAAA,CAAAA,CAAAA,MAZsCA,MAAAA,CAAAA,CAmBpDA,MAAAA,EAAAA,OAAAA,CAAOA,IAAIrC,EAAJqC,CAAU92B,CAAV82B,EAAoBA,IAAIxlC,EAAJwlC,CAAWA,EAAXA,CAApBA,CAAoC/2B,CAApC+2B,CAAPA,CAnBoDA,MAAAA,CAAAA,CA2BxDA,MAAAA,EAAAA,OAAAA,CAAOhC,EAAAgC,EAAPA,CA3BwDA,CAAAA,CAAAA,CAAAA,CAArDA,CADeA,CC+J9BrC,GAAA,WAAA,CDhIIsC,QAAiBA,CAACC,CAADD,CAASA,CACtBA,IAAM/2B,EAAS+2B,IAAIzlC,EAAJylC,CAAWC,CAAA5pC,KAAAqC,SAAXsnC,CAIfA,OAAOA,KAAItC,EAAJsC,CAAUh2B,CAHFi2B,CAAA33B,KAAA03B,WAAuB/qB,GAAvB+qB,CACXC,CAAA33B,KAAA0L,EADWgsB,CAEXA,CAACC,CAADD,CACah2B,KAAAg2B,CAAWA,QAAAA,CAACvqB,CAADuqB,CAAWA,CAAAA,MAAAA,KAAIhkC,EAAJgkC,CAAgB/2B,CAAhB+2B,CAAwBvqB,CAAA/jB,OAAxBsuC,CAAsCvqB,CAAAnN,KAAA8K,UAAtC4sB,CAAAA,CAAtBA,CAAVA,CALeA,CCiI9BtC,GAAA,MAAA,CAAiBK,EACjBxoB;CAAA,OAAA,ChB5LIrH,QAAaA,CAAC1c,CAAD0c,CAAOA,CAChBA,MAAOgN,GAAAhN,CAAa1c,CAAb0c,CADSA,CgB6LxBlS,GAAA,KAAA,CAAsBi+B,EACZvpB,GAAV,IAAA,Cd3HIwvB,QAAUA,CAACtb,CAADsb,CAAOrb,CAAPqb,CAAcA,CAEpBA,MAAOxb,CADIwb,IAAIxvB,EAAJwvB,CAAWA,IAAIhwB,WAAJgwB,CAAgBtb,CAAA9zB,OAAhBovC,CAAXA,CACJxb,MAAAwb,CAAUrb,CAAVqb,CAFaA,Cc4HlBxvB,GAAV,SAAA,CAA+B2V,EACrB/V,GAAV,IAAA,Cd5EI4vB,QAAUA,CAACtb,CAADsb,CAAOrb,CAAPqb,CAAcA,CAEpBA,MAAOxb,CADIwb,IAAI5vB,EAAJ4vB,CAAUA,IAAIhwB,WAAJgwB,CAAgBtb,CAAA9zB,OAAhBovC,CAAVA,CACJxb,MAAAwb,CAAUrb,CAAVqb,CAFaA,Cc6ElB5vB,GAAV,SAAA,CdjFIqU,QAAeA,CAACC,CAADD,CAAOE,CAAPF,CAAcA,CAEzBA,MAAOF,CADIE,IAAIrU,EAAJqU,CAAUA,IAAIzU,WAAJyU,CAAgBC,CAAA9zB,OAAhB6zB,CAAVA,CACJF,OAAAE,CAAWE,CAAXF,CAFkBA,CckFvBrU,GAAV,WAAA,CAAgCygB,EACtBrL,GAAV,IAAA,CdeIwa,QAAUA,CAACtb,CAADsb,CAAOrb,CAAPqb,CAAcA,CAEpBA,MAAOxb,CADIwb,IAAIxa,EAAJwa,CAAWA,IAAIhwB,WAAJgwB,CAAgBtb,CAAA9zB,OAAhBovC,CAAXA,CACJxb,MAAAwb,CAAUrb,CAAVqb,CAFaA,CcdlBxa,GAAV,SAAA,CdUIf,QAAeA,CAACC,CAADD,CAAOE,CAAPF,CAAcA,CAEzBA,MAAOF,CADIE,IAAIe,EAAJf,CAAWA,IAAIzU,WAAJyU,CAAgBC,CAAA9zB,OAAhB6zB,CAAXA,CACJF,OAAAE,CAAWE,CAAXF,CAFkBA,CcTvBe,GAAV,WAAA,CAAiCsL,EAC3Bjd,GAAN,eAAA,CAAsCK,EACtC5C,EAAA,KAAA,CAAqB2uB,CAAA5nC,KACrBiZ;CAAA,KAAA,CAAqBpH,CAAAxc,KACrB4jB,EAAA,IAAA,CAAoBlH,CAAApY,IACpBsf,EAAA,MAAA,CAAsBhH,CAAAC,MACtB+G,EAAA,OAAA,CAAuB7G,CAAAtX,OACvBme,EAAA,KAAA,CAAqB3G,CAAA5X,KACrBue,EAAA,KAAA,CAAqBzG,CAAAhX,KACrByd,EAAA,QAAA,CAAwBvG,CAAA9W,QACxBqd,EAAA,KAAA,CAAqBrG,CAAA1W,KACrB+c,EAAA,KAAA,CAAqBnG,CAAArW,KACrBwc,EAAA,UAAA,CAA0BjG,CAAAnW,UAC1Boc,EAAA,SAAA,CAAyB/F,CAAA3V,SACzB0b,EAAA,KAAA,CAAqB7F,CAAA7c,KACrB0iB,EAAA,OAAA,CAAuB3F,CAAAC,OACvB0F,EAAA,MAAA,CAAsBxF,CAAA7b,MACtBqhB,EAAA,gBAAA,CAAgCtF,CAAAzY,gBAChC+d,EAAA,cAAA,CAA8BpF,CAAAld,cAC9BsiB,EAAA,IAAA,CAAoBlF,CAAA3c,IACpB6hB,EAAA,WAAA,CAA2BhF,CAAAC,WAC3B+E,EAAA,WAAA,CAA2B4uB,CAAAjvB,WAC3BK,EAAA,YAAA,CAA4B6uB,CAAAhvB,YACtBpC,EAAN,OAAA,C1BrJIqxB,QAAaA,CAACtyB,CAADsyB,CAAIA,CAAEA,MAAOtyB,EAAPsyB,EAAYtyB,CAAA7D,EAAZm2B,GAAwB9yC,CAAAI,KAA1B0yC,C0BsJfrxB,EAAN,MAAA,CAA0BohB,EACpBphB,EAAN,QAAA,C1BrJIsxB,QAAcA,CAACvyB,CAADuyB,CAAIA,CAAEA,MAAOvyB,EAAPuyB,EAAYvyB,CAAA7D,EAAZo2B,GAAwB/yC,CAAAid,MAA1B81B,C0BsJhBtxB;CAAN,SAAA,CAA6ByhB,EACvBzhB,EAAN,OAAA,CAA2B6hB,EACrB7hB,EAAN,OAAA,CAA2B4hB,EACrB5hB,EAAN,UAAA,CAA8BuhB,EACxBvhB,EAAN,OAAA,CAA2BshB,EACrBthB,EAAN,OAAA,CAA2BqhB,EACrBrhB,EAAN,YAAA,CAAgCkhB,EAC1BlhB,EAAN,WAAA,C1BrJIuxB,QAAiBA,CAACxyB,CAADwyB,CAAIA,CAAEA,MAAOxyB,EAAPwyB,EAAYxyB,CAAA7D,EAAZq2B,GAAwBhzC,CAAAsI,SAA1B0qC,C0BsJnBvxB,EAAN,OAAA,C1BrJIwxB,QAAaA,CAACzyB,CAADyyB,CAAIA,CAAEA,MAAOzyB,EAAPyyB,EAAYzyB,CAAA7D,EAAZs2B,GAAwBjzC,CAAAsB,KAA1B2xC,C0BsJfxxB,EAAN,SAAA,C1BrJIyxB,QAAeA,CAAC1yB,CAAD0yB,CAAIA,CAAEA,MAAO1yB,EAAP0yB,EAAY1yB,CAAA7D,EAAZu2B,GAAwBlzC,CAAAse,OAA1B40B,C0BsJjBzxB,EAAN,QAAA,C1BrJI0xB,QAAcA,CAAC3yB,CAAD2yB,CAAIA,CAAEA,MAAO3yB,EAAP2yB,EAAY3yB,CAAA7D,EAAZw2B,GAAwBnzC,CAAA2C,MAA1BwwC,C0BsJhB1xB,EAAN,aAAA,C1BrJI2xB,QAAmBA,CAAC5yB,CAAD4yB,CAAIA,CAAEA,MAAO5yB,EAAP4yB,EAAY5yB,CAAA7D,EAAZy2B,GAAwBpzC,CAAA2jB,WAA1ByvB,C0BsJrB3xB,EAAN,cAAA,C1BrJI4xB,QAAoBA,CAAC7yB,CAAD6yB,CAAIA,CAAEA,MAAO7yB,EAAP6yB,EAAY7yB,CAAA7D,EAAZ02B,GAAwBrzC,CAAA6jB,YAA1BwvB,C0BsJtB5xB,EAAN,kBAAA,CAAsC0hB,EAChC1hB,EAAN,gBAAA,C1BrJI6xB,QAAsBA,CAAC9yB,CAAD8yB,CAAIA,CAAEA,MAAO9yB,EAAP8yB,EAAY9yB,CAAA7D,EAAZ22B,GAAwBtzC,CAAA0B,cAA1B4xC,C0BsJxB7xB;CAAN,MAAA,C1BrJI8xB,QAAYA,CAAC/yB,CAAD+yB,CAAIA,CAAEA,MAAO/yB,EAAP+yB,EAAY/yB,CAAA7D,EAAZ42B,GAAwBvzC,CAAAmC,IAA1BoxC,C0BsJd9xB,EAAN,aAAA,CAAiCD,EACzBsR,GAAR,KAAA,ChBvGI1S,QAAWA,CAACpc,CAADoc,CAAOA,CACdA,MAAOA,KAAI0S,EAAJ1S,CAAeA,IAAIiF,EAAJjF,CAAaA,IAAI7Z,EAAjB6Z,CAAyBpc,CAAAE,OAAzBkc,CAAsCA,IAAtCA,CAA4CzG,EAAAyG,CAAUpc,CAAVoc,CAA5CA,CAAfA,CADOA,CgBwGdiS,GAAR,KAAA,CAA4Bmf,EACpBve,GAAR,KAAA,ChBrEI7S,QAAWA,CAACpc,CAADoc,CAAOA,CACdA,OAAQpc,CAAA7D,YAARigB,EACIA,KAAK/O,WAAL+O,CAAkBA,MAAOA,KAAI6S,EAAJ7S,CAAgBA,IAAIgF,CAAJhF,CAAaA,IAAIiD,EAAjBjD,CAA4Bpc,CAAAE,OAA5Bkc,CAAyCA,IAAzCA,CAA+Cpc,CAA/Coc,CAAhBA,CACzBA,MAAKlP,YAALkP,CAAmBA,MAAOA,KAAI6S,EAAJ7S,CAAgBA,IAAIgF,CAAJhF,CAAaA,IAAIkD,EAAjBlD,CAA4Bpc,CAAAE,OAA5Bkc,CAAyCA,IAAzCA,CAA+Cpc,CAA/Coc,CAAhBA,CAC1BA,MAAKhP,YAALgP,CAAmBA,MAAOA,KAAI6S,EAAJ7S,CAAgBA,IAAIgF,CAAJhF,CAAaA,IAAImD,EAAjBnD,CAA4Bpc,CAAAE,OAA5Bkc,CAAyCA,IAAzCA,CAA+Cpc,CAA/Coc,CAAhBA,CAH9BA,CAKAA,KAAMA,KAAI2J,SAAJ3J,CAAcA,yBAAdA,CAANA,CANcA,CgBsEbjE,GAAT,gBAAA,CAA0CiG,EACjCjD,GAAT,gBAAA,CAA4C2S","file":"Arrow.js","sourcesContent":["/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * @enum\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let VectorType;\n                (function (VectorType) {\n                    /**\n                     * used in List type, Dense Union and variable length primitive types (String, Binary)\n                     */\n                    VectorType[VectorType[\"OFFSET\"] = 0] = \"OFFSET\";\n                    /**\n                     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n                     */\n                    VectorType[VectorType[\"DATA\"] = 1] = \"DATA\";\n                    /**\n                     * Bit vector indicating if each value is null\n                     */\n                    VectorType[VectorType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n                    /**\n                     * Type vector used in Union type\n                     */\n                    VectorType[VectorType[\"TYPE\"] = 3] = \"TYPE\";\n                })(VectorType = flatbuf.VectorType || (flatbuf.VectorType = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Null}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Null=} obj\n                     * @returns {Null}\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Struct_}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Struct_=} obj\n                     * @returns {Struct_}\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {List}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {List=} obj\n                     * @returns {List}\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeList}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeList=} obj\n                     * @returns {FixedSizeList}\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns {number}\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Map}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Map=} obj\n                     * @returns {Map}\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns {boolean}\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Union}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Union=} obj\n                     * @returns {Union}\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.UnionMode}\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param {number} index\n                     * @returns {number}\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {Int32Array}\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<number>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Int}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Int=} obj\n                     * @returns {Int}\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FloatingPoint}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FloatingPoint=} obj\n                     * @returns {FloatingPoint}\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Precision}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Precision} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Utf8}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Utf8=} obj\n                     * @returns {Utf8}\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Binary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Binary=} obj\n                     * @returns {Binary}\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeBinary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeBinary=} obj\n                     * @returns {FixedSizeBinary}\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns {number}\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Bool}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Bool=} obj\n                     * @returns {Bool}\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Decimal}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Decimal=} obj\n                     * @returns {Decimal}\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns {number}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns {number}\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Date}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Date=} obj\n                     * @returns {Date}\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.DateUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Time}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Time=} obj\n                     * @returns {Time}\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Timestamp}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Timestamp=} obj\n                     * @returns {Timestamp}\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Interval}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Interval=} obj\n                     * @returns {Interval}\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class VectorLayout {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {VectorLayout}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {VectorLayout=} obj\n                     * @returns {VectorLayout}\n                     */\n                    static getRootAsVectorLayout(bb, obj) {\n                        return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n                     *\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * the purpose of the vector\n                     *\n                     * @returns {org.apache.arrow.flatbuf.VectorType}\n                     */\n                    type() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startVectorLayout(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt16(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.VectorType} type\n                     */\n                    static addType(builder, type) {\n                        builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endVectorLayout(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.VectorLayout = VectorLayout;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {KeyValue}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {KeyValue=} obj\n                     * @returns {KeyValue}\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryEncoding}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryEncoding=} obj\n                     * @returns {DictionaryEncoding}\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param {org.apache.arrow.flatbuf.Int=} obj\n                     * @returns {org.apache.arrow.flatbuf.Int|null}\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns {boolean}\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Field}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Field=} obj\n                     * @returns {Field}\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Type}\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n                     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * layout of buffers produced for this type (as derived from the Type)\n                     * does not include children\n                     * each recordbatch will return instances of those Buffers.\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n                     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n                     */\n                    layout(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    layoutLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Type} typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} layoutOffset\n                     */\n                    static addLayout(builder, layoutOffset) {\n                        builder.addFieldOffset(6, layoutOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createLayoutVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startLayoutVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(7, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Buffer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {flatbuffers.Long} length\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Schema}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Schema=} obj\n                     * @returns {Schema}\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns {org.apache.arrow.flatbuf.Endianness}\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n",null,null,null,null,null,null,null,null,null,null,"/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { RecordBatch } from '../../recordbatch';\nimport { VectorVisitor, TypeVisitor } from '../../visitor';\nimport { MAGIC, magicLength, magicAndPadding, PADDING } from '../magic';\nimport { align, getBool, packBools, iterateBits } from '../../util/bit';\nimport { BufferMetadata, FieldMetadata, Footer, FileBlock, Message, RecordBatchMetadata, DictionaryBatch } from '../metadata';\nimport { MetadataVersion, DataType, UnionMode, } from '../../type';\nexport function* serializeStream(table) {\n    yield serializeMessage(table.schema).buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name);\n        if (vec && vec.dictionary) {\n            yield serializeDictionaryBatch(vec.dictionary, id).buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        yield serializeRecordBatch(recordBatch).buffer;\n    }\n}\nexport function* serializeFile(table) {\n    const recordBatches = [];\n    const dictionaryBatches = [];\n    // First yield the magic string (aligned)\n    let buffer = new Uint8Array(align(magicLength, 8));\n    let metadataLength, byteLength = buffer.byteLength;\n    buffer.set(MAGIC, 0);\n    yield buffer;\n    // Then yield the schema\n    ({ metadataLength, buffer } = serializeMessage(table.schema));\n    byteLength += buffer.byteLength;\n    yield buffer;\n    for (const [id, field] of table.schema.dictionaries) {\n        const vec = table.getColumn(field.name);\n        if (vec && vec.dictionary) {\n            ({ metadataLength, buffer } = serializeDictionaryBatch(vec.dictionary, id));\n            dictionaryBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n            byteLength += buffer.byteLength;\n            yield buffer;\n        }\n    }\n    for (const recordBatch of table.batches) {\n        ({ metadataLength, buffer } = serializeRecordBatch(recordBatch));\n        recordBatches.push(new FileBlock(metadataLength, buffer.byteLength, byteLength));\n        byteLength += buffer.byteLength;\n        yield buffer;\n    }\n    // Then yield the footer metadata (not aligned)\n    ({ metadataLength, buffer } = serializeFooter(new Footer(dictionaryBatches, recordBatches, table.schema)));\n    yield buffer;\n    // Last, yield the footer length + terminating magic arrow string (aligned)\n    buffer = new Uint8Array(magicAndPadding);\n    new DataView(buffer.buffer).setInt32(0, metadataLength, platformIsLittleEndian);\n    buffer.set(MAGIC, buffer.byteLength - magicLength);\n    yield buffer;\n}\nexport function serializeRecordBatch(recordBatch) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(recordBatch);\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, recordBatch.length, fieldNodes, buffersMeta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(rbMeta, rbData);\n}\nexport function serializeDictionaryBatch(dictionary, id, isDelta = false) {\n    const { byteLength, fieldNodes, buffers, buffersMeta } = new RecordBatchSerializer().visitRecordBatch(RecordBatch.from([dictionary]));\n    const rbMeta = new RecordBatchMetadata(MetadataVersion.V4, dictionary.length, fieldNodes, buffersMeta);\n    const dbMeta = new DictionaryBatch(MetadataVersion.V4, rbMeta, id, isDelta);\n    const rbData = concatBuffersWithMetadata(byteLength, buffers, buffersMeta);\n    return serializeMessage(dbMeta, rbData);\n}\nexport function serializeMessage(message, data) {\n    const b = new Builder();\n    _Message.finishMessageBuffer(b, writeMessage(b, message));\n    // Slice out the buffer that contains the message metadata\n    const metadataBytes = b.asUint8Array();\n    // Reserve 4 bytes for writing the message size at the front.\n    // Metadata length includes the metadata byteLength + the 4\n    // bytes for the length, and rounded up to the nearest 8 bytes.\n    const metadataLength = align(PADDING + metadataBytes.byteLength, 8);\n    // + the length of the optional data buffer at the end, padded\n    const dataByteLength = data ? data.byteLength : 0;\n    // ensure the entire message is aligned to an 8-byte boundary\n    const messageBytes = new Uint8Array(align(metadataLength + dataByteLength, 8));\n    // Write the metadata length into the first 4 bytes, but subtract the\n    // bytes we use to hold the length itself.\n    new DataView(messageBytes.buffer).setInt32(0, metadataLength - PADDING, platformIsLittleEndian);\n    // Copy the metadata bytes into the message buffer\n    messageBytes.set(metadataBytes, PADDING);\n    // Copy the optional data buffer after the metadata bytes\n    (data && dataByteLength > 0) && messageBytes.set(data, metadataLength);\n    // if (messageBytes.byteLength % 8 !== 0) { debugger; }\n    // Return the metadata length because we need to write it into each FileBlock also\n    return { metadataLength, buffer: messageBytes };\n}\nexport function serializeFooter(footer) {\n    const b = new Builder();\n    _Footer.finishFooterBuffer(b, writeFooter(b, footer));\n    // Slice out the buffer that contains the footer metadata\n    const footerBytes = b.asUint8Array();\n    const metadataLength = footerBytes.byteLength;\n    return { metadataLength, buffer: footerBytes };\n}\nexport class RecordBatchSerializer extends VectorVisitor {\n    constructor() {\n        super(...arguments);\n        this.byteLength = 0;\n        this.buffers = [];\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n    }\n    visitRecordBatch(recordBatch) {\n        this.buffers = [];\n        this.byteLength = 0;\n        this.fieldNodes = [];\n        this.buffersMeta = [];\n        for (let vector, index = -1, numCols = recordBatch.numCols; ++index < numCols;) {\n            if (vector = recordBatch.getChildAt(index)) {\n                this.visit(vector);\n            }\n        }\n        return this;\n    }\n    visit(vector) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            this.fieldNodes.push(new FieldMetadata(length, nullCount));\n            this.addBuffer(nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : this.getTruncatedBitmap(data.offset, length, data.nullBitmap));\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullz) { return this; }\n    visitBool(vector) { return this.visitBoolVector(vector); }\n    visitInt(vector) { return this.visitFlatVector(vector); }\n    visitFloat(vector) { return this.visitFlatVector(vector); }\n    visitUtf8(vector) { return this.visitFlatListVector(vector); }\n    visitBinary(vector) { return this.visitFlatListVector(vector); }\n    visitDate(vector) { return this.visitFlatVector(vector); }\n    visitTimestamp(vector) { return this.visitFlatVector(vector); }\n    visitTime(vector) { return this.visitFlatVector(vector); }\n    visitDecimal(vector) { return this.visitFlatVector(vector); }\n    visitInterval(vector) { return this.visitFlatVector(vector); }\n    visitList(vector) { return this.visitListVector(vector); }\n    visitStruct(vector) { return this.visitNestedVector(vector); }\n    visitFixedSizeBinary(vector) { return this.visitFlatVector(vector); }\n    visitFixedSizeList(vector) { return this.visitListVector(vector); }\n    visitMap(vector) { return this.visitNestedVector(vector); }\n    visitDictionary(vector) {\n        // Dictionary written out separately. Slice offset contained in the indices\n        return this.visit(vector.indices);\n    }\n    visitUnion(vector) {\n        const { data, type, length } = vector;\n        const { offset: sliceOffset, typeIds } = data;\n        // All Union Vectors have a typeIds buffer\n        this.addBuffer(typeIds);\n        // If this is a Sparse Union, treat it like all other Nested types\n        if (type.mode === UnionMode.Sparse) {\n            return this.visitNestedVector(vector);\n        }\n        else if (type.mode === UnionMode.Dense) {\n            // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n            const valueOffsets = data.valueOffsets;\n            if (sliceOffset <= 0) {\n                // If the Vector hasn't been sliced, write the existing valueOffsets\n                this.addBuffer(valueOffsets);\n                // We can treat this like all other Nested types\n                return this.visitNestedVector(vector);\n            }\n            else {\n                // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n                // each child vector, we need to \"rebase\" the valueOffsets for each child\n                // Union typeIds are not necessary 0-indexed\n                const maxChildTypeId = Math.max(...type.typeIds);\n                const childLengths = new Int32Array(maxChildTypeId + 1);\n                // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n                const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n                const shiftedOffsets = new Int32Array(length);\n                const unshiftedOffsets = this.getZeroBasedValueOffsets(sliceOffset, length, valueOffsets);\n                for (let typeId, shift, index = -1; ++index < length;) {\n                    typeId = typeIds[index];\n                    // ~(-1) used to be faster than x === -1, so maybe worth benchmarking the difference of these two impls for large dense unions:\n                    // ~(shift = childOffsets[typeId]) || (shift = childOffsets[typeId] = unshiftedOffsets[index]);\n                    // Going with this form for now, as it's more readable\n                    if ((shift = childOffsets[typeId]) === -1) {\n                        shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                    }\n                    shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                    ++childLengths[typeId];\n                }\n                this.addBuffer(shiftedOffsets);\n                // Slice and visit children accordingly\n                for (let childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                    const typeId = type.typeIds[childIndex];\n                    const child = vector.getChildAt(childIndex);\n                    this.visit(child.slice(childOffsets[typeId], Math.min(length, childLengths[typeId])));\n                }\n            }\n        }\n        return this;\n    }\n    visitBoolVector(vector) {\n        // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n        let bitmap;\n        let values, { data, length } = vector;\n        if (vector.nullCount >= length) {\n            // If all values are null, just insert a placeholder empty data buffer (fastest path)\n            bitmap = new Uint8Array(0);\n        }\n        else if (!((values = data.values) instanceof Uint8Array)) {\n            // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n            // the values as bools and re-pack them into a Uint8Array (slow path)\n            bitmap = packBools(vector);\n        }\n        else {\n            // otherwise just slice the bitmap (fast path)\n            bitmap = this.getTruncatedBitmap(data.offset, length, values);\n        }\n        return this.addBuffer(bitmap);\n    }\n    visitFlatVector(vector) {\n        const { view, data } = vector;\n        const { offset, length, values } = data;\n        const scaledLength = length * (view.size || 1);\n        return this.addBuffer(values.subarray(offset, scaledLength));\n    }\n    visitFlatListVector(vector) {\n        const { data, length } = vector;\n        const { offset, values, valueOffsets } = data;\n        const firstOffset = valueOffsets[0];\n        const lastOffset = valueOffsets[length];\n        const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n        // Push in the order FlatList types read their buffers\n        // valueOffsets buffer first\n        this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        // sliced values buffer second\n        this.addBuffer(values.subarray(firstOffset + offset, firstOffset + offset + byteLength));\n        return this;\n    }\n    visitListVector(vector) {\n        const { data, length } = vector;\n        const { offset, valueOffsets } = data;\n        // If we have valueOffsets (ListVector), push that buffer first\n        if (valueOffsets) {\n            this.addBuffer(this.getZeroBasedValueOffsets(offset, length, valueOffsets));\n        }\n        // Then insert the List's values child\n        return this.visit(vector.getChildAt(0));\n    }\n    visitNestedVector(vector) {\n        // Visit the children accordingly\n        const numChildren = (vector.type.children || []).length;\n        for (let child, childIndex = -1; ++childIndex < numChildren;) {\n            if (child = vector.getChildAt(childIndex)) {\n                this.visit(child);\n            }\n        }\n        return this;\n    }\n    addBuffer(values) {\n        const byteLength = align(values.byteLength, 8);\n        this.buffers.push(values);\n        this.buffersMeta.push(new BufferMetadata(this.byteLength, byteLength));\n        this.byteLength += byteLength;\n        return this;\n    }\n    getTruncatedBitmap(offset, length, bitmap) {\n        const alignedLength = align(bitmap.byteLength, 8);\n        if (offset > 0 || bitmap.byteLength < alignedLength) {\n            // With a sliced array / non-zero offset, we have to copy the bitmap\n            const bytes = new Uint8Array(alignedLength);\n            bytes.set((offset % 8 === 0)\n                // If the slice offset is aligned to 1 byte, it's safe to slice the nullBitmap directly\n                ? bitmap.subarray(offset >> 3)\n                // iterate each bit starting from the slice offset, and repack into an aligned nullBitmap\n                : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n            return bytes;\n        }\n        return bitmap;\n    }\n    getZeroBasedValueOffsets(offset, length, valueOffsets) {\n        // If we have a non-zero offset, then the value offsets do not start at\n        // zero. We must a) create a new offsets array with shifted offsets and\n        // b) slice the values array accordingly\n        if (offset > 0 || valueOffsets[0] !== 0) {\n            const startOffset = valueOffsets[0];\n            const destOffsets = new Int32Array(length + 1);\n            for (let index = -1; ++index < length;) {\n                destOffsets[index] = valueOffsets[index] - startOffset;\n            }\n            // Final offset\n            destOffsets[length] = valueOffsets[length] - startOffset;\n            return destOffsets;\n        }\n        return valueOffsets;\n    }\n}\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nvar _DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar _Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar _Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar _Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar _List = Schema_.org.apache.arrow.flatbuf.List;\nvar _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar _Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar _Map = Schema_.org.apache.arrow.flatbuf.Map;\nexport class TypeSerializer extends TypeVisitor {\n    constructor(builder) {\n        super();\n        this.builder = builder;\n    }\n    visitNull(_node) {\n        const b = this.builder;\n        return (_Null.startNull(b) ||\n            _Null.endNull(b));\n    }\n    visitInt(node) {\n        const b = this.builder;\n        return (_Int.startInt(b) ||\n            _Int.addBitWidth(b, node.bitWidth) ||\n            _Int.addIsSigned(b, node.isSigned) ||\n            _Int.endInt(b));\n    }\n    visitFloat(node) {\n        const b = this.builder;\n        return (_FloatingPoint.startFloatingPoint(b) ||\n            _FloatingPoint.addPrecision(b, node.precision) ||\n            _FloatingPoint.endFloatingPoint(b));\n    }\n    visitBinary(_node) {\n        const b = this.builder;\n        return (_Binary.startBinary(b) ||\n            _Binary.endBinary(b));\n    }\n    visitBool(_node) {\n        const b = this.builder;\n        return (_Bool.startBool(b) ||\n            _Bool.endBool(b));\n    }\n    visitUtf8(_node) {\n        const b = this.builder;\n        return (_Utf8.startUtf8(b) ||\n            _Utf8.endUtf8(b));\n    }\n    visitDecimal(node) {\n        const b = this.builder;\n        return (_Decimal.startDecimal(b) ||\n            _Decimal.addScale(b, node.scale) ||\n            _Decimal.addPrecision(b, node.precision) ||\n            _Decimal.endDecimal(b));\n    }\n    visitDate(node) {\n        const b = this.builder;\n        return _Date.startDate(b) || _Date.addUnit(b, node.unit) || _Date.endDate(b);\n    }\n    visitTime(node) {\n        const b = this.builder;\n        return (_Time.startTime(b) ||\n            _Time.addUnit(b, node.unit) ||\n            _Time.addBitWidth(b, node.bitWidth) ||\n            _Time.endTime(b));\n    }\n    visitTimestamp(node) {\n        const b = this.builder;\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        return (_Timestamp.startTimestamp(b) ||\n            _Timestamp.addUnit(b, node.unit) ||\n            (timezone !== undefined && _Timestamp.addTimezone(b, timezone)) ||\n            _Timestamp.endTimestamp(b));\n    }\n    visitInterval(node) {\n        const b = this.builder;\n        return (_Interval.startInterval(b) || _Interval.addUnit(b, node.unit) || _Interval.endInterval(b));\n    }\n    visitList(_node) {\n        const b = this.builder;\n        return (_List.startList(b) ||\n            _List.endList(b));\n    }\n    visitStruct(_node) {\n        const b = this.builder;\n        return (_Struct.startStruct_(b) ||\n            _Struct.endStruct_(b));\n    }\n    visitUnion(node) {\n        const b = this.builder;\n        const typeIds = _Union.startTypeIdsVector(b, node.typeIds.length) ||\n            _Union.createTypeIdsVector(b, node.typeIds);\n        return (_Union.startUnion(b) ||\n            _Union.addMode(b, node.mode) ||\n            _Union.addTypeIds(b, typeIds) ||\n            _Union.endUnion(b));\n    }\n    visitDictionary(node) {\n        const b = this.builder;\n        const indexType = this.visit(node.indices);\n        return (_DictionaryEncoding.startDictionaryEncoding(b) ||\n            _DictionaryEncoding.addId(b, new Long(node.id, 0)) ||\n            _DictionaryEncoding.addIsOrdered(b, node.isOrdered) ||\n            (indexType !== undefined && _DictionaryEncoding.addIndexType(b, indexType)) ||\n            _DictionaryEncoding.endDictionaryEncoding(b));\n    }\n    visitFixedSizeBinary(node) {\n        const b = this.builder;\n        return (_FixedSizeBinary.startFixedSizeBinary(b) ||\n            _FixedSizeBinary.addByteWidth(b, node.byteWidth) ||\n            _FixedSizeBinary.endFixedSizeBinary(b));\n    }\n    visitFixedSizeList(node) {\n        const b = this.builder;\n        return (_FixedSizeList.startFixedSizeList(b) ||\n            _FixedSizeList.addListSize(b, node.listSize) ||\n            _FixedSizeList.endFixedSizeList(b));\n    }\n    visitMap(node) {\n        const b = this.builder;\n        return (_Map.startMap(b) ||\n            _Map.addKeysSorted(b, node.keysSorted) ||\n            _Map.endMap(b));\n    }\n}\nfunction concatBuffersWithMetadata(totalByteLength, buffers, buffersMeta) {\n    const data = new Uint8Array(totalByteLength);\n    for (let i = -1, n = buffers.length; ++i < n;) {\n        const { offset, length } = buffersMeta[i];\n        const { buffer, byteOffset, byteLength } = buffers[i];\n        const realBufferLength = Math.min(length, byteLength);\n        if (realBufferLength > 0) {\n            data.set(new Uint8Array(buffer, byteOffset, realBufferLength), offset);\n        }\n    }\n    return data;\n}\nfunction writeFooter(b, node) {\n    let schemaOffset = writeSchema(b, node.schema);\n    let recordBatches = (node.recordBatches || []);\n    let dictionaryBatches = (node.dictionaryBatches || []);\n    let recordBatchesOffset = _Footer.startRecordBatchesVector(b, recordBatches.length) ||\n        mapReverse(recordBatches, (rb) => writeBlock(b, rb)) &&\n            b.endVector();\n    let dictionaryBatchesOffset = _Footer.startDictionariesVector(b, dictionaryBatches.length) ||\n        mapReverse(dictionaryBatches, (db) => writeBlock(b, db)) &&\n            b.endVector();\n    return (_Footer.startFooter(b) ||\n        _Footer.addSchema(b, schemaOffset) ||\n        _Footer.addVersion(b, node.schema.version) ||\n        _Footer.addRecordBatches(b, recordBatchesOffset) ||\n        _Footer.addDictionaries(b, dictionaryBatchesOffset) ||\n        _Footer.endFooter(b));\n}\nfunction writeBlock(b, node) {\n    return _Block.createBlock(b, new Long(node.offset, 0), node.metaDataLength, new Long(node.bodyLength, 0));\n}\nfunction writeMessage(b, node) {\n    let messageHeaderOffset = 0;\n    if (Message.isSchema(node)) {\n        messageHeaderOffset = writeSchema(b, node);\n    }\n    else if (Message.isRecordBatch(node)) {\n        messageHeaderOffset = writeRecordBatch(b, node);\n    }\n    else if (Message.isDictionaryBatch(node)) {\n        messageHeaderOffset = writeDictionaryBatch(b, node);\n    }\n    return (_Message.startMessage(b) ||\n        _Message.addVersion(b, node.version) ||\n        _Message.addHeader(b, messageHeaderOffset) ||\n        _Message.addHeaderType(b, node.headerType) ||\n        _Message.addBodyLength(b, new Long(node.bodyLength, 0)) ||\n        _Message.endMessage(b));\n}\nfunction writeSchema(b, node) {\n    const fieldOffsets = node.fields.map((f) => writeField(b, f));\n    const fieldsOffset = _Schema.startFieldsVector(b, fieldOffsets.length) ||\n        _Schema.createFieldsVector(b, fieldOffsets);\n    let metadata = undefined;\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Schema.createCustomMetadataVector(b, [...node.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            return (_KeyValue.startKeyValue(b) ||\n                _KeyValue.addKey(b, key) ||\n                _KeyValue.addValue(b, val) ||\n                _KeyValue.endKeyValue(b));\n        }));\n    }\n    return (_Schema.startSchema(b) ||\n        _Schema.addFields(b, fieldsOffset) ||\n        _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big) ||\n        (metadata !== undefined && _Schema.addCustomMetadata(b, metadata)) ||\n        _Schema.endSchema(b));\n}\nfunction writeRecordBatch(b, node) {\n    let nodes = (node.nodes || []);\n    let buffers = (node.buffers || []);\n    let nodesOffset = _RecordBatch.startNodesVector(b, nodes.length) ||\n        mapReverse(nodes, (n) => writeFieldNode(b, n)) &&\n            b.endVector();\n    let buffersOffset = _RecordBatch.startBuffersVector(b, buffers.length) ||\n        mapReverse(buffers, (b_) => writeBuffer(b, b_)) &&\n            b.endVector();\n    return (_RecordBatch.startRecordBatch(b) ||\n        _RecordBatch.addLength(b, new Long(node.length, 0)) ||\n        _RecordBatch.addNodes(b, nodesOffset) ||\n        _RecordBatch.addBuffers(b, buffersOffset) ||\n        _RecordBatch.endRecordBatch(b));\n}\nfunction writeDictionaryBatch(b, node) {\n    const dataOffset = writeRecordBatch(b, node.data);\n    return (_DictionaryBatch.startDictionaryBatch(b) ||\n        _DictionaryBatch.addId(b, new Long(node.id, 0)) ||\n        _DictionaryBatch.addIsDelta(b, node.isDelta) ||\n        _DictionaryBatch.addData(b, dataOffset) ||\n        _DictionaryBatch.endDictionaryBatch(b));\n}\nfunction writeBuffer(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\nfunction writeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\nfunction writeField(b, node) {\n    let typeOffset = -1;\n    let type = node.type;\n    let typeId = node.typeId;\n    let name = undefined;\n    let metadata = undefined;\n    let dictionary = undefined;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = new TypeSerializer(b).visit(type);\n    }\n    else {\n        typeId = type.dictionary.TType;\n        dictionary = new TypeSerializer(b).visit(type);\n        typeOffset = new TypeSerializer(b).visit(type.dictionary);\n    }\n    let children = _Field.createChildrenVector(b, (type.children || []).map((f) => writeField(b, f)));\n    if (node.metadata && node.metadata.size > 0) {\n        metadata = _Field.createCustomMetadataVector(b, [...node.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            return (_KeyValue.startKeyValue(b) ||\n                _KeyValue.addKey(b, key) ||\n                _KeyValue.addValue(b, val) ||\n                _KeyValue.endKeyValue(b));\n        }));\n    }\n    if (node.name) {\n        name = b.createString(node.name);\n    }\n    return (_Field.startField(b) ||\n        _Field.addType(b, typeOffset) ||\n        _Field.addTypeType(b, typeId) ||\n        _Field.addChildren(b, children) ||\n        _Field.addNullable(b, !!node.nullable) ||\n        (name !== undefined && _Field.addName(b, name)) ||\n        (dictionary !== undefined && _Field.addDictionary(b, dictionary)) ||\n        (metadata !== undefined && _Field.addCustomMetadata(b, metadata)) ||\n        _Field.endField(b));\n}\nfunction mapReverse(source, callbackfn) {\n    const result = new Array(source.length);\n    for (let i = -1, j = source.length; --j > -1;) {\n        result[i] = callbackfn(source[j], i, source);\n    }\n    return result;\n}\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FieldNode}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     * @param {flatbuffers.Long} null_count\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {RecordBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {RecordBatch=} obj\n                     * @returns {RecordBatch}\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n                     * @returns {org.apache.arrow.flatbuf.FieldNode}\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n                     * @returns {org.apache.arrow.flatbuf.Buffer}\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryBatch=} obj\n                     * @returns {DictionaryBatch}\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns {boolean}\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Message}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Message=} obj\n                     * @returns {Message}\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport function align(value, alignment) {\n    return value + padding(value, alignment);\n}\nexport function padding(value, alignment) {\n    return (value % alignment === 0 ? 0 : alignment - value % alignment);\n}\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\nexport function packBools(values) {\n    let n = 0, i = 0;\n    let xs = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do {\n            xs[i] = 0;\n        } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\nexport function* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\nexport function popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* tslint:disable:class-name */\nimport { align } from '../util/bit';\nimport { MessageHeader } from '../type';\nexport class Footer {\n    constructor(dictionaryBatches, recordBatches, schema) {\n        this.dictionaryBatches = dictionaryBatches;\n        this.recordBatches = recordBatches;\n        this.schema = schema;\n    }\n}\nexport class FileBlock {\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\nexport class Message {\n    constructor(version, bodyLength, headerType) {\n        this.version = version;\n        this.headerType = headerType;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    static isSchema(m) { return m.headerType === MessageHeader.Schema; }\n    static isRecordBatch(m) { return m.headerType === MessageHeader.RecordBatch; }\n    static isDictionaryBatch(m) { return m.headerType === MessageHeader.DictionaryBatch; }\n}\nexport class RecordBatchMetadata extends Message {\n    constructor(version, length, nodes, buffers, bodyLength) {\n        if (bodyLength === void (0)) {\n            bodyLength = buffers.reduce((s, b) => align(s + b.length + (b.offset - s), 8), 0);\n        }\n        super(version, bodyLength, MessageHeader.RecordBatch);\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\nexport class DictionaryBatch extends Message {\n    constructor(version, data, id, isDelta = false) {\n        super(version, data.bodyLength, MessageHeader.DictionaryBatch);\n        this.isDelta = isDelta;\n        this.data = data;\n        this.id = typeof id === 'number' ? id : id.low;\n    }\n    static getId() { return DictionaryBatch.atomicDictionaryId++; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n}\nDictionaryBatch.atomicDictionaryId = 0;\nexport class BufferMetadata {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\nexport class FieldMetadata {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from './type';\nexport class TypeVisitor {\n    visit(type) {\n        return type.acceptTypeVisitor && type.acceptTypeVisitor(this) || null;\n    }\n    visitMany(types) {\n        return types.map((type) => this.visit(type));\n    }\n    static visitTypeInline(visitor, type) {\n        switch (type.TType) {\n            case Type.Null: return visitor.visitNull && visitor.visitNull(type);\n            case Type.Int: return visitor.visitInt && visitor.visitInt(type);\n            case Type.Float: return visitor.visitFloat && visitor.visitFloat(type);\n            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(type);\n            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(type);\n            case Type.Bool: return visitor.visitBool && visitor.visitBool(type);\n            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(type);\n            case Type.Date: return visitor.visitDate && visitor.visitDate(type);\n            case Type.Time: return visitor.visitTime && visitor.visitTime(type);\n            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(type);\n            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(type);\n            case Type.List: return visitor.visitList && visitor.visitList(type);\n            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(type);\n            case Type.Union: return visitor.visitUnion && visitor.visitUnion(type);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(type);\n            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(type);\n            case Type.Map: return visitor.visitMap && visitor.visitMap(type);\n            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(type);\n            default: return null;\n        }\n    }\n}\nexport class VectorVisitor {\n    visit(vector) {\n        return vector.acceptVectorVisitor && vector.acceptVectorVisitor(this) || null;\n    }\n    visitMany(vectors) {\n        return vectors.map((vector) => this.visit(vector));\n    }\n    static visitTypeInline(visitor, type, vector) {\n        switch (type.TType) {\n            case Type.Null: return visitor.visitNull && visitor.visitNull(vector);\n            case Type.Int: return visitor.visitInt && visitor.visitInt(vector);\n            case Type.Float: return visitor.visitFloat && visitor.visitFloat(vector);\n            case Type.Binary: return visitor.visitBinary && visitor.visitBinary(vector);\n            case Type.Utf8: return visitor.visitUtf8 && visitor.visitUtf8(vector);\n            case Type.Bool: return visitor.visitBool && visitor.visitBool(vector);\n            case Type.Decimal: return visitor.visitDecimal && visitor.visitDecimal(vector);\n            case Type.Date: return visitor.visitDate && visitor.visitDate(vector);\n            case Type.Time: return visitor.visitTime && visitor.visitTime(vector);\n            case Type.Timestamp: return visitor.visitTimestamp && visitor.visitTimestamp(vector);\n            case Type.Interval: return visitor.visitInterval && visitor.visitInterval(vector);\n            case Type.List: return visitor.visitList && visitor.visitList(vector);\n            case Type.Struct: return visitor.visitStruct && visitor.visitStruct(vector);\n            case Type.Union: return visitor.visitUnion && visitor.visitUnion(vector);\n            case Type.FixedSizeBinary: return visitor.visitFixedSizeBinary && visitor.visitFixedSizeBinary(vector);\n            case Type.FixedSizeList: return visitor.visitFixedSizeList && visitor.visitFixedSizeList(vector);\n            case Type.Map: return visitor.visitMap && visitor.visitMap(vector);\n            case Type.Dictionary: return visitor.visitDictionary && visitor.visitDictionary(vector);\n            default: return null;\n        }\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nimport { flatbuffers } from 'flatbuffers';\nimport { DictionaryBatch } from './ipc/metadata';\nimport { TypeVisitor } from './visitor';\nexport var Long = flatbuffers.Long;\nexport var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport var Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nexport class Schema {\n    constructor(fields, metadata, version = MetadataVersion.V4, dictionaries = new Map()) {\n        this.fields = fields;\n        this.version = version;\n        this.metadata = metadata;\n        this.dictionaries = dictionaries;\n    }\n    static from(vectors) {\n        return new Schema(vectors.map((v, i) => new Field('' + i, v.type)));\n    }\n    get bodyLength() { return this._bodyLength; }\n    get headerType() { return this._headerType; }\n    select(...fieldNames) {\n        const namesToKeep = fieldNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        const newDictFields = new Map(), newFields = this.fields.filter((f) => namesToKeep[f.name]);\n        this.dictionaries.forEach((f, dictId) => (namesToKeep[f.name]) && newDictFields.set(dictId, f));\n        return new Schema(newFields, this.metadata, this.version, newDictFields);\n    }\n}\nSchema[Symbol.toStringTag] = ((prototype) => {\n    prototype._bodyLength = 0;\n    prototype._headerType = MessageHeader.Schema;\n    return 'Schema';\n})(Schema.prototype);\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this.name = name;\n        this.type = type;\n        this.nullable = nullable;\n        this.metadata = metadata;\n    }\n    toString() { return `${this.name}: ${this.type}`; }\n    get typeId() { return this.type.TType; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    get indices() {\n        return DataType.isDictionary(this.type) ? this.type.indices : this.type;\n    }\n}\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    Type[\"Dictionary\"] = \"Dictionary\";\n    Type[\"DenseUnion\"] = \"DenseUnion\";\n    Type[\"SparseUnion\"] = \"SparseUnion\";\n})(Type || (Type = {}));\nexport class DataType {\n    constructor(TType, children) {\n        this.TType = TType;\n        this.children = children;\n    }\n    static isNull(x) { return x && x.TType === Type.Null; }\n    static isInt(x) { return x && x.TType === Type.Int; }\n    static isFloat(x) { return x && x.TType === Type.Float; }\n    static isBinary(x) { return x && x.TType === Type.Binary; }\n    static isUtf8(x) { return x && x.TType === Type.Utf8; }\n    static isBool(x) { return x && x.TType === Type.Bool; }\n    static isDecimal(x) { return x && x.TType === Type.Decimal; }\n    static isDate(x) { return x && x.TType === Type.Date; }\n    static isTime(x) { return x && x.TType === Type.Time; }\n    static isTimestamp(x) { return x && x.TType === Type.Timestamp; }\n    static isInterval(x) { return x && x.TType === Type.Interval; }\n    static isList(x) { return x && x.TType === Type.List; }\n    static isStruct(x) { return x && x.TType === Type.Struct; }\n    static isUnion(x) { return x && x.TType === Type.Union; }\n    static isDenseUnion(x) { return x && x.TType === Type.DenseUnion; }\n    static isSparseUnion(x) { return x && x.TType === Type.SparseUnion; }\n    static isFixedSizeBinary(x) { return x && x.TType === Type.FixedSizeBinary; }\n    static isFixedSizeList(x) { return x && x.TType === Type.FixedSizeList; }\n    static isMap(x) { return x && x.TType === Type.Map; }\n    static isDictionary(x) { return x && x.TType === Type.Dictionary; }\n    acceptTypeVisitor(visitor) {\n        return TypeVisitor.visitTypeInline(visitor, this);\n    }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexport class Null extends DataType {\n    constructor() {\n        super(Type.Null);\n    }\n    toString() { return `Null`; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nexport class Int extends DataType {\n    constructor(isSigned, bitWidth) {\n        super(Type.Int);\n        this.isSigned = isSigned;\n        this.bitWidth = bitWidth;\n    }\n    get ArrayType() {\n        switch (this.bitWidth) {\n            case 8: return (this.isSigned ? Int8Array : Uint8Array);\n            case 16: return (this.isSigned ? Int16Array : Uint16Array);\n            case 32: return (this.isSigned ? Int32Array : Uint32Array);\n            case 64: return (this.isSigned ? Int32Array : Uint32Array);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this.isSigned ? `I` : `Ui`}nt${this.bitWidth}`; }\n}\nInt[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int.prototype);\nexport class Int8 extends Int {\n    constructor() { super(true, 8); }\n}\nexport class Int16 extends Int {\n    constructor() { super(true, 16); }\n}\nexport class Int32 extends Int {\n    constructor() { super(true, 32); }\n}\nexport class Int64 extends Int {\n    constructor() { super(true, 64); }\n}\nexport class Uint8 extends Int {\n    constructor() { super(false, 8); }\n}\nexport class Uint16 extends Int {\n    constructor() { super(false, 16); }\n}\nexport class Uint32 extends Int {\n    constructor() { super(false, 32); }\n}\nexport class Uint64 extends Int {\n    constructor() { super(false, 64); }\n}\nexport class Float extends DataType {\n    constructor(precision) {\n        super(Type.Float);\n        this.precision = precision;\n    }\n    // @ts-ignore\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super(Type.Binary);\n    }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexport class Utf8 extends DataType {\n    constructor() {\n        super(Type.Utf8);\n    }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexport class Bool extends DataType {\n    constructor() {\n        super(Type.Bool);\n    }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexport class Decimal extends DataType {\n    constructor(scale, precision) {\n        super(Type.Decimal);\n        this.scale = scale;\n        this.precision = precision;\n    }\n    toString() { return `Decimal[${this.precision}e${this.scale > 0 ? `+` : ``}${this.scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexport class Date_ extends DataType {\n    constructor(unit) {\n        super(Type.Date);\n        this.unit = unit;\n    }\n    toString() { return `Date${(this.unit + 1) * 32}<${DateUnit[this.unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexport class Time extends DataType {\n    constructor(unit, bitWidth) {\n        super(Type.Time);\n        this.unit = unit;\n        this.bitWidth = bitWidth;\n    }\n    toString() { return `Time${this.bitWidth}<${TimeUnit[this.unit]}>`; }\n}\nTime[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time.prototype);\nexport class Timestamp extends DataType {\n    constructor(unit, timezone) {\n        super(Type.Timestamp);\n        this.unit = unit;\n        this.timezone = timezone;\n    }\n    toString() { return `Timestamp<${TimeUnit[this.unit]}${this.timezone ? `, ${this.timezone}` : ``}>`; }\n}\nTimestamp[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp.prototype);\nexport class Interval extends DataType {\n    constructor(unit) {\n        super(Type.Interval);\n        this.unit = unit;\n    }\n    toString() { return `Interval<${IntervalUnit[this.unit]}>`; }\n}\nInterval[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval.prototype);\nexport class List extends DataType {\n    constructor(children) {\n        super(Type.List, children);\n        this.children = children;\n    }\n    toString() { return `List<${this.valueType}>`; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexport class Struct extends DataType {\n    constructor(children) {\n        super(Type.Struct, children);\n        this.children = children;\n    }\n    toString() { return `Struct<${this.children.map((f) => f.type).join(`, `)}>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nexport class Union extends DataType {\n    constructor(mode, typeIds, children) {\n        super(Type.Union, children);\n        this.mode = mode;\n        this.typeIds = typeIds;\n        this.children = children;\n    }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this.children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\nUnion[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int8Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union.prototype);\nexport class DenseUnion extends Union {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\nDenseUnion[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'DenseUnion';\n})(DenseUnion.prototype);\nexport class SparseUnion extends Union {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\nSparseUnion[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'SparseUnion';\n})(SparseUnion.prototype);\nexport class FixedSizeBinary extends DataType {\n    constructor(byteWidth) {\n        super(Type.FixedSizeBinary);\n        this.byteWidth = byteWidth;\n    }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexport class FixedSizeList extends DataType {\n    constructor(listSize, children) {\n        super(Type.FixedSizeList, children);\n        this.listSize = listSize;\n        this.children = children;\n    }\n    get ArrayType() { return this.valueType.ArrayType; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    toString() { return `FixedSizeList[${this.listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexport class Map_ extends DataType {\n    constructor(keysSorted, children) {\n        super(Type.Map, children);\n        this.keysSorted = keysSorted;\n        this.children = children;\n    }\n    toString() { return `Map<${this.children.join(`, `)}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered) {\n        super(Type.Dictionary);\n        this.indices = indices;\n        this.dictionary = dictionary;\n        this.isOrdered = isOrdered || false;\n        this.id = id == null ? DictionaryBatch.getId() : typeof id === 'number' ? id : id.low;\n    }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { popcnt_bit_range } from './util/bit';\nimport { VectorType } from './type';\nexport function toTypedArray(ArrayType, values) {\n    if (!ArrayType && ArrayBuffer.isView(values)) {\n        return values;\n    }\n    return values instanceof ArrayType ? values\n        : !values || !ArrayBuffer.isView(values) ? ArrayType.from(values || [])\n            : new ArrayType(values.buffer, values.byteOffset, values.byteLength / ArrayType.BYTES_PER_ELEMENT);\n}\nexport const kUnknownNullCount = -1;\nexport class BaseData {\n    constructor(type, length, offset, nullCount) {\n        this.type = type;\n        this.length = Math.floor(Math.max(length || 0, 0));\n        this.offset = Math.floor(Math.max(offset || 0, 0));\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n    }\n    get typeId() { return this.type.TType; }\n    get nullBitmap() { return this[VectorType.VALIDITY]; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount === -1 && (nullBitmap = this[VectorType.VALIDITY])) {\n            this._nullCount = nullCount = this.length - popcnt_bit_range(nullBitmap, this.offset, this.offset + this.length);\n        }\n        return nullCount;\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new BaseData(type, length, offset, nullCount);\n    }\n    slice(offset, length) {\n        return length <= 0 ? this : this.sliceInternal(this.clone(this.type, length, this.offset + offset, +(this._nullCount === 0) - 1), offset, length);\n    }\n    sliceInternal(clone, offset, length) {\n        let arr;\n        // If typeIds exist, slice the typeIds buffer\n        (arr = this[VectorType.TYPE]) && (clone[VectorType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = this[VectorType.OFFSET]) && (clone[VectorType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = this[VectorType.DATA]) && (clone[VectorType.DATA] = this.sliceData(arr, offset, length));\n        return clone;\n    }\n    sliceData(data, offset, length) {\n        return data.subarray(offset, offset + length);\n    }\n    sliceOffsets(valueOffsets, offset, length) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n}\nexport class FlatData extends BaseData {\n    constructor(type, length, nullBitmap, data, offset, nullCount) {\n        super(type, length, offset, nullCount);\n        this[VectorType.DATA] = toTypedArray(this.ArrayType, data);\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    get values() { return this[VectorType.DATA]; }\n    get ArrayType() { return this.type.ArrayType; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new this.constructor(type, length, this[VectorType.VALIDITY], this[VectorType.DATA], offset, nullCount);\n    }\n}\nexport class BoolData extends FlatData {\n    sliceData(data) { return data; }\n}\nexport class FlatListData extends FlatData {\n    constructor(type, length, nullBitmap, valueOffsets, data, offset, nullCount) {\n        super(type, length, nullBitmap, data, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    get values() { return this[VectorType.DATA]; }\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new FlatListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this[VectorType.DATA], offset, nullCount);\n    }\n}\nexport class DictionaryData extends BaseData {\n    constructor(type, dictionary, indices) {\n        super(type, indices.length, indices.offset, indices._nullCount);\n        this._indices = indices;\n        this._dictionary = dictionary;\n    }\n    get indices() { return this._indices; }\n    get dictionary() { return this._dictionary; }\n    get nullCount() { return this._indices.nullCount; }\n    get nullBitmap() { return this._indices.nullBitmap; }\n    clone(type, length = this.length, offset = this.offset) {\n        const data = this._dictionary.data.clone(type.dictionary);\n        return new DictionaryData(this.type, this._dictionary.clone(data), this._indices.slice(offset - this.offset, length));\n    }\n    sliceInternal(clone, _offset, _length) {\n        clone.length = clone._indices.length;\n        clone._nullCount = clone._indices._nullCount;\n        return clone;\n    }\n}\nexport class NestedData extends BaseData {\n    constructor(type, length, nullBitmap, childData, offset, nullCount) {\n        super(type, length, offset, nullCount);\n        this.childData = childData;\n        this[VectorType.VALIDITY] = toTypedArray(Uint8Array, nullBitmap);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new NestedData(type, length, this[VectorType.VALIDITY], this.childData, offset, nullCount);\n    }\n    sliceInternal(clone, offset, length) {\n        if (!this[VectorType.OFFSET]) {\n            clone.childData = this.childData.map((child) => child.slice(offset, length));\n        }\n        return super.sliceInternal(clone, offset, length);\n    }\n}\nexport class SingleNestedData extends NestedData {\n    constructor(type, length, nullBitmap, valueChildData, offset, nullCount) {\n        super(type, length, nullBitmap, [valueChildData], offset, nullCount);\n        this._valuesData = valueChildData;\n    }\n    get values() { return this._valuesData; }\n}\nexport class ListData extends SingleNestedData {\n    constructor(type, length, nullBitmap, valueOffsets, valueChildData, offset, nullCount) {\n        super(type, length, nullBitmap, valueChildData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ListData(type, length, this[VectorType.VALIDITY], this[VectorType.OFFSET], this._valuesData, offset, nullCount);\n    }\n}\nexport class UnionData extends NestedData {\n    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {\n        super(type, length, nullBitmap, childData, offset, nullCount);\n        this[VectorType.TYPE] = toTypedArray(Int8Array, typeIds);\n        this.typeIdToChildIndex = type.typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null));\n    }\n    get typeIds() { return this[VectorType.TYPE]; }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new UnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\nexport class SparseUnionData extends UnionData {\n    constructor(type, length, nullBitmap, typeIds, childData, offset, nullCount) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new SparseUnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this.childData, offset, nullCount);\n    }\n}\nexport class DenseUnionData extends UnionData {\n    get valueOffsets() { return this[VectorType.OFFSET]; }\n    constructor(type, length, nullBitmap, typeIds, valueOffsets, childData, offset, nullCount) {\n        super(type, length, nullBitmap, typeIds, childData, offset, nullCount);\n        this[VectorType.OFFSET] = toTypedArray(Int32Array, valueOffsets);\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new DenseUnionData(type, length, this[VectorType.VALIDITY], this[VectorType.TYPE], this[VectorType.OFFSET], this.childData, offset, nullCount);\n    }\n}\nexport class ChunkedData extends BaseData {\n    constructor(type, length, chunkVectors, offset, nullCount, chunkOffsets) {\n        super(type, length, offset, nullCount);\n        this._chunkVectors = chunkVectors;\n        this._chunkOffsets = chunkOffsets || ChunkedData.computeOffsets(chunkVectors);\n    }\n    get chunkVectors() { return this._chunkVectors; }\n    get chunkOffsets() { return this._chunkOffsets; }\n    get chunkData() {\n        return this._chunkData || (this._chunkData = this._chunkVectors.map(({ data }) => data));\n    }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount === -1) {\n            this._nullCount = nullCount = this._chunkVectors.reduce((x, c) => x + c.nullCount, 0);\n        }\n        return nullCount;\n    }\n    clone(type, length = this.length, offset = this.offset, nullCount = this._nullCount) {\n        return new ChunkedData(type, length, this._chunkVectors.map((vec) => vec.clone(vec.data.clone(type))), offset, nullCount, this._chunkOffsets);\n    }\n    sliceInternal(clone, offset, length) {\n        const chunks = this._chunkVectors;\n        const offsets = this._chunkOffsets;\n        const chunkSlices = [];\n        for (let childIndex = -1, numChildren = chunks.length; ++childIndex < numChildren;) {\n            const child = chunks[childIndex];\n            const childLength = child.length;\n            const childOffset = offsets[childIndex];\n            // If the child is to the right of the slice boundary, exclude\n            if (childOffset >= offset + length) {\n                continue;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= childOffset + childLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (childOffset >= offset && (childOffset + childLength) <= offset + length) {\n                chunkSlices.push(child);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - childOffset);\n            const end = begin + Math.min(childLength - begin, (offset + length) - childOffset);\n            chunkSlices.push(child.slice(begin, end));\n        }\n        clone._chunkVectors = chunkSlices;\n        clone._chunkOffsets = ChunkedData.computeOffsets(chunkSlices);\n        return clone;\n    }\n    static computeOffsets(childVectors) {\n        const childOffsets = new Uint32Array(childVectors.length + 1);\n        for (let index = 0, length = childOffsets.length, childOffset = childOffsets[0] = 0; ++index < length;) {\n            childOffsets[index] = (childOffset += childVectors[index - 1].length);\n        }\n        return childOffsets;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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RyxXQUFXLENBQUM7UUFDbEMsS0FBSyxDQUFDLGFBQWEsR0FBRyxXQUFXLENBQUMsY0FBYyxDQUFDLFdBQVcsQ0FBQyxDQUFDO1FBQzlELE9BQU8sS0FBSyxDQUFDO0lBQ2pCLENBQUM7SUFDRCxNQUFNLENBQUMsY0FBYyxDQUFxQixZQUF5QjtRQUMvRCxNQUFNLFlBQVksR0FBRyxJQUFJLFdBQVcsQ0FBQyxZQUFZLENBQUMsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDO1FBQzlELEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxFQUFFLE1BQU0sR0FBRyxZQUFZLENBQUMsTUFBTSxFQUFFLFdBQVcsR0FBRyxZQUFZLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLEVBQUUsS0FBSyxHQUFHLE1BQU0sR0FBRztZQUNwRyxZQUFZLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLElBQUksWUFBWSxDQUFDLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztTQUN6RTtRQUNELE9BQU8sWUFBWSxDQUFDO0lBQ3hCLENBQUM7Q0FDSiIsImZpbGUiOiJkYXRhLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IHBvcGNudF9iaXRfcmFuZ2UgfSBmcm9tICcuL3V0aWwvYml0JztcbmltcG9ydCB7IFZlY3Rvckxpa2UsIFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IEludCwgQm9vbCwgRmxhdExpc3RUeXBlLCBMaXN0LCBTdHJ1Y3QsIE1hcF8gfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgVmVjdG9yVHlwZSwgVHlwZWRBcnJheSwgVHlwZWRBcnJheUNvbnN0cnVjdG9yLCBEaWN0aW9uYXJ5IH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IERhdGFUeXBlLCBGbGF0VHlwZSwgTGlzdFR5cGUsIE5lc3RlZFR5cGUsIFNpbmdsZU5lc3RlZFR5cGUsIERlbnNlVW5pb24sIFNwYXJzZVVuaW9uIH0gZnJvbSAnLi90eXBlJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvVHlwZWRBcnJheTxUIGV4dGVuZHMgVHlwZWRBcnJheT4oQXJyYXlUeXBlOiBUeXBlZEFycmF5Q29uc3RydWN0b3I8VD4sIHZhbHVlcz86IFQgfCBBcnJheUxpa2U8bnVtYmVyPiB8IEl0ZXJhYmxlPG51bWJlcj4gfCBudWxsKTogVCB7XG4gICAgaWYgKCFBcnJheVR5cGUgJiYgQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlcykpIHsgcmV0dXJuIHZhbHVlczsgfVxuICAgIHJldHVybiB2YWx1ZXMgaW5zdGFuY2VvZiBBcnJheVR5cGUgPyB2YWx1ZXNcbiAgICAgICAgIDogIXZhbHVlcyB8fCAhQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlcykgPyBBcnJheVR5cGUuZnJvbSh2YWx1ZXMgfHwgW10pXG4gICAgICAgICA6IG5ldyBBcnJheVR5cGUodmFsdWVzLmJ1ZmZlciwgdmFsdWVzLmJ5dGVPZmZzZXQsIHZhbHVlcy5ieXRlTGVuZ3RoIC8gQXJyYXlUeXBlLkJZVEVTX1BFUl9FTEVNRU5UKTtcbn1cblxuZXhwb3J0IHR5cGUgRGF0YTxUIGV4dGVuZHMgRGF0YVR5cGU+ID0gRGF0YVR5cGVzPFQ+W1RbJ1RUeXBlJ11dICYgQmFzZURhdGE8VD47XG5leHBvcnQgaW50ZXJmYWNlIERhdGFUeXBlczxUIGV4dGVuZHMgRGF0YVR5cGU+IHtcbi8qICAgICAgICAgICAgICAgIFtUeXBlLk5PTkVdKi8gIDA6IEJhc2VEYXRhPFQ+O1xuLyogICAgICAgICAgICAgICAgW1R5cGUuTnVsbF0qLyAgMTogRmxhdERhdGE8VD47XG4vKiAgICAgICAgICAgICAgICAgW1R5cGUuSW50XSovICAyOiBGbGF0RGF0YTxUPjtcbi8qICAgICAgICAgICAgICAgW1R5cGUuRmxvYXRdKi8gIDM6IEZsYXREYXRhPFQ+O1xuLyogICAgICAgICAgICAgIFtUeXBlLkJpbmFyeV0qLyAgNDogRmxhdExpc3REYXRhPFQ+O1xuLyogICAgICAgICAgICAgICAgW1R5cGUuVXRmOF0qLyAgNTogRmxhdExpc3REYXRhPFQ+O1xuLyogICAgICAgICAgICAgICAgW1R5cGUuQm9vbF0qLyAgNjogQm9vbERhdGE7XG4vKiAgICAgICAgICAgICBbVHlwZS5EZWNpbWFsXSovICA3OiBGbGF0RGF0YTxUPjtcbi8qICAgICAgICAgICAgICAgIFtUeXBlLkRhdGVdKi8gIDg6IEZsYXREYXRhPFQ+O1xuLyogICAgICAgICAgICAgICAgW1R5cGUuVGltZV0qLyAgOTogRmxhdERhdGE8VD47XG4vKiAgICAgICAgICAgW1R5cGUuVGltZXN0YW1wXSovIDEwOiBGbGF0RGF0YTxUPjtcbi8qICAgICAgICAgICAgW1R5cGUuSW50ZXJ2YWxdKi8gMTE6IEZsYXREYXRhPFQ+O1xuLyogICAgICAgICAgICAgICAgW1R5cGUuTGlzdF0qLyAxMjogTGlzdERhdGE8TGlzdDxUPj47XG4vKiAgICAgICAgICAgICAgW1R5cGUuU3RydWN0XSovIDEzOiBOZXN0ZWREYXRhPFN0cnVjdD47XG4vKiAgICAgICAgICAgICAgIFtUeXBlLlVuaW9uXSovIDE0OiBVbmlvbkRhdGE7XG4vKiAgICAgW1R5cGUuRml4ZWRTaXplQmluYXJ5XSovIDE1OiBGbGF0RGF0YTxUPjtcbi8qICAgICAgIFtUeXBlLkZpeGVkU2l6ZUxpc3RdKi8gMTY6IFNpbmdsZU5lc3RlZERhdGE8YW55Pjtcbi8qICAgICAgICAgICAgICAgICBbVHlwZS5NYXBdKi8gMTc6IE5lc3RlZERhdGE8TWFwXz47XG4vKiAgW1R5cGUuRGVuc2VVbmlvbl0qLyBEZW5zZVVuaW9uOiBEZW5zZVVuaW9uRGF0YTtcbi8qW1R5cGUuU3BhcnNlVW5pb25dKi8gU3BhcnNlVW5pb246IFNwYXJzZVVuaW9uRGF0YTtcbi8qWyAgVHlwZS5EaWN0aW9uYXJ5XSovIERpY3Rpb25hcnk6IERpY3Rpb25hcnlEYXRhPGFueT47XG59XG4vLyBXaGVuIHNsaWNpbmcsIHdlIGRvIG5vdCBrbm93IHRoZSBudWxsIGNvdW50IG9mIHRoZSBzbGljZWQgcmFuZ2Ugd2l0aG91dFxuLy8gZG9pbmcgc29tZSBjb21wdXRhdGlvbi4gVG8gYXZvaWQgZG9pbmcgdGhpcyBlYWdlcmx5LCB3ZSBzZXQgdGhlIG51bGwgY291bnRcbi8vIHRvIC0xIChhbnkgbmVnYXRpdmUgbnVtYmVyIHdpbGwgZG8pLiBXaGVuIEFycmF5OjpudWxsX2NvdW50IGlzIGNhbGxlZCB0aGVcbi8vIGZpcnN0IHRpbWUsIHRoZSBudWxsIGNvdW50IHdpbGwgYmUgY29tcHV0ZWQuIFNlZSBBUlJPVy0zM1xuZXhwb3J0IHR5cGUga1Vua25vd25OdWxsQ291bnQgPSAtMTtcbmV4cG9ydCBjb25zdCBrVW5rbm93bk51bGxDb3VudCA9IC0xO1xuXG5leHBvcnQgY2xhc3MgQmFzZURhdGE8VCBleHRlbmRzIERhdGFUeXBlID0gRGF0YVR5cGU+IGltcGxlbWVudHMgVmVjdG9yTGlrZSB7XG4gICAgcHVibGljIHR5cGU6IFQ7XG4gICAgcHVibGljIGxlbmd0aDogbnVtYmVyO1xuICAgIHB1YmxpYyBvZmZzZXQ6IG51bWJlcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGNoaWxkRGF0YTogRGF0YTxhbnk+W107XG4gICAgcHJvdGVjdGVkIF9udWxsQ291bnQ6IG51bWJlciB8IGtVbmtub3duTnVsbENvdW50O1xuICAgIHByb3RlY3RlZCAvKiAgW1ZlY3RvclR5cGUuT0ZGU0VUXToqLyAwPzogSW50MzJBcnJheTtcbiAgICBwcm90ZWN0ZWQgLyogICAgW1ZlY3RvclR5cGUuREFUQV06Ki8gMT86IFRbJ1RBcnJheSddO1xuICAgIHByb3RlY3RlZCAvKltWZWN0b3JUeXBlLlZBTElESVRZXToqLyAyPzogVWludDhBcnJheTtcbiAgICBwcm90ZWN0ZWQgLyogICAgW1ZlY3RvclR5cGUuVFlQRV06Ki8gMz86IEludDhBcnJheTtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBULCBsZW5ndGg6IG51bWJlciwgb2Zmc2V0PzogbnVtYmVyLCBudWxsQ291bnQ/OiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy50eXBlID0gdHlwZTtcbiAgICAgICAgdGhpcy5sZW5ndGggPSBNYXRoLmZsb29yKE1hdGgubWF4KGxlbmd0aCB8fCAwLCAwKSk7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gTWF0aC5mbG9vcihNYXRoLm1heChvZmZzZXQgfHwgMCwgMCkpO1xuICAgICAgICB0aGlzLl9udWxsQ291bnQgPSBNYXRoLmZsb29yKE1hdGgubWF4KG51bGxDb3VudCB8fCAwLCAtMSkpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IHR5cGVJZCgpIHsgcmV0dXJuIHRoaXMudHlwZS5UVHlwZTsgfVxuICAgIHB1YmxpYyBnZXQgbnVsbEJpdG1hcCgpIHsgcmV0dXJuIHRoaXNbVmVjdG9yVHlwZS5WQUxJRElUWV07IH1cbiAgICBwdWJsaWMgZ2V0IG51bGxDb3VudCgpIHtcbiAgICAgICAgbGV0IG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudDtcbiAgICAgICAgbGV0IG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCB1bmRlZmluZWQ7XG4gICAgICAgIGlmIChudWxsQ291bnQgPT09IC0xICYmIChudWxsQml0bWFwID0gdGhpc1tWZWN0b3JUeXBlLlZBTElESVRZXSkpIHtcbiAgICAgICAgICAgIHRoaXMuX251bGxDb3VudCA9IG51bGxDb3VudCA9IHRoaXMubGVuZ3RoIC0gcG9wY250X2JpdF9yYW5nZShudWxsQml0bWFwLCB0aGlzLm9mZnNldCwgdGhpcy5vZmZzZXQgKyB0aGlzLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGxDb3VudDtcbiAgICB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBUPih0eXBlOiBSLCBsZW5ndGggPSB0aGlzLmxlbmd0aCwgb2Zmc2V0ID0gdGhpcy5vZmZzZXQsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCk6IERhdGE8Uj4ge1xuICAgICAgICByZXR1cm4gbmV3IEJhc2VEYXRhKHR5cGUsIGxlbmd0aCwgb2Zmc2V0LCBudWxsQ291bnQpIGFzIGFueTtcbiAgICB9XG4gICAgcHVibGljIHNsaWNlKG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gbGVuZ3RoIDw9IDAgPyB0aGlzIDogdGhpcy5zbGljZUludGVybmFsKHRoaXMuY2xvbmUoXG4gICAgICAgICAgICB0aGlzLnR5cGUsIGxlbmd0aCwgdGhpcy5vZmZzZXQgKyBvZmZzZXQsICsodGhpcy5fbnVsbENvdW50ID09PSAwKSAtIDFcbiAgICAgICAgKSBhcyBhbnksIG9mZnNldCwgbGVuZ3RoKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNsaWNlSW50ZXJuYWwoY2xvbmU6IHRoaXMsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICAgICAgICBsZXQgYXJyOiBhbnk7XG4gICAgICAgIC8vIElmIHR5cGVJZHMgZXhpc3QsIHNsaWNlIHRoZSB0eXBlSWRzIGJ1ZmZlclxuICAgICAgICAoYXJyID0gdGhpc1tWZWN0b3JUeXBlLlRZUEVdKSAmJiAoY2xvbmVbVmVjdG9yVHlwZS5UWVBFXSA9IHRoaXMuc2xpY2VEYXRhKGFyciwgb2Zmc2V0LCBsZW5ndGgpKTtcbiAgICAgICAgLy8gSWYgb2Zmc2V0cyBleGlzdCwgb25seSBzbGljZSB0aGUgb2Zmc2V0cyBidWZmZXJcbiAgICAgICAgKGFyciA9IHRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdKSAmJiAoY2xvbmVbVmVjdG9yVHlwZS5PRkZTRVRdID0gdGhpcy5zbGljZU9mZnNldHMoYXJyLCBvZmZzZXQsIGxlbmd0aCkpIHx8XG4gICAgICAgICAgICAvLyBPdGhlcndpc2UgaWYgbm8gb2Zmc2V0cywgc2xpY2UgdGhlIGRhdGEgYnVmZmVyXG4gICAgICAgICAgICAoYXJyID0gdGhpc1tWZWN0b3JUeXBlLkRBVEFdKSAmJiAoY2xvbmVbVmVjdG9yVHlwZS5EQVRBXSA9IHRoaXMuc2xpY2VEYXRhKGFyciwgb2Zmc2V0LCBsZW5ndGgpKTtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2xpY2VEYXRhKGRhdGE6IFRbJ1RBcnJheSddICYgVHlwZWRBcnJheSwgb2Zmc2V0OiBudW1iZXIsIGxlbmd0aDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiBkYXRhLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNsaWNlT2Zmc2V0cyh2YWx1ZU9mZnNldHM6IEludDMyQXJyYXksIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICAgICAgICByZXR1cm4gdmFsdWVPZmZzZXRzLnN1YmFycmF5KG9mZnNldCwgb2Zmc2V0ICsgbGVuZ3RoICsgMSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRmxhdERhdGE8VCBleHRlbmRzIEZsYXRUeXBlPiBleHRlbmRzIEJhc2VEYXRhPFQ+IHtcbiAgICBwdWJsaWMgLyogICAgW1ZlY3RvclR5cGUuREFUQV06Ki8gMTogVFsnVEFycmF5J107XG4gICAgcHVibGljIC8qW1ZlY3RvclR5cGUuVkFMSURJVFldOiovIDI6IFVpbnQ4QXJyYXk7XG4gICAgcHVibGljIGdldCB2YWx1ZXMoKSB7IHJldHVybiB0aGlzW1ZlY3RvclR5cGUuREFUQV07IH1cbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBULCBsZW5ndGg6IG51bWJlciwgbnVsbEJpdG1hcDogVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQsIGRhdGE6IEl0ZXJhYmxlPG51bWJlcj4sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGxlbmd0aCwgb2Zmc2V0LCBudWxsQ291bnQpO1xuICAgICAgICB0aGlzW1ZlY3RvclR5cGUuREFUQV0gPSB0b1R5cGVkQXJyYXkodGhpcy5BcnJheVR5cGUsIGRhdGEpO1xuICAgICAgICB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldID0gdG9UeXBlZEFycmF5KFVpbnQ4QXJyYXksIG51bGxCaXRtYXApO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IEFycmF5VHlwZSgpOiBUWydBcnJheVR5cGUnXSB7IHJldHVybiB0aGlzLnR5cGUuQXJyYXlUeXBlOyB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBUPih0eXBlOiBSLCBsZW5ndGggPSB0aGlzLmxlbmd0aCwgb2Zmc2V0ID0gdGhpcy5vZmZzZXQsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3ICh0aGlzLmNvbnN0cnVjdG9yIGFzIGFueSkodHlwZSwgbGVuZ3RoLCB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldLCB0aGlzW1ZlY3RvclR5cGUuREFUQV0sIG9mZnNldCwgbnVsbENvdW50KSBhcyBGbGF0RGF0YTxSPjtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBCb29sRGF0YSBleHRlbmRzIEZsYXREYXRhPEJvb2w+IHtcbiAgICBwcm90ZWN0ZWQgc2xpY2VEYXRhKGRhdGE6IFVpbnQ4QXJyYXkpIHsgcmV0dXJuIGRhdGE7IH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsYXRMaXN0RGF0YTxUIGV4dGVuZHMgRmxhdExpc3RUeXBlPiBleHRlbmRzIEZsYXREYXRhPFQ+IHtcbiAgICBwdWJsaWMgLyogIFtWZWN0b3JUeXBlLk9GRlNFVF06Ki8gMDogSW50MzJBcnJheTtcbiAgICBwdWJsaWMgLyogICAgW1ZlY3RvclR5cGUuREFUQV06Ki8gMTogVFsnVEFycmF5J107XG4gICAgcHVibGljIC8qW1ZlY3RvclR5cGUuVkFMSURJVFldOiovIDI6IFVpbnQ4QXJyYXk7XG4gICAgcHVibGljIGdldCB2YWx1ZXMoKSB7IHJldHVybiB0aGlzW1ZlY3RvclR5cGUuREFUQV07IH1cbiAgICBwdWJsaWMgZ2V0IHZhbHVlT2Zmc2V0cygpIHsgcmV0dXJuIHRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdOyB9XG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgbGVuZ3RoOiBudW1iZXIsIG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCBudWxsIHwgdW5kZWZpbmVkLCB2YWx1ZU9mZnNldHM6IEl0ZXJhYmxlPG51bWJlcj4sIGRhdGE6IFRbJ1RBcnJheSddLCBvZmZzZXQ/OiBudW1iZXIsIG51bGxDb3VudD86IG51bWJlcikge1xuICAgICAgICBzdXBlcih0eXBlLCBsZW5ndGgsIG51bGxCaXRtYXAsIGRhdGEsIG9mZnNldCwgbnVsbENvdW50KTtcbiAgICAgICAgdGhpc1tWZWN0b3JUeXBlLk9GRlNFVF0gPSB0b1R5cGVkQXJyYXkoSW50MzJBcnJheSwgdmFsdWVPZmZzZXRzKTtcbiAgICB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBUPih0eXBlOiBSLCBsZW5ndGggPSB0aGlzLmxlbmd0aCwgb2Zmc2V0ID0gdGhpcy5vZmZzZXQsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCkge1xuICAgICAgICByZXR1cm4gbmV3IEZsYXRMaXN0RGF0YSh0eXBlLCBsZW5ndGgsIHRoaXNbVmVjdG9yVHlwZS5WQUxJRElUWV0sIHRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdLCB0aGlzW1ZlY3RvclR5cGUuREFUQV0sIG9mZnNldCwgbnVsbENvdW50KSBhcyBGbGF0TGlzdERhdGE8Uj47XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeURhdGE8VCBleHRlbmRzIERhdGFUeXBlPiBleHRlbmRzIEJhc2VEYXRhPERpY3Rpb25hcnk8VD4+IHtcbiAgICBwcm90ZWN0ZWQgX2RpY3Rpb25hcnk6IFZlY3RvcjxUPjtcbiAgICBwcm90ZWN0ZWQgX2luZGljZXM6IERhdGE8SW50PGFueT4+O1xuICAgIHB1YmxpYyBnZXQgaW5kaWNlcygpIHsgcmV0dXJuIHRoaXMuX2luZGljZXM7IH1cbiAgICBwdWJsaWMgZ2V0IGRpY3Rpb25hcnkoKSB7IHJldHVybiB0aGlzLl9kaWN0aW9uYXJ5OyB9XG4gICAgY29uc3RydWN0b3IodHlwZTogRGljdGlvbmFyeTxUPiwgZGljdGlvbmFyeTogVmVjdG9yPFQ+LCBpbmRpY2VzOiBEYXRhPEludDxhbnk+Pikge1xuICAgICAgICBzdXBlcih0eXBlLCBpbmRpY2VzLmxlbmd0aCwgaW5kaWNlcy5vZmZzZXQsIChpbmRpY2VzIGFzIGFueSkuX251bGxDb3VudCk7XG4gICAgICAgIHRoaXMuX2luZGljZXMgPSBpbmRpY2VzO1xuICAgICAgICB0aGlzLl9kaWN0aW9uYXJ5ID0gZGljdGlvbmFyeTtcbiAgICB9XG4gICAgcHVibGljIGdldCBudWxsQ291bnQoKSB7IHJldHVybiB0aGlzLl9pbmRpY2VzLm51bGxDb3VudDsgfVxuICAgIHB1YmxpYyBnZXQgbnVsbEJpdG1hcCgpIHsgcmV0dXJuIHRoaXMuX2luZGljZXMubnVsbEJpdG1hcDsgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgRGljdGlvbmFyeTxUPj4odHlwZTogUiwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG9mZnNldCA9IHRoaXMub2Zmc2V0KSB7XG4gICAgICAgIGNvbnN0IGRhdGEgPSB0aGlzLl9kaWN0aW9uYXJ5LmRhdGEuY2xvbmUodHlwZS5kaWN0aW9uYXJ5IGFzIGFueSk7XG4gICAgICAgIHJldHVybiBuZXcgRGljdGlvbmFyeURhdGE8Uj4oXG4gICAgICAgICAgICB0aGlzLnR5cGUgYXMgYW55LFxuICAgICAgICAgICAgdGhpcy5fZGljdGlvbmFyeS5jbG9uZShkYXRhKSBhcyBhbnksXG4gICAgICAgICAgICB0aGlzLl9pbmRpY2VzLnNsaWNlKG9mZnNldCAtIHRoaXMub2Zmc2V0LCBsZW5ndGgpXG4gICAgICAgICkgYXMgYW55O1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgc2xpY2VJbnRlcm5hbChjbG9uZTogdGhpcywgX29mZnNldDogbnVtYmVyLCBfbGVuZ3RoOiBudW1iZXIpIHtcbiAgICAgICAgY2xvbmUubGVuZ3RoID0gY2xvbmUuX2luZGljZXMubGVuZ3RoO1xuICAgICAgICBjbG9uZS5fbnVsbENvdW50ID0gKGNsb25lLl9pbmRpY2VzIGFzIGFueSkuX251bGxDb3VudDtcbiAgICAgICAgcmV0dXJuIGNsb25lO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5lc3RlZERhdGE8VCBleHRlbmRzIE5lc3RlZFR5cGUgPSBOZXN0ZWRUeXBlPiBleHRlbmRzIEJhc2VEYXRhPFQ+IHtcbiAgICBwdWJsaWMgLypbVmVjdG9yVHlwZS5WQUxJRElUWV06Ki8gMjogVWludDhBcnJheTtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBULCBsZW5ndGg6IG51bWJlciwgbnVsbEJpdG1hcDogVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQsIGNoaWxkRGF0YTogRGF0YTxhbnk+W10sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGxlbmd0aCwgb2Zmc2V0LCBudWxsQ291bnQpO1xuICAgICAgICB0aGlzLmNoaWxkRGF0YSA9IGNoaWxkRGF0YTtcbiAgICAgICAgdGhpc1tWZWN0b3JUeXBlLlZBTElESVRZXSA9IHRvVHlwZWRBcnJheShVaW50OEFycmF5LCBudWxsQml0bWFwKTtcbiAgICB9XG4gICAgcHVibGljIGNsb25lPFIgZXh0ZW5kcyBUPih0eXBlOiBSLCBsZW5ndGggPSB0aGlzLmxlbmd0aCwgb2Zmc2V0ID0gdGhpcy5vZmZzZXQsIG51bGxDb3VudCA9IHRoaXMuX251bGxDb3VudCk6IERhdGE8Uj4ge1xuICAgICAgICByZXR1cm4gbmV3IE5lc3RlZERhdGE8Uj4odHlwZSwgbGVuZ3RoLCB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldLCB0aGlzLmNoaWxkRGF0YSwgb2Zmc2V0LCBudWxsQ291bnQpIGFzIGFueTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNsaWNlSW50ZXJuYWwoY2xvbmU6IHRoaXMsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICAgICAgICBpZiAoIXRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdKSB7XG4gICAgICAgICAgICBjbG9uZS5jaGlsZERhdGEgPSB0aGlzLmNoaWxkRGF0YS5tYXAoKGNoaWxkKSA9PiBjaGlsZC5zbGljZShvZmZzZXQsIGxlbmd0aCkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5zbGljZUludGVybmFsKGNsb25lLCBvZmZzZXQsIGxlbmd0aCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU2luZ2xlTmVzdGVkRGF0YTxUIGV4dGVuZHMgU2luZ2xlTmVzdGVkVHlwZT4gZXh0ZW5kcyBOZXN0ZWREYXRhPFQ+IHtcbiAgICBwcm90ZWN0ZWQgX3ZhbHVlc0RhdGE6IERhdGE8VD47XG4gICAgcHVibGljIGdldCB2YWx1ZXMoKSB7IHJldHVybiB0aGlzLl92YWx1ZXNEYXRhOyB9XG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgbGVuZ3RoOiBudW1iZXIsIG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCBudWxsIHwgdW5kZWZpbmVkLCB2YWx1ZUNoaWxkRGF0YTogRGF0YTxUPiwgb2Zmc2V0PzogbnVtYmVyLCBudWxsQ291bnQ/OiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgbGVuZ3RoLCBudWxsQml0bWFwLCBbdmFsdWVDaGlsZERhdGFdLCBvZmZzZXQsIG51bGxDb3VudCk7XG4gICAgICAgIHRoaXMuX3ZhbHVlc0RhdGEgPSB2YWx1ZUNoaWxkRGF0YTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMaXN0RGF0YTxUIGV4dGVuZHMgTGlzdFR5cGU+IGV4dGVuZHMgU2luZ2xlTmVzdGVkRGF0YTxUPiB7XG4gICAgcHVibGljIC8qICBbVmVjdG9yVHlwZS5PRkZTRVRdOiovIDA6IEludDMyQXJyYXk7XG4gICAgcHVibGljIC8qW1ZlY3RvclR5cGUuVkFMSURJVFldOiovIDI6IFVpbnQ4QXJyYXk7XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzW1ZlY3RvclR5cGUuT0ZGU0VUXTsgfVxuICAgIGNvbnN0cnVjdG9yKHR5cGU6IFQsIGxlbmd0aDogbnVtYmVyLCBudWxsQml0bWFwOiBVaW50OEFycmF5IHwgbnVsbCB8IHVuZGVmaW5lZCwgdmFsdWVPZmZzZXRzOiBJdGVyYWJsZTxudW1iZXI+LCB2YWx1ZUNoaWxkRGF0YTogRGF0YTxUPiwgb2Zmc2V0PzogbnVtYmVyLCBudWxsQ291bnQ/OiBudW1iZXIpIHtcbiAgICAgICAgc3VwZXIodHlwZSwgbGVuZ3RoLCBudWxsQml0bWFwLCB2YWx1ZUNoaWxkRGF0YSwgb2Zmc2V0LCBudWxsQ291bnQpO1xuICAgICAgICB0aGlzW1ZlY3RvclR5cGUuT0ZGU0VUXSA9IHRvVHlwZWRBcnJheShJbnQzMkFycmF5LCB2YWx1ZU9mZnNldHMpO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmU8UiBleHRlbmRzIFQ+KHR5cGU6IFIsIGxlbmd0aCA9IHRoaXMubGVuZ3RoLCBvZmZzZXQgPSB0aGlzLm9mZnNldCwgbnVsbENvdW50ID0gdGhpcy5fbnVsbENvdW50KTogRGF0YTxSPiB7XG4gICAgICAgIHJldHVybiBuZXcgTGlzdERhdGEodHlwZSwgbGVuZ3RoLCB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldLCB0aGlzW1ZlY3RvclR5cGUuT0ZGU0VUXSwgdGhpcy5fdmFsdWVzRGF0YSBhcyBhbnksIG9mZnNldCwgbnVsbENvdW50KSBhcyBhbnk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVW5pb25EYXRhPFQgZXh0ZW5kcyAoRGVuc2VVbmlvbiB8IFNwYXJzZVVuaW9uKSA9IGFueT4gZXh0ZW5kcyBOZXN0ZWREYXRhPFQ+IHtcbiAgICBwdWJsaWMgLyogICAgW1ZlY3RvclR5cGUuVFlQRV06Ki8gMzogVFsnVEFycmF5J107XG4gICAgcHVibGljIGdldCB0eXBlSWRzKCkgeyByZXR1cm4gdGhpc1tWZWN0b3JUeXBlLlRZUEVdOyB9XG4gICAgcHVibGljIHJlYWRvbmx5IHR5cGVJZFRvQ2hpbGRJbmRleDogeyBba2V5OiBudW1iZXJdOiBudW1iZXIgfTtcbiAgICBjb25zdHJ1Y3Rvcih0eXBlOiBULCBsZW5ndGg6IG51bWJlciwgbnVsbEJpdG1hcDogVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQsIHR5cGVJZHM6IEl0ZXJhYmxlPG51bWJlcj4sIGNoaWxkRGF0YTogRGF0YTxhbnk+W10sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGxlbmd0aCwgbnVsbEJpdG1hcCwgY2hpbGREYXRhLCBvZmZzZXQsIG51bGxDb3VudCk7XG4gICAgICAgIHRoaXNbVmVjdG9yVHlwZS5UWVBFXSA9IHRvVHlwZWRBcnJheShJbnQ4QXJyYXksIHR5cGVJZHMpO1xuICAgICAgICB0aGlzLnR5cGVJZFRvQ2hpbGRJbmRleCA9IHR5cGUudHlwZUlkcy5yZWR1Y2UoKHR5cGVJZFRvQ2hpbGRJbmRleCwgdHlwZUlkLCBpZHgpID0+IHtcbiAgICAgICAgICAgIHJldHVybiAodHlwZUlkVG9DaGlsZEluZGV4W3R5cGVJZF0gPSBpZHgpICYmIHR5cGVJZFRvQ2hpbGRJbmRleCB8fCB0eXBlSWRUb0NoaWxkSW5kZXg7XG4gICAgICAgIH0sIE9iamVjdC5jcmVhdGUobnVsbCkgYXMgeyBba2V5OiBudW1iZXJdOiBudW1iZXIgfSk7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgVD4odHlwZTogUiwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG9mZnNldCA9IHRoaXMub2Zmc2V0LCBudWxsQ291bnQgPSB0aGlzLl9udWxsQ291bnQpOiBEYXRhPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBVbmlvbkRhdGE8Uj4odHlwZSwgbGVuZ3RoLCB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldLCB0aGlzW1ZlY3RvclR5cGUuVFlQRV0sIHRoaXMuY2hpbGREYXRhLCBvZmZzZXQsIG51bGxDb3VudCkgYXMgYW55O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIFNwYXJzZVVuaW9uRGF0YSBleHRlbmRzIFVuaW9uRGF0YTxTcGFyc2VVbmlvbj4ge1xuICAgIGNvbnN0cnVjdG9yKHR5cGU6IFNwYXJzZVVuaW9uLCBsZW5ndGg6IG51bWJlciwgbnVsbEJpdG1hcDogVWludDhBcnJheSB8IG51bGwgfCB1bmRlZmluZWQsIHR5cGVJZHM6IEl0ZXJhYmxlPG51bWJlcj4sIGNoaWxkRGF0YTogRGF0YTxhbnk+W10sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGxlbmd0aCwgbnVsbEJpdG1hcCwgdHlwZUlkcywgY2hpbGREYXRhLCBvZmZzZXQsIG51bGxDb3VudCk7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgU3BhcnNlVW5pb24+KHR5cGU6IFIsIGxlbmd0aCA9IHRoaXMubGVuZ3RoLCBvZmZzZXQgPSB0aGlzLm9mZnNldCwgbnVsbENvdW50ID0gdGhpcy5fbnVsbENvdW50KTogRGF0YTxSPiB7XG4gICAgICAgIHJldHVybiBuZXcgU3BhcnNlVW5pb25EYXRhKFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIGxlbmd0aCxcbiAgICAgICAgICAgIHRoaXNbVmVjdG9yVHlwZS5WQUxJRElUWV0sXG4gICAgICAgICAgICB0aGlzW1ZlY3RvclR5cGUuVFlQRV0sXG4gICAgICAgICAgICB0aGlzLmNoaWxkRGF0YSxcbiAgICAgICAgICAgIG9mZnNldCwgbnVsbENvdW50XG4gICAgICAgICkgYXMgYW55O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbnNlVW5pb25EYXRhIGV4dGVuZHMgVW5pb25EYXRhPERlbnNlVW5pb24+IHtcbiAgICBwdWJsaWMgLyogIFtWZWN0b3JUeXBlLk9GRlNFVF06Ki8gMDogSW50MzJBcnJheTtcbiAgICBwdWJsaWMgZ2V0IHZhbHVlT2Zmc2V0cygpIHsgcmV0dXJuIHRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdOyB9XG4gICAgY29uc3RydWN0b3IodHlwZTogRGVuc2VVbmlvbiwgbGVuZ3RoOiBudW1iZXIsIG51bGxCaXRtYXA6IFVpbnQ4QXJyYXkgfCBudWxsIHwgdW5kZWZpbmVkLCB0eXBlSWRzOiBJdGVyYWJsZTxudW1iZXI+LCB2YWx1ZU9mZnNldHM6IEl0ZXJhYmxlPG51bWJlcj4sIGNoaWxkRGF0YTogRGF0YTxhbnk+W10sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKHR5cGUsIGxlbmd0aCwgbnVsbEJpdG1hcCwgdHlwZUlkcywgY2hpbGREYXRhLCBvZmZzZXQsIG51bGxDb3VudCk7XG4gICAgICAgIHRoaXNbVmVjdG9yVHlwZS5PRkZTRVRdID0gdG9UeXBlZEFycmF5KEludDMyQXJyYXksIHZhbHVlT2Zmc2V0cyk7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgRGVuc2VVbmlvbj4odHlwZTogUiwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG9mZnNldCA9IHRoaXMub2Zmc2V0LCBudWxsQ291bnQgPSB0aGlzLl9udWxsQ291bnQpOiBEYXRhPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBEZW5zZVVuaW9uRGF0YShcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBsZW5ndGgsXG4gICAgICAgICAgICB0aGlzW1ZlY3RvclR5cGUuVkFMSURJVFldLFxuICAgICAgICAgICAgdGhpc1tWZWN0b3JUeXBlLlRZUEVdLFxuICAgICAgICAgICAgdGhpc1tWZWN0b3JUeXBlLk9GRlNFVF0sXG4gICAgICAgICAgICB0aGlzLmNoaWxkRGF0YSxcbiAgICAgICAgICAgIG9mZnNldCwgbnVsbENvdW50XG4gICAgICAgICkgYXMgYW55O1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIENodW5rZWREYXRhPFQgZXh0ZW5kcyBEYXRhVHlwZT4gZXh0ZW5kcyBCYXNlRGF0YTxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByb3RlY3RlZCBfY2h1bmtEYXRhOiBEYXRhPFQ+W107XG4gICAgcHJvdGVjdGVkIF9jaHVua1ZlY3RvcnM6IFZlY3RvcjxUPltdO1xuICAgIHByb3RlY3RlZCBfY2h1bmtPZmZzZXRzOiBVaW50MzJBcnJheTtcbiAgICBwdWJsaWMgZ2V0IGNodW5rVmVjdG9ycygpIHsgcmV0dXJuIHRoaXMuX2NodW5rVmVjdG9yczsgfVxuICAgIHB1YmxpYyBnZXQgY2h1bmtPZmZzZXRzKCkgeyByZXR1cm4gdGhpcy5fY2h1bmtPZmZzZXRzOyB9XG4gICAgcHVibGljIGdldCBjaHVua0RhdGEoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jaHVua0RhdGEgfHwgKFxuICAgICAgICAgICAgICAgdGhpcy5fY2h1bmtEYXRhID0gdGhpcy5fY2h1bmtWZWN0b3JzLm1hcCgoeyBkYXRhIH0pID0+IGRhdGEpKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IodHlwZTogVCwgbGVuZ3RoOiBudW1iZXIsIGNodW5rVmVjdG9yczogVmVjdG9yPFQ+W10sIG9mZnNldD86IG51bWJlciwgbnVsbENvdW50PzogbnVtYmVyLCBjaHVua09mZnNldHM/OiBVaW50MzJBcnJheSkge1xuICAgICAgICBzdXBlcih0eXBlLCBsZW5ndGgsIG9mZnNldCwgbnVsbENvdW50KTtcbiAgICAgICAgdGhpcy5fY2h1bmtWZWN0b3JzID0gY2h1bmtWZWN0b3JzO1xuICAgICAgICB0aGlzLl9jaHVua09mZnNldHMgPSBjaHVua09mZnNldHMgfHwgQ2h1bmtlZERhdGEuY29tcHV0ZU9mZnNldHMoY2h1bmtWZWN0b3JzKTtcbiAgICB9XG4gICAgcHVibGljIGdldCBudWxsQ291bnQoKSB7XG4gICAgICAgIGxldCBudWxsQ291bnQgPSB0aGlzLl9udWxsQ291bnQ7XG4gICAgICAgIGlmIChudWxsQ291bnQgPT09IC0xKSB7XG4gICAgICAgICAgICB0aGlzLl9udWxsQ291bnQgPSBudWxsQ291bnQgPSB0aGlzLl9jaHVua1ZlY3RvcnMucmVkdWNlKCh4LCBjKSA9PiB4ICsgYy5udWxsQ291bnQsIDApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsQ291bnQ7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgVD4odHlwZTogUiwgbGVuZ3RoID0gdGhpcy5sZW5ndGgsIG9mZnNldCA9IHRoaXMub2Zmc2V0LCBudWxsQ291bnQgPSB0aGlzLl9udWxsQ291bnQpOiBEYXRhPFI+IHtcbiAgICAgICAgcmV0dXJuIG5ldyBDaHVua2VkRGF0YShcbiAgICAgICAgICAgIHR5cGUsIGxlbmd0aCxcbiAgICAgICAgICAgIHRoaXMuX2NodW5rVmVjdG9ycy5tYXAoKHZlYykgPT4gdmVjLmNsb25lKHZlYy5kYXRhLmNsb25lKHR5cGUpKSkgYXMgYW55LFxuICAgICAgICAgICAgb2Zmc2V0LCBudWxsQ291bnQsIHRoaXMuX2NodW5rT2Zmc2V0c1xuICAgICAgICApIGFzIGFueTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHNsaWNlSW50ZXJuYWwoY2xvbmU6IHRoaXMsIG9mZnNldDogbnVtYmVyLCBsZW5ndGg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBjaHVua3MgPSB0aGlzLl9jaHVua1ZlY3RvcnM7XG4gICAgICAgIGNvbnN0IG9mZnNldHMgPSB0aGlzLl9jaHVua09mZnNldHM7XG4gICAgICAgIGNvbnN0IGNodW5rU2xpY2VzOiBWZWN0b3I8VD5bXSA9IFtdO1xuICAgICAgICBmb3IgKGxldCBjaGlsZEluZGV4ID0gLTEsIG51bUNoaWxkcmVuID0gY2h1bmtzLmxlbmd0aDsgKytjaGlsZEluZGV4IDwgbnVtQ2hpbGRyZW47KSB7XG4gICAgICAgICAgICBjb25zdCBjaGlsZCA9IGNodW5rc1tjaGlsZEluZGV4XTtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkTGVuZ3RoID0gY2hpbGQubGVuZ3RoO1xuICAgICAgICAgICAgY29uc3QgY2hpbGRPZmZzZXQgPSBvZmZzZXRzW2NoaWxkSW5kZXhdO1xuICAgICAgICAgICAgLy8gSWYgdGhlIGNoaWxkIGlzIHRvIHRoZSByaWdodCBvZiB0aGUgc2xpY2UgYm91bmRhcnksIGV4Y2x1ZGVcbiAgICAgICAgICAgIGlmIChjaGlsZE9mZnNldCA+PSBvZmZzZXQgKyBsZW5ndGgpIHsgY29udGludWU7IH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGlsZCBpcyB0byB0aGUgbGVmdCBvZiBvZiB0aGUgc2xpY2UgYm91bmRhcnksIGV4Y2x1ZGVcbiAgICAgICAgICAgIGlmIChvZmZzZXQgPj0gY2hpbGRPZmZzZXQgKyBjaGlsZExlbmd0aCkgeyBjb250aW51ZTsgfVxuICAgICAgICAgICAgLy8gSWYgdGhlIGNoaWxkIGlzIGJldHdlZW4gYm90aCBsZWZ0IGFuZCByaWdodCBib3VuZGFyaWVzLCBpbmNsdWRlIHcvbyBzbGljaW5nXG4gICAgICAgICAgICBpZiAoY2hpbGRPZmZzZXQgPj0gb2Zmc2V0ICYmIChjaGlsZE9mZnNldCArIGNoaWxkTGVuZ3RoKSA8PSBvZmZzZXQgKyBsZW5ndGgpIHtcbiAgICAgICAgICAgICAgICBjaHVua1NsaWNlcy5wdXNoKGNoaWxkKTtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIElmIHRoZSBjaGlsZCBvdmVybGFwcyBvbmUgb2YgdGhlIHNsaWNlIGJvdW5kYXJpZXMsIGluY2x1ZGUgdGhhdCBzbGljZVxuICAgICAgICAgICAgY29uc3QgYmVnaW4gPSBNYXRoLm1heCgwLCBvZmZzZXQgLSBjaGlsZE9mZnNldCk7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBiZWdpbiArIE1hdGgubWluKGNoaWxkTGVuZ3RoIC0gYmVnaW4sIChvZmZzZXQgKyBsZW5ndGgpIC0gY2hpbGRPZmZzZXQpO1xuICAgICAgICAgICAgY2h1bmtTbGljZXMucHVzaChjaGlsZC5zbGljZShiZWdpbiwgZW5kKSk7XG4gICAgICAgIH1cbiAgICAgICAgY2xvbmUuX2NodW5rVmVjdG9ycyA9IGNodW5rU2xpY2VzO1xuICAgICAgICBjbG9uZS5fY2h1bmtPZmZzZXRzID0gQ2h1bmtlZERhdGEuY29tcHV0ZU9mZnNldHMoY2h1bmtTbGljZXMpO1xuICAgICAgICByZXR1cm4gY2xvbmU7XG4gICAgfVxuICAgIHN0YXRpYyBjb21wdXRlT2Zmc2V0czxUIGV4dGVuZHMgRGF0YVR5cGU+KGNoaWxkVmVjdG9yczogVmVjdG9yPFQ+W10pIHtcbiAgICAgICAgY29uc3QgY2hpbGRPZmZzZXRzID0gbmV3IFVpbnQzMkFycmF5KGNoaWxkVmVjdG9ycy5sZW5ndGggKyAxKTtcbiAgICAgICAgZm9yIChsZXQgaW5kZXggPSAwLCBsZW5ndGggPSBjaGlsZE9mZnNldHMubGVuZ3RoLCBjaGlsZE9mZnNldCA9IGNoaWxkT2Zmc2V0c1swXSA9IDA7ICsraW5kZXggPCBsZW5ndGg7KSB7XG4gICAgICAgICAgICBjaGlsZE9mZnNldHNbaW5kZXhdID0gKGNoaWxkT2Zmc2V0ICs9IGNoaWxkVmVjdG9yc1tpbmRleCAtIDFdLmxlbmd0aCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNoaWxkT2Zmc2V0cztcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nexport class ChunkedView {\n    constructor(data) {\n        this.chunkVectors = data.chunkVectors;\n        this.chunkOffsets = data.chunkOffsets;\n    }\n    clone(data) {\n        return new ChunkedView(data);\n    }\n    *[Symbol.iterator]() {\n        for (const vector of this.chunkVectors) {\n            yield* vector;\n        }\n    }\n    getChildAt(index) {\n        return index < 0 ? null\n            : (this._children || (this._children = []))[index] ||\n                (this._children[index] = Vector.concat(...this.chunkVectors\n                    .map((chunk) => chunk.getChildAt(index))));\n    }\n    isValid(index) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].isValid(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return false;\n    }\n    get(index) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].get(index - pos);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n        return null;\n    }\n    set(index, value) {\n        // binary search to find the child vector and value index offset (inlined for speed)\n        let offsets = this.chunkOffsets, pos = 0;\n        let lhs = 0, mid = 0, rhs = offsets.length - 1;\n        while (index < offsets[rhs] && index >= (pos = offsets[lhs])) {\n            if (lhs + 1 === rhs) {\n                return this.chunkVectors[lhs].set(index - pos, value);\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            index >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        }\n    }\n    toArray() {\n        const chunks = this.chunkVectors;\n        const numChunks = chunks.length;\n        if (numChunks === 1) {\n            return chunks[0].toArray();\n        }\n        let sources = new Array(numChunks);\n        let sourcesLen = 0, ArrayType = Array;\n        for (let index = -1; ++index < numChunks;) {\n            let source = chunks[index].toArray();\n            sourcesLen += (sources[index] = source).length;\n            if (ArrayType !== source.constructor) {\n                ArrayType = source.constructor;\n            }\n        }\n        let target = new ArrayType(sourcesLen);\n        let setValues = ArrayType === Array ? arraySet : typedArraySet;\n        for (let index = -1, offset = 0; ++index < numChunks;) {\n            offset = setValues(sources[index], target, offset);\n        }\n        return target;\n    }\n    indexOf(search) {\n        let offset = 0, result;\n        for (const vector of this.chunkVectors) {\n            result = vector.indexOf(search);\n            if (result !== -1) {\n                return result + offset;\n            }\n            offset += vector.length;\n        }\n        return -1;\n    }\n}\nfunction typedArraySet(source, target, index) {\n    return target.set(source, index) || index + source.length;\n}\nfunction arraySet(source, target, index) {\n    let dstIdx = index - 1, srcIdx = -1, srcLen = source.length;\n    while (++srcIdx < srcLen) {\n        target[++dstIdx] = source[srcIdx];\n    }\n    return dstIdx;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { getBool, setBool, iterateBits } from '../util/bit';\nexport class ValidityView {\n    constructor(data, view) {\n        this.view = view;\n        this.length = data.length;\n        this.offset = data.offset;\n        this.nullBitmap = data.nullBitmap;\n    }\n    get size() {\n        return this.view.size || 1;\n    }\n    clone(data) {\n        return new ValidityView(data, this.view.clone(data));\n    }\n    toArray() {\n        return [...this];\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    isValid(index) {\n        const nullBitIndex = this.offset + index;\n        return getBool(null, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    get(index) {\n        const nullBitIndex = this.offset + index;\n        return this.getNullable(this.view, index, this.nullBitmap[nullBitIndex >> 3], nullBitIndex % 8);\n    }\n    set(index, value) {\n        if (setBool(this.nullBitmap, this.offset + index, value != null)) {\n            this.view.set(index, value);\n        }\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n    [Symbol.iterator]() {\n        return iterateBits(this.nullBitmap, this.offset, this.length, this.view, this.getNullable);\n    }\n    getNullable(view, index, byte, bit) {\n        return getBool(view, index, byte, bit) ? view.get(index) : null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QU0sRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLFdBQVcsQ0FBQyxDQUFDO0lBQ25ILENBQUM7SUFDUyxXQUFXLENBQUMsSUFBYSxFQUFFLEtBQWEsRUFBRSxJQUFZLEVBQUUsR0FBVztRQUN6RSxPQUFPLE9BQU8sQ0FBQyxJQUFJLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQ3BFLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvdmFsaWRpdHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgVmlldywgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmltcG9ydCB7IE5lc3RlZFZpZXcgfSBmcm9tICcuL25lc3RlZCc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgSXRlcmFibGVBcnJheUxpa2UgfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB7IGdldEJvb2wsIHNldEJvb2wsIGl0ZXJhdGVCaXRzIH0gZnJvbSAnLi4vdXRpbC9iaXQnO1xuXG5leHBvcnQgY2xhc3MgVmFsaWRpdHlWaWV3PFQgZXh0ZW5kcyBEYXRhVHlwZT4gaW1wbGVtZW50cyBWaWV3PFQ+IHtcbiAgICBwcm90ZWN0ZWQgdmlldzogVmlldzxUPjtcbiAgICBwcm90ZWN0ZWQgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHJvdGVjdGVkIG9mZnNldDogbnVtYmVyO1xuICAgIHByb3RlY3RlZCBudWxsQml0bWFwOiBVaW50OEFycmF5O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4sIHZpZXc6IFZpZXc8VD4pIHtcbiAgICAgICAgdGhpcy52aWV3ID0gdmlldztcbiAgICAgICAgdGhpcy5sZW5ndGggPSBkYXRhLmxlbmd0aDtcbiAgICAgICAgdGhpcy5vZmZzZXQgPSBkYXRhLm9mZnNldDtcbiAgICAgICAgdGhpcy5udWxsQml0bWFwID0gZGF0YS5udWxsQml0bWFwITtcbiAgICB9XG4gICAgcHVibGljIGdldCBzaXplKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiAodGhpcy52aWV3IGFzIGFueSkuc2l6ZSB8fCAxO1xuICAgIH1cbiAgICBwdWJsaWMgY2xvbmUoZGF0YTogRGF0YTxUPik6IHRoaXMge1xuICAgICAgICByZXR1cm4gbmV3IFZhbGlkaXR5VmlldyhkYXRhLCB0aGlzLnZpZXcuY2xvbmUoZGF0YSkpIGFzIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyB0b0FycmF5KCk6IEl0ZXJhYmxlQXJyYXlMaWtlPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBwdWJsaWMgaW5kZXhPZihzZWFyY2g6IFRbJ1RWYWx1ZSddKSB7XG4gICAgICAgIGxldCBpbmRleCA9IDA7XG4gICAgICAgIGZvciAobGV0IHZhbHVlIG9mIHRoaXMpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gc2VhcmNoKSB7IHJldHVybiBpbmRleDsgfVxuICAgICAgICAgICAgKytpbmRleDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICBjb25zdCBudWxsQml0SW5kZXggPSB0aGlzLm9mZnNldCArIGluZGV4O1xuICAgICAgICByZXR1cm4gZ2V0Qm9vbChudWxsLCBpbmRleCwgdGhpcy5udWxsQml0bWFwW251bGxCaXRJbmRleCA+PiAzXSwgbnVsbEJpdEluZGV4ICUgOCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7XG4gICAgICAgIGNvbnN0IG51bGxCaXRJbmRleCA9IHRoaXMub2Zmc2V0ICsgaW5kZXg7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE51bGxhYmxlKHRoaXMudmlldywgaW5kZXgsIHRoaXMubnVsbEJpdG1hcFtudWxsQml0SW5kZXggPj4gM10sIG51bGxCaXRJbmRleCAlIDgpO1xuICAgIH1cbiAgICBwdWJsaWMgc2V0KGluZGV4OiBudW1iZXIsIHZhbHVlOiBUWydUVmFsdWUnXSB8IG51bGwpOiB2b2lkIHtcbiAgICAgICAgaWYgKHNldEJvb2wodGhpcy5udWxsQml0bWFwLCB0aGlzLm9mZnNldCArIGluZGV4LCB2YWx1ZSAhPSBudWxsKSkge1xuICAgICAgICAgICAgdGhpcy52aWV3LnNldChpbmRleCwgdmFsdWUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IERhdGFUeXBlPihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbCB7XG4gICAgICAgIHJldHVybiAodGhpcy52aWV3IGFzIE5lc3RlZFZpZXc8YW55PikuZ2V0Q2hpbGRBdDxSPihpbmRleCk7XG4gICAgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFRbJ1RWYWx1ZSddIHwgbnVsbD4ge1xuICAgICAgICByZXR1cm4gaXRlcmF0ZUJpdHM8VFsnVFZhbHVlJ10gfCBudWxsPih0aGlzLm51bGxCaXRtYXAsIHRoaXMub2Zmc2V0LCB0aGlzLmxlbmd0aCwgdGhpcy52aWV3LCB0aGlzLmdldE51bGxhYmxlKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldE51bGxhYmxlKHZpZXc6IFZpZXc8VD4sIGluZGV4OiBudW1iZXIsIGJ5dGU6IG51bWJlciwgYml0OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIGdldEJvb2wodmlldywgaW5kZXgsIGJ5dGUsIGJpdCkgPyB2aWV3LmdldChpbmRleCkgOiBudWxsO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport class DictionaryView {\n    constructor(dictionary, indices) {\n        this.indices = indices;\n        this.dictionary = dictionary;\n    }\n    clone(data) {\n        return new DictionaryView(data.dictionary, this.indices.clone(data.indices));\n    }\n    isValid(index) {\n        return this.indices.isValid(index);\n    }\n    get(index) {\n        return this.dictionary.get(this.indices.get(index));\n    }\n    set(index, value) {\n        this.dictionary.set(this.indices.get(index), value);\n    }\n    toArray() {\n        return [...this];\n    }\n    *[Symbol.iterator]() {\n        const values = this.dictionary, indices = this.indices;\n        for (let index = -1, n = indices.length; ++index < n;) {\n            yield values.get(indices.get(index));\n        }\n    }\n    indexOf(search) {\n        // First find the dictionary key for the desired value...\n        const key = this.dictionary.indexOf(search);\n        if (key === -1) {\n            return key;\n        }\n        // ... then find the first occurence of that key in indices\n        return this.indices.indexOf(key);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQU1yQixNQUFNLE9BQU8sY0FBYztJQUd2QixZQUFZLFVBQXFCLEVBQUUsT0FBb0I7UUFDbkQsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7SUFDakMsQ0FBQztJQUNNLEtBQUssQ0FBQyxJQUFtQztRQUM1QyxPQUFPLElBQUksY0FBYyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFTLENBQUM7SUFDekYsQ0FBQztJQUNNLE9BQU8sQ0FBQyxLQUFhO1FBQ3hCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDdkMsQ0FBQztJQUNNLEdBQUcsQ0FBQyxLQUFhO1FBQ3BCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ00sR0FBRyxDQUFDLEtBQWEsRUFBRSxLQUFrQjtRQUN4QyxJQUFJLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUN4RCxDQUFDO0lBQ00sT0FBTztRQUNWLE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3JCLENBQUM7SUFDTSxDQUFDLENBQUMsTUFBTSxDQUFDLFFBQVEsQ0FBQztRQUNyQixNQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBVSxFQUFFLE9BQU8sR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3ZELEtBQUssSUFBSSxLQUFLLEdBQUcsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFNLEVBQUUsRUFBRSxLQUFLLEdBQUcsQ0FBQyxHQUFHO1lBQ25ELE1BQU0sTUFBTSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7U0FDeEM7SUFDTCxDQUFDO0lBQ00sT0FBTyxDQUFDLE1BQW1CO1FBQzlCLHlEQUF5RDtRQUN6RCxNQUFNLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUM1QyxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUMsRUFBRTtZQUFFLE9BQU8sR0FBRyxDQUFDO1NBQUU7UUFFL0IsMkRBQTJEO1FBQzNELE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBSSxDQUFDLENBQUM7SUFDdEMsQ0FBQztDQUNKIiwiZmlsZSI6InZlY3Rvci9kaWN0aW9uYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZpZXcsIFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBJdGVyYWJsZUFycmF5TGlrZSwgRGF0YVR5cGUsIERpY3Rpb25hcnksIEludCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeVZpZXc8VCBleHRlbmRzIERhdGFUeXBlPiBpbXBsZW1lbnRzIFZpZXc8VD4ge1xuICAgIHB1YmxpYyBpbmRpY2VzOiBWZWN0b3I8SW50PjtcbiAgICBwdWJsaWMgZGljdGlvbmFyeTogVmVjdG9yPFQ+O1xuICAgIGNvbnN0cnVjdG9yKGRpY3Rpb25hcnk6IFZlY3RvcjxUPiwgaW5kaWNlczogVmVjdG9yPEludD4pIHtcbiAgICAgICAgdGhpcy5pbmRpY2VzID0gaW5kaWNlcztcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5ID0gZGljdGlvbmFyeTtcbiAgICB9XG4gICAgcHVibGljIGNsb25lKGRhdGE6IERhdGE8RGljdGlvbmFyeTxUPj4gJiBEYXRhPFQ+KTogdGhpcyB7XG4gICAgICAgIHJldHVybiBuZXcgRGljdGlvbmFyeVZpZXcoZGF0YS5kaWN0aW9uYXJ5LCB0aGlzLmluZGljZXMuY2xvbmUoZGF0YS5pbmRpY2VzKSkgYXMgdGhpcztcbiAgICB9XG4gICAgcHVibGljIGlzVmFsaWQoaW5kZXg6IG51bWJlcik6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRpY2VzLmlzVmFsaWQoaW5kZXgpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0KGluZGV4OiBudW1iZXIpOiBUWydUVmFsdWUnXSB7XG4gICAgICAgIHJldHVybiB0aGlzLmRpY3Rpb25hcnkuZ2V0KHRoaXMuaW5kaWNlcy5nZXQoaW5kZXgpKTtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJ5LnNldCh0aGlzLmluZGljZXMuZ2V0KGluZGV4KSwgdmFsdWUpO1xuICAgIH1cbiAgICBwdWJsaWMgdG9BcnJheSgpOiBJdGVyYWJsZUFycmF5TGlrZTxUWydUVmFsdWUnXT4ge1xuICAgICAgICByZXR1cm4gWy4uLnRoaXNdO1xuICAgIH1cbiAgICBwdWJsaWMgKltTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8VFsnVFZhbHVlJ10+IHtcbiAgICAgICAgY29uc3QgdmFsdWVzID0gdGhpcy5kaWN0aW9uYXJ5LCBpbmRpY2VzID0gdGhpcy5pbmRpY2VzO1xuICAgICAgICBmb3IgKGxldCBpbmRleCA9IC0xLCBuID0gaW5kaWNlcy5sZW5ndGg7ICsraW5kZXggPCBuOykge1xuICAgICAgICAgICAgeWllbGQgdmFsdWVzLmdldChpbmRpY2VzLmdldChpbmRleCkpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBpbmRleE9mKHNlYXJjaDogVFsnVFZhbHVlJ10pIHtcbiAgICAgICAgLy8gRmlyc3QgZmluZCB0aGUgZGljdGlvbmFyeSBrZXkgZm9yIHRoZSBkZXNpcmVkIHZhbHVlLi4uXG4gICAgICAgIGNvbnN0IGtleSA9IHRoaXMuZGljdGlvbmFyeS5pbmRleE9mKHNlYXJjaCk7XG4gICAgICAgIGlmIChrZXkgPT09IC0xKSB7IHJldHVybiBrZXk7IH1cblxuICAgICAgICAvLyAuLi4gdGhlbiBmaW5kIHRoZSBmaXJzdCBvY2N1cmVuY2Ugb2YgdGhhdCBrZXkgaW4gaW5kaWNlc1xuICAgICAgICByZXR1cm4gdGhpcy5pbmRpY2VzLmluZGV4T2Yoa2V5ISk7XG4gICAgfVxufVxuIl19\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { createVector } from '../vector';\nimport { TextEncoder, TextDecoder } from 'text-encoding-utf-8';\nexport const encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new TextEncoder('utf-8'));\nexport const decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new TextDecoder('utf-8'));\nexport class ListViewBase {\n    constructor(data) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    toArray() {\n        return [...this];\n    }\n    get(index) {\n        return this.getList(this.values, index, this.valueOffsets);\n    }\n    set(index, value) {\n        return this.setList(this.values, index, value, this.valueOffsets);\n    }\n    *[Symbol.iterator]() {\n        const get = this.getList, length = this.length;\n        const values = this.values, valueOffsets = this.valueOffsets;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, valueOffsets);\n        }\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n}\nexport class VariableListViewBase extends ListViewBase {\n    constructor(data) {\n        super(data);\n        this.length = data.length;\n        this.valueOffsets = data.valueOffsets;\n    }\n}\nexport class ListView extends VariableListViewBase {\n    constructor(data) {\n        super(data);\n        this.values = createVector(data.values);\n    }\n    getChildAt(index) {\n        return index === 0 ? this.values : null;\n    }\n    getList(values, index, valueOffsets) {\n        return values.slice(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    setList(values, index, value, valueOffsets) {\n        let idx = -1;\n        let offset = valueOffsets[index];\n        let end = Math.min(value.length, valueOffsets[index + 1] - offset);\n        while (offset < end) {\n            values.set(offset++, value.get(++idx));\n        }\n    }\n}\nexport class FixedSizeListView extends ListViewBase {\n    constructor(data) {\n        super(data);\n        this.size = data.type.listSize;\n        this.values = createVector(data.values);\n    }\n    getChildAt(index) {\n        return index === 0 ? this.values : null;\n    }\n    getList(values, index) {\n        const size = this.size;\n        return values.slice(index *= size, index + size);\n    }\n    setList(values, index, value) {\n        let size = this.size;\n        for (let idx = -1, offset = index * size; ++idx < size;) {\n            values.set(offset + idx, value.get(++idx));\n        }\n    }\n}\nexport class BinaryView extends VariableListViewBase {\n    getList(values, index, valueOffsets) {\n        return values.subarray(valueOffsets[index], valueOffsets[index + 1]);\n    }\n    setList(values, index, value, valueOffsets) {\n        const offset = valueOffsets[index];\n        values.set(value.subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\nexport class Utf8View extends VariableListViewBase {\n    getList(values, index, valueOffsets) {\n        return decodeUtf8(values.subarray(valueOffsets[index], valueOffsets[index + 1]));\n    }\n    setList(values, index, value, valueOffsets) {\n        const offset = valueOffsets[index];\n        values.set(encodeUtf8(value).subarray(0, valueOffsets[index + 1] - offset), offset);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","export function leftPad(str, fill, n) {\n    return (new Array(n + 1).join(fill) + str).slice(-1 * n);\n}\nexport function valueToString(x) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHJldHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUNBLE1BQU0sVUFBVSxPQUFPLENBQUMsR0FBVyxFQUFFLElBQVksRUFBRSxDQUFTO0lBQ3hELE9BQU8sQ0FBQyxJQUFJLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQztBQUM3RCxDQUFDO0FBRUQsTUFBTSxVQUFVLGFBQWEsQ0FBQyxDQUFNO0lBQ2hDLE9BQU8sT0FBTyxDQUFDLEtBQUssUUFBUSxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ25HLENBQUMiLCJmaWxlIjoidXRpbC9wcmV0dHkuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbmV4cG9ydCBmdW5jdGlvbiBsZWZ0UGFkKHN0cjogc3RyaW5nLCBmaWxsOiBzdHJpbmcsIG46IG51bWJlcikge1xuICAgIHJldHVybiAobmV3IEFycmF5KG4gKyAxKS5qb2luKGZpbGwpICsgc3RyKS5zbGljZSgtMSAqIG4pO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1N0cmluZyh4OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnID8gYFwiJHt4fVwiYCA6IEFycmF5QnVmZmVyLmlzVmlldyh4KSA/IGBbJHt4fV1gIDogSlNPTi5zdHJpbmdpZnkoeCk7XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Schema, Struct } from './type';\nimport { Vector, StructVector } from './vector';\nimport { NestedData } from './data';\nimport { PipeIterator } from './util/node';\nimport { valueToString, leftPad } from './util/pretty';\nexport class RecordBatch extends StructVector {\n    static from(vectors) {\n        return new RecordBatch(Schema.from(vectors), Math.max(...vectors.map((v) => v.length)), vectors);\n    }\n    constructor(...args) {\n        if (typeof args[1] !== 'number') {\n            const data = args[1];\n            super(data, args[2]);\n            this.schema = args[0];\n            this.length = data.length;\n        }\n        else {\n            const [schema, numRows, cols] = args;\n            const childData = new Array(cols.length);\n            for (let index = -1, length = cols.length; ++index < length;) {\n                const col = cols[index];\n                childData[index] = col instanceof Vector ? col.data : col;\n            }\n            super(new NestedData(new Struct(schema.fields), numRows, null, childData));\n            this.schema = schema;\n            this.length = numRows;\n        }\n        this.numCols = this.schema.fields.length;\n    }\n    clone(data, view = this.view.clone(data)) {\n        return new RecordBatch(this.schema, data, view);\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numCols ? null : super.getChildAt(index);\n    }\n    select(...columnNames) {\n        const fields = this.schema.fields;\n        const namesToKeep = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new RecordBatch(this.schema.select(...columnNames), this.length, this.childData.filter((_, i) => namesToKeep[fields[i].name]));\n    }\n    rowsToString(separator = ' | ', rowOffset = 0, maxColumnWidths = []) {\n        return new PipeIterator(recordBatchRowsToString(this, separator, rowOffset, maxColumnWidths), 'utf8');\n    }\n}\nfunction* recordBatchRowsToString(recordBatch, separator = ' | ', rowOffset = 0, maxColumnWidths = []) {\n    const fields = recordBatch.schema.fields;\n    const header = ['row_id', ...fields.map((f) => `${f}`)].map(valueToString);\n    header.forEach((x, i) => {\n        maxColumnWidths[i] = Math.max(maxColumnWidths[i] || 0, x.length);\n    });\n    // Pass one to convert to strings and count max column widths\n    for (let i = -1, n = recordBatch.length - 1; ++i < n;) {\n        let val, row = [rowOffset + i, ...recordBatch.get(i)];\n        for (let j = -1, k = row.length; ++j < k;) {\n            val = valueToString(row[j]);\n            maxColumnWidths[j] = Math.max(maxColumnWidths[j] || 0, val.length);\n        }\n    }\n    for (let i = -1; ++i < recordBatch.length;) {\n        if ((rowOffset + i) % 1000 === 0) {\n            yield header.map((x, j) => leftPad(x, ' ', maxColumnWidths[j])).join(separator);\n        }\n        yield [rowOffset + i, ...recordBatch.get(i)]\n            .map((x) => valueToString(x))\n            .map((x, j) => leftPad(x, ' ', maxColumnWidths[j]))\n            .join(separator);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { valueToString } from '../util/pretty';\nexport class NestedView {\n    constructor(data, children) {\n        this.length = data.length;\n        this.childData = data.childData;\n        this.numChildren = data.childData.length;\n        this._children = children || new Array(this.numChildren);\n    }\n    clone(data) {\n        return new this.constructor(data, this._children);\n    }\n    isValid() {\n        return true;\n    }\n    toArray() {\n        return [...this];\n    }\n    indexOf(_) {\n        throw new Error(`Not implemented yet`);\n    }\n    toJSON() { return this.toArray(); }\n    toString() {\n        return [...this].map((x) => valueToString(x)).join(', ');\n    }\n    get(index) {\n        return this.getNested(this, index);\n    }\n    set(index, value) {\n        return this.setNested(this, index, value);\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren\n            ? null\n            : this._children[index] ||\n                (this._children[index] = Vector.create(this.childData[index]));\n    }\n    *[Symbol.iterator]() {\n        const get = this.getNested;\n        const length = this.length;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index);\n        }\n    }\n}\nexport class UnionView extends NestedView {\n    constructor(data, children) {\n        super(data, children);\n        this.length = data.length;\n        this.typeIds = data.typeIds;\n        this.typeIdToChildIndex = data.typeIdToChildIndex;\n    }\n    getNested(self, index) {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    setNested(self, index, value) {\n        return self.setChildValue(self, index, value, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    getChildValue(self, index, typeIds, _valueOffsets, typeIdToChildIndex) {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(index) : null;\n    }\n    setChildValue(self, index, value, typeIds, _valueOffsets, typeIdToChildIndex) {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(index, value) : null;\n    }\n    *[Symbol.iterator]() {\n        const length = this.length;\n        const get = this.getChildValue;\n        const { typeIdToChildIndex } = this;\n        const { typeIds, valueOffsets } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(this, index, typeIds, valueOffsets, typeIdToChildIndex);\n        }\n    }\n}\nexport class DenseUnionView extends UnionView {\n    constructor(data, children) {\n        super(data, children);\n        this.valueOffsets = data.valueOffsets;\n    }\n    getNested(self, index) {\n        return self.getChildValue(self, index, self.typeIds, self.valueOffsets, self.typeIdToChildIndex);\n    }\n    getChildValue(self, index, typeIds, valueOffsets, typeIdToChildIndex) {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.get(valueOffsets[index]) : null;\n    }\n    setChildValue(self, index, value, typeIds, valueOffsets, typeIdToChildIndex) {\n        const child = self.getChildAt(typeIdToChildIndex[typeIds[index]]);\n        return child ? child.set(valueOffsets[index], value) : null;\n    }\n}\nexport class StructView extends NestedView {\n    constructor(data, children) {\n        super(data, children);\n        // Make a customized RowView that includes proxies for\n        class RowProxy extends RowView {\n        }\n        const proto = RowProxy.prototype;\n        data.type.children.forEach(function (f, i) {\n            Object.defineProperty(proto, f.name, {\n                get: function () {\n                    return this.get(i);\n                },\n                enumerable: true\n            });\n        });\n        this.RowView = RowProxy;\n    }\n    getNested(self, index) {\n        return new self.RowView(self, self._children, index);\n    }\n    setNested(self, index, value) {\n        let idx = -1, len = self.numChildren, child;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value[idx]);\n                }\n            }\n        }\n        else {\n            while (++idx < len) {\n                if (child = self.getChildAt(idx)) {\n                    child.set(index, value.get(idx));\n                }\n            }\n        }\n    }\n}\nexport class MapView extends NestedView {\n    constructor(data, children) {\n        super(data, children);\n        this.typeIds = data.type.children.reduce((xs, x, i) => (xs[x.name] = i) && xs || xs, Object.create(null));\n    }\n    getNested(self, index) {\n        return new MapRowView(self, self._children, index);\n    }\n    setNested(self, index, value) {\n        let typeIds = self.typeIds, child;\n        if (!(value instanceof NestedView || value instanceof Vector)) {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value[key]);\n                }\n            }\n        }\n        else {\n            for (const key in typeIds) {\n                if (child = self.getChildAt(typeIds[key])) {\n                    child.set(index, value.get(key));\n                }\n            }\n        }\n    }\n}\nexport class RowView extends UnionView {\n    constructor(data, children, rowIndex) {\n        super(data, children);\n        this.rowIndex = rowIndex || 0;\n        this.length = data.numChildren;\n    }\n    clone(data) {\n        return new this.constructor(data, this._children, this.rowIndex);\n    }\n    getChildValue(self, index, _typeIds, _valueOffsets) {\n        const child = self.getChildAt(index);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    setChildValue(self, index, value, _typeIds, _valueOffsets) {\n        const child = self.getChildAt(index);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\nexport class MapRowView extends RowView {\n    toJSON() {\n        const get = this.getChildValue;\n        const result = {};\n        const typeIds = this.typeIds;\n        for (const name in typeIds) {\n            result[name] = get(this, name, typeIds, null);\n        }\n        return result;\n    }\n    getChildValue(self, key, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.get(self.rowIndex) : null;\n    }\n    setChildValue(self, key, value, typeIds, _valueOffsets) {\n        const child = self.getChildAt(typeIds[key]);\n        return child ? child.set(self.rowIndex, value) : null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ChunkedData, FlatData, BoolData, DictionaryData } from './data';\nimport { TypeVisitor, VectorVisitor } from './visitor';\nimport { TimeUnit } from './type';\nimport { Precision, DateUnit, IntervalUnit, UnionMode } from './type';\nexport class Vector {\n    constructor(data, view) {\n        this.data = data;\n        this.type = data.type;\n        this.length = data.length;\n        let nulls;\n        if ((data instanceof ChunkedData) && !(view instanceof ChunkedView)) {\n            this.view = new ChunkedView(data);\n        }\n        else if (!(view instanceof ValidityView) && (nulls = data.nullBitmap) && nulls.length > 0 && data.nullCount > 0) {\n            this.view = new ValidityView(data, view);\n        }\n        else {\n            this.view = view;\n        }\n    }\n    static create(data) {\n        return createVector(data);\n    }\n    static concat(source, ...others) {\n        return others.reduce((a, b) => a ? a.concat(b) : b, source);\n    }\n    get nullCount() { return this.data.nullCount; }\n    get nullBitmap() { return this.data.nullBitmap; }\n    get [Symbol.toStringTag]() {\n        return `Vector<${this.type[Symbol.toStringTag]}>`;\n    }\n    toJSON() { return this.toArray(); }\n    clone(data, view = this.view.clone(data)) {\n        return new this.constructor(data, view);\n    }\n    isValid(index) {\n        return this.view.isValid(index);\n    }\n    get(index) {\n        return this.view.get(index);\n    }\n    set(index, value) {\n        return this.view.set(index, value);\n    }\n    toArray() {\n        return this.view.toArray();\n    }\n    indexOf(value) {\n        return this.view.indexOf(value);\n    }\n    [Symbol.iterator]() {\n        return this.view[Symbol.iterator]();\n    }\n    concat(...others) {\n        if ((others = others.filter(Boolean)).length === 0) {\n            return this;\n        }\n        const { view } = this;\n        const vecs = !(view instanceof ChunkedView)\n            ? [this, ...others]\n            : [...view.chunkVectors, ...others];\n        const offsets = ChunkedData.computeOffsets(vecs);\n        const chunksLength = offsets[offsets.length - 1];\n        const chunkedData = new ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);\n        return this.clone(chunkedData, new ChunkedView(chunkedData));\n    }\n    slice(begin, end) {\n        let { length } = this;\n        let size = this.view.size || 1;\n        let total = length, from = (begin || 0) * size;\n        let to = (typeof end === 'number' ? end : total) * size;\n        if (to < 0) {\n            to = total - (to * -1) % total;\n        }\n        if (from < 0) {\n            from = total - (from * -1) % total;\n        }\n        if (to < from) {\n            [from, to] = [to, from];\n        }\n        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;\n        const slicedData = this.data.slice(from, Math.min(total, length));\n        return this.clone(slicedData, this.view.clone(slicedData));\n    }\n    acceptTypeVisitor(visitor) {\n        return TypeVisitor.visitTypeInline(visitor, this.type);\n    }\n    acceptVectorVisitor(visitor) {\n        return VectorVisitor.visitTypeInline(visitor, this.type, this);\n    }\n}\nexport class FlatVector extends Vector {\n    get values() { return this.data.values; }\n    lows() { return this.asInt32(0, 2); }\n    highs() { return this.asInt32(1, 2); }\n    asInt32(offset = 0, stride = 2) {\n        let data = this.data.clone(new Int32());\n        if (offset > 0) {\n            data = data.slice(offset, this.length - offset);\n        }\n        const int32s = new IntVector(data, new PrimitiveView(data, stride));\n        int32s.length = this.length / stride | 0;\n        return int32s;\n    }\n}\nexport class ListVectorBase extends Vector {\n    get values() { return this.data.values; }\n    get valueOffsets() { return this.data.valueOffsets; }\n    getValueOffset(index) {\n        return this.valueOffsets[index];\n    }\n    getValueLength(index) {\n        return this.valueOffsets[index + 1] - this.valueOffsets[index];\n    }\n}\nexport class NestedVector extends Vector {\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n    get childData() {\n        let data;\n        if ((data = this._childData)) {\n            // Return the cached childData reference first\n            return data;\n        }\n        else if (!((data = this.data) instanceof ChunkedData)) {\n            // If data isn't chunked, cache and return NestedData's childData\n            return this._childData = data.childData;\n        }\n        // Otherwise if the data is chunked, concatenate the childVectors from each chunk\n        // to construct a single chunked Vector for each column. Then return the ChunkedData\n        // instance from each unified chunked column as the childData of a chunked NestedVector\n        const chunks = data.chunkVectors;\n        return this._childData = chunks\n            .reduce((cols, chunk) => chunk.childData\n            .reduce((cols, _, i) => ((cols[i] || (cols[i] = [])).push(chunk.getChildAt(i))) && cols || cols, cols), [])\n            .map((vecs) => Vector.concat(...vecs).data);\n    }\n}\nimport { Binary, Utf8, Bool, } from './type';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64, Float16, Float32, Float64 } from './type';\nimport { Struct, Map_ } from './type';\nimport { ChunkedView } from './vector/chunked';\nimport { ValidityView } from './vector/validity';\nimport { DictionaryView } from './vector/dictionary';\nimport { ListView, FixedSizeListView, BinaryView, Utf8View } from './vector/list';\nimport { UnionView, DenseUnionView, StructView, MapView } from './vector/nested';\nimport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './vector/flat';\nimport { DateDayView, DateMillisecondView, IntervalYearMonthView } from './vector/flat';\nimport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './vector/flat';\nimport { packBools } from './util/bit';\nexport class NullVector extends Vector {\n    constructor(data, view = new NullView(data)) {\n        super(data, view);\n    }\n}\nexport class BoolVector extends Vector {\n    static from(data) {\n        return new BoolVector(new BoolData(new Bool(), data.length, null, packBools(data)));\n    }\n    get values() { return this.data.values; }\n    constructor(data, view = new BoolView(data)) {\n        super(data, view);\n    }\n}\nexport class IntVector extends FlatVector {\n    constructor(data, view = IntVector.defaultView(data)) {\n        super(data, view);\n    }\n    static from(data, is64) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? new IntVector(new FlatData(new Int64(), data.length, null, data))\n                : new IntVector(new FlatData(new Uint64(), data.length, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return new IntVector(new FlatData(new Int8(), data.length, null, data));\n            case Int16Array: return new IntVector(new FlatData(new Int16(), data.length, null, data));\n            case Int32Array: return new IntVector(new FlatData(new Int32(), data.length, null, data));\n            case Uint8Array: return new IntVector(new FlatData(new Uint8(), data.length, null, data));\n            case Uint16Array: return new IntVector(new FlatData(new Uint16(), data.length, null, data));\n            case Uint32Array: return new IntVector(new FlatData(new Uint32(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n    static defaultView(data) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n}\nexport class FloatVector extends FlatVector {\n    constructor(data, view = FloatVector.defaultView(data)) {\n        super(data, view);\n    }\n    static from(data) {\n        switch (data.constructor) {\n            case Uint16Array: return new FloatVector(new FlatData(new Float16(), data.length, null, data));\n            case Float32Array: return new FloatVector(new FlatData(new Float32(), data.length, null, data));\n            case Float64Array: return new FloatVector(new FlatData(new Float64(), data.length, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n    static defaultView(data) {\n        return data.type.precision !== Precision.HALF ? new FlatView(data) : new Float16View(data);\n    }\n}\nexport class DateVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.unit === DateUnit.DAY ? new DateDayView(data) : new DateMillisecondView(data, 2);\n    }\n    constructor(data, view = DateVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.unit === DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n    asEpochMilliseconds() {\n        let data = this.data.clone(new Int32());\n        switch (this.type.unit) {\n            case DateUnit.DAY: return new IntVector(data, new TimestampDayView(data, 1));\n            case DateUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[this.type.unit]}\"`);\n    }\n}\nexport class DecimalVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, 4)) {\n        super(data, view);\n    }\n}\nexport class TimeVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.bitWidth <= 32 ? new FlatView(data) : new FixedSizeView(data, (data.type.bitWidth / 32) | 0);\n    }\n    constructor(data, view = TimeVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\nexport class TimestampVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, 2)) {\n        super(data, view);\n    }\n    asEpochMilliseconds() {\n        let data = this.data.clone(new Int32());\n        switch (this.type.unit) {\n            case TimeUnit.SECOND: return new IntVector(data, new TimestampSecondView(data, 1));\n            case TimeUnit.MILLISECOND: return new IntVector(data, new TimestampMillisecondView(data, 2));\n            case TimeUnit.MICROSECOND: return new IntVector(data, new TimestampMicrosecondView(data, 2));\n            case TimeUnit.NANOSECOND: return new IntVector(data, new TimestampNanosecondView(data, 2));\n        }\n        throw new TypeError(`Unrecognized time unit \"${TimeUnit[this.type.unit]}\"`);\n    }\n}\nexport class IntervalVector extends FlatVector {\n    static defaultView(data) {\n        return data.type.unit === IntervalUnit.YEAR_MONTH ? new IntervalYearMonthView(data) : new FixedSizeView(data, 2);\n    }\n    constructor(data, view = IntervalVector.defaultView(data)) {\n        super(data, view);\n    }\n    lows() {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);\n    }\n    highs() {\n        return this.type.unit === IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);\n    }\n}\nexport class BinaryVector extends ListVectorBase {\n    constructor(data, view = new BinaryView(data)) {\n        super(data, view);\n    }\n    asUtf8() {\n        return new Utf8Vector(this.data.clone(new Utf8()));\n    }\n}\nexport class FixedSizeBinaryVector extends FlatVector {\n    constructor(data, view = new FixedSizeView(data, data.type.byteWidth)) {\n        super(data, view);\n    }\n}\nexport class Utf8Vector extends ListVectorBase {\n    constructor(data, view = new Utf8View(data)) {\n        super(data, view);\n    }\n    asBinary() {\n        return new BinaryVector(this.data.clone(new Binary()));\n    }\n}\nexport class ListVector extends ListVectorBase {\n    constructor(data, view = new ListView(data)) {\n        super(data, view);\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n}\nexport class FixedSizeListVector extends Vector {\n    constructor(data, view = new FixedSizeListView(data)) {\n        super(data, view);\n    }\n    getChildAt(index) {\n        return this.view.getChildAt(index);\n    }\n}\nexport class MapVector extends NestedVector {\n    constructor(data, view = new MapView(data)) {\n        super(data, view);\n    }\n    asStruct() {\n        return new StructVector(this.data.clone(new Struct(this.type.children)));\n    }\n}\nexport class StructVector extends NestedVector {\n    constructor(data, view = new StructView(data)) {\n        super(data, view);\n    }\n    asMap(keysSorted = false) {\n        return new MapVector(this.data.clone(new Map_(keysSorted, this.type.children)));\n    }\n}\nexport class UnionVector extends NestedVector {\n    constructor(data, view = (data.type.mode === UnionMode.Sparse ? new UnionView(data) : new DenseUnionView(data))) {\n        super(data, view);\n    }\n}\nexport class DictionaryVector extends Vector {\n    constructor(data, view = new DictionaryView(data.dictionary, new IntVector(data.indices))) {\n        super(data, view);\n        if (view instanceof ValidityView) {\n            view = view.view;\n        }\n        if (data instanceof DictionaryData && view instanceof DictionaryView) {\n            this.indices = view.indices;\n            this.dictionary = data.dictionary;\n        }\n        else if (data instanceof ChunkedData && view instanceof ChunkedView) {\n            const chunks = view.chunkVectors;\n            // Assume the last chunk's dictionary data is the most up-to-date,\n            // including data from DictionaryBatches that were marked as deltas\n            this.dictionary = chunks[chunks.length - 1].dictionary;\n            this.indices = chunks.reduce((idxs, dict) => !idxs ? dict.indices : idxs.concat(dict.indices), null);\n        }\n        else {\n            throw new TypeError(`Unrecognized DictionaryVector view`);\n        }\n    }\n    getKey(index) { return this.indices.get(index); }\n    getValue(key) { return this.dictionary.get(key); }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n}\nexport const createVector = ((VectorLoader) => ((data) => TypeVisitor.visitTypeInline(new VectorLoader(data), data.type)))(class VectorLoader extends TypeVisitor {\n    constructor(data) {\n        super();\n        this.data = data;\n    }\n    visitNull(_type) { return new NullVector(this.data); }\n    visitInt(_type) { return new IntVector(this.data); }\n    visitFloat(_type) { return new FloatVector(this.data); }\n    visitBinary(_type) { return new BinaryVector(this.data); }\n    visitUtf8(_type) { return new Utf8Vector(this.data); }\n    visitBool(_type) { return new BoolVector(this.data); }\n    visitDecimal(_type) { return new DecimalVector(this.data); }\n    visitDate(_type) { return new DateVector(this.data); }\n    visitTime(_type) { return new TimeVector(this.data); }\n    visitTimestamp(_type) { return new TimestampVector(this.data); }\n    visitInterval(_type) { return new IntervalVector(this.data); }\n    visitList(_type) { return new ListVector(this.data); }\n    visitStruct(_type) { return new StructVector(this.data); }\n    visitUnion(_type) { return new UnionVector(this.data); }\n    visitFixedSizeBinary(_type) { return new FixedSizeBinaryVector(this.data); }\n    visitFixedSizeList(_type) { return new FixedSizeListVector(this.data); }\n    visitMap(_type) { return new MapVector(this.data); }\n    visitDictionary(_type) { return new DictionaryVector(this.data); }\n});\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { getBool, setBool, iterateBits } from '../util/bit';\nexport class FlatView {\n    constructor(data) {\n        this.length = data.length;\n        this.values = data.values;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    get(index) {\n        return this.values[index];\n    }\n    set(index, value) {\n        return this.values[index] = value;\n    }\n    toArray() {\n        return this.values.subarray(0, this.length);\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value === search) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    [Symbol.iterator]() {\n        return this.values.subarray(0, this.length)[Symbol.iterator]();\n    }\n}\nexport class NullView {\n    constructor(data) {\n        this.length = data.length;\n    }\n    clone(data) {\n        return new this.constructor(data);\n    }\n    isValid() {\n        return true;\n    }\n    set() { }\n    get() { return null; }\n    toArray() {\n        return [...this];\n    }\n    indexOf(search) {\n        // if you're looking for nulls and the view isn't empty, we've got 'em!\n        return search === null && this.length > 0 ? 0 : -1;\n    }\n    *[Symbol.iterator]() {\n        for (let index = -1, length = this.length; ++index < length;) {\n            yield null;\n        }\n    }\n}\nexport class BoolView extends FlatView {\n    constructor(data) {\n        super(data);\n        this.offset = data.offset;\n    }\n    toArray() { return [...this]; }\n    get(index) {\n        const boolBitIndex = this.offset + index;\n        return getBool(null, index, this.values[boolBitIndex >> 3], boolBitIndex % 8);\n    }\n    set(index, value) {\n        setBool(this.values, this.offset + index, value);\n    }\n    [Symbol.iterator]() {\n        return iterateBits(this.values, this.offset, this.length, this.values, getBool);\n    }\n}\nexport class PrimitiveView extends FlatView {\n    constructor(data, size) {\n        super(data);\n        this.size = size || 1;\n        this.ArrayType = data.type.ArrayType;\n    }\n    clone(data) {\n        return new this.constructor(data, this.size);\n    }\n    getValue(values, index, size) {\n        return values[index * size];\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = value;\n    }\n    get(index) {\n        return this.getValue(this.values, index, this.size);\n    }\n    set(index, value) {\n        return this.setValue(this.values, index, this.size, value);\n    }\n    toArray() {\n        return this.size > 1 ?\n            new this.ArrayType(this) :\n            this.values.subarray(0, this.length);\n    }\n    *[Symbol.iterator]() {\n        const get = this.getValue;\n        const { size, values, length } = this;\n        for (let index = -1; ++index < length;) {\n            yield get(values, index, size);\n        }\n    }\n}\nexport class FixedSizeView extends PrimitiveView {\n    toArray() {\n        return this.values;\n    }\n    indexOf(search) {\n        let index = 0;\n        for (let value of this) {\n            if (value.every((d, i) => d === search[i])) {\n                return index;\n            }\n            ++index;\n        }\n        return -1;\n    }\n    getValue(values, index, size) {\n        return values.subarray(index * size, index * size + size);\n    }\n    setValue(values, index, size, value) {\n        values.set(value.subarray(0, size), index * size);\n    }\n}\nexport class Float16View extends PrimitiveView {\n    toArray() { return new Float32Array(this); }\n    getValue(values, index, size) {\n        return (values[index * size] - 32767) / 32767;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value * 32767) + 32767;\n    }\n}\nexport class DateDayView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochDaysToDate(values, index * size);\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = value.valueOf() / 86400000;\n    }\n}\nexport class DateMillisecondView extends FixedSizeView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMillisecondsLongToDate(values, index * size);\n    }\n    setValue(values, index, size, value) {\n        const epochMs = value.valueOf();\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\nexport class TimestampDayView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochDaysToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs / 86400000) | 0;\n    }\n}\nexport class TimestampSecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochSecondsToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs / 1000) | 0;\n    }\n}\nexport class TimestampMillisecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMillisecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = (epochMs % 4294967296) | 0;\n        values[index * size + size] = (epochMs / 4294967296) | 0;\n    }\n}\nexport class TimestampMicrosecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochMicrosecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = ((epochMs / 1000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000) / 4294967296) | 0;\n    }\n}\nexport class TimestampNanosecondView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return epochNanosecondsLongToMs(values, index * size);\n    }\n    setValue(values, index, size, epochMs) {\n        values[index * size] = ((epochMs / 1000000) % 4294967296) | 0;\n        values[index * size + size] = ((epochMs / 1000000) / 4294967296) | 0;\n    }\n}\nexport class IntervalYearMonthView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        const interval = values[index * size];\n        return new Int32Array([interval / 12, /* years */ interval % 12 /* months */]);\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value[0] * 12) + (value[1] % 12);\n    }\n}\nexport class IntervalYearView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return values[index * size] / 12;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (value * 12) + (values[index * size] % 12);\n    }\n}\nexport class IntervalMonthView extends PrimitiveView {\n    toArray() { return [...this]; }\n    getValue(values, index, size) {\n        return values[index * size] % 12;\n    }\n    setValue(values, index, size, value) {\n        values[index * size] = (values[index * size] * 12) + (value % 12);\n    }\n}\nexport function epochSecondsToMs(data, index) { return 1000 * data[index]; }\nexport function epochDaysToMs(data, index) { return 86400000 * data[index]; }\nexport function epochMillisecondsLongToMs(data, index) { return 4294967296 * (data[index + 1]) + (data[index] >>> 0); }\nexport function epochMicrosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000); }\nexport function epochNanosecondsLongToMs(data, index) { return 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000); }\nexport function epochMillisecondsToDate(epochMs) { return new Date(epochMs); }\nexport function epochDaysToDate(data, index) { return epochMillisecondsToDate(epochDaysToMs(data, index)); }\nexport function epochSecondsToDate(data, index) { return epochMillisecondsToDate(epochSecondsToMs(data, index)); }\nexport function epochNanosecondsLongToDate(data, index) { return epochMillisecondsToDate(epochNanosecondsLongToMs(data, index)); }\nexport function epochMillisecondsLongToDate(data, index) { return epochMillisecondsToDate(epochMillisecondsLongToMs(data, index)); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst carryBit16 = 1 << 16;\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import * as tslib_1 from \"tslib\";\nexport class PipeIterator {\n    constructor(iterator, encoding) {\n        this.iterator = iterator;\n        this.encoding = encoding;\n    }\n    [Symbol.iterator]() { return this.iterator; }\n    next(value) { return this.iterator.next(value); }\n    throw(error) {\n        if (typeof this.iterator.throw === 'function') {\n            return this.iterator.throw(error);\n        }\n        return { done: true, value: null };\n    }\n    return(value) {\n        if (typeof this.iterator.return === 'function') {\n            return this.iterator.return(value);\n        }\n        return { done: true, value: null };\n    }\n    pipe(stream) {\n        let { encoding } = this;\n        let res;\n        let write = (err) => {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) {\n                return this.throw(err);\n            }\n            if (stream['writable']) {\n                do {\n                    if ((res = this.next()).done) {\n                        break;\n                    }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        };\n        write();\n        return stream;\n    }\n}\nexport class AsyncPipeIterator {\n    constructor(iterator, encoding) {\n        this.iterator = iterator;\n        this.encoding = encoding;\n    }\n    [Symbol.asyncIterator]() { return this.iterator; }\n    next(value) { return this.iterator.next(value); }\n    throw(error) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (typeof this.iterator.throw === 'function') {\n                return this.iterator.throw(error);\n            }\n            return { done: true, value: null };\n        });\n    }\n    return(value) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            if (typeof this.iterator.return === 'function') {\n                return this.iterator.return(value);\n            }\n            return { done: true, value: null };\n        });\n    }\n    pipe(stream) {\n        let { encoding } = this;\n        let res;\n        let write = (err) => tslib_1.__awaiter(this, void 0, void 0, function* () {\n            stream['removeListener']('error', write);\n            stream['removeListener']('drain', write);\n            if (err) {\n                return this.throw(err);\n            }\n            if (stream['writable']) {\n                do {\n                    if ((res = yield this.next()).done) {\n                        break;\n                    }\n                } while (emit(stream, encoding, res.value));\n            }\n            return wait(stream, res && res.done, write);\n        });\n        write();\n        return stream;\n    }\n}\nconst toBufferOrUint8Array = (() => {\n    // If in node, convert Uint8Arrays to Buffer instances. This is necessary\n    // because some node APIs ('http' etc.) don't work unless you give them Buffers.\n    // This eval also defeats closure-compiler, which doesn't recognize the Buffer constructor.\n    const BufferCtor = eval('typeof Buffer !== \"undefined\" ? Buffer : null');\n    return !BufferCtor ? (arr) => arr :\n        (arr) => BufferCtor.from(arr.buffer, arr.byteOffset, arr.byteLength);\n})();\nfunction emit(stream, encoding, value) {\n    return stream['write']((encoding === 'utf8' ? value + '\\n' : toBufferOrUint8Array(value)), encoding);\n}\nfunction wait(stream, done, write) {\n    const p = eval('process'); // defeat closure compiler\n    if (!done) {\n        stream['once']('error', write);\n        stream['once']('drain', write);\n    }\n    else if (!(!p || stream === p.stdout) && !stream['isTTY']) {\n        stream['end']();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","export { ChunkedView } from './chunked';\nexport { ValidityView } from './validity';\nexport { DictionaryView } from './dictionary';\nexport { ListView, FixedSizeListView, BinaryView, Utf8View } from './list';\nexport { UnionView, DenseUnionView, NestedView, StructView, MapView } from './nested';\nexport { FlatView, NullView, BoolView, PrimitiveView, FixedSizeView, Float16View } from './flat';\nexport { DateDayView, DateMillisecondView } from './flat';\nexport { IntervalYearMonthView, IntervalYearView, IntervalMonthView } from './flat';\nexport { TimestampDayView, TimestampSecondView, TimestampMillisecondView, TimestampMicrosecondView, TimestampNanosecondView } from './flat';\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci92aWV3LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDeEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFlBQVksQ0FBQztBQUMxQyxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQzlDLE9BQU8sRUFBRSxRQUFRLEVBQUUsaUJBQWlCLEVBQUUsVUFBVSxFQUFFLFFBQVEsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUMzRSxPQUFPLEVBQUUsU0FBUyxFQUFFLGNBQWMsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLE9BQU8sRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN0RixPQUFPLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxXQUFXLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDakcsT0FBTyxFQUFFLFdBQVcsRUFBRSxtQkFBbUIsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUMxRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsZ0JBQWdCLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEYsT0FBTyxFQUFFLGdCQUFnQixFQUFFLG1CQUFtQixFQUFFLHdCQUF3QixFQUFFLHdCQUF3QixFQUFFLHVCQUF1QixFQUFFLE1BQU0sUUFBUSxDQUFDIiwiZmlsZSI6InZlY3Rvci92aWV3LmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IHsgQ2h1bmtlZFZpZXcgfSBmcm9tICcuL2NodW5rZWQnO1xuZXhwb3J0IHsgVmFsaWRpdHlWaWV3IH0gZnJvbSAnLi92YWxpZGl0eSc7XG5leHBvcnQgeyBEaWN0aW9uYXJ5VmlldyB9IGZyb20gJy4vZGljdGlvbmFyeSc7XG5leHBvcnQgeyBMaXN0VmlldywgRml4ZWRTaXplTGlzdFZpZXcsIEJpbmFyeVZpZXcsIFV0ZjhWaWV3IH0gZnJvbSAnLi9saXN0JztcbmV4cG9ydCB7IFVuaW9uVmlldywgRGVuc2VVbmlvblZpZXcsIE5lc3RlZFZpZXcsIFN0cnVjdFZpZXcsIE1hcFZpZXcgfSBmcm9tICcuL25lc3RlZCc7XG5leHBvcnQgeyBGbGF0VmlldywgTnVsbFZpZXcsIEJvb2xWaWV3LCBQcmltaXRpdmVWaWV3LCBGaXhlZFNpemVWaWV3LCBGbG9hdDE2VmlldyB9IGZyb20gJy4vZmxhdCc7XG5leHBvcnQgeyBEYXRlRGF5VmlldywgRGF0ZU1pbGxpc2Vjb25kVmlldyB9IGZyb20gJy4vZmxhdCc7XG5leHBvcnQgeyBJbnRlcnZhbFllYXJNb250aFZpZXcsIEludGVydmFsWWVhclZpZXcsIEludGVydmFsTW9udGhWaWV3IH0gZnJvbSAnLi9mbGF0JztcbmV4cG9ydCB7IFRpbWVzdGFtcERheVZpZXcsIFRpbWVzdGFtcFNlY29uZFZpZXcsIFRpbWVzdGFtcE1pbGxpc2Vjb25kVmlldywgVGltZXN0YW1wTWljcm9zZWNvbmRWaWV3LCBUaW1lc3RhbXBOYW5vc2Vjb25kVmlldyB9IGZyb20gJy4vZmxhdCc7XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from './vector';\nexport class Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\nexport class Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\nexport class Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n}\nexport class Predicate {\n    and(...expr) { return new And(this, ...expr); }\n    or(...expr) { return new Or(this, ...expr); }\n    not() { return new Not(this); }\n}\nexport class ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\nexport class CombinationPredicate extends Predicate {\n    constructor(...children) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\nexport class And extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ands\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.every((p) => p(idx, batch));\n    }\n}\nexport class Or extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ors\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.some((p) => p(idx, batch));\n    }\n}\nexport class Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\nexport class LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\nexport class GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\nexport class Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\nexport class CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexport function lit(v) { return new Literal(v); }\nexport function col(n) { return new Col(n); }\nexport function and(...p) { return new And(...p); }\nexport function or(...p) { return new Or(...p); }\nexport function custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { Vector } from '../../vector';\nimport { RecordBatch } from '../../recordbatch';\nimport { TypeVisitor } from '../../visitor';\nimport { Message } from '../metadata';\nimport { FlatData, ListData, NestedData, SingleNestedData, DenseUnionData, SparseUnionData, BoolData, FlatListData, DictionaryData } from '../../data';\nimport { UnionMode, } from '../../type';\nexport function* readRecordBatches(messages) {\n    for (const { schema, message, loader } of messages) {\n        yield* readRecordBatch(schema, message, loader);\n    }\n}\nexport function readRecordBatchesAsync(messages) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readRecordBatchesAsync_1() {\n        var e_1, _a;\n        try {\n            for (var messages_1 = tslib_1.__asyncValues(messages), messages_1_1; messages_1_1 = yield tslib_1.__await(messages_1.next()), !messages_1_1.done;) {\n                const { schema, message, loader } = messages_1_1.value;\n                yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(readRecordBatch(schema, message, loader))));\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (messages_1_1 && !messages_1_1.done && (_a = messages_1.return)) yield tslib_1.__await(_a.call(messages_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nexport function* readRecordBatch(schema, message, loader) {\n    if (Message.isRecordBatch(message)) {\n        yield new RecordBatch(schema, message.length, loader.visitFields(schema.fields));\n    }\n    else if (Message.isDictionaryBatch(message)) {\n        const dictionaryId = message.id;\n        const dictionaries = loader.dictionaries;\n        const dictionaryField = schema.dictionaries.get(dictionaryId);\n        const dictionaryDataType = dictionaryField.type.dictionary;\n        let dictionaryVector = Vector.create(loader.visit(dictionaryDataType));\n        if (message.isDelta && dictionaries.has(dictionaryId)) {\n            dictionaryVector = dictionaries.get(dictionaryId).concat(dictionaryVector);\n        }\n        dictionaries.set(dictionaryId, dictionaryVector);\n    }\n}\nexport class TypeDataLoader extends TypeVisitor {\n    constructor(nodes, buffers, dictionaries) {\n        super();\n        this.nodes = nodes;\n        this.buffers = buffers;\n        this.dictionaries = dictionaries;\n    }\n    visitFields(fields) { return fields.map((field) => this.visit(field.type)); }\n    visitNull(type) { return this.visitNullType(type); }\n    visitInt(type) { return this.visitFlatType(type); }\n    visitFloat(type) { return this.visitFlatType(type); }\n    visitBinary(type) { return this.visitFlatList(type); }\n    visitUtf8(type) { return this.visitFlatList(type); }\n    visitBool(type) { return this.visitBoolType(type); }\n    visitDecimal(type) { return this.visitFlatType(type); }\n    visitDate(type) { return this.visitFlatType(type); }\n    visitTime(type) { return this.visitFlatType(type); }\n    visitTimestamp(type) { return this.visitFlatType(type); }\n    visitInterval(type) { return this.visitFlatType(type); }\n    visitList(type) { return this.visitListType(type); }\n    visitStruct(type) { return this.visitNestedType(type); }\n    visitUnion(type) { return this.visitUnionType(type); }\n    visitFixedSizeBinary(type) { return this.visitFlatType(type); }\n    visitFixedSizeList(type) { return this.visitFixedSizeListType(type); }\n    visitMap(type) { return this.visitNestedType(type); }\n    visitDictionary(type) {\n        return new DictionaryData(type, this.dictionaries.get(type.id), this.visit(type.indices));\n    }\n    getFieldMetadata() { return this.nodes.next().value; }\n    getBufferMetadata() { return this.buffers.next().value; }\n    readNullBitmap(type, nullCount, buffer = this.getBufferMetadata()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    visitNullType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatData(type, length, this.readNullBitmap(type, nullCount), new Uint8Array(0), 0, nullCount);\n    }\n    visitFlatType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatData(type, length, this.readNullBitmap(type, nullCount), this.readData(type), 0, nullCount);\n    }\n    visitBoolType(type, { length, nullCount } = this.getFieldMetadata(), data) {\n        return new BoolData(type, length, this.readNullBitmap(type, nullCount), data || this.readData(type), 0, nullCount);\n    }\n    visitFlatList(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new FlatListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type), 0, nullCount);\n    }\n    visitListType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new ListData(type, length, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0].type), 0, nullCount);\n    }\n    visitFixedSizeListType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new SingleNestedData(type, length, this.readNullBitmap(type, nullCount), this.visit(type.children[0].type), 0, nullCount);\n    }\n    visitNestedType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return new NestedData(type, length, this.readNullBitmap(type, nullCount), this.visitFields(type.children), 0, nullCount);\n    }\n    visitUnionType(type, { length, nullCount } = this.getFieldMetadata()) {\n        return type.mode === UnionMode.Sparse ?\n            new SparseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitFields(type.children), 0, nullCount) :\n            new DenseUnionData(type, length, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitFields(type.children), 0, nullCount);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { packBools } from '../../util/bit';\nimport * as IntUtil from '../../util/int';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata } from '../metadata';\nimport { Schema, Field, DataType, Dictionary, Null, Binary, Bool, Utf8, Decimal, Date_, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_, } from '../../type';\nimport { Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Float16, Float64, Float32, } from '../../type';\nvar Long = flatbuffers.Long;\nexport function* readJSON(json) {\n    const schema = schemaFromJSON(json['schema']);\n    const dictionaries = new Map();\n    for (const batch of (json['dictionaries'] || [])) {\n        const message = dictionaryBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(flattenDataSources(batch['data']['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n        };\n    }\n    for (const batch of (json['batches'] || [])) {\n        const message = recordBatchFromJSON(batch);\n        yield {\n            schema, message,\n            loader: new JSONDataLoader(flattenDataSources(batch['columns']), arrayIterator(message.nodes), arrayIterator(message.buffers), dictionaries)\n        };\n    }\n}\nfunction* arrayIterator(arr) { yield* arr; }\nfunction flattenDataSources(xs) {\n    return (xs || []).reduce((buffers, column) => [\n        ...buffers,\n        ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n        ...(column['OFFSET'] && [column['OFFSET']] || []),\n        ...(column['TYPE'] && [column['TYPE']] || []),\n        ...(column['DATA'] && [column['DATA']] || []),\n        ...flattenDataSources(column['children'])\n    ], []);\n}\nconst utf8Encoder = new TextEncoder('utf-8');\nexport class JSONDataLoader extends TypeDataLoader {\n    constructor(sources, nodes, buffers, dictionaries) {\n        super(nodes, buffers, dictionaries);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.getBufferMetadata()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.getBufferMetadata()) {\n        return new Int32Array(this.sources[offset]);\n    }\n    readTypeIds(_type, { offset } = this.getBufferMetadata()) {\n        return new Int8Array(this.sources[offset]);\n    }\n    readData(type, { offset } = this.getBufferMetadata()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type) === true) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return new Uint8Array(int64DataFromJSON(sources[offset]));\n        }\n        else if (DataType.isDecimal(type) === true) {\n            return new Uint8Array(decimalDataFromJSON(sources[offset]));\n        }\n        else if (DataType.isBinary(type) === true || DataType.isFixedSizeBinary(type) === true) {\n            return new Uint8Array(binaryDataFromJSON(sources[offset]));\n        }\n        else if (DataType.isBool(type) === true) {\n            return new Uint8Array(packBools(sources[offset]).buffer);\n        }\n        else if (DataType.isUtf8(type) === true) {\n            return utf8Encoder.encode(sources[offset].join(''));\n        }\n        else {\n            return toTypedArray(type.ArrayType, sources[offset].map((x) => +x));\n        }\n    }\n}\nfunction int64DataFromJSON(values) {\n    const data = new Uint32Array(values.length * 2);\n    for (let i = -1, n = values.length; ++i < n;) {\n        // Force all values (even numbers) to be parsed as strings since\n        // pulling out high and low bits seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        IntUtil.Int64.fromString(values[i].toString(), new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n    }\n    return data.buffer;\n}\nfunction decimalDataFromJSON(values) {\n    const data = new Uint32Array(values.length * 4);\n    for (let i = -1, n = values.length; ++i < n;) {\n        IntUtil.Int128.fromString(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n    }\n    return data.buffer;\n}\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data.buffer;\n}\nimport * as Schema_ from '../../fb/Schema';\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nvar TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nvar UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nvar Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nvar IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nvar MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nimport { toTypedArray } from '../../data';\nfunction schemaFromJSON(s) {\n    const dictionaryFields = new Map();\n    return new Schema(fieldsFromJSON(s['fields'], dictionaryFields), customMetadata(s['customMetadata']), MetadataVersion.V4, dictionaryFields);\n}\nfunction recordBatchFromJSON(b) {\n    return new RecordBatchMetadata(MetadataVersion.V4, b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\nfunction dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(MetadataVersion.V4, recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\nfunction fieldsFromJSON(fs, dictionaryFields) {\n    return (fs || [])\n        .map((f) => fieldFromJSON(f, dictionaryFields))\n        .filter((f) => f != null);\n}\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldMetadata(new Long(column['count'], 0), new Long(nullCountFromJSON(column['VALIDITY']), 0)),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['VALIDITY'].length, 0)));\n        column['OFFSET'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['OFFSET'].length, 0)));\n        column['TYPE'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['TYPE'].length, 0)));\n        column['DATA'] && buffers.push(new BufferMetadata(new Long(buffers.length, 0), new Long(column['DATA'].length, 0)));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\nfunction fieldFromJSON(f, dictionaryFields) {\n    let name = f['name'];\n    let field;\n    let nullable = f['nullable'];\n    let dataType;\n    let id, keysMeta, dictMeta;\n    let metadata = customMetadata(f['customMetadata']);\n    if (!dictionaryFields || !(dictMeta = f['dictionary'])) {\n        if (dataType = typeFromJSON(f['type'], fieldsFromJSON(f['children'], dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    }\n    else if (dataType = dictionaryFields.has(id = dictMeta['id'])\n        ? dictionaryFields.get(id).type.dictionary\n        : typeFromJSON(f['type'], fieldsFromJSON(f['children'], null))) {\n        dataType = new Dictionary(dataType, \n        // a dictionary index defaults to signed 32 bit int if unspecified\n        (keysMeta = dictMeta['indexType']) ? intFromJSON(keysMeta) : new Int32(), id, dictMeta['isOrdered']);\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field);\n    }\n    return field || null;\n}\nfunction customMetadata(metadata) {\n    return new Map(Object.entries(metadata || {}));\n}\nconst namesToTypeMap = {\n    'NONE': Type.NONE,\n    'null': Type.Null,\n    'int': Type.Int,\n    'floatingpoint': Type.FloatingPoint,\n    'binary': Type.Binary,\n    'bool': Type.Bool,\n    'utf8': Type.Utf8,\n    'decimal': Type.Decimal,\n    'date': Type.Date,\n    'time': Type.Time,\n    'timestamp': Type.Timestamp,\n    'interval': Type.Interval,\n    'list': Type.List,\n    'struct': Type.Struct_,\n    'union': Type.Union,\n    'fixedsizebinary': Type.FixedSizeBinary,\n    'fixedsizelist': Type.FixedSizeList,\n    'map': Type.Map,\n};\nfunction typeFromJSON(t, children) {\n    switch (namesToTypeMap[t['name']]) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromJSON(t);\n        case Type.Int: return intFromJSON(t);\n        case Type.FloatingPoint: return floatingPointFromJSON(t);\n        case Type.Binary: return binaryFromJSON(t);\n        case Type.Utf8: return utf8FromJSON(t);\n        case Type.Bool: return boolFromJSON(t);\n        case Type.Decimal: return decimalFromJSON(t);\n        case Type.Date: return dateFromJSON(t);\n        case Type.Time: return timeFromJSON(t);\n        case Type.Timestamp: return timestampFromJSON(t);\n        case Type.Interval: return intervalFromJSON(t);\n        case Type.List: return listFromJSON(t, children || []);\n        case Type.Struct_: return structFromJSON(t, children || []);\n        case Type.Union: return unionFromJSON(t, children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromJSON(t);\n        case Type.FixedSizeList: return fixedSizeListFromJSON(t, children || []);\n        case Type.Map: return mapFromJSON(t, children || []);\n    }\n    throw new Error(`Unrecognized type ${t['name']}`);\n}\nfunction nullFromJSON(_type) { return new Null(); }\nfunction intFromJSON(_type) {\n    switch (_type['bitWidth']) {\n        case 8: return _type['isSigned'] ? new Int8() : new Uint8();\n        case 16: return _type['isSigned'] ? new Int16() : new Uint16();\n        case 32: return _type['isSigned'] ? new Int32() : new Uint32();\n        case 64: return _type['isSigned'] ? new Int64() : new Uint64();\n    }\n    return null;\n}\nfunction floatingPointFromJSON(_type) {\n    switch (Precision[_type['precision']]) {\n        case Precision.HALF: return new Float16();\n        case Precision.SINGLE: return new Float32();\n        case Precision.DOUBLE: return new Float64();\n    }\n    return null;\n}\nfunction binaryFromJSON(_type) { return new Binary(); }\nfunction utf8FromJSON(_type) { return new Utf8(); }\nfunction boolFromJSON(_type) { return new Bool(); }\nfunction decimalFromJSON(_type) { return new Decimal(_type['scale'], _type['precision']); }\nfunction dateFromJSON(_type) { return new Date_(DateUnit[_type['unit']]); }\nfunction timeFromJSON(_type) { return new Time(TimeUnit[_type['unit']], _type['bitWidth']); }\nfunction timestampFromJSON(_type) { return new Timestamp(TimeUnit[_type['unit']], _type['timezone']); }\nfunction intervalFromJSON(_type) { return new Interval(IntervalUnit[_type['unit']]); }\nfunction listFromJSON(_type, children) { return new List(children); }\nfunction structFromJSON(_type, children) { return new Struct(children); }\nfunction unionFromJSON(_type, children) { return new Union(UnionMode[_type['mode']], (_type['typeIds'] || []), children); }\nfunction fixedSizeBinaryFromJSON(_type) { return new FixedSizeBinary(_type['byteWidth']); }\nfunction fixedSizeListFromJSON(_type, children) { return new FixedSizeList(_type['listSize'], children); }\nfunction mapFromJSON(_type, children) { return new Map_(_type['keysSorted'], children); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isValidArrowFile(bb) {\n    let fileLength = bb.capacity(), footerLength, lengthOffset;\n    if ((fileLength < magicX2AndPadding /*                     Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        ( /*                                                    Invalid footer length  */(footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n            (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9tYWdpYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsTUFBTSxDQUFDLE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBQztBQUN6QixNQUFNLENBQUMsTUFBTSxTQUFTLEdBQUcsUUFBUSxDQUFDO0FBQ2xDLE1BQU0sQ0FBQyxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFdEQsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUU7SUFDOUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDdEM7QUFFRCxNQUFNLFVBQVUsd0JBQXdCLENBQUMsTUFBa0IsRUFBRSxLQUFLLEdBQUcsQ0FBQztJQUNsRSxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxHQUFHLENBQUMsR0FBRztRQUN6QyxJQUFJLEtBQUssQ0FBQyxDQUFDLENBQUMsS0FBSyxNQUFNLENBQUMsS0FBSyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2hDLE9BQU8sS0FBSyxDQUFDO1NBQ2hCO0tBQ0o7SUFDRCxPQUFPLElBQUksQ0FBQztBQUNoQixDQUFDO0FBRUQsTUFBTSxVQUFVLGdCQUFnQixDQUFDLEVBQWM7SUFDM0MsSUFBSSxVQUFVLEdBQUcsRUFBRSxDQUFDLFFBQVEsRUFBRSxFQUFFLFlBQW9CLEVBQUUsWUFBb0IsQ0FBQztJQUMzRSxJQUFJLENBQUMsVUFBVSxHQUFHLGlCQUFpQixDQUFDLGdEQUFnRCxDQUFDO1FBQ2pGLENBQUMsQ0FBQyx3QkFBd0IsQ0FBQyxFQUFFLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsbURBQW1ELENBQUM7UUFDOUYsQ0FBQyxDQUFDLHdCQUF3QixDQUFDLEVBQUUsQ0FBQyxLQUFLLEVBQUUsRUFBRSxVQUFVLEdBQUcsV0FBVyxDQUFDLENBQUMsNEJBQTRCLENBQUM7UUFDOUYsRUFBQywrRUFDRCxDQUFDLFlBQVksR0FBRyxFQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksR0FBRyxVQUFVLEdBQUcsZUFBZSxDQUFDLENBQUMsR0FBRyxDQUFDO1lBQzlFLENBQUMsWUFBWSxHQUFHLFlBQVksR0FBRyxVQUFVLENBQUMsQ0FBQyxFQUFFO1FBQzdDLE9BQU8sS0FBSyxDQUFDO0tBQ2hCO0lBQ0QsT0FBTyxJQUFJLENBQUM7QUFDaEIsQ0FBQztBQUVELE1BQU0sQ0FBQyxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQ3hDLE1BQU0sQ0FBQyxNQUFNLGVBQWUsR0FBRyxXQUFXLEdBQUcsT0FBTyxDQUFDO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLFdBQVcsR0FBRyxDQUFDLEdBQUcsT0FBTyxDQUFDIiwiZmlsZSI6ImlwYy9tYWdpYy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCBCeXRlQnVmZmVyID0gZmxhdGJ1ZmZlcnMuQnl0ZUJ1ZmZlcjtcblxuZXhwb3J0IGNvbnN0IFBBRERJTkcgPSA0O1xuZXhwb3J0IGNvbnN0IE1BR0lDX1NUUiA9ICdBUlJPVzEnO1xuZXhwb3J0IGNvbnN0IE1BR0lDID0gbmV3IFVpbnQ4QXJyYXkoTUFHSUNfU1RSLmxlbmd0aCk7XG5cbmZvciAobGV0IGkgPSAwOyBpIDwgTUFHSUNfU1RSLmxlbmd0aDsgaSArPSAxIHwgMCkge1xuICAgIE1BR0lDW2ldID0gTUFHSUNfU1RSLmNoYXJDb2RlQXQoaSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYnVmZmVyOiBVaW50OEFycmF5LCBpbmRleCA9IDApIHtcbiAgICBmb3IgKGxldCBpID0gLTEsIG4gPSBNQUdJQy5sZW5ndGg7ICsraSA8IG47KSB7XG4gICAgICAgIGlmIChNQUdJQ1tpXSAhPT0gYnVmZmVyW2luZGV4ICsgaV0pIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVmFsaWRBcnJvd0ZpbGUoYmI6IEJ5dGVCdWZmZXIpIHtcbiAgICBsZXQgZmlsZUxlbmd0aCA9IGJiLmNhcGFjaXR5KCksIGZvb3Rlckxlbmd0aDogbnVtYmVyLCBsZW5ndGhPZmZzZXQ6IG51bWJlcjtcbiAgICBpZiAoKGZpbGVMZW5ndGggPCBtYWdpY1gyQW5kUGFkZGluZyAvKiAgICAgICAgICAgICAgICAgICAgIEFycm93IGJ1ZmZlciB0b28gc21hbGwgKi8pIHx8XG4gICAgICAgICghY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nKGJiLmJ5dGVzKCksIDApIC8qICAgICAgICAgICAgICAgICAgICAgICAgTWlzc2luZyBtYWdpYyBzdGFydCAgICAqLykgfHxcbiAgICAgICAgKCFjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYmIuYnl0ZXMoKSwgZmlsZUxlbmd0aCAtIG1hZ2ljTGVuZ3RoKSAvKiBNaXNzaW5nIG1hZ2ljIGVuZCAgICAgICovKSB8fFxuICAgICAgICAoLyogICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgSW52YWxpZCBmb290ZXIgbGVuZ3RoICAqL1xuICAgICAgICAoZm9vdGVyTGVuZ3RoID0gYmIucmVhZEludDMyKGxlbmd0aE9mZnNldCA9IGZpbGVMZW5ndGggLSBtYWdpY0FuZFBhZGRpbmcpKSA8IDEgJiZcbiAgICAgICAgKGZvb3Rlckxlbmd0aCArIGxlbmd0aE9mZnNldCA+IGZpbGVMZW5ndGgpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgY29uc3QgbWFnaWNMZW5ndGggPSBNQUdJQy5sZW5ndGg7XG5leHBvcnQgY29uc3QgbWFnaWNBbmRQYWRkaW5nID0gbWFnaWNMZW5ndGggKyBQQURESU5HO1xuZXhwb3J0IGNvbnN0IG1hZ2ljWDJBbmRQYWRkaW5nID0gbWFnaWNMZW5ndGggKiAyICsgUEFERElORztcbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { flatbuffers } from 'flatbuffers';\nimport * as Message_ from '../../fb/Message';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nimport { PADDING, isValidArrowFile, checkForMagicArrowString } from '../magic';\nexport function fromReadableStream(stream) {\n    return tslib_1.__asyncGenerator(this, arguments, function* fromReadableStream_1() {\n        var e_1, _a;\n        let bb;\n        let bytesRead = 0, bytes = new Uint8Array(0);\n        let messageLength = 0, message = null;\n        try {\n            for (var _b = tslib_1.__asyncValues(stream), _c; _c = yield tslib_1.__await(_b.next()), !_c.done;) {\n                let chunk = _c.value;\n                if (chunk == null) {\n                    continue;\n                }\n                const grown = new Uint8Array(bytes.byteLength + chunk.length);\n                if (typeof chunk !== 'string') {\n                    grown.set(bytes, 0) || grown.set(chunk, bytes.byteLength);\n                }\n                else {\n                    for (let i = -1, j = bytes.byteLength, n = chunk.length; ++i < n;) {\n                        grown[i + j] = chunk.charCodeAt(i);\n                    }\n                }\n                bytes = grown;\n                // If we're reading in an Arrow File, just concatenate the bytes until\n                // the file is fully read in\n                if (checkForMagicArrowString(bytes)) {\n                    if (!isValidArrowFile(new ByteBuffer(bytes))) {\n                        continue;\n                    }\n                    return yield tslib_1.__await(yield yield tslib_1.__await(bytes));\n                }\n                if (bytes.byteLength > 0 && messageLength <= 0) {\n                    messageLength = new DataView(bytes.buffer).getInt32(0, true);\n                }\n                while (messageLength > 0 && messageLength <= bytes.byteLength) {\n                    if (!message) {\n                        (bb = new ByteBuffer(bytes)).setPosition(4);\n                        if (message = _Message.getRootAsMessage(bb)) {\n                            messageLength += message.bodyLength().low;\n                            continue;\n                        }\n                        throw new Error(`Invalid message at position ${bytesRead}`);\n                    }\n                    bytesRead += messageLength + PADDING;\n                    yield yield tslib_1.__await(bytes.subarray(0, messageLength + PADDING));\n                    bytes = bytes.subarray(messageLength + PADDING);\n                    messageLength = bytes.byteLength < 4 ? 0 :\n                        new DataView(bytes.buffer).getInt32(bytes.byteOffset, true);\n                    message = null;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) yield tslib_1.__await(_a.call(_b));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9yZWFkZXIvbm9kZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7O0FBRXJCLE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFDMUMsT0FBTyxLQUFLLFFBQVEsTUFBTSxrQkFBa0IsQ0FBQztBQUM3QyxJQUFPLFVBQVUsR0FBRyxXQUFXLENBQUMsVUFBVSxDQUFDO0FBQzNDLElBQU8sUUFBUSxHQUFHLFFBQVEsQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDO0FBQzVELE9BQU8sRUFBRSxPQUFPLEVBQUUsZ0JBQWdCLEVBQUUsd0JBQXdCLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFFL0UsTUFBTSxVQUFpQixrQkFBa0IsQ0FBQyxNQUE2Qjs7O1FBRW5FLElBQUksRUFBYyxDQUFDO1FBQ25CLElBQUksU0FBUyxHQUFHLENBQUMsRUFBRSxLQUFLLEdBQUcsSUFBSSxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDN0MsSUFBSSxhQUFhLEdBQUcsQ0FBQyxFQUFFLE9BQU8sR0FBb0IsSUFBSSxDQUFDOztZQUV2RCxLQUF3QixJQUFBLEtBQUEsc0JBQUMsTUFBNkQsQ0FBQSxJQUFBO2dCQUEzRSxJQUFJLEtBQUssV0FBQSxDQUFBO2dCQUVoQixJQUFJLEtBQUssSUFBSSxJQUFJLEVBQUU7b0JBQ2YsU0FBUztpQkFDWjtnQkFFRCxNQUFNLEtBQUssR0FBRyxJQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsVUFBVSxHQUFHLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztnQkFFOUQsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7b0JBQzNCLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLENBQUMsQ0FBQyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSyxFQUFFLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztpQkFDN0Q7cUJBQU07b0JBQ0gsS0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQU0sRUFBRSxFQUFFLENBQUMsR0FBRyxDQUFDLEdBQUc7d0JBQy9ELEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQztxQkFDdEM7aUJBQ0o7Z0JBRUQsS0FBSyxHQUFHLEtBQUssQ0FBQztnQkFFZCxzRUFBc0U7Z0JBQ3RFLDRCQUE0QjtnQkFDNUIsSUFBSSx3QkFBd0IsQ0FBQyxLQUFLLENBQUMsRUFBRTtvQkFDakMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLElBQUksVUFBVSxDQUFDLEtBQUssQ0FBQyxDQUFDLEVBQUU7d0JBQzFDLFNBQVM7cUJBQ1o7b0JBQ0QsNkJBQU8sNEJBQU0sS0FBSyxDQUFBLEVBQUM7aUJBQ3RCO2dCQUVELElBQUksS0FBSyxDQUFDLFVBQVUsR0FBRyxDQUFDLElBQUksYUFBYSxJQUFJLENBQUMsRUFBRTtvQkFDNUMsYUFBYSxHQUFHLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDO2lCQUNoRTtnQkFFRCxPQUFPLGFBQWEsR0FBRyxDQUFDLElBQUksYUFBYSxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7b0JBQzNELElBQUksQ0FBQyxPQUFPLEVBQUU7d0JBQ1YsQ0FBQyxFQUFFLEdBQUcsSUFBSSxVQUFVLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxXQUFXLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQzVDLElBQUksT0FBTyxHQUFHLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsRUFBRTs0QkFDekMsYUFBYSxJQUFJLE9BQU8sQ0FBQyxVQUFVLEVBQUUsQ0FBQyxHQUFHLENBQUM7NEJBQzFDLFNBQVM7eUJBQ1o7d0JBQ0QsTUFBTSxJQUFJLEtBQUssQ0FBQywrQkFBK0IsU0FBUyxFQUFFLENBQUMsQ0FBQztxQkFDL0Q7b0JBQ0QsU0FBUyxJQUFJLGFBQWEsR0FBRyxPQUFPLENBQUM7b0JBQ3JDLDRCQUFNLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQyxFQUFFLGFBQWEsR0FBRyxPQUFPLENBQUMsQ0FBQSxDQUFDO29CQUNqRCxLQUFLLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxhQUFhLEdBQUcsT0FBTyxDQUFDLENBQUM7b0JBQ2hELGFBQWEsR0FBRyxLQUFLLENBQUMsVUFBVSxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7d0JBQ3RDLElBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQztvQkFDaEUsT0FBTyxHQUFHLElBQUksQ0FBQztpQkFDbEI7YUFDSjs7Ozs7Ozs7O0lBQ0wsQ0FBQztDQUFBIiwiZmlsZSI6ImlwYy9yZWFkZXIvbm9kZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBmbGF0YnVmZmVycyB9IGZyb20gJ2ZsYXRidWZmZXJzJztcbmltcG9ydCAqIGFzIE1lc3NhZ2VfIGZyb20gJy4uLy4uL2ZiL01lc3NhZ2UnO1xuaW1wb3J0IEJ5dGVCdWZmZXIgPSBmbGF0YnVmZmVycy5CeXRlQnVmZmVyO1xuaW1wb3J0IF9NZXNzYWdlID0gTWVzc2FnZV8ub3JnLmFwYWNoZS5hcnJvdy5mbGF0YnVmLk1lc3NhZ2U7XG5pbXBvcnQgeyBQQURESU5HLCBpc1ZhbGlkQXJyb3dGaWxlLCBjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcgfSBmcm9tICcuLi9tYWdpYyc7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiogZnJvbVJlYWRhYmxlU3RyZWFtKHN0cmVhbTogTm9kZUpTLlJlYWRhYmxlU3RyZWFtKSB7XG5cbiAgICBsZXQgYmI6IEJ5dGVCdWZmZXI7XG4gICAgbGV0IGJ5dGVzUmVhZCA9IDAsIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoMCk7XG4gICAgbGV0IG1lc3NhZ2VMZW5ndGggPSAwLCBtZXNzYWdlOiBfTWVzc2FnZSB8IG51bGwgPSBudWxsO1xuXG4gICAgZm9yIGF3YWl0IChsZXQgY2h1bmsgb2YgKHN0cmVhbSBhcyBhbnkgYXMgQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5IHwgQnVmZmVyIHwgc3RyaW5nPikpIHtcblxuICAgICAgICBpZiAoY2h1bmsgPT0gbnVsbCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBncm93biA9IG5ldyBVaW50OEFycmF5KGJ5dGVzLmJ5dGVMZW5ndGggKyBjaHVuay5sZW5ndGgpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICBncm93bi5zZXQoYnl0ZXMsIDApIHx8IGdyb3duLnNldChjaHVuaywgYnl0ZXMuYnl0ZUxlbmd0aCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gLTEsIGogPSBieXRlcy5ieXRlTGVuZ3RoLCBuID0gY2h1bmsubGVuZ3RoOyArK2kgPCBuOykge1xuICAgICAgICAgICAgICAgIGdyb3duW2kgKyBqXSA9IGNodW5rLmNoYXJDb2RlQXQoaSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBieXRlcyA9IGdyb3duO1xuXG4gICAgICAgIC8vIElmIHdlJ3JlIHJlYWRpbmcgaW4gYW4gQXJyb3cgRmlsZSwganVzdCBjb25jYXRlbmF0ZSB0aGUgYnl0ZXMgdW50aWxcbiAgICAgICAgLy8gdGhlIGZpbGUgaXMgZnVsbHkgcmVhZCBpblxuICAgICAgICBpZiAoY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nKGJ5dGVzKSkge1xuICAgICAgICAgICAgaWYgKCFpc1ZhbGlkQXJyb3dGaWxlKG5ldyBCeXRlQnVmZmVyKGJ5dGVzKSkpIHtcbiAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB5aWVsZCBieXRlcztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChieXRlcy5ieXRlTGVuZ3RoID4gMCAmJiBtZXNzYWdlTGVuZ3RoIDw9IDApIHtcbiAgICAgICAgICAgIG1lc3NhZ2VMZW5ndGggPSBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyKS5nZXRJbnQzMigwLCB0cnVlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHdoaWxlIChtZXNzYWdlTGVuZ3RoID4gMCAmJiBtZXNzYWdlTGVuZ3RoIDw9IGJ5dGVzLmJ5dGVMZW5ndGgpIHtcbiAgICAgICAgICAgIGlmICghbWVzc2FnZSkge1xuICAgICAgICAgICAgICAgIChiYiA9IG5ldyBCeXRlQnVmZmVyKGJ5dGVzKSkuc2V0UG9zaXRpb24oNCk7XG4gICAgICAgICAgICAgICAgaWYgKG1lc3NhZ2UgPSBfTWVzc2FnZS5nZXRSb290QXNNZXNzYWdlKGJiKSkge1xuICAgICAgICAgICAgICAgICAgICBtZXNzYWdlTGVuZ3RoICs9IG1lc3NhZ2UuYm9keUxlbmd0aCgpLmxvdztcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgSW52YWxpZCBtZXNzYWdlIGF0IHBvc2l0aW9uICR7Ynl0ZXNSZWFkfWApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnl0ZXNSZWFkICs9IG1lc3NhZ2VMZW5ndGggKyBQQURESU5HO1xuICAgICAgICAgICAgeWllbGQgYnl0ZXMuc3ViYXJyYXkoMCwgbWVzc2FnZUxlbmd0aCArIFBBRERJTkcpO1xuICAgICAgICAgICAgYnl0ZXMgPSBieXRlcy5zdWJhcnJheShtZXNzYWdlTGVuZ3RoICsgUEFERElORyk7XG4gICAgICAgICAgICBtZXNzYWdlTGVuZ3RoID0gYnl0ZXMuYnl0ZUxlbmd0aCA8IDQgPyAwIDpcbiAgICAgICAgICAgICAgICBuZXcgRGF0YVZpZXcoYnl0ZXMuYnVmZmVyKS5nZXRJbnQzMihieXRlcy5ieXRlT2Zmc2V0LCB0cnVlKTtcbiAgICAgICAgICAgIG1lc3NhZ2UgPSBudWxsO1xuICAgICAgICB9XG4gICAgfVxufVxuIl19\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Footer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Footer=} obj\n                     * @returns {Footer}\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.Schema=} obj\n                     * @returns {org.apache.arrow.flatbuf.Schema|null}\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Block}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns {number}\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {number} metaDataLength\n                     * @param {flatbuffers.Long} bodyLength\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { flatbuffers } from 'flatbuffers';\nimport { TypeDataLoader } from './vector';\nimport { checkForMagicArrowString, PADDING, magicAndPadding, isValidArrowFile } from '../magic';\nimport { Message, Footer, FileBlock, RecordBatchMetadata, DictionaryBatch, BufferMetadata, FieldMetadata, } from '../metadata';\nimport { Schema, Field, Dictionary, Null, Binary, Bool, Utf8, Decimal, Date_, Time, Timestamp, Interval, List, Struct, Union, FixedSizeBinary, FixedSizeList, Map_, } from '../../type';\nimport { Int8, Uint8, Int16, Uint16, Int32, Uint32, Int64, Uint64, Float16, Float64, Float32, } from '../../type';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nexport function* readBuffers(sources) {\n    let schema = null;\n    let dictionaries = new Map();\n    let readMessages = null;\n    if (ArrayBuffer.isView(sources) || typeof sources === 'string') {\n        sources = [sources];\n    }\n    for (const source of sources) {\n        const bb = toByteBuffer(source);\n        if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n            for (const message of readMessages(bb)) {\n                yield {\n                    schema, message,\n                    loader: new BinaryDataLoader(bb, arrayIterator(message.nodes || []), arrayIterator(message.buffers || []), dictionaries)\n                };\n            }\n        }\n    }\n}\nexport function readBuffersAsync(sources) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readBuffersAsync_1() {\n        var e_1, _a;\n        let schema = null;\n        let dictionaries = new Map();\n        let readMessages = null;\n        try {\n            for (var sources_1 = tslib_1.__asyncValues(sources), sources_1_1; sources_1_1 = yield tslib_1.__await(sources_1.next()), !sources_1_1.done;) {\n                const source = sources_1_1.value;\n                const bb = toByteBuffer(source);\n                if ((!schema && ({ schema, readMessages } = readSchema(bb)) || true) && schema && readMessages) {\n                    for (const message of readMessages(bb)) {\n                        yield yield tslib_1.__await({\n                            schema, message,\n                            loader: new BinaryDataLoader(bb, arrayIterator(message.nodes || []), arrayIterator(message.buffers || []), dictionaries)\n                        });\n                    }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (sources_1_1 && !sources_1_1.done && (_a = sources_1.return)) yield tslib_1.__await(_a.call(sources_1));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nexport class BinaryDataLoader extends TypeDataLoader {\n    constructor(bb, nodes, buffers, dictionaries) {\n        super(nodes, buffers, dictionaries);\n        this.bytes = bb.bytes();\n        this.messageOffset = bb.position();\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.getBufferMetadata()) {\n        return new Uint8Array(this.bytes.buffer, this.bytes.byteOffset + this.messageOffset + offset, length);\n    }\n}\nfunction* arrayIterator(arr) { yield* arr; }\nfunction toByteBuffer(bytes) {\n    let arr = bytes || new Uint8Array(0);\n    if (typeof bytes === 'string') {\n        arr = new Uint8Array(bytes.length);\n        for (let i = -1, n = bytes.length; ++i < n;) {\n            arr[i] = bytes.charCodeAt(i);\n        }\n        return new ByteBuffer(arr);\n    }\n    return new ByteBuffer(arr);\n}\nfunction readSchema(bb) {\n    let schema, readMessages, footer;\n    if (footer = readFileSchema(bb)) {\n        schema = footer.schema;\n        readMessages = readFileMessages(footer);\n    }\n    else if (schema = readStreamSchema(bb)) {\n        readMessages = readStreamMessages;\n    }\n    else {\n        throw new Error('Invalid Arrow buffer');\n    }\n    return { schema, readMessages };\n}\nfunction readStreamSchema(bb) {\n    if (!checkForMagicArrowString(bb.bytes(), 0)) {\n        for (const message of readMessages(bb)) {\n            if (Message.isSchema(message)) {\n                return message;\n            }\n        }\n    }\n    return null;\n}\nfunction* readStreamMessages(bb) {\n    for (const message of readMessages(bb)) {\n        if (Message.isRecordBatch(message)) {\n            yield message;\n        }\n        else if (Message.isDictionaryBatch(message)) {\n            yield message;\n        }\n        else {\n            yield message;\n        }\n        // position the buffer after the body to read the next message\n        bb.setPosition(bb.position() + message.bodyLength);\n    }\n}\nfunction readFileSchema(bb) {\n    if (!isValidArrowFile(bb)) {\n        return null;\n    }\n    let fileLength = bb.capacity();\n    let lengthOffset = fileLength - magicAndPadding;\n    let footerLength = bb.readInt32(lengthOffset);\n    bb.setPosition(lengthOffset - footerLength);\n    return footerFromByteBuffer(bb);\n}\nfunction readFileMessages(footer) {\n    return function* (bb) {\n        let message;\n        for (let i = -1, batches = footer.dictionaryBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position()))) {\n                yield message;\n            }\n        }\n        for (let i = -1, batches = footer.recordBatches, n = batches.length; ++i < n;) {\n            bb.setPosition(batches[i].offset);\n            if (message = readMessage(bb, bb.readInt32(bb.position()))) {\n                yield message;\n            }\n        }\n    };\n}\nfunction* readMessages(bb) {\n    let length, message;\n    while (bb.position() < bb.capacity() &&\n        (length = bb.readInt32(bb.position())) > 0) {\n        if (message = readMessage(bb, length)) {\n            yield message;\n        }\n    }\n}\nfunction readMessage(bb, length) {\n    bb.setPosition(bb.position() + PADDING);\n    const message = messageFromByteBuffer(bb);\n    bb.setPosition(bb.position() + length);\n    return message;\n}\nimport * as File_ from '../../fb/File';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nvar MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nvar MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nvar _Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar _Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar _FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar _Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar _Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar _Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar _Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar _Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar _Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar _Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar _Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar _List = Schema_.org.apache.arrow.flatbuf.List;\nvar _Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar _Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar _FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar _FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar _Map = Schema_.org.apache.arrow.flatbuf.Map;\nfunction footerFromByteBuffer(bb) {\n    const dictionaryFields = new Map();\n    const f = _Footer.getRootAsFooter(bb), s = f.schema();\n    return new Footer(dictionaryBatchesFromFooter(f), recordBatchesFromFooter(f), new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), f.version(), dictionaryFields));\n}\nfunction messageFromByteBuffer(bb) {\n    const m = _Message.getRootAsMessage(bb), type = m.headerType(), version = m.version();\n    switch (type) {\n        case MessageHeader.Schema: return schemaFromMessage(version, m.header(new _Schema()), new Map());\n        case MessageHeader.RecordBatch: return recordBatchFromMessage(version, m, m.header(new _RecordBatch()));\n        case MessageHeader.DictionaryBatch: return dictionaryBatchFromMessage(version, m, m.header(new _DictionaryBatch()));\n    }\n    return null;\n    // throw new Error(`Unrecognized Message type '${type}'`);\n}\nfunction schemaFromMessage(version, s, dictionaryFields) {\n    return new Schema(fieldsFromSchema(s, dictionaryFields), customMetadata(s), version, dictionaryFields);\n}\nfunction recordBatchFromMessage(version, m, b) {\n    return new RecordBatchMetadata(version, b.length(), fieldNodesFromRecordBatch(b), buffersFromRecordBatch(b, version), m.bodyLength());\n}\nfunction dictionaryBatchFromMessage(version, m, d) {\n    return new DictionaryBatch(version, recordBatchFromMessage(version, m, d.data()), d.id(), d.isDelta());\n}\nfunction dictionaryBatchesFromFooter(f) {\n    const blocks = [];\n    for (let b, i = -1, n = f && f.dictionariesLength(); ++i < n;) {\n        if (b = f.dictionaries(i)) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\nfunction recordBatchesFromFooter(f) {\n    const blocks = [];\n    for (let b, i = -1, n = f && f.recordBatchesLength(); ++i < n;) {\n        if (b = f.recordBatches(i)) {\n            blocks.push(new FileBlock(b.metaDataLength(), b.bodyLength(), b.offset()));\n        }\n    }\n    return blocks;\n}\nfunction fieldsFromSchema(s, dictionaryFields) {\n    const fields = [];\n    for (let i = -1, c, n = s && s.fieldsLength(); ++i < n;) {\n        if (c = field(s.fields(i), dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\nfunction fieldsFromField(f, dictionaryFields) {\n    const fields = [];\n    for (let i = -1, c, n = f && f.childrenLength(); ++i < n;) {\n        if (c = field(f.children(i), dictionaryFields)) {\n            fields.push(c);\n        }\n    }\n    return fields;\n}\nfunction fieldNodesFromRecordBatch(b) {\n    const fieldNodes = [];\n    for (let i = -1, n = b.nodesLength(); ++i < n;) {\n        fieldNodes.push(fieldNodeFromRecordBatch(b.nodes(i)));\n    }\n    return fieldNodes;\n}\nfunction buffersFromRecordBatch(b, version) {\n    const buffers = [];\n    for (let i = -1, n = b.buffersLength(); ++i < n;) {\n        let buffer = b.buffers(i);\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page id field.\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        buffers.push(bufferFromRecordBatch(buffer));\n    }\n    return buffers;\n}\nfunction field(f, dictionaryFields) {\n    let name = f.name();\n    let field;\n    let nullable = f.nullable();\n    let metadata = customMetadata(f);\n    let dataType;\n    let keysMeta, id;\n    let dictMeta;\n    if (!dictionaryFields || !(dictMeta = f.dictionary())) {\n        if (dataType = typeFromField(f, fieldsFromField(f, dictionaryFields))) {\n            field = new Field(name, dataType, nullable, metadata);\n        }\n    }\n    else if (dataType = dictionaryFields.has(id = dictMeta.id().low)\n        ? dictionaryFields.get(id).type.dictionary\n        : typeFromField(f, fieldsFromField(f, null))) {\n        dataType = new Dictionary(dataType, \n        // a dictionary index defaults to signed 32 bit int if unspecified\n        (keysMeta = dictMeta.indexType()) ? intFromField(keysMeta) : new Int32(), id, dictMeta.isOrdered());\n        field = new Field(name, dataType, nullable, metadata);\n        dictionaryFields.has(id) || dictionaryFields.set(id, field);\n    }\n    return field || null;\n}\nfunction customMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\nfunction fieldNodeFromRecordBatch(f) {\n    return new FieldMetadata(f.length(), f.nullCount());\n}\nfunction bufferFromRecordBatch(b) {\n    return new BufferMetadata(b.offset(), b.length());\n}\nfunction typeFromField(f, children) {\n    switch (f.typeType()) {\n        case Type.NONE: return null;\n        case Type.Null: return nullFromField(f.type(new _Null()));\n        case Type.Int: return intFromField(f.type(new _Int()));\n        case Type.FloatingPoint: return floatFromField(f.type(new _FloatingPoint()));\n        case Type.Binary: return binaryFromField(f.type(new _Binary()));\n        case Type.Utf8: return utf8FromField(f.type(new _Utf8()));\n        case Type.Bool: return boolFromField(f.type(new _Bool()));\n        case Type.Decimal: return decimalFromField(f.type(new _Decimal()));\n        case Type.Date: return dateFromField(f.type(new _Date()));\n        case Type.Time: return timeFromField(f.type(new _Time()));\n        case Type.Timestamp: return timestampFromField(f.type(new _Timestamp()));\n        case Type.Interval: return intervalFromField(f.type(new _Interval()));\n        case Type.List: return listFromField(f.type(new _List()), children || []);\n        case Type.Struct_: return structFromField(f.type(new _Struct()), children || []);\n        case Type.Union: return unionFromField(f.type(new _Union()), children || []);\n        case Type.FixedSizeBinary: return fixedSizeBinaryFromField(f.type(new _FixedSizeBinary()));\n        case Type.FixedSizeList: return fixedSizeListFromField(f.type(new _FixedSizeList()), children || []);\n        case Type.Map: return mapFromField(f.type(new _Map()), children || []);\n    }\n    throw new Error(`Unrecognized type ${f.typeType()}`);\n}\nfunction nullFromField(_type) { return new Null(); }\nfunction intFromField(_type) {\n    switch (_type.bitWidth()) {\n        case 8: return _type.isSigned() ? new Int8() : new Uint8();\n        case 16: return _type.isSigned() ? new Int16() : new Uint16();\n        case 32: return _type.isSigned() ? new Int32() : new Uint32();\n        case 64: return _type.isSigned() ? new Int64() : new Uint64();\n    }\n    return null;\n}\nfunction floatFromField(_type) {\n    switch (_type.precision()) {\n        case Precision.HALF: return new Float16();\n        case Precision.SINGLE: return new Float32();\n        case Precision.DOUBLE: return new Float64();\n    }\n    return null;\n}\nfunction binaryFromField(_type) { return new Binary(); }\nfunction utf8FromField(_type) { return new Utf8(); }\nfunction boolFromField(_type) { return new Bool(); }\nfunction decimalFromField(_type) { return new Decimal(_type.scale(), _type.precision()); }\nfunction dateFromField(_type) { return new Date_(_type.unit()); }\nfunction timeFromField(_type) { return new Time(_type.unit(), _type.bitWidth()); }\nfunction timestampFromField(_type) { return new Timestamp(_type.unit(), _type.timezone()); }\nfunction intervalFromField(_type) { return new Interval(_type.unit()); }\nfunction listFromField(_type, children) { return new List(children); }\nfunction structFromField(_type, children) { return new Struct(children); }\nfunction unionFromField(_type, children) { return new Union(_type.mode(), (_type.typeIdsArray() || []), children); }\nfunction fixedSizeBinaryFromField(_type) { return new FixedSizeBinary(_type.byteWidth()); }\nfunction fixedSizeListFromField(_type, children) { return new FixedSizeList(_type.listSize(), children); }\nfunction mapFromField(_type, children) { return new Map_(_type.keysSorted(), children); }\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { readJSON } from './json';\nimport { fromReadableStream } from './node';\nimport { RecordBatch } from '../../recordbatch';\nimport { readBuffers, readBuffersAsync } from './binary';\nimport { readRecordBatches, readRecordBatchesAsync } from './vector';\nexport { readJSON, RecordBatch };\nexport { readBuffers, readBuffersAsync };\nexport { readRecordBatches, readRecordBatchesAsync };\nexport function* read(sources) {\n    let input = sources;\n    let messages;\n    if (typeof input === 'string') {\n        try {\n            input = JSON.parse(input);\n        }\n        catch (e) {\n            input = sources;\n        }\n    }\n    if (!input || typeof input !== 'object') {\n        messages = (typeof input === 'string') ? readBuffers([input]) : [];\n    }\n    else {\n        messages = (typeof input[Symbol.iterator] === 'function') ? readBuffers(input) : readJSON(input);\n    }\n    yield* readRecordBatches(messages);\n}\nexport function readAsync(sources) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readAsync_1() {\n        var e_1, _a;\n        try {\n            for (var _b = tslib_1.__asyncValues(readRecordBatchesAsync(readBuffersAsync(sources))), _c; _c = yield tslib_1.__await(_b.next()), !_c.done;) {\n                let recordBatch = _c.value;\n                yield yield tslib_1.__await(recordBatch);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) yield tslib_1.__await(_a.call(_b));\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    });\n}\nexport function readStream(stream) {\n    return tslib_1.__asyncGenerator(this, arguments, function* readStream_1() {\n        var e_2, _a;\n        try {\n            for (var _b = tslib_1.__asyncValues(readAsync(fromReadableStream(stream))), _c; _c = yield tslib_1.__await(_b.next()), !_c.done;) {\n                const recordBatch = _c.value;\n                yield yield tslib_1.__await(recordBatch);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) yield tslib_1.__await(_a.call(_b));\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    });\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy9yZWFkZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCOztBQUVyQixPQUFPLEVBQUUsUUFBUSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUM1QyxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sbUJBQW1CLENBQUM7QUFDaEQsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN6RCxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsc0JBQXNCLEVBQWtCLE1BQU0sVUFBVSxDQUFDO0FBSXJGLE9BQU8sRUFBRSxRQUFRLEVBQUUsV0FBVyxFQUFFLENBQUM7QUFDakMsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxDQUFDO0FBQ3pDLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxzQkFBc0IsRUFBRSxDQUFDO0FBRXJELE1BQU0sU0FBUyxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQWlFO0lBQ25GLElBQUksS0FBSyxHQUFRLE9BQU8sQ0FBQztJQUN6QixJQUFJLFFBQWdGLENBQUM7SUFDckYsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDM0IsSUFBSTtZQUFFLEtBQUssR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1NBQUU7UUFDbEMsT0FBTyxDQUFDLEVBQUU7WUFBRSxLQUFLLEdBQUcsT0FBTyxDQUFDO1NBQUU7S0FDakM7SUFDRCxJQUFJLENBQUMsS0FBSyxJQUFJLE9BQU8sS0FBSyxLQUFLLFFBQVEsRUFBRTtRQUNyQyxRQUFRLEdBQUcsQ0FBQyxPQUFPLEtBQUssS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsV0FBVyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDO0tBQ3RFO1NBQU07UUFDSCxRQUFRLEdBQUcsQ0FBQyxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFDO0tBQ3BHO0lBQ0QsS0FBSyxDQUFDLENBQUMsaUJBQWlCLENBQUMsUUFBUSxDQUFDLENBQUM7QUFDdkMsQ0FBQztBQUVELE1BQU0sVUFBaUIsU0FBUyxDQUFDLE9BQW9EOzs7O1lBQ2pGLEtBQThCLElBQUEsS0FBQSxzQkFBQSxzQkFBc0IsQ0FBQyxnQkFBZ0IsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFBLElBQUE7Z0JBQXBFLElBQUksV0FBVyxXQUFBLENBQUE7Z0JBQ3RCLDRCQUFNLFdBQVcsQ0FBQSxDQUFDO2FBQ3JCOzs7Ozs7Ozs7SUFDTCxDQUFDO0NBQUE7QUFFRCxNQUFNLFVBQWlCLFVBQVUsQ0FBQyxNQUE2Qjs7OztZQUMzRCxLQUFnQyxJQUFBLEtBQUEsc0JBQUEsU0FBUyxDQUFDLGtCQUFrQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUEsSUFBQTtnQkFBMUQsTUFBTSxXQUFXLFdBQUEsQ0FBQTtnQkFDeEIsNEJBQU0sV0FBMEIsQ0FBQSxDQUFDO2FBQ3BDOzs7Ozs7Ozs7SUFDTCxDQUFDO0NBQUEiLCJmaWxlIjoiaXBjL3JlYWRlci9hcnJvdy5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyByZWFkSlNPTiB9IGZyb20gJy4vanNvbic7XG5pbXBvcnQgeyBmcm9tUmVhZGFibGVTdHJlYW0gfSBmcm9tICcuL25vZGUnO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi8uLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgeyByZWFkQnVmZmVycywgcmVhZEJ1ZmZlcnNBc3luYyB9IGZyb20gJy4vYmluYXJ5JztcbmltcG9ydCB7IHJlYWRSZWNvcmRCYXRjaGVzLCByZWFkUmVjb3JkQmF0Y2hlc0FzeW5jLCBUeXBlRGF0YUxvYWRlciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IFNjaGVtYSB9IGZyb20gJy4uLy4uL3R5cGUnO1xuaW1wb3J0IHsgTWVzc2FnZSB9IGZyb20gJy4uL21ldGFkYXRhJztcblxuZXhwb3J0IHsgcmVhZEpTT04sIFJlY29yZEJhdGNoIH07XG5leHBvcnQgeyByZWFkQnVmZmVycywgcmVhZEJ1ZmZlcnNBc3luYyB9O1xuZXhwb3J0IHsgcmVhZFJlY29yZEJhdGNoZXMsIHJlYWRSZWNvcmRCYXRjaGVzQXN5bmMgfTtcblxuZXhwb3J0IGZ1bmN0aW9uKiByZWFkKHNvdXJjZXM6IEl0ZXJhYmxlPFVpbnQ4QXJyYXkgfCBCdWZmZXIgfCBzdHJpbmc+IHwgb2JqZWN0IHwgc3RyaW5nKSB7XG4gICAgbGV0IGlucHV0OiBhbnkgPSBzb3VyY2VzO1xuICAgIGxldCBtZXNzYWdlczogSXRlcmFibGU8eyBzY2hlbWE6IFNjaGVtYSwgbWVzc2FnZTogTWVzc2FnZSwgbG9hZGVyOiBUeXBlRGF0YUxvYWRlciB9PjtcbiAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkgeyBpbnB1dCA9IEpTT04ucGFyc2UoaW5wdXQpOyB9XG4gICAgICAgIGNhdGNoIChlKSB7IGlucHV0ID0gc291cmNlczsgfVxuICAgIH1cbiAgICBpZiAoIWlucHV0IHx8IHR5cGVvZiBpbnB1dCAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgbWVzc2FnZXMgPSAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykgPyByZWFkQnVmZmVycyhbaW5wdXRdKSA6IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2VzID0gKHR5cGVvZiBpbnB1dFtTeW1ib2wuaXRlcmF0b3JdID09PSAnZnVuY3Rpb24nKSA/IHJlYWRCdWZmZXJzKGlucHV0KSA6IHJlYWRKU09OKGlucHV0KTtcbiAgICB9XG4gICAgeWllbGQqIHJlYWRSZWNvcmRCYXRjaGVzKG1lc3NhZ2VzKTtcbn1cblxuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uKiByZWFkQXN5bmMoc291cmNlczogQXN5bmNJdGVyYWJsZTxVaW50OEFycmF5IHwgQnVmZmVyIHwgc3RyaW5nPikge1xuICAgIGZvciBhd2FpdCAobGV0IHJlY29yZEJhdGNoIG9mIHJlYWRSZWNvcmRCYXRjaGVzQXN5bmMocmVhZEJ1ZmZlcnNBc3luYyhzb3VyY2VzKSkpIHtcbiAgICAgICAgeWllbGQgcmVjb3JkQmF0Y2g7XG4gICAgfVxufVxuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24qIHJlYWRTdHJlYW0oc3RyZWFtOiBOb2RlSlMuUmVhZGFibGVTdHJlYW0pIHtcbiAgICBmb3IgYXdhaXQgKGNvbnN0IHJlY29yZEJhdGNoIG9mIHJlYWRBc3luYyhmcm9tUmVhZGFibGVTdHJlYW0oc3RyZWFtKSkpIHtcbiAgICAgICAgeWllbGQgcmVjb3JkQmF0Y2ggYXMgUmVjb3JkQmF0Y2g7XG4gICAgfVxufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { serializeStream, serializeFile } from './binary';\nexport function writeTableBinary(table, stream = true) {\n    return concatBuffers(stream ? serializeStream(table) : serializeFile(table));\n}\nfunction concatBuffers(messages) {\n    let buffers = [], byteLength = 0;\n    for (const message of messages) {\n        buffers.push(message);\n        byteLength += message.byteLength;\n    }\n    const { buffer } = buffers.reduce(({ buffer, byteOffset }, bytes) => {\n        buffer.set(bytes, byteOffset);\n        return { buffer, byteOffset: byteOffset + bytes.byteLength };\n    }, { buffer: new Uint8Array(byteLength), byteOffset: 0 });\n    return buffer;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlwYy93cml0ZXIvYXJyb3cudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxlQUFlLEVBQUUsYUFBYSxFQUFFLE1BQU0sVUFBVSxDQUFDO0FBRTFELE1BQU0sVUFBVSxnQkFBZ0IsQ0FBQyxLQUFZLEVBQUUsTUFBTSxHQUFHLElBQUk7SUFDeEQsT0FBTyxhQUFhLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0FBQ2pGLENBQUM7QUFFRCxTQUFTLGFBQWEsQ0FBQyxRQUF1QztJQUUxRCxJQUFJLE9BQU8sR0FBRyxFQUFFLEVBQUUsVUFBVSxHQUFHLENBQUMsQ0FBQztJQUVqQyxLQUFLLE1BQU0sT0FBTyxJQUFJLFFBQVEsRUFBRTtRQUM1QixPQUFPLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3RCLFVBQVUsSUFBSSxPQUFPLENBQUMsVUFBVSxDQUFDO0tBQ3BDO0lBRUQsTUFBTSxFQUFFLE1BQU0sRUFBRSxHQUFHLE9BQU8sQ0FBQyxNQUFNLENBQUMsQ0FBQyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsRUFBRSxLQUFLLEVBQUUsRUFBRTtRQUNoRSxNQUFNLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBRSxVQUFVLENBQUMsQ0FBQztRQUM5QixPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxVQUFVLEdBQUcsS0FBSyxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ2pFLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxJQUFJLFVBQVUsQ0FBQyxVQUFVLENBQUMsRUFBRSxVQUFVLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUUxRCxPQUFPLE1BQU0sQ0FBQztBQUNsQixDQUFDIiwiZmlsZSI6ImlwYy93cml0ZXIvYXJyb3cuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgVGFibGUgfSBmcm9tICcuLi8uLi90YWJsZSc7XG5pbXBvcnQgeyBzZXJpYWxpemVTdHJlYW0sIHNlcmlhbGl6ZUZpbGUgfSBmcm9tICcuL2JpbmFyeSc7XG5cbmV4cG9ydCBmdW5jdGlvbiB3cml0ZVRhYmxlQmluYXJ5KHRhYmxlOiBUYWJsZSwgc3RyZWFtID0gdHJ1ZSkge1xuICAgIHJldHVybiBjb25jYXRCdWZmZXJzKHN0cmVhbSA/IHNlcmlhbGl6ZVN0cmVhbSh0YWJsZSkgOiBzZXJpYWxpemVGaWxlKHRhYmxlKSk7XG59XG5cbmZ1bmN0aW9uIGNvbmNhdEJ1ZmZlcnMobWVzc2FnZXM6IEl0ZXJhYmxlPFVpbnQ4QXJyYXkgfCBCdWZmZXI+KSB7XG5cbiAgICBsZXQgYnVmZmVycyA9IFtdLCBieXRlTGVuZ3RoID0gMDtcblxuICAgIGZvciAoY29uc3QgbWVzc2FnZSBvZiBtZXNzYWdlcykge1xuICAgICAgICBidWZmZXJzLnB1c2gobWVzc2FnZSk7XG4gICAgICAgIGJ5dGVMZW5ndGggKz0gbWVzc2FnZS5ieXRlTGVuZ3RoO1xuICAgIH1cblxuICAgIGNvbnN0IHsgYnVmZmVyIH0gPSBidWZmZXJzLnJlZHVjZSgoeyBidWZmZXIsIGJ5dGVPZmZzZXQgfSwgYnl0ZXMpID0+IHtcbiAgICAgICAgYnVmZmVyLnNldChieXRlcywgYnl0ZU9mZnNldCk7XG4gICAgICAgIHJldHVybiB7IGJ1ZmZlciwgYnl0ZU9mZnNldDogYnl0ZU9mZnNldCArIGJ5dGVzLmJ5dGVMZW5ndGggfTtcbiAgICB9LCB7IGJ1ZmZlcjogbmV3IFVpbnQ4QXJyYXkoYnl0ZUxlbmd0aCksIGJ5dGVPZmZzZXQ6IDAgfSk7XG5cbiAgICByZXR1cm4gYnVmZmVyO1xufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as tslib_1 from \"tslib\";\nimport { RecordBatch } from './recordbatch';\nimport { Col } from './predicate';\nimport { Schema, Field } from './type';\nimport { read, readAsync } from './ipc/reader/arrow';\nimport { writeTableBinary } from './ipc/writer/arrow';\nimport { PipeIterator } from './util/node';\nimport { isPromise, isAsyncIterable } from './util/compat';\nimport { DictionaryVector, IntVector } from './vector';\nimport { ChunkedView } from './vector/chunked';\nexport class Table {\n    constructor(...args) {\n        // List of inner Vectors, possibly spanning batches\n        this._columns = [];\n        let schema;\n        let batches;\n        if (args[0] instanceof Schema) {\n            schema = args[0];\n            batches = Array.isArray(args[1][0]) ? args[1][0] : args[1];\n        }\n        else if (args[0] instanceof RecordBatch) {\n            schema = (batches = args)[0].schema;\n        }\n        else {\n            schema = (batches = args[0])[0].schema;\n        }\n        this.schema = schema;\n        this.batches = batches;\n        this.batchesUnion = batches.length == 0 ?\n            new RecordBatch(schema, 0, []) :\n            batches.reduce((union, batch) => union.concat(batch));\n        this.length = this.batchesUnion.length;\n        this.numCols = this.batchesUnion.numCols;\n    }\n    static empty() { return new Table(new Schema([]), []); }\n    static from(sources) {\n        if (sources) {\n            let schema;\n            let recordBatches = [];\n            for (let recordBatch of read(sources)) {\n                schema = schema || recordBatch.schema;\n                recordBatches.push(recordBatch);\n            }\n            return new Table(schema || new Schema([]), recordBatches);\n        }\n        return Table.empty();\n    }\n    static fromAsync(sources) {\n        return tslib_1.__awaiter(this, void 0, void 0, function* () {\n            var e_1, _a;\n            if (isAsyncIterable(sources)) {\n                let schema;\n                let recordBatches = [];\n                try {\n                    for (var _b = tslib_1.__asyncValues(readAsync(sources)), _c; _c = yield _b.next(), !_c.done;) {\n                        let recordBatch = _c.value;\n                        schema = schema || recordBatch.schema;\n                        recordBatches.push(recordBatch);\n                    }\n                }\n                catch (e_1_1) { e_1 = { error: e_1_1 }; }\n                finally {\n                    try {\n                        if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);\n                    }\n                    finally { if (e_1) throw e_1.error; }\n                }\n                return new Table(schema || new Schema([]), recordBatches);\n            }\n            else if (isPromise(sources)) {\n                return Table.from(yield sources);\n            }\n            else if (sources) {\n                return Table.from(sources);\n            }\n            return Table.empty();\n        });\n    }\n    static fromStruct(struct) {\n        const schema = new Schema(struct.type.children);\n        const chunks = struct.view instanceof ChunkedView ?\n            struct.view.chunkVectors :\n            [struct];\n        return new Table(chunks.map((chunk) => new RecordBatch(schema, chunk.length, chunk.view.childData)));\n    }\n    get(index) {\n        return this.batchesUnion.get(index);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnAt(index) {\n        return index < 0 || index >= this.numCols\n            ? null\n            : this._columns[index] || (this._columns[index] = this.batchesUnion.getChildAt(index));\n    }\n    getColumnIndex(name) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]();\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n    count() {\n        return this.length;\n    }\n    select(...columnNames) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n    toString(separator) {\n        let str = '';\n        for (const row of this.rowsToString(separator)) {\n            str += row + '\\n';\n        }\n        return str;\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        return writeTableBinary(this, stream);\n    }\n    rowsToString(separator = ' | ') {\n        return new PipeIterator(tableRowsToString(this, separator), 'utf8');\n    }\n}\nclass FilteredDataFrame {\n    constructor(batches, predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    *[Symbol.iterator]() {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    yield batch.get(index);\n                }\n            }\n        }\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, this.predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!(vector instanceof DictionaryVector)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        // TODO: Adjust array byte width based on overall length\n        // (e.g. if this.length <= 255 use Uint8Array, etc...)\n        const counts = new Uint32Array(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nexport class CountByResult extends Table {\n    constructor(values, counts) {\n        super(new RecordBatch(new Schema([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]), counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nfunction* tableRowsToString(table, separator = ' | ') {\n    let rowOffset = 0;\n    let firstValues = [];\n    let maxColumnWidths = [];\n    let iterators = [];\n    // Gather all the `rowsToString` iterators into a list before iterating,\n    // so that `maxColumnWidths` is filled with the maxWidth for each column\n    // across all RecordBatches.\n    for (const batch of table.batches) {\n        const iterator = batch.rowsToString(separator, rowOffset, maxColumnWidths);\n        const { done, value } = iterator.next();\n        if (!done) {\n            firstValues.push(value);\n            iterators.push(iterator);\n            rowOffset += batch.length;\n        }\n    }\n    for (const iterator of iterators) {\n        yield firstValues.shift();\n        yield* iterator;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as type_ from './type';\nimport * as data_ from './data';\nimport * as vector_ from './vector';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_node from './util/node';\nimport * as visitor_ from './visitor';\nimport * as view_ from './vector/view';\nimport * as predicate_ from './predicate';\nimport { Vector } from './vector';\nimport { RecordBatch } from './recordbatch';\nimport { Schema, Field, Type } from './type';\nimport { Table, CountByResult } from './table';\nimport { fromReadableStream } from './ipc/reader/node';\nimport { read, readAsync, readStream } from './ipc/reader/arrow';\nimport { readBuffersAsync, readRecordBatchesAsync } from './ipc/reader/arrow';\nimport { serializeFile, serializeStream } from './ipc/writer/binary';\nexport { fromReadableStream };\nexport { read, readAsync, readStream };\nexport { readBuffersAsync, readRecordBatchesAsync };\nexport { serializeFile, serializeStream };\nexport { Table, CountByResult };\nexport { Field, Schema, RecordBatch, Vector, Type };\nexport var util;\n(function (util) {\n    util.Uint64 = util_int_.Uint64;\n    util.Int64 = util_int_.Int64;\n    util.Int128 = util_int_.Int128;\n    util.packBools = util_bit_.packBools;\n    util.PipeIterator = util_node.PipeIterator;\n    util.AsyncPipeIterator = util_node.AsyncPipeIterator;\n})(util || (util = {}));\nexport var data;\n(function (data) {\n    data.BaseData = data_.BaseData;\n    data.FlatData = data_.FlatData;\n    data.BoolData = data_.BoolData;\n    data.FlatListData = data_.FlatListData;\n    data.DictionaryData = data_.DictionaryData;\n    data.NestedData = data_.NestedData;\n    data.ListData = data_.ListData;\n    data.UnionData = data_.UnionData;\n    data.SparseUnionData = data_.SparseUnionData;\n    data.DenseUnionData = data_.DenseUnionData;\n    data.ChunkedData = data_.ChunkedData;\n})(data || (data = {}));\nexport var enum_;\n(function (enum_) {\n    enum_.Type = type_.ArrowType;\n    enum_.DateUnit = type_.DateUnit;\n    enum_.TimeUnit = type_.TimeUnit;\n    enum_.Precision = type_.Precision;\n    enum_.UnionMode = type_.UnionMode;\n    enum_.VectorType = type_.VectorType;\n    enum_.IntervalUnit = type_.IntervalUnit;\n    enum_.MessageHeader = type_.MessageHeader;\n    enum_.MetadataVersion = type_.MetadataVersion;\n})(enum_ || (enum_ = {}));\nexport var type;\n(function (type) {\n    type.Schema = type_.Schema;\n    type.Field = type_.Field;\n    type.Null = type_.Null;\n    type.Int = type_.Int;\n    type.Int8 = type_.Int8;\n    type.Int16 = type_.Int16;\n    type.Int32 = type_.Int32;\n    type.Int64 = type_.Int64;\n    type.Uint8 = type_.Uint8;\n    type.Uint16 = type_.Uint16;\n    type.Uint32 = type_.Uint32;\n    type.Uint64 = type_.Uint64;\n    type.Float = type_.Float;\n    type.Float16 = type_.Float16;\n    type.Float32 = type_.Float32;\n    type.Float64 = type_.Float64;\n    type.Binary = type_.Binary;\n    type.Utf8 = type_.Utf8;\n    type.Bool = type_.Bool;\n    type.Decimal = type_.Decimal;\n    type.Date_ = type_.Date_;\n    type.Time = type_.Time;\n    type.Timestamp = type_.Timestamp;\n    type.Interval = type_.Interval;\n    type.List = type_.List;\n    type.Struct = type_.Struct;\n    type.Union = type_.Union;\n    type.DenseUnion = type_.DenseUnion;\n    type.SparseUnion = type_.SparseUnion;\n    type.FixedSizeBinary = type_.FixedSizeBinary;\n    type.FixedSizeList = type_.FixedSizeList;\n    type.Map_ = type_.Map_;\n    type.Dictionary = type_.Dictionary;\n})(type || (type = {}));\nexport var vector;\n(function (vector) {\n    vector.Vector = vector_.Vector;\n    vector.NullVector = vector_.NullVector;\n    vector.BoolVector = vector_.BoolVector;\n    vector.IntVector = vector_.IntVector;\n    vector.FloatVector = vector_.FloatVector;\n    vector.DateVector = vector_.DateVector;\n    vector.DecimalVector = vector_.DecimalVector;\n    vector.TimeVector = vector_.TimeVector;\n    vector.TimestampVector = vector_.TimestampVector;\n    vector.IntervalVector = vector_.IntervalVector;\n    vector.BinaryVector = vector_.BinaryVector;\n    vector.FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;\n    vector.Utf8Vector = vector_.Utf8Vector;\n    vector.ListVector = vector_.ListVector;\n    vector.FixedSizeListVector = vector_.FixedSizeListVector;\n    vector.MapVector = vector_.MapVector;\n    vector.StructVector = vector_.StructVector;\n    vector.UnionVector = vector_.UnionVector;\n    vector.DictionaryVector = vector_.DictionaryVector;\n})(vector || (vector = {}));\nexport var visitor;\n(function (visitor) {\n    visitor.TypeVisitor = visitor_.TypeVisitor;\n    visitor.VectorVisitor = visitor_.VectorVisitor;\n})(visitor || (visitor = {}));\nexport var view;\n(function (view) {\n    view.ChunkedView = view_.ChunkedView;\n    view.DictionaryView = view_.DictionaryView;\n    view.ListView = view_.ListView;\n    view.FixedSizeListView = view_.FixedSizeListView;\n    view.BinaryView = view_.BinaryView;\n    view.Utf8View = view_.Utf8View;\n    view.UnionView = view_.UnionView;\n    view.DenseUnionView = view_.DenseUnionView;\n    view.NestedView = view_.NestedView;\n    view.StructView = view_.StructView;\n    view.MapView = view_.MapView;\n    view.FlatView = view_.FlatView;\n    view.NullView = view_.NullView;\n    view.BoolView = view_.BoolView;\n    view.ValidityView = view_.ValidityView;\n    view.PrimitiveView = view_.PrimitiveView;\n    view.FixedSizeView = view_.FixedSizeView;\n    view.Float16View = view_.Float16View;\n    view.DateDayView = view_.DateDayView;\n    view.DateMillisecondView = view_.DateMillisecondView;\n    view.TimestampDayView = view_.TimestampDayView;\n    view.TimestampSecondView = view_.TimestampSecondView;\n    view.TimestampMillisecondView = view_.TimestampMillisecondView;\n    view.TimestampMicrosecondView = view_.TimestampMicrosecondView;\n    view.TimestampNanosecondView = view_.TimestampNanosecondView;\n    view.IntervalYearMonthView = view_.IntervalYearMonthView;\n    view.IntervalYearView = view_.IntervalYearView;\n    view.IntervalMonthView = view_.IntervalMonthView;\n})(view || (view = {}));\nexport var predicate;\n(function (predicate) {\n    predicate.col = predicate_.col;\n    predicate.lit = predicate_.lit;\n    predicate.and = predicate_.and;\n    predicate.or = predicate_.or;\n    predicate.custom = predicate_.custom;\n    predicate.Or = predicate_.Or;\n    predicate.Col = predicate_.Col;\n    predicate.And = predicate_.And;\n    predicate.Not = predicate_.Not;\n    predicate.GTeq = predicate_.GTeq;\n    predicate.LTeq = predicate_.LTeq;\n    predicate.Value = predicate_.Value;\n    predicate.Equals = predicate_.Equals;\n    predicate.Literal = predicate_.Literal;\n    predicate.Predicate = predicate_.Predicate;\n})(predicate || (predicate = {}));\n/* These exports are needed for the closure and uglify umd targets */\ntry {\n    let Arrow = eval('exports');\n    if (Arrow && typeof Arrow === 'object') {\n        // string indexers tell closure and uglify not to rename these properties\n        Arrow['data'] = data;\n        Arrow['type'] = type;\n        Arrow['util'] = util;\n        Arrow['view'] = view;\n        Arrow['enum_'] = enum_;\n        Arrow['vector'] = vector;\n        Arrow['visitor'] = visitor;\n        Arrow['predicate'] = predicate;\n        Arrow['read'] = read;\n        Arrow['readAsync'] = readAsync;\n        Arrow['readStream'] = readStream;\n        Arrow['fromReadableStream'] = fromReadableStream;\n        Arrow['serializeFile'] = serializeFile;\n        Arrow['serializeStream'] = serializeStream;\n        Arrow['Type'] = Type;\n        Arrow['Field'] = Field;\n        Arrow['Schema'] = Schema;\n        Arrow['Vector'] = Vector;\n        Arrow['RecordBatch'] = RecordBatch;\n        Arrow['Table'] = Table;\n        Arrow['CountByResult'] = CountByResult;\n    }\n}\ncatch (e) { /* not the UMD bundle */ }\n/* end umd exports */\n// closure compiler erases static properties/methods:\n// https://github.com/google/closure-compiler/issues/1776\n// set them via string indexers to save them from the mangler\nSchema['from'] = Schema.from;\nTable['from'] = Table.from;\nTable['fromAsync'] = Table.fromAsync;\nTable['fromStruct'] = Table.fromStruct;\nTable['empty'] = Table.empty;\nVector['create'] = Vector.create;\nRecordBatch['from'] = RecordBatch.from;\nutil_int_.Uint64['add'] = util_int_.Uint64.add;\nutil_int_.Uint64['multiply'] = util_int_.Uint64.multiply;\nutil_int_.Int64['add'] = util_int_.Int64.add;\nutil_int_.Int64['multiply'] = util_int_.Int64.multiply;\nutil_int_.Int64['fromString'] = util_int_.Int64.fromString;\nutil_int_.Int128['add'] = util_int_.Int128.add;\nutil_int_.Int128['multiply'] = util_int_.Int128.multiply;\nutil_int_.Int128['fromString'] = util_int_.Int128.fromString;\ndata_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;\ntype_.Type['NONE'] = type_.Type.NONE;\ntype_.Type['Null'] = type_.Type.Null;\ntype_.Type['Int'] = type_.Type.Int;\ntype_.Type['Float'] = type_.Type.Float;\ntype_.Type['Binary'] = type_.Type.Binary;\ntype_.Type['Utf8'] = type_.Type.Utf8;\ntype_.Type['Bool'] = type_.Type.Bool;\ntype_.Type['Decimal'] = type_.Type.Decimal;\ntype_.Type['Date'] = type_.Type.Date;\ntype_.Type['Time'] = type_.Type.Time;\ntype_.Type['Timestamp'] = type_.Type.Timestamp;\ntype_.Type['Interval'] = type_.Type.Interval;\ntype_.Type['List'] = type_.Type.List;\ntype_.Type['Struct'] = type_.Type.Struct;\ntype_.Type['Union'] = type_.Type.Union;\ntype_.Type['FixedSizeBinary'] = type_.Type.FixedSizeBinary;\ntype_.Type['FixedSizeList'] = type_.Type.FixedSizeList;\ntype_.Type['Map'] = type_.Type.Map;\ntype_.Type['Dictionary'] = type_.Type.Dictionary;\ntype_.Type['DenseUnion'] = type_.Type.DenseUnion;\ntype_.Type['SparseUnion'] = type_.Type.SparseUnion;\ntype_.DataType['isNull'] = type_.DataType.isNull;\ntype_.DataType['isInt'] = type_.DataType.isInt;\ntype_.DataType['isFloat'] = type_.DataType.isFloat;\ntype_.DataType['isBinary'] = type_.DataType.isBinary;\ntype_.DataType['isUtf8'] = type_.DataType.isUtf8;\ntype_.DataType['isBool'] = type_.DataType.isBool;\ntype_.DataType['isDecimal'] = type_.DataType.isDecimal;\ntype_.DataType['isDate'] = type_.DataType.isDate;\ntype_.DataType['isTime'] = type_.DataType.isTime;\ntype_.DataType['isTimestamp'] = type_.DataType.isTimestamp;\ntype_.DataType['isInterval'] = type_.DataType.isInterval;\ntype_.DataType['isList'] = type_.DataType.isList;\ntype_.DataType['isStruct'] = type_.DataType.isStruct;\ntype_.DataType['isUnion'] = type_.DataType.isUnion;\ntype_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;\ntype_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;\ntype_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;\ntype_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;\ntype_.DataType['isMap'] = type_.DataType.isMap;\ntype_.DataType['isDictionary'] = type_.DataType.isDictionary;\nvector_.BoolVector['from'] = vector_.BoolVector.from;\nvector_.IntVector['from'] = vector_.IntVector.from;\nvector_.FloatVector['from'] = vector_.FloatVector.from;\nvisitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;\nvisitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","/**\n * @ignore\n */\nexport function isPromise(x) {\n    return x != null && Object(x) === x && typeof x['then'] === 'function';\n}\n/**\n * @ignore\n */\nexport function isObservable(x) {\n    return x != null && Object(x) === x && typeof x['subscribe'] === 'function';\n}\n/**\n * @ignore\n */\nexport function isArrayLike(x) {\n    return x != null && Object(x) === x && typeof x['length'] === 'number';\n}\n/**\n * @ignore\n */\nexport function isIterable(x) {\n    return x != null && Object(x) === x && typeof x[Symbol.iterator] !== 'undefined';\n}\n/**\n * @ignore\n */\nexport function isAsyncIterable(x) {\n    return x != null && Object(x) === x && typeof x[Symbol.asyncIterator] !== 'undefined';\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvY29tcGF0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQWVBOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFNBQVMsQ0FBQyxDQUFNO0lBQzVCLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLFVBQVUsQ0FBQztBQUMzRSxDQUFDO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLFVBQVUsWUFBWSxDQUFDLENBQU07SUFDL0IsT0FBTyxDQUFDLElBQUksSUFBSSxJQUFJLE1BQU0sQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxDQUFDLENBQUMsV0FBVyxDQUFDLEtBQUssVUFBVSxDQUFDO0FBQ2hGLENBQUM7QUFFRDs7R0FFRztBQUNILE1BQU0sVUFBVSxXQUFXLENBQUMsQ0FBTTtJQUM5QixPQUFPLENBQUMsSUFBSSxJQUFJLElBQUksTUFBTSxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLENBQUMsQ0FBQyxRQUFRLENBQUMsS0FBSyxRQUFRLENBQUM7QUFDM0UsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLFVBQVUsQ0FBQyxDQUFNO0lBQzdCLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxRQUFRLENBQUMsS0FBSyxXQUFXLENBQUM7QUFDckYsQ0FBQztBQUVEOztHQUVHO0FBQ0gsTUFBTSxVQUFVLGVBQWUsQ0FBQyxDQUFNO0lBQ2xDLE9BQU8sQ0FBQyxJQUFJLElBQUksSUFBSSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxhQUFhLENBQUMsS0FBSyxXQUFXLENBQUM7QUFDMUYsQ0FBQyIsImZpbGUiOiJ1dGlsL2NvbXBhdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBpbnRlcmZhY2UgU3Vic2NyaXB0aW9uIHtcbiAgICB1bnN1YnNjcmliZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZlcjxUPiB7XG4gICAgY2xvc2VkPzogYm9vbGVhbjtcbiAgICBuZXh0OiAodmFsdWU6IFQpID0+IHZvaWQ7XG4gICAgZXJyb3I6IChlcnI6IGFueSkgPT4gdm9pZDtcbiAgICBjb21wbGV0ZTogKCkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBPYnNlcnZhYmxlPFQ+IHtcbiAgICBzdWJzY3JpYmU6IChvYnNlcnZlcjogT2JzZXJ2ZXI8VD4pID0+IFN1YnNjcmlwdGlvbjtcbn1cblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Byb21pc2UoeDogYW55KTogeCBpcyBQcm9taXNlTGlrZTxhbnk+IHtcbiAgICByZXR1cm4geCAhPSBudWxsICYmIE9iamVjdCh4KSA9PT0geCAmJiB0eXBlb2YgeFsndGhlbiddID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzT2JzZXJ2YWJsZSh4OiBhbnkpOiB4IGlzIE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiBPYmplY3QoeCkgPT09IHggJiYgdHlwZW9mIHhbJ3N1YnNjcmliZSddID09PSAnZnVuY3Rpb24nO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXlMaWtlKHg6IGFueSk6IHggaXMgQXJyYXlMaWtlPGFueT4ge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgT2JqZWN0KHgpID09PSB4ICYmIHR5cGVvZiB4WydsZW5ndGgnXSA9PT0gJ251bWJlcic7XG59XG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNJdGVyYWJsZSh4OiBhbnkpOiB4IGlzIEl0ZXJhYmxlPGFueT4ge1xuICAgIHJldHVybiB4ICE9IG51bGwgJiYgT2JqZWN0KHgpID09PSB4ICYmIHR5cGVvZiB4W1N5bWJvbC5pdGVyYXRvcl0gIT09ICd1bmRlZmluZWQnO1xufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGlzQXN5bmNJdGVyYWJsZSh4OiBhbnkpOiB4IGlzIEFzeW5jSXRlcmFibGU8YW55PiB7XG4gICAgcmV0dXJuIHggIT0gbnVsbCAmJiBPYmplY3QoeCkgPT09IHggJiYgdHlwZW9mIHhbU3ltYm9sLmFzeW5jSXRlcmF0b3JdICE9PSAndW5kZWZpbmVkJztcbn1cbiJdfQ==\n"]}