{"version":3,"sources":["node_modules/flatbuffers/js/flatbuffers.mjs"," [synthetic:base] "," [synthetic:es6/util/arrayiterator] "," [synthetic:util/defines] "," [synthetic:util/defineproperty] "," [synthetic:util/global] "," [synthetic:es6/symbol] "," [synthetic:es6/util/makeiterator] "," [synthetic:es6/util/arrayfromiterator] "," [synthetic:es6/util/arrayfromiterable] "," [synthetic:util/objectcreate] "," [synthetic:es6/util/setprototypeof] "," [synthetic:es6/util/inherits] "," [synthetic:es6/generator_engine] ","targets/es5/cls/io/adapters.js"," [synthetic:util/polyfill] "," [synthetic:es6/promise/promise] "," [synthetic:es6/promise/finally] "," [synthetic:es6/execute_async_generator] "," [synthetic:es6/util/makeasynciterator] "," [synthetic:es6/async_generator_wrapper] ","targets/es5/cls/fb/Schema.js","targets/es5/cls/io/interfaces.js","targets/es5/cls/util/compat.js","targets/es5/cls/util/buffer.js","targets/es5/cls/vector.js","targets/es5/cls/ipc/metadata/message.js","targets/es5/cls/fb/Message.js","targets/es5/cls/enum.js","targets/es5/cls/fb/File.js","targets/es5/cls/type.js","targets/es5/cls/schema.js","targets/es5/cls/ipc/metadata/file.js","targets/es5/cls/util/bit.js","targets/es5/cls/data.js","targets/es5/cls/util/pretty.js","targets/es5/cls/vector/row.js","targets/es5/cls/util/vector.js","targets/es5/cls/vector/chunked.js","targets/es5/cls/vector/base.js","targets/es5/cls/vector/struct.js","targets/es5/cls/recordbatch.js","targets/es5/cls/io/stream.js","targets/es5/cls/io/file.js","node_modules/text-encoding-utf-8/src/encoding.js","targets/es5/cls/visitor.js","targets/es5/cls/util/int.js","targets/es5/cls/visitor/vectorloader.js","targets/es5/cls/visitor/typeassembler.js","targets/es5/cls/ipc/metadata/json.js","targets/es5/cls/ipc/message.js","targets/es5/cls/ipc/reader.js","targets/es5/cls/visitor/vectorassembler.js","targets/es5/cls/ipc/writer.js","targets/es5/cls/column.js","targets/es5/cls/vector/binary.js","targets/es5/cls/vector/bool.js","targets/es5/cls/vector/date.js","targets/es5/cls/vector/decimal.js","targets/es5/cls/vector/dictionary.js","targets/es5/cls/vector/fixedsizebinary.js","targets/es5/cls/vector/fixedsizelist.js","targets/es5/cls/vector/float.js","targets/es5/cls/vector/interval.js","targets/es5/cls/vector/int.js","targets/es5/cls/vector/list.js","targets/es5/cls/vector/map.js","targets/es5/cls/vector/null.js","targets/es5/cls/vector/timestamp.js","targets/es5/cls/vector/time.js","targets/es5/cls/vector/union.js","targets/es5/cls/visitor/set.js","targets/es5/cls/vector/utf8.js","targets/es5/cls/vector/all.js","targets/es5/cls/visitor/get.js","targets/es5/cls/visitor/indexof.js","targets/es5/cls/visitor/iterator.js","targets/es5/cls/visitor/toarray.js","targets/es5/cls/visitor/bytewidth.js","targets/es5/cls/visitor/vectorctor.js","targets/es5/cls/vector/index.js","targets/es5/cls/table.js","targets/es5/cls/compute/predicate.js","targets/es5/cls/compute/dataframe.js","targets/es5/cls/Arrow.js","targets/es5/cls/Arrow.dom.js","targets/es5/cls/Arrow.dom.cls.js"],"names":["$jscomp.generator.Context","fromReadableNodeStream","$jscomp.generator.Engine_","$jscomp.generator.Generator_","$jscomp.AsyncIteratorFromSyncWrapper","$jscomp.AsyncGeneratorWrapper$ExecutionQueue_","$jscomp.AsyncGeneratorWrapper$ExecutionNode_","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.NEXT","$jscomp.AsyncGeneratorWrapper$ExecutionFrame_","$jscomp.AsyncGeneratorWrapper","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.RETURN","$jscomp.AsyncGeneratorWrapper$ActionRecord","$jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_VALUE","$jscomp.AsyncGeneratorWrapper$GeneratorMethod.THROW","$jscomp.AsyncGeneratorWrapper$ActionEnum.YIELD_STAR","$jscomp.AsyncGeneratorWrapper$ActionEnum.AWAIT_VALUE","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32","Int32Array","Float32Array","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.int32.buffer","buffer","Float64Array","Uint16Array","Uint8Array","flatbuffers.Long","low","high","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long","prototype","equals","flatbuffers.Long.prototype.equals","other","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Long.ZERO","flatbuffers.Builder","bb","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer","initial_size","space","minalign","vtable","vtable_in_use","isNested","object_start","vtables","vector_num_elems","force_defaults","flatbuffers.Builder.prototype.asUint8Array","bytes","subarray","position","offset","flatbuffers.Builder.prototype.prep","size","additional_bytes","align_size","bytes_","length","old_buf_size","Error","new_buf_size","nbb","setPosition","set","pad","flatbuffers.Builder.prototype.pad","byte_size","i","writeInt8","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder.prototype","flatbuffers.Builder.prototype.writeInt8","value","writeInt16","flatbuffers.Builder.prototype.writeInt16","writeInt32","flatbuffers.Builder.prototype.writeInt32","writeInt64","flatbuffers.Builder.prototype.writeInt64","flatbuffers.Builder.prototype.addInt16","prep","flatbuffers.Builder.prototype.addFieldInt8","voffset","defaultValue","addInt8","slot","flatbuffers.Builder.prototype.addFieldInt16","addInt16","flatbuffers.Builder.prototype.addFieldInt32","addInt32","flatbuffers.Builder.prototype.addFieldInt64","addInt64","flatbuffers.Builder.prototype.addFieldOffset","addOffset","flatbuffers.Builder.prototype.notNested","flatbuffers.Builder.prototype.slot","flatbuffers.Builder.prototype.offset","flatbuffers.Builder.prototype.addOffset","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_INT","flatbuffers.Builder.prototype.startObject","numfields","notNested","flatbuffers.Builder.prototype.endObject","vtableloc","trimmed_size","len","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.SIZEOF_SHORT","standard_fields","existing_vtable","vt1","vt2","readInt16","j","push","finish","flatbuffers.Builder.prototype.finish","root_table","opt_file_identifier","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.FILE_IDENTIFIER_LENGTH","charCodeAt","flatbuffers.Builder.prototype.startVector","elem_size","num_elems","alignment","flatbuffers.Builder.prototype.endVector","flatbuffers.Builder.prototype.createString","s","utf8","a","b","codePoint","startVector","endVector","createLong","flatbuffers.Builder.prototype.createLong","flatbuffers.ByteBuffer","position_","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.ByteBuffer.prototype","flatbuffers.ByteBuffer.prototype.bytes","flatbuffers.ByteBuffer.prototype.position","flatbuffers.ByteBuffer.prototype.setPosition","flatbuffers.ByteBuffer.prototype.readUint8","flatbuffers.ByteBuffer.prototype.readInt16","readUint16","readInt32","flatbuffers.ByteBuffer.prototype.readInt32","flatbuffers.ByteBuffer.prototype.readInt64","flatbuffers.ByteBuffer.prototype.writeInt8","flatbuffers.ByteBuffer.prototype.writeInt16","flatbuffers.ByteBuffer.prototype.writeInt32","flatbuffers.ByteBuffer.prototype.writeInt64","flatbuffers.ByteBuffer.prototype.__offset","bb_pos","vtable_offset","flatbuffers.ByteBuffer.prototype.__union","t","flatbuffers.ByteBuffer.prototype.__string","opt_encoding","result","UTF8_BYTES","readUint8","c","d","String","fromCharCode","flatbuffers.ByteBuffer.prototype.__indirect","flatbuffers.ByteBuffer.prototype.__vector","flatbuffers.ByteBuffer.prototype.__vector_len","flatbuffers.ByteBuffer.prototype.createLong","ITERATOR_DONE","Object","freeze","done","constructor","ArrowJSON","_json","schema","batches","dictionaries","defineProperty","get","ReadableInterop","tee","_getReadableDOMStream","pipe","writable","options","_getReadableNodeStream","_readableNodeStream","toReadableNodeStream","pipeTo","pipeThrough","duplex","_readableDOMStream","toReadableDOMStream","AsyncQueue","values","resolvers","_closedPromise","Promise","r","_closedPromiseResolve","cancel","reason","return","write","_ensureOpen","name","shift","resolve","abort","_error","error","reject","close","undefined","Symbol","asyncIterator","?.prototype","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toReadableDOMStream","$jscompDefaultExport$$module$targets$es5$cls$io$adapters.toReadableNodeStream","throw","_","read","next","peek","closed","hasFuncs","x","hasProps","fn","map","f","ks","every","k","isFileHandle","isFetchResponse","isReadableDOMStream","isReadableNodeStream","SharedArrayBuf","SharedArrayBuffer","ArrayBuffer","collapseContiguousByteRanges","chunks","y","xOffset","yOffset","yLen","xLen","splice","memcpy","target","source","targetByteOffset","sourceByteLength","byteLength","targetByteLength","dst","byteOffset","src","Math","min","toArrayBufferView","ArrayBufferViewCtor","input","chunk","n","isView","BYTES_PER_ELEMENT","from","pump","iterator","toArrayBufferViewIterator","ArrayCtor","wrap","buffers","it","toArrayBufferViewAsyncIterator","emit","exports","joinUint8Arrays","index","chunksLen","sliced","reduce","slice","toInt8Array","Int8Array","toInt16Array","Int16Array","toInt32Array","toUint8Array","toUint16Array","toUint32Array","Uint32Array","toFloat32Array","toFloat64Array","toUint8ClampedArray","Uint8ClampedArray","toInt8ArrayIterator","toInt16ArrayIterator","toInt32ArrayIterator","toUint8ArrayIterator","toUint16ArrayIterator","toUint32ArrayIterator","toFloat32ArrayIterator","toFloat64ArrayIterator","toUint8ClampedArrayIterator","toInt8ArrayAsyncIterator","toInt16ArrayAsyncIterator","toInt32ArrayAsyncIterator","toUint8ArrayAsyncIterator","toUint16ArrayAsyncIterator","toUint32ArrayAsyncIterator","toFloat32ArrayAsyncIterator","toFloat64ArrayAsyncIterator","toUint8ClampedArrayAsyncIterator","rebaseValueOffsets","valueOffsets","fromIterable","threw","cmd","bufferLength","e","isNaN","fromAsyncIterable","fromReadableDOMStream","AdaptiveByteReader","releaseLock","defaultReader","byobReader","supportsBYOB","reader","getBYOBReader","getDefaultReader","catch","mode","readFromBYOBReader","readInto","onEvent","stream","event","handler","byteRange","cleanup","events","err","evt","destroyed","call","cb","race","isFinite","Vector","org","apache","arrow","flatbuf","MetadataVersion","UnionMode","Precision","DateUnit","TimeUnit","IntervalUnit","Type","VectorType","Endianness","Null","__init","getRootAsNull","obj","startNull","builder","startObject","endNull","endObject","Struct_","getRootAsStruct_","startStruct_","endStruct_","List","getRootAsList","startList","endList","FixedSizeList","getRootAsFixedSizeList","listSize","__offset","startFixedSizeList","addListSize","addFieldInt32","endFixedSizeList","Map","getRootAsMap","keysSorted","startMap","addKeysSorted","addFieldInt8","endMap","Union","getRootAsUnion","Sparse","typeIds","__vector","typeIdsArray","__vector_len","startUnion","addMode","addFieldInt16","addTypeIds","typeIdsOffset","addFieldOffset","createTypeIdsVector","data","startTypeIdsVector","numElems","endUnion","Int","getRootAsInt","bitWidth","isSigned","startInt","addBitWidth","addIsSigned","endInt","FloatingPoint","getRootAsFloatingPoint","precision","HALF","startFloatingPoint","addPrecision","endFloatingPoint","Utf8","getRootAsUtf8","startUtf8","endUtf8","Binary","getRootAsBinary","startBinary","endBinary","FixedSizeBinary","getRootAsFixedSizeBinary","byteWidth","startFixedSizeBinary","addByteWidth","endFixedSizeBinary","Bool","getRootAsBool","startBool","endBool","Decimal","getRootAsDecimal","scale","startDecimal","addScale","endDecimal","Date","getRootAsDate","unit","MILLISECOND","startDate","addUnit","endDate","Time","getRootAsTime","startTime","endTime","Timestamp","getRootAsTimestamp","SECOND","timezone","optionalEncoding","__string","startTimestamp","addTimezone","timezoneOffset","endTimestamp","Interval","getRootAsInterval","YEAR_MONTH","startInterval","endInterval","VectorLayout","getRootAsVectorLayout","type","OFFSET","startVectorLayout","addType","endVectorLayout","KeyValue","getRootAsKeyValue","key","startKeyValue","addKey","keyOffset","addValue","valueOffset","endKeyValue","DictionaryEncoding","getRootAsDictionaryEncoding","id","readInt64","indexType","__indirect","isOrdered","startDictionaryEncoding","addId","addFieldInt64","addIndexType","indexTypeOffset","addIsOrdered","endDictionaryEncoding","Field","getRootAsField","nullable","typeType","NONE","__union","dictionary","children","childrenLength","customMetadata","customMetadataLength","startField","addName","nameOffset","addNullable","addTypeType","typeOffset","addDictionary","dictionaryOffset","addChildren","childrenOffset","createChildrenVector","startChildrenVector","addLayout","layoutOffset","createLayoutVector","startLayoutVector","addCustomMetadata","customMetadataOffset","createCustomMetadataVector","startCustomMetadataVector","endField","Buffer","createBuffer","Schema","getRootAsSchema","fields","fieldsLength","startSchema","addEndianness","platformIsLittleEndian","endianness","_Endianness","Little","Big","addFields","fieldsOffset","createFieldsVector","startFieldsVector","endSchema","finishSchemaBuffer","module$targets$es5$cls$fb$Schema.org","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Schema","MessageHeader","FieldNode","nullCount","createFieldNode","null_count","RecordBatch","getRootAsRecordBatch","nodes","nodesLength","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Buffer","buffersLength","startRecordBatch","addLength","addNodes","nodesOffset","startNodesVector","addBuffers","buffersOffset","startBuffersVector","endRecordBatch","DictionaryBatch","getRootAsDictionaryBatch","isDelta","startDictionaryBatch","addData","dataOffset","addIsDelta","endDictionaryBatch","Message","getRootAsMessage","version","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion.V1","V1","headerType","header","bodyLength","startMessage","addVersion","addHeaderType","addHeader","headerOffset","addBodyLength","endMessage","finishMessageBuffer","module$targets$es5$cls$fb$Message.org","ArrowType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Type","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DateUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.TimeUnit","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Precision","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.UnionMode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.VectorType","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.IntervalUnit","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.MessageHeader","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.MetadataVersion","module$targets$es5$cls$enum.Type","Footer","getRootAsFooter","Block","dictionariesLength","recordBatches","recordBatchesLength","startFooter","addSchema","schemaOffset","addDictionaries","dictionariesOffset","startDictionariesVector","addRecordBatches","recordBatchesOffset","startRecordBatchesVector","endFooter","finishFooterBuffer","metaDataLength","createBlock","module$targets$es5$cls$fb$File.org","DataType","_children","isNull","typeId","module$targets$es5$cls$enum.Type.Null","isInt","module$targets$es5$cls$enum.Type.Int","isFloat","module$targets$es5$cls$enum.Type.Float","Float","isBinary","module$targets$es5$cls$enum.Type.Binary","isUtf8","module$targets$es5$cls$enum.Type.Utf8","isBool","module$targets$es5$cls$enum.Type.Bool","isDecimal","module$targets$es5$cls$enum.Type.Decimal","isDate","module$targets$es5$cls$enum.Type.Date","isTime","module$targets$es5$cls$enum.Type.Time","isTimestamp","module$targets$es5$cls$enum.Type.Timestamp","isInterval","module$targets$es5$cls$enum.Type.Interval","isList","module$targets$es5$cls$enum.Type.List","isStruct","module$targets$es5$cls$enum.Type.Struct","Struct","isUnion","module$targets$es5$cls$enum.Type.Union","isFixedSizeBinary","module$targets$es5$cls$enum.Type.FixedSizeBinary","isFixedSizeList","module$targets$es5$cls$enum.Type.FixedSizeList","isMap","module$targets$es5$cls$enum.Type.Map","isDictionary","module$targets$es5$cls$enum.Type.Dictionary","Dictionary","module$targets$es5$cls$enum.Type.NONE","toStringTag","proto","ArrayType","Array","toString","Int_","_isSigned","_bitWidth","Int8","Int16","Int32","Int64","Uint8","Uint16","Uint32","Uint64","_precision","SINGLE","DOUBLE","Float16","Float32","Float64","_scale","Date_","_unit","DateDay","DAY","DateMillisecond","Time_","TimeSecond","TimeMillisecond","TimeMicrosecond","MICROSECOND","TimeNanosecond","NANOSECOND","Timestamp_","_timezone","TimestampSecond","TimestampMillisecond","TimestampMicrosecond","TimestampNanosecond","Interval_","IntervalDayTime","DAY_TIME","IntervalYearMonth","child","valueType","valueField","join","Union_","_mode","_typeIds","_typeIdToChildIndex","typeIdToChildIndex","idx","create","DenseUnion","Dense","SparseUnion","_byteWidth","_listSize","Map_","_keysSorted","getId","atomicDictionaryId","indices","dictionaryVector","_indices","_dictionary","_isOrdered","_dictionaryVector","_id","v","metadata","dictionaryFields","_fields","_metadata","generateDictionaryMap","_dictionaries","_dictionaryFields","vectors","names","select","columnNames","xs","filter","_name","_type","_nullable","field","has","_Block","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Block","_Footer","module$targets$es5$cls$fb$File.org.apache.arrow.flatbuf.Footer","Footer_","dictionaryBatches","V4","_recordBatches","_dictionaryBatches","decode","buf","footer","OffHeapFooter","encode","flatbuffers$$module$node_modules$flatbuffers$js$flatbuffers_mjs.Builder","numRecordBatches","reverse","forEach","rb","FileBlock","numDictionaries","db","dictionaryBatchesOffset","asUint8Array","block","getRecordBatch","getDictionaryBatch","_footer","fileBlock","getBool","_data","_index","byte","bit","getBit","packBools","iterateBits","begin","context","byteIndex","remaining","popcnt_bit_range","lhs","rhs","sum","rhsInside","lhsInside","popcnt_array","arr","cnt","pos","view","DataView","popcnt_uint32","getUint32","getUint16","getUint8","uint32","setBool","truncateBitmap","bitmap","alignedSize","Data","childData","_buffers","_offset","floor","max","_length","assign","_nullCount","_childData","clone","sliceBuffers","sliceChildren","BufferType","TYPE","sliceData","sliceOffsets","DATA","nullBitmap","VALIDITY","valueOffsetsOrChildData","kUnknownNullCount","valueToString","JSON","stringify","columnDescriptor","enumerable","configurable","lengthDescriptor","rowIndexDescriptor","rowParentDescriptor","row","parent","rowIndex","Row","fieldsAreEnumerable","columnIndex","_bindGetter","new","schemaOrFields","isArray","keys","colIndex","getChildAt","bind","bound","toJSON","getOwnPropertyNames","props","prop","tmp","createElementComparator","search","valueOf","fns","C","clampIndex","then","adjust","clampRange","end","ChunkedVector","offsets","_chunks","_chunkOffsets","_numChildren","flatten","concat","others","columns","vector","vec","mid","isValid","isValidInternal","getInternal","indexOf","element","self","indexOfInternal","toArray","arraySet","typedSet","sliceInternal","chunkIndex","fromIndex","start","found","column","slices","chunkOffsets","chunkLength","chunkOffset","numChildren","stride","BaseVector","_stride","_bindDataAccessors","val","VectorName","StructVector","arguments","rowProxy","asMap","_schema","args","numRows","impl","childNames","structData","numCols","AsyncByteQueue","super","sync","ByteStream","ByteStreamSource","AsyncByteStream","AsyncByteStreamSource","body","RandomAccessFile","readAt","getInt32","seek","nBytes","Infinity","AsyncRandomAccessFile","file","stat","bytesRead","ToDictionary","o","TypeError","Stream","tokens","endOfStream","end_of_stream","prepend","token","unshift","pop","decoderError","fatal","TextDecoder","encoding","toLowerCase","DEFAULT_ENCODING","_BOMseen","_streaming","_decoder","_fatal","_ignoreBOM","UTF8Decoder","input_stream","code_points","finished","apply","cp","TextEncoder","_encoder","opt_string","UTF8Encoder","string","u","utf8_code_point","utf8_bytes_seen","utf8_bytes_needed","utf8_lower_boundary","utf8_upper_boundary","this.handler","bite","code_point","count","Visitor","visitMany","node","visit","getVisitFn","throwIfNotFound","visitNull","_node","visitBool","visitInt","visitFloat","visitUtf8","visitBinary","visitFixedSizeBinary","visitDate","visitTimestamp","visitTime","visitDecimal","visitList","visitStruct","visitUnion","visitDictionary","visitInterval","visitFixedSizeList","visitMap","visitor","dtype","inferDType","module$targets$es5$cls$enum.Type.Int8","visitInt8","module$targets$es5$cls$enum.Type.Int16","visitInt16","module$targets$es5$cls$enum.Type.Int32","visitInt32","module$targets$es5$cls$enum.Type.Int64","visitInt64","module$targets$es5$cls$enum.Type.Uint8","visitUint8","module$targets$es5$cls$enum.Type.Uint16","visitUint16","module$targets$es5$cls$enum.Type.Uint32","visitUint32","module$targets$es5$cls$enum.Type.Uint64","visitUint64","module$targets$es5$cls$enum.Type.Float16","visitFloat16","module$targets$es5$cls$enum.Type.Float32","visitFloat32","module$targets$es5$cls$enum.Type.Float64","visitFloat64","module$targets$es5$cls$enum.Type.DateDay","visitDateDay","module$targets$es5$cls$enum.Type.DateMillisecond","visitDateMillisecond","module$targets$es5$cls$enum.Type.TimestampSecond","visitTimestampSecond","module$targets$es5$cls$enum.Type.TimestampMillisecond","visitTimestampMillisecond","module$targets$es5$cls$enum.Type.TimestampMicrosecond","visitTimestampMicrosecond","module$targets$es5$cls$enum.Type.TimestampNanosecond","visitTimestampNanosecond","module$targets$es5$cls$enum.Type.TimeSecond","visitTimeSecond","module$targets$es5$cls$enum.Type.TimeMillisecond","visitTimeMillisecond","module$targets$es5$cls$enum.Type.TimeMicrosecond","visitTimeMicrosecond","module$targets$es5$cls$enum.Type.TimeNanosecond","visitTimeNanosecond","module$targets$es5$cls$enum.Type.DenseUnion","visitDenseUnion","module$targets$es5$cls$enum.Type.SparseUnion","visitSparseUnion","module$targets$es5$cls$enum.Type.IntervalDayTime","visitIntervalDayTime","module$targets$es5$cls$enum.Type.IntervalYearMonth","visitIntervalYearMonth","intAsHex","kPowersOfTen","BaseInt64","_times","L","R","product","carryBit16","_plus","lessThan","greaterThan","hex","times","plus","out_buffer","fromString","fromNumber","num","str","out","posn","group","kInt32DecimalDigits","parseInt","substr","multiple","convertArray","multiply","left","right","rtrn","add","negate","this_high","other_high","startsWith","Int128","L0","L1","L2","L3","R0","R1","R2","R3","sums","utf8Encoder","VectorLoader","buffersIndex","nodesIndex","nextFieldNode","readNullBitmap","readData","readOffsets","readTypeIds","nextBufferRange","JSONVectorLoader","sources","binaryDataFromJSON","joined","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Null","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Int","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FloatingPoint","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Binary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Bool","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Utf8","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Decimal","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Date","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Time","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Timestamp","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Interval","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.List","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Struct_","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Union","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.DictionaryEncoding","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeBinary","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.FixedSizeList","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Map","TypeAssembler","createString","instance","recordBatchFromJSON","fieldNodesFromJSON","buffersFromJSON","schemaFieldsFromJSON","Boolean","fromJSON","fieldChildrenFromJSON","_field","fieldNodes","nullCountFromJSON","BufferRegion","validity","customMetadataFromJSON","entries","indexTypeFromJSON","typeFromJSON","_Field","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Field","_Schema","_Buffer","_Message","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.Message","_KeyValue","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.KeyValue","_FieldNode","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.FieldNode","module$targets$es5$cls$fb$Schema.org.apache.arrow.flatbuf.Endianness","_RecordBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.RecordBatch","_DictionaryBatch","module$targets$es5$cls$fb$Message.org.apache.arrow.flatbuf.DictionaryBatch","_version","_headerType","_createHeader","this._createHeader","_bodyLength","msg","message","messageHeaderFromJSON","_message","decodeMessageHeader","isSchema","isRecordBatch","isDictionaryBatch","_nodes","_isDelta","encodeField","decodeField","fieldFromJSON","dictMeta","dictType","dictField","encodeSchema","decodeSchema","schemaFromJSON","encodeRecordBatch","decodeRecordBatch","encodeDictionaryBatch","decodeDictionaryBatch","dictionaryBatchFromJSON","encodeFieldNode","decodeFieldNode","encodeBufferRegion","decodeBufferRegion","decodeSchemaFields","decodeCustomMetadata","batch","decodeFieldNodes","decodeBuffers","v3Compat","decodeFieldChildren","decodeIndexType","decodeFieldType","entry","fieldOffsets","fieldsVectorOffset","metadataOffset","typeAssembler","childOffsets","childrenVectorOffset","recordBatch","nodesVectorOffset","b_","buffersVectorOffset","dictionaryBatch","setInt16","invalidMessageType","nullMessage","invalidMessageMetadata","expected","actual","invalidMessageBodyLength","MessageReader","readMetadataLength","readMetadata","readMessage","readMessageBody","readSchema","throwIfNull","PADDING","metadataLength","AsyncMessageReader","JSONMessageReader","_body","_dictionaryIndex","_batchIndex","numBatches","flattenDataSources","MAGIC","MAGIC_STR","checkForMagicArrowString","magicLength","magicAndPadding","magicX2AndPadding","RecordBatchReader","reset","isSync","RecordBatchFileReader","RecordBatchStreamReader","isAsync","AsyncRecordBatchFileReader","AsyncRecordBatchStreamReader","isFile","isStream","throughNode","throughDOM","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromFileHandle","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromAsyncByteStream","RecordBatchReader$$module$targets$es5$cls$ipc$reader.fromByteStream","fromByteStream","fromAsyncByteStream","fromFileHandle","autoClose","AsyncRecordBatchFileReaderImpl","RecordBatchFileReaderImpl","open","readRecordBatch","RecordBatchJSONReaderImpl","RecordBatchStreamReaderImpl","AsyncRecordBatchStreamReaderImpl","rest","RecordBatchReaderImplBase","recordBatchIndex","dictionaryIndex","_loadRecordBatch","_loadVectors","_loadDictionaryBatch","types","readNextMessageAndValidate","readFooter","readDictionaryBatch","VectorAssembler","_byteLength","_bufferRegions","assemble","RangeError","addBuffer","bufferRegions","assembleFlatVector","assembleFlatListVector","firstOffset","lastOffset","assembleListVector","assembleNestedVector","VectorAssembler.prototype","assembleBoolVector","assembleUnion","maxChildTypeId","childLengths","fill","shiftedOffsets","unshiftedOffsets","childIndex","childLength","kAlignmentBytes","RecordBatchWriter","started","sink","dictionaryBlocks","recordBatchBlocks","_writeSchema","_writeBodyBuffers","_writeMessage","_writeRecordBatch","flatbufferSize","nPaddingBytes","_write","of","_writePadding","_writeDictionaries","_writeDictionaryBatch","padding","RecordBatchFileWriter","writeAll","writer","_writeFooter","_writeMagic","RecordBatchStreamWriter","Column","BinaryVector","asUtf8","BoolVector","DateVector","IntUtil","DateDayVector","DateMillisecondVector","DecimalVector","DictionaryVector","getKey","getValue","reverseLookup","FixedSizeBinaryVector","FixedSizeListVector","FloatVector","Float16Vector","Float32Vector","Float64Vector","IntervalVector","IntervalDayTimeVector","IntervalYearMonthVector","IntVector","Number","is64","Int8Vector","Int16Vector","Int32Vector","Int64Vector","Uint8Vector","Uint16Vector","Uint32Vector","Uint64Vector","ListVector","MapVector","asStruct","NullVector","TimestampVector","TimestampSecondVector","TimestampMillisecondVector","TimestampMicrosecondVector","TimestampNanosecondVector","TimeVector","TimeSecondVector","TimeMillisecondVector","TimeMicrosecondVector","TimeNanosecondVector","UnionVector","DenseUnionVector","SparseUnionVector","encoder","SetVisitor","setVariableWidthBytes","setDateDay","epochMs","setDateMillisecond","setNumeric","setFloat16","setNumericX2","setTimestampSecond","setTimestampMillisecond","setTimestampMicrosecond","setTimestampNanosecond","setTimeSecond","setTimeMillisecond","setTimeMicrosecond","setTimeNanosecond","setNested","kid","setDenseUnion","setSparseUnion","setIntervalDayTime","setIntervalYearMonth","SetVisitor.prototype","setInt","setFloat","setUtf8","encodeUtf8","setBinary","setFixedSizeBinary","getDate","setTimestamp","setTime","setDecimal","setList","setUnion","setDictionary","setIntervalValue","setFixedSizeList","Utf8Vector","asBinary","decoder","GetVisitor","epochMillisecondsLongToMs","getVariableWidthBytes","getDateDay","getDateMillisecond","getNumeric","getFloat16","getNumericX2","getTimestampSecond","getTimestampMillisecond","getTimestampMicrosecond","getTimestampNanosecond","getTimeSecond","getTimeMillisecond","getTimeMicrosecond","getTimeNanosecond","getNested","getDenseUnion","getSparseUnion","getIntervalDayTime","getIntervalYearMonth","interval","int32s","GetVisitor.prototype","getNull","getInt","getFloat","getUtf8","decodeUtf8","getBinary","getFixedSizeBinary","getTimestamp","getTime","getDecimal","getList","getUnion","getDictionary","getInterval","getFixedSizeList","IndexOfVisitor","indexOfValue","searchElement","compare","indexOfUnion","IndexOfVisitor.prototype","nullIndexOf","IteratorVisitor","nullableIterator","getFn","getVisitor","nullByte","nullBit","vectorIterator","IteratorVisitor.prototype","ToArrayVisitor","arrayOfVector","iteratorVisitor","ToArrayVisitor.prototype","variableWidthColumnErrorMessage","ByteWidthVisitor","visitFields","GetVectorConstructor","vecs","newVector","getVectorConstructor","BaseVector.prototype","BaseVector.prototype.get","BaseVector.prototype.set","setVisitor","BaseVector.prototype.indexOf","indexOfVisitor","BaseVector.prototype.toArray","toArrayVisitor","getByteWidth","BaseVector.prototype.getByteWidth","byteWidthVisitor","bindBaseVectorDataAccessors","T","VectorCtor","partial1","partial2","partial0","wrapNullable1","wrapNullableSet","Table","_batches","_batchesUnion","batchesUnion","_numCols","empty","opening","fromAsync","fromVectors","fromStruct","struct","getColumn","getColumnAt","getColumnIndex","findIndex","serialize","Value","eq","Literal","Equals","le","LTeq","ge","GTeq","lt","Not","gt","ne","Col","colidx","Predicate","and","And","expr","or","Or","not","ComparisonPredicate","_bindLitLit","_bindLitCol","_bindColLit","_bindColCol","CombinationPredicate","accum","p","some","left_func","right_func","col","lit","col_func","lastDictionary","lastKey","cols","func","CustomPredicate","bind_","custom","scan","tableScan","tableFilter","countBy","tableCountBy","Dataframe","predicate","FilteredDataFrame","batchIndex","count_by","countByteLength","ceil","log","counts","CountsArrayType","CountByResult","util","util_int_","util_bit_","util_buffer_","util_vector_","recordBatchReaderThroughDOMStream","recordBatchWriterThroughDOMStream","through","controller","desiredSize","enqueue","readable","ReadableStream","pull","WritableStream","writableStrategy","readableStrategy","asyncIterableAsReadableDOMStream","iterableAsReadableDOMStream","exports0"],"mappings":"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","file":"Arrow.js","sourcesContent":["/// @file\n/// @addtogroup flatbuffers_javascript_api\n/// @{\n/// @cond FLATBUFFERS_INTERNAL\n\n/**\n * @fileoverview\n *\n * Need to suppress 'global this' error so the Node.js export line doesn't cause\n * closure compile to error out.\n * @suppress {globalThis}\n */\n\n/**\n * @const\n * @namespace\n */\nvar flatbuffers = {};\n\n/**\n * @typedef {number}\n */\nflatbuffers.Offset;\n\n/**\n * @typedef {{\n *   bb: flatbuffers.ByteBuffer,\n *   bb_pos: number\n * }}\n */\nflatbuffers.Table;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_SHORT = 2;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.SIZEOF_INT = 4;\n\n/**\n * @type {number}\n * @const\n */\nflatbuffers.FILE_IDENTIFIER_LENGTH = 4;\n\n/**\n * @enum {number}\n */\nflatbuffers.Encoding = {\n  UTF8_BYTES: 1,\n  UTF16_STRING: 2\n};\n\n/**\n * @type {Int32Array}\n * @const\n */\nflatbuffers.int32 = new Int32Array(2);\n\n/**\n * @type {Float32Array}\n * @const\n */\nflatbuffers.float32 = new Float32Array(flatbuffers.int32.buffer);\n\n/**\n * @type {Float64Array}\n * @const\n */\nflatbuffers.float64 = new Float64Array(flatbuffers.int32.buffer);\n\n/**\n * @type {boolean}\n * @const\n */\nflatbuffers.isLittleEndian = new Uint16Array(new Uint8Array([1, 0]).buffer)[0] === 1;\n\n////////////////////////////////////////////////////////////////////////////////\n\n/**\n * @constructor\n * @param {number} low\n * @param {number} high\n */\nflatbuffers.Long = function(low, high) {\n  /**\n   * @type {number}\n   * @const\n   */\n  this.low = low | 0;\n\n  /**\n   * @type {number}\n   * @const\n   */\n  this.high = high | 0;\n};\n\n/**\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Long.create = function(low, high) {\n  // Special-case zero to avoid GC overhead for default values\n  return low == 0 && high == 0 ? flatbuffers.Long.ZERO : new flatbuffers.Long(low, high);\n};\n\n/**\n * @returns {number}\n */\nflatbuffers.Long.prototype.toFloat64 = function() {\n  return (this.low >>> 0) + this.high * 0x100000000;\n};\n\n/**\n * @param {flatbuffers.Long} other\n * @returns {boolean}\n */\nflatbuffers.Long.prototype.equals = function(other) {\n  return this.low == other.low && this.high == other.high;\n};\n\n/**\n * @type {flatbuffers.Long}\n * @const\n */\nflatbuffers.Long.ZERO = new flatbuffers.Long(0, 0);\n\n/// @endcond\n////////////////////////////////////////////////////////////////////////////////\n/**\n * Create a FlatBufferBuilder.\n *\n * @constructor\n * @param {number=} opt_initial_size\n */\nflatbuffers.Builder = function(opt_initial_size) {\n  if (!opt_initial_size) {\n    var initial_size = 1024;\n  } else {\n    var initial_size = opt_initial_size;\n  }\n\n  /**\n   * @type {flatbuffers.ByteBuffer}\n   * @private\n   */\n  this.bb = flatbuffers.ByteBuffer.allocate(initial_size);\n\n  /**\n   * Remaining space in the ByteBuffer.\n   *\n   * @type {number}\n   * @private\n   */\n  this.space = initial_size;\n\n  /**\n   * Minimum alignment encountered so far.\n   *\n   * @type {number}\n   * @private\n   */\n  this.minalign = 1;\n\n  /**\n   * The vtable for the current table.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtable = null;\n\n  /**\n   * The amount of fields we're actually using.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vtable_in_use = 0;\n\n  /**\n   * Whether we are currently serializing a table.\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.isNested = false;\n\n  /**\n   * Starting offset of the current struct/table.\n   *\n   * @type {number}\n   * @private\n   */\n  this.object_start = 0;\n\n  /**\n   * List of offsets of all vtables.\n   *\n   * @type {Array.<number>}\n   * @private\n   */\n  this.vtables = [];\n\n  /**\n   * For the current vector being built.\n   *\n   * @type {number}\n   * @private\n   */\n  this.vector_num_elems = 0;\n\n  /**\n   * False omits default values from the serialized data\n   *\n   * @type {boolean}\n   * @private\n   */\n  this.force_defaults = false;\n};\n\n/**\n * In order to save space, fields that are set to their default value\n * don't get serialized into the buffer. Forcing defaults provides a\n * way to manually disable this optimization.\n *\n * @param {boolean} forceDefaults true always serializes default values\n */\nflatbuffers.Builder.prototype.forceDefaults = function(forceDefaults) {\n  this.force_defaults = forceDefaults;\n};\n\n/**\n * Get the ByteBuffer representing the FlatBuffer. Only call this after you've\n * called finish(). The actual data starts at the ByteBuffer's current position,\n * not necessarily at 0.\n *\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.Builder.prototype.dataBuffer = function() {\n  return this.bb;\n};\n\n/**\n * Get the bytes representing the FlatBuffer. Only call this after you've\n * called finish().\n *\n * @returns {Uint8Array}\n */\nflatbuffers.Builder.prototype.asUint8Array = function() {\n  return this.bb.bytes().subarray(this.bb.position(), this.bb.position() + this.offset());\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Prepare to write an element of `size` after `additional_bytes` have been\n * written, e.g. if you write a string, you need to align such the int length\n * field is aligned to 4 bytes, and the string data follows it directly. If all\n * you need to do is alignment, `additional_bytes` will be 0.\n *\n * @param {number} size This is the of the new element to write\n * @param {number} additional_bytes The padding size\n */\nflatbuffers.Builder.prototype.prep = function(size, additional_bytes) {\n  // Track the biggest thing we've ever aligned to.\n  if (size > this.minalign) {\n    this.minalign = size;\n  }\n\n  // Find the amount of alignment needed such that `size` is properly\n  // aligned after `additional_bytes`\n  var align_size = ((~(this.bb.capacity() - this.space + additional_bytes)) + 1) & (size - 1);\n\n  // Reallocate the buffer if needed.\n  while (this.space < align_size + size + additional_bytes) {\n    var old_buf_size = this.bb.capacity();\n    this.bb = flatbuffers.Builder.growByteBuffer(this.bb);\n    this.space += this.bb.capacity() - old_buf_size;\n  }\n\n  this.pad(align_size);\n};\n\n/**\n * @param {number} byte_size\n */\nflatbuffers.Builder.prototype.pad = function(byte_size) {\n  for (var i = 0; i < byte_size; i++) {\n    this.bb.writeInt8(--this.space, 0);\n  }\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt8 = function(value) {\n  this.bb.writeInt8(this.space -= 1, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt16 = function(value) {\n  this.bb.writeInt16(this.space -= 2, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeInt32 = function(value) {\n  this.bb.writeInt32(this.space -= 4, value);\n};\n\n/**\n * @param {flatbuffers.Long} value\n */\nflatbuffers.Builder.prototype.writeInt64 = function(value) {\n  this.bb.writeInt64(this.space -= 8, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat32 = function(value) {\n  this.bb.writeFloat32(this.space -= 4, value);\n};\n\n/**\n * @param {number} value\n */\nflatbuffers.Builder.prototype.writeFloat64 = function(value) {\n  this.bb.writeFloat64(this.space -= 8, value);\n};\n/// @endcond\n\n/**\n * Add an `int8` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int8` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt8 = function(value) {\n  this.prep(1, 0);\n  this.writeInt8(value);\n};\n\n/**\n * Add an `int16` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int16` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt16 = function(value) {\n  this.prep(2, 0);\n  this.writeInt16(value);\n};\n\n/**\n * Add an `int32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `int32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt32 = function(value) {\n  this.prep(4, 0);\n  this.writeInt32(value);\n};\n\n/**\n * Add an `int64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {flatbuffers.Long} value The `int64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addInt64 = function(value) {\n  this.prep(8, 0);\n  this.writeInt64(value);\n};\n\n/**\n * Add a `float32` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float32` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat32 = function(value) {\n  this.prep(4, 0);\n  this.writeFloat32(value);\n};\n\n/**\n * Add a `float64` to the buffer, properly aligned, and grows the buffer (if necessary).\n * @param {number} value The `float64` to add the the buffer.\n */\nflatbuffers.Builder.prototype.addFloat64 = function(value) {\n  this.prep(8, 0);\n  this.writeFloat64(value);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt8 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt8(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt16 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt16(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addInt32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Long} value\n * @param {flatbuffers.Long} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldInt64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || !value.equals(defaultValue)) {\n    this.addInt64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat32 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat32(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {number} value\n * @param {number} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldFloat64 = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addFloat64(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldOffset = function(voffset, value, defaultValue) {\n  if (this.force_defaults || value != defaultValue) {\n    this.addOffset(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structs are stored inline, so nothing additional is being added. `d` is always 0.\n *\n * @param {number} voffset\n * @param {flatbuffers.Offset} value\n * @param {flatbuffers.Offset} defaultValue\n */\nflatbuffers.Builder.prototype.addFieldStruct = function(voffset, value, defaultValue) {\n  if (value != defaultValue) {\n    this.nested(value);\n    this.slot(voffset);\n  }\n};\n\n/**\n * Structures are always stored inline, they need to be created right\n * where they're used.  You'll get this assertion failure if you\n * created it elsewhere.\n *\n * @param {flatbuffers.Offset} obj The offset of the created object\n */\nflatbuffers.Builder.prototype.nested = function(obj) {\n  if (obj != this.offset()) {\n    throw new Error('FlatBuffers: struct must be serialized inline.');\n  }\n};\n\n/**\n * Should not be creating any other object, string or vector\n * while an object is being constructed\n */\nflatbuffers.Builder.prototype.notNested = function() {\n  if (this.isNested) {\n    throw new Error('FlatBuffers: object serialization must not be nested.');\n  }\n};\n\n/**\n * Set the current vtable at `voffset` to the current location in the buffer.\n *\n * @param {number} voffset\n */\nflatbuffers.Builder.prototype.slot = function(voffset) {\n  this.vtable[voffset] = this.offset();\n};\n\n/**\n * @returns {flatbuffers.Offset} Offset relative to the end of the buffer.\n */\nflatbuffers.Builder.prototype.offset = function() {\n  return this.bb.capacity() - this.space;\n};\n\n/**\n * Doubles the size of the backing ByteBuffer and copies the old data towards\n * the end of the new buffer (since we build the buffer backwards).\n *\n * @param {flatbuffers.ByteBuffer} bb The current buffer with the existing data\n * @returns {flatbuffers.ByteBuffer} A new byte buffer with the old data copied\n * to it. The data is located at the end of the buffer.\n *\n * uint8Array.set() formally takes {Array<number>|ArrayBufferView}, so to pass\n * it a uint8Array we need to suppress the type check:\n * @suppress {checkTypes}\n */\nflatbuffers.Builder.growByteBuffer = function(bb) {\n  var old_buf_size = bb.capacity();\n\n  // Ensure we don't grow beyond what fits in an int.\n  if (old_buf_size & 0xC0000000) {\n    throw new Error('FlatBuffers: cannot grow buffer beyond 2 gigabytes.');\n  }\n\n  var new_buf_size = old_buf_size << 1;\n  var nbb = flatbuffers.ByteBuffer.allocate(new_buf_size);\n  nbb.setPosition(new_buf_size - old_buf_size);\n  nbb.bytes().set(bb.bytes(), new_buf_size - old_buf_size);\n  return nbb;\n};\n/// @endcond\n\n/**\n * Adds on offset, relative to where it will be written.\n *\n * @param {flatbuffers.Offset} offset The offset to add.\n */\nflatbuffers.Builder.prototype.addOffset = function(offset) {\n  this.prep(flatbuffers.SIZEOF_INT, 0); // Ensure alignment is already done.\n  this.writeInt32(this.offset() - offset + flatbuffers.SIZEOF_INT);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Start encoding a new object in the buffer.  Users will not usually need to\n * call this directly. The FlatBuffers compiler will generate helper methods\n * that call this method internally.\n *\n * @param {number} numfields\n */\nflatbuffers.Builder.prototype.startObject = function(numfields) {\n  this.notNested();\n  if (this.vtable == null) {\n    this.vtable = [];\n  }\n  this.vtable_in_use = numfields;\n  for (var i = 0; i < numfields; i++) {\n    this.vtable[i] = 0; // This will push additional elements as needed\n  }\n  this.isNested = true;\n  this.object_start = this.offset();\n};\n\n/**\n * Finish off writing the object that is under construction.\n *\n * @returns {flatbuffers.Offset} The offset to the object inside `dataBuffer`\n */\nflatbuffers.Builder.prototype.endObject = function() {\n  if (this.vtable == null || !this.isNested) {\n    throw new Error('FlatBuffers: endObject called without startObject');\n  }\n\n  this.addInt32(0);\n  var vtableloc = this.offset();\n\n  // Trim trailing zeroes.\n  var i = this.vtable_in_use - 1;\n  for (; i >= 0 && this.vtable[i] == 0; i--) {}\n  var trimmed_size = i + 1;\n\n  // Write out the current vtable.\n  for (; i >= 0; i--) {\n    // Offset relative to the start of the table.\n    this.addInt16(this.vtable[i] != 0 ? vtableloc - this.vtable[i] : 0);\n  }\n\n  var standard_fields = 2; // The fields below:\n  this.addInt16(vtableloc - this.object_start);\n  var len = (trimmed_size + standard_fields) * flatbuffers.SIZEOF_SHORT;\n  this.addInt16(len);\n\n  // Search for an existing vtable that matches the current one.\n  var existing_vtable = 0;\n  var vt1 = this.space;\nouter_loop:\n  for (i = 0; i < this.vtables.length; i++) {\n    var vt2 = this.bb.capacity() - this.vtables[i];\n    if (len == this.bb.readInt16(vt2)) {\n      for (var j = flatbuffers.SIZEOF_SHORT; j < len; j += flatbuffers.SIZEOF_SHORT) {\n        if (this.bb.readInt16(vt1 + j) != this.bb.readInt16(vt2 + j)) {\n          continue outer_loop;\n        }\n      }\n      existing_vtable = this.vtables[i];\n      break;\n    }\n  }\n\n  if (existing_vtable) {\n    // Found a match:\n    // Remove the current vtable.\n    this.space = this.bb.capacity() - vtableloc;\n\n    // Point table to existing vtable.\n    this.bb.writeInt32(this.space, existing_vtable - vtableloc);\n  } else {\n    // No match:\n    // Add the location of the current vtable to the list of vtables.\n    this.vtables.push(this.offset());\n\n    // Point table to current vtable.\n    this.bb.writeInt32(this.bb.capacity() - vtableloc, this.offset() - vtableloc);\n  }\n\n  this.isNested = false;\n  return vtableloc;\n};\n/// @endcond\n\n/**\n * Finalize a buffer, poiting to the given `root_table`.\n *\n * @param {flatbuffers.Offset} root_table\n * @param {string=} opt_file_identifier\n */\nflatbuffers.Builder.prototype.finish = function(root_table, opt_file_identifier) {\n  if (opt_file_identifier) {\n    var file_identifier = opt_file_identifier;\n    this.prep(this.minalign, flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH);\n    if (file_identifier.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n      throw new Error('FlatBuffers: file identifier must be length ' +\n        flatbuffers.FILE_IDENTIFIER_LENGTH);\n    }\n    for (var i = flatbuffers.FILE_IDENTIFIER_LENGTH - 1; i >= 0; i--) {\n      this.writeInt8(file_identifier.charCodeAt(i));\n    }\n  }\n  this.prep(this.minalign, flatbuffers.SIZEOF_INT);\n  this.addOffset(root_table);\n  this.bb.setPosition(this.space);\n};\n\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * This checks a required field has been set in a given table that has\n * just been constructed.\n *\n * @param {flatbuffers.Offset} table\n * @param {number} field\n */\nflatbuffers.Builder.prototype.requiredField = function(table, field) {\n  var table_start = this.bb.capacity() - table;\n  var vtable_start = table_start - this.bb.readInt32(table_start);\n  var ok = this.bb.readInt16(vtable_start + field) != 0;\n\n  // If this fails, the caller will show what field needs to be set.\n  if (!ok) {\n    throw new Error('FlatBuffers: field ' + field + ' must be set');\n  }\n};\n\n/**\n * Start a new array/vector of objects.  Users usually will not call\n * this directly. The FlatBuffers compiler will create a start/end\n * method for vector types in generated code.\n *\n * @param {number} elem_size The size of each element in the array\n * @param {number} num_elems The number of elements in the array\n * @param {number} alignment The alignment of the array\n */\nflatbuffers.Builder.prototype.startVector = function(elem_size, num_elems, alignment) {\n  this.notNested();\n  this.vector_num_elems = num_elems;\n  this.prep(flatbuffers.SIZEOF_INT, elem_size * num_elems);\n  this.prep(alignment, elem_size * num_elems); // Just in case alignment > int.\n};\n\n/**\n * Finish off the creation of an array and all its elements. The array must be\n * created with `startVector`.\n *\n * @returns {flatbuffers.Offset} The offset at which the newly created array\n * starts.\n */\nflatbuffers.Builder.prototype.endVector = function() {\n  this.writeInt32(this.vector_num_elems);\n  return this.offset();\n};\n/// @endcond\n\n/**\n * Encode the string `s` in the buffer using UTF-8. If a Uint8Array is passed\n * instead of a string, it is assumed to contain valid UTF-8 encoded data.\n *\n * @param {string|Uint8Array} s The string to encode\n * @return {flatbuffers.Offset} The offset in the buffer where the encoded string starts\n */\nflatbuffers.Builder.prototype.createString = function(s) {\n  if (s instanceof Uint8Array) {\n    var utf8 = s;\n  } else {\n    var utf8 = [];\n    var i = 0;\n\n    while (i < s.length) {\n      var codePoint;\n\n      // Decode UTF-16\n      var a = s.charCodeAt(i++);\n      if (a < 0xD800 || a >= 0xDC00) {\n        codePoint = a;\n      } else {\n        var b = s.charCodeAt(i++);\n        codePoint = (a << 10) + b + (0x10000 - (0xD800 << 10) - 0xDC00);\n      }\n\n      // Encode UTF-8\n      if (codePoint < 0x80) {\n        utf8.push(codePoint);\n      } else {\n        if (codePoint < 0x800) {\n          utf8.push(((codePoint >> 6) & 0x1F) | 0xC0);\n        } else {\n          if (codePoint < 0x10000) {\n            utf8.push(((codePoint >> 12) & 0x0F) | 0xE0);\n          } else {\n            utf8.push(\n              ((codePoint >> 18) & 0x07) | 0xF0,\n              ((codePoint >> 12) & 0x3F) | 0x80);\n          }\n          utf8.push(((codePoint >> 6) & 0x3F) | 0x80);\n        }\n        utf8.push((codePoint & 0x3F) | 0x80);\n      }\n    }\n  }\n\n  this.addInt8(0);\n  this.startVector(1, utf8.length, 1);\n  this.bb.setPosition(this.space -= utf8.length);\n  for (var i = 0, offset = this.space, bytes = this.bb.bytes(); i < utf8.length; i++) {\n    bytes[offset++] = utf8[i];\n  }\n  return this.endVector();\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.Builder.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n////////////////////////////////////////////////////////////////////////////////\n/// @cond FLATBUFFERS_INTERNAL\n/**\n * Create a new ByteBuffer with a given array of bytes (`Uint8Array`).\n *\n * @constructor\n * @param {Uint8Array} bytes\n */\nflatbuffers.ByteBuffer = function(bytes) {\n  /**\n   * @type {Uint8Array}\n   * @private\n   */\n  this.bytes_ = bytes;\n\n  /**\n   * @type {number}\n   * @private\n   */\n  this.position_ = 0;\n};\n\n/**\n * Create and allocate a new ByteBuffer with a given size.\n *\n * @param {number} byte_size\n * @returns {flatbuffers.ByteBuffer}\n */\nflatbuffers.ByteBuffer.allocate = function(byte_size) {\n  return new flatbuffers.ByteBuffer(new Uint8Array(byte_size));\n};\n\n/**\n * Get the underlying `Uint8Array`.\n *\n * @returns {Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.bytes = function() {\n  return this.bytes_;\n};\n\n/**\n * Get the buffer's position.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.position = function() {\n  return this.position_;\n};\n\n/**\n * Set the buffer's position.\n *\n * @param {number} position\n */\nflatbuffers.ByteBuffer.prototype.setPosition = function(position) {\n  this.position_ = position;\n};\n\n/**\n * Get the buffer's capacity.\n *\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.capacity = function() {\n  return this.bytes_.length;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt8 = function(offset) {\n  return this.readUint8(offset) << 24 >> 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint8 = function(offset) {\n  return this.bytes_[offset];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt16 = function(offset) {\n  return this.readUint16(offset) << 16 >> 16;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint16 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readInt32 = function(offset) {\n  return this.bytes_[offset] | this.bytes_[offset + 1] << 8 | this.bytes_[offset + 2] << 16 | this.bytes_[offset + 3] << 24;\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readUint32 = function(offset) {\n  return this.readInt32(offset) >>> 0;\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readInt64 = function(offset) {\n  return new flatbuffers.Long(this.readInt32(offset), this.readInt32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.readUint64 = function(offset) {\n  return new flatbuffers.Long(this.readUint32(offset), this.readUint32(offset + 4));\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat32 = function(offset) {\n  flatbuffers.int32[0] = this.readInt32(offset);\n  return flatbuffers.float32[0];\n};\n\n/**\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.readFloat64 = function(offset) {\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1] = this.readInt32(offset);\n  flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0] = this.readInt32(offset + 4);\n  return flatbuffers.float64[0];\n};\n\n/**\n * @param {number} offset\n * @param {number|boolean} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt8 = function(offset, value) {\n  this.bytes_[offset] = /** @type {number} */(value);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint8 = function(offset, value) {\n  this.bytes_[offset] = value;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt16 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint16 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt32 = function(offset, value) {\n  this.bytes_[offset] = value;\n  this.bytes_[offset + 1] = value >> 8;\n  this.bytes_[offset + 2] = value >> 16;\n  this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint32 = function(offset, value) {\n    this.bytes_[offset] = value;\n    this.bytes_[offset + 1] = value >> 8;\n    this.bytes_[offset + 2] = value >> 16;\n    this.bytes_[offset + 3] = value >> 24;\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeInt64 = function(offset, value) {\n  this.writeInt32(offset, value.low);\n  this.writeInt32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {flatbuffers.Long} value\n */\nflatbuffers.ByteBuffer.prototype.writeUint64 = function(offset, value) {\n    this.writeUint32(offset, value.low);\n    this.writeUint32(offset + 4, value.high);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat32 = function(offset, value) {\n  flatbuffers.float32[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[0]);\n};\n\n/**\n * @param {number} offset\n * @param {number} value\n */\nflatbuffers.ByteBuffer.prototype.writeFloat64 = function(offset, value) {\n  flatbuffers.float64[0] = value;\n  this.writeInt32(offset, flatbuffers.int32[flatbuffers.isLittleEndian ? 0 : 1]);\n  this.writeInt32(offset + 4, flatbuffers.int32[flatbuffers.isLittleEndian ? 1 : 0]);\n};\n\n/**\n * Return the file identifier.   Behavior is undefined for FlatBuffers whose\n * schema does not include a file_identifier (likely points at padding or the\n * start of a the root vtable).\n * @returns {string}\n */\nflatbuffers.ByteBuffer.prototype.getBufferIdentifier = function() {\n  if (this.bytes_.length < this.position_ + flatbuffers.SIZEOF_INT +\n      flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error(\n        'FlatBuffers: ByteBuffer is too short to contain an identifier.');\n  }\n  var result = \"\";\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    result += String.fromCharCode(\n        this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i));\n  }\n  return result;\n};\n\n/**\n * Look up a field in the vtable, return an offset into the object, or 0 if the\n * field is not present.\n *\n * @param {number} bb_pos\n * @param {number} vtable_offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__offset = function(bb_pos, vtable_offset) {\n  var vtable = bb_pos - this.readInt32(bb_pos);\n  return vtable_offset < this.readInt16(vtable) ? this.readInt16(vtable + vtable_offset) : 0;\n};\n\n/**\n * Initialize any Table-derived type to point to the union at the given offset.\n *\n * @param {flatbuffers.Table} t\n * @param {number} offset\n * @returns {flatbuffers.Table}\n */\nflatbuffers.ByteBuffer.prototype.__union = function(t, offset) {\n  t.bb_pos = offset + this.readInt32(offset);\n  t.bb = this;\n  return t;\n};\n\n/**\n * Create a JavaScript string from UTF-8 data stored inside the FlatBuffer.\n * This allocates a new string and converts to wide chars upon each access.\n *\n * To avoid the conversion to UTF-16, pass flatbuffers.Encoding.UTF8_BYTES as\n * the \"optionalEncoding\" argument. This is useful for avoiding conversion to\n * and from UTF-16 when the data will just be packaged back up in another\n * FlatBuffer later on.\n *\n * @param {number} offset\n * @param {flatbuffers.Encoding=} opt_encoding Defaults to UTF16_STRING\n * @returns {string|Uint8Array}\n */\nflatbuffers.ByteBuffer.prototype.__string = function(offset, opt_encoding) {\n  offset += this.readInt32(offset);\n\n  var length = this.readInt32(offset);\n  var result = '';\n  var i = 0;\n\n  offset += flatbuffers.SIZEOF_INT;\n\n  if (opt_encoding === flatbuffers.Encoding.UTF8_BYTES) {\n    return this.bytes_.subarray(offset, offset + length);\n  }\n\n  while (i < length) {\n    var codePoint;\n\n    // Decode UTF-8\n    var a = this.readUint8(offset + i++);\n    if (a < 0xC0) {\n      codePoint = a;\n    } else {\n      var b = this.readUint8(offset + i++);\n      if (a < 0xE0) {\n        codePoint =\n          ((a & 0x1F) << 6) |\n          (b & 0x3F);\n      } else {\n        var c = this.readUint8(offset + i++);\n        if (a < 0xF0) {\n          codePoint =\n            ((a & 0x0F) << 12) |\n            ((b & 0x3F) << 6) |\n            (c & 0x3F);\n        } else {\n          var d = this.readUint8(offset + i++);\n          codePoint =\n            ((a & 0x07) << 18) |\n            ((b & 0x3F) << 12) |\n            ((c & 0x3F) << 6) |\n            (d & 0x3F);\n        }\n      }\n    }\n\n    // Encode UTF-16\n    if (codePoint < 0x10000) {\n      result += String.fromCharCode(codePoint);\n    } else {\n      codePoint -= 0x10000;\n      result += String.fromCharCode(\n        (codePoint >> 10) + 0xD800,\n        (codePoint & ((1 << 10) - 1)) + 0xDC00);\n    }\n  }\n\n  return result;\n};\n\n/**\n * Retrieve the relative offset stored at \"offset\"\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__indirect = function(offset) {\n  return offset + this.readInt32(offset);\n};\n\n/**\n * Get the start of data of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector = function(offset) {\n  return offset + this.readInt32(offset) + flatbuffers.SIZEOF_INT; // data starts after the length\n};\n\n/**\n * Get the length of a vector whose offset is stored at \"offset\" in this object.\n *\n * @param {number} offset\n * @returns {number}\n */\nflatbuffers.ByteBuffer.prototype.__vector_len = function(offset) {\n  return this.readInt32(offset + this.readInt32(offset));\n};\n\n/**\n * @param {string} ident\n * @returns {boolean}\n */\nflatbuffers.ByteBuffer.prototype.__has_identifier = function(ident) {\n  if (ident.length != flatbuffers.FILE_IDENTIFIER_LENGTH) {\n    throw new Error('FlatBuffers: file identifier must be length ' +\n                    flatbuffers.FILE_IDENTIFIER_LENGTH);\n  }\n  for (var i = 0; i < flatbuffers.FILE_IDENTIFIER_LENGTH; i++) {\n    if (ident.charCodeAt(i) != this.readInt8(this.position_ + flatbuffers.SIZEOF_INT + i)) {\n      return false;\n    }\n  }\n  return true;\n};\n\n/**\n * A helper function to avoid generated code depending on this file directly.\n *\n * @param {number} low\n * @param {number} high\n * @returns {flatbuffers.Long}\n */\nflatbuffers.ByteBuffer.prototype.createLong = function(low, high) {\n  return flatbuffers.Long.create(low, high);\n};\n\n// Exports for Node.js and RequireJS\nexport { flatbuffers };\n\n/// @endcond\n/// @}\n",null,null,null,null,null,null,null,null,null,null,null,null,null,"// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { toUint8Array, joinUint8Arrays, toUint8ArrayIterator, toUint8ArrayAsyncIterator } from '../util/buffer';\n/**\n * @ignore\n */\nexport default {\n    fromIterable(source) {\n        return pump(fromIterable(source));\n    },\n    fromAsyncIterable(source) {\n        return pump(fromAsyncIterable(source));\n    },\n    fromReadableDOMStream(source) {\n        return pump(fromReadableDOMStream(source));\n    },\n    fromReadableNodeStream(stream) {\n        return pump(fromReadableNodeStream(stream));\n    },\n    // @ts-ignore\n    toReadableDOMStream(source, options) {\n        throw new Error(`\"toReadableDOMStream\" not available in this environment`);\n    },\n    // @ts-ignore\n    toReadableNodeStream(source, options) {\n        throw new Error(`\"toReadableNodeStream\" not available in this environment`);\n    },\n};\nconst pump = (iterator) => { iterator.next(); return iterator; };\nfunction* fromIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source Iterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = toUint8ArrayIterator(source)[Symbol.iterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength) ?\n                it.next(undefined) : it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (it.return());\n    }\n}\nasync function* fromAsyncIterable(source) {\n    let done, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before creating the source AsyncIterator\n    ({ cmd, size } = yield null);\n    // initialize the iterator\n    let it = toUint8ArrayAsyncIterator(source)[Symbol.asyncIterator]();\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it.next(undefined)\n                : await it.next(size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(buffer);\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (typeof it.throw === 'function') && (await it.throw(e));\n    }\n    finally {\n        (threw === false) && (typeof it.return === 'function') && (await it.return());\n    }\n}\n// All this manual Uint8Array chunk management can be avoided if/when engines\n// add support for ArrayBuffer.transfer() or ArrayBuffer.prototype.realloc():\n// https://github.com/domenic/proposal-arraybuffer-transfer\nasync function* fromReadableDOMStream(source) {\n    let done = false, threw = false;\n    let buffers = [], buffer;\n    let cmd, size, bufferLength = 0;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we establish the ReadableStream lock\n    ({ cmd, size } = yield null);\n    // initialize the reader and lock the stream\n    let it = new AdaptiveByteReader(source);\n    try {\n        do {\n            // read the next value\n            ({ done, value: buffer } = isNaN(size - bufferLength)\n                ? await it['read'](undefined)\n                : await it['read'](size - bufferLength));\n            // if chunk is not null or empty, push it onto the queue\n            if (!done && buffer.byteLength > 0) {\n                buffers.push(toUint8Array(buffer));\n                bufferLength += buffer.byteLength;\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    catch (e) {\n        (threw = true) && (await it['cancel'](e));\n    }\n    finally {\n        source['locked'] && it.releaseLock();\n        (threw === false) && (await it['cancel']());\n    }\n}\nclass AdaptiveByteReader {\n    constructor(source) {\n        this.source = source;\n        this.byobReader = null;\n        this.defaultReader = null;\n        try {\n            this.supportsBYOB = !!(this.reader = this.getBYOBReader());\n        }\n        catch (e) {\n            this.supportsBYOB = !!!(this.reader = this.getDefaultReader());\n        }\n    }\n    get closed() {\n        return this.reader ? this.reader['closed'].catch(() => { }) : Promise.resolve();\n    }\n    releaseLock() {\n        if (this.reader) {\n            this.reader.releaseLock();\n        }\n        this.reader = this.byobReader = this.defaultReader = null;\n    }\n    async cancel(reason) {\n        const { reader } = this;\n        this.reader = null;\n        this.releaseLock();\n        if (reader) {\n            await reader['cancel'](reason);\n        }\n    }\n    async read(size) {\n        if (size === 0) {\n            return { done: this.reader == null, value: new Uint8Array(0) };\n        }\n        const result = !this.supportsBYOB || typeof size !== 'number'\n            ? await this.getDefaultReader().read()\n            : await this.readFromBYOBReader(size);\n        !result.done && (result.value = toUint8Array(result));\n        return result;\n    }\n    getDefaultReader() {\n        if (this.byobReader) {\n            this.releaseLock();\n        }\n        if (!this.defaultReader) {\n            this.defaultReader = this.source['getReader']();\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.defaultReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.defaultReader);\n    }\n    getBYOBReader() {\n        if (this.defaultReader) {\n            this.releaseLock();\n        }\n        if (!this.byobReader) {\n            this.byobReader = this.source['getReader']({ mode: 'byob' });\n            // We have to catch and swallow errors here to avoid uncaught promise rejection exceptions\n            // that seem to be raised when we call `releaseLock()` on this reader. I'm still mystified\n            // about why these errors are raised, but I'm sure there's some important spec reason that\n            // I haven't considered. I hate to employ such an anti-pattern here, but it seems like the\n            // only solution in this case :/\n            this.byobReader['closed'].catch(() => { });\n        }\n        return (this.reader = this.byobReader);\n    }\n    // This strategy plucked from the example in the streams spec:\n    // https://streams.spec.whatwg.org/#example-manual-read-bytes\n    async readFromBYOBReader(size) {\n        return await readInto(this.getBYOBReader(), new ArrayBuffer(size), 0, size);\n    }\n}\nasync function readInto(reader, buffer, offset, size) {\n    if (offset >= size) {\n        return { done: false, value: new Uint8Array(buffer, 0, size) };\n    }\n    const { done, value } = await reader.read(new Uint8Array(buffer, offset, size - offset));\n    if (((offset += value.byteLength) < size) && !done) {\n        return await readInto(reader, value.buffer, offset, size);\n    }\n    return { done, value: new Uint8Array(value.buffer, 0, offset) };\n}\nconst onEvent = (stream, event) => {\n    let handler = (_) => resolve([event, _]);\n    let resolve;\n    return [event, handler, new Promise((r) => (resolve = r) && stream['once'](event, handler))];\n};\nasync function* fromReadableNodeStream(stream) {\n    let events = [];\n    let event = 'error';\n    let done = false, err = null;\n    let cmd, size, bufferLength = 0;\n    let buffers = [], buffer;\n    function byteRange() {\n        if (cmd === 'peek') {\n            return joinUint8Arrays(buffers.slice(), size)[0];\n        }\n        [buffer, buffers] = joinUint8Arrays(buffers, size);\n        bufferLength -= buffer.byteLength;\n        return buffer;\n    }\n    // Yield so the caller can inject the read command before we\n    // add the listener for the source stream's 'readable' event.\n    ({ cmd, size } = yield null);\n    // ignore stdin if it's a TTY\n    if (stream['isTTY']) {\n        return yield new Uint8Array(0);\n    }\n    try {\n        // initialize the stream event handlers\n        events[0] = onEvent(stream, 'end');\n        events[1] = onEvent(stream, 'error');\n        do {\n            events[2] = onEvent(stream, 'readable');\n            // wait on the first message event from the stream\n            [event, err] = await Promise.race(events.map((x) => x[2]));\n            // if the stream emitted an Error, rethrow it\n            if (event === 'error') {\n                break;\n            }\n            if (!(done = event === 'end')) {\n                // If the size is NaN, request to read everything in the stream's internal buffer\n                if (!isFinite(size - bufferLength)) {\n                    buffer = toUint8Array(stream['read'](undefined));\n                }\n                else {\n                    buffer = toUint8Array(stream['read'](size - bufferLength));\n                    // If the byteLength is 0, then the requested amount is more than the stream has\n                    // in its internal buffer. In this case the stream needs a \"kick\" to tell it to\n                    // continue emitting readable events, so request to read everything the stream\n                    // has in its internal buffer right now.\n                    if (buffer.byteLength < (size - bufferLength)) {\n                        buffer = toUint8Array(stream['read'](undefined));\n                    }\n                }\n                // if chunk is not null or empty, push it onto the queue\n                if (buffer.byteLength > 0) {\n                    buffers.push(buffer);\n                    bufferLength += buffer.byteLength;\n                }\n            }\n            // If we have enough bytes in our buffer, yield chunks until we don't\n            if (done || size <= bufferLength) {\n                do {\n                    ({ cmd, size } = yield byteRange());\n                } while (size < bufferLength);\n            }\n        } while (!done);\n    }\n    finally {\n        await cleanup(events, event === 'error' ? err : null);\n    }\n    function cleanup(events, err) {\n        buffer = buffers = null;\n        return new Promise(async (resolve, reject) => {\n            for (const [evt, fn] of events) {\n                stream['off'](evt, fn);\n            }\n            const [evt, fn, closed] = onEvent(stream, 'close');\n            const destroyed = new Promise((resolve, reject) => {\n                const destroy = stream['destroy'] || ((e, cb) => cb(e));\n                destroy.call(stream, err, (e) => e != null ? reject(e) : resolve());\n            });\n            try {\n                await Promise.race([closed, destroyed]);\n                err = undefined;\n            }\n            catch (e) {\n                err = e || err;\n            }\n            finally {\n                stream['off'](evt, fn);\n                err != null ? reject(err) : resolve();\n            }\n        });\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n",null,null,null,null,null,null,"/* tslint:disable:class-name */\n// automatically generated by the FlatBuffers compiler, do not modify\n/**\n * @enum\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MetadataVersion;\n                (function (MetadataVersion) {\n                    /**\n                     * 0.1.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V1\"] = 0] = \"V1\";\n                    /**\n                     * 0.2.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V2\"] = 1] = \"V2\";\n                    /**\n                     * 0.3.0 -> 0.7.1\n                     */\n                    MetadataVersion[MetadataVersion[\"V3\"] = 2] = \"V3\";\n                    /**\n                     * >= 0.8.0\n                     */\n                    MetadataVersion[MetadataVersion[\"V4\"] = 3] = \"V4\";\n                })(MetadataVersion = flatbuf.MetadataVersion || (flatbuf.MetadataVersion = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let UnionMode;\n                (function (UnionMode) {\n                    UnionMode[UnionMode[\"Sparse\"] = 0] = \"Sparse\";\n                    UnionMode[UnionMode[\"Dense\"] = 1] = \"Dense\";\n                })(UnionMode = flatbuf.UnionMode || (flatbuf.UnionMode = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Precision;\n                (function (Precision) {\n                    Precision[Precision[\"HALF\"] = 0] = \"HALF\";\n                    Precision[Precision[\"SINGLE\"] = 1] = \"SINGLE\";\n                    Precision[Precision[\"DOUBLE\"] = 2] = \"DOUBLE\";\n                })(Precision = flatbuf.Precision || (flatbuf.Precision = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let DateUnit;\n                (function (DateUnit) {\n                    DateUnit[DateUnit[\"DAY\"] = 0] = \"DAY\";\n                    DateUnit[DateUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                })(DateUnit = flatbuf.DateUnit || (flatbuf.DateUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let TimeUnit;\n                (function (TimeUnit) {\n                    TimeUnit[TimeUnit[\"SECOND\"] = 0] = \"SECOND\";\n                    TimeUnit[TimeUnit[\"MILLISECOND\"] = 1] = \"MILLISECOND\";\n                    TimeUnit[TimeUnit[\"MICROSECOND\"] = 2] = \"MICROSECOND\";\n                    TimeUnit[TimeUnit[\"NANOSECOND\"] = 3] = \"NANOSECOND\";\n                })(TimeUnit = flatbuf.TimeUnit || (flatbuf.TimeUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let IntervalUnit;\n                (function (IntervalUnit) {\n                    IntervalUnit[IntervalUnit[\"YEAR_MONTH\"] = 0] = \"YEAR_MONTH\";\n                    IntervalUnit[IntervalUnit[\"DAY_TIME\"] = 1] = \"DAY_TIME\";\n                })(IntervalUnit = flatbuf.IntervalUnit || (flatbuf.IntervalUnit = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Top-level Type value, enabling extensible type-specific metadata. We can\n * add new logical types to Type without breaking backwards compatibility\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Type;\n                (function (Type) {\n                    Type[Type[\"NONE\"] = 0] = \"NONE\";\n                    Type[Type[\"Null\"] = 1] = \"Null\";\n                    Type[Type[\"Int\"] = 2] = \"Int\";\n                    Type[Type[\"FloatingPoint\"] = 3] = \"FloatingPoint\";\n                    Type[Type[\"Binary\"] = 4] = \"Binary\";\n                    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n                    Type[Type[\"Bool\"] = 6] = \"Bool\";\n                    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n                    Type[Type[\"Date\"] = 8] = \"Date\";\n                    Type[Type[\"Time\"] = 9] = \"Time\";\n                    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n                    Type[Type[\"Interval\"] = 11] = \"Interval\";\n                    Type[Type[\"List\"] = 12] = \"List\";\n                    Type[Type[\"Struct_\"] = 13] = \"Struct_\";\n                    Type[Type[\"Union\"] = 14] = \"Union\";\n                    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n                    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n                    Type[Type[\"Map\"] = 17] = \"Map\";\n                })(Type = flatbuf.Type || (flatbuf.Type = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The possible types of a vector\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let VectorType;\n                (function (VectorType) {\n                    /**\n                     * used in List type, Dense Union and variable length primitive types (String, Binary)\n                     */\n                    VectorType[VectorType[\"OFFSET\"] = 0] = \"OFFSET\";\n                    /**\n                     * actual data, either wixed width primitive types in slots or variable width delimited by an OFFSET vector\n                     */\n                    VectorType[VectorType[\"DATA\"] = 1] = \"DATA\";\n                    /**\n                     * Bit vector indicating if each value is null\n                     */\n                    VectorType[VectorType[\"VALIDITY\"] = 2] = \"VALIDITY\";\n                    /**\n                     * Type vector used in Union type\n                     */\n                    VectorType[VectorType[\"TYPE\"] = 3] = \"TYPE\";\n                })(VectorType = flatbuf.VectorType || (flatbuf.VectorType = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Endianness of the platform producing the data\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let Endianness;\n                (function (Endianness) {\n                    Endianness[Endianness[\"Little\"] = 0] = \"Little\";\n                    Endianness[Endianness[\"Big\"] = 1] = \"Big\";\n                })(Endianness = flatbuf.Endianness || (flatbuf.Endianness = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * These are stored in the flatbuffer in the Type union below\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Null {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Null}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Null=} obj\n                     * @returns {Null}\n                     */\n                    static getRootAsNull(bb, obj) {\n                        return (obj || new Null).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startNull(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endNull(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Null = Null;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Struct_ in the flatbuffer metadata is the same as an Arrow Struct\n * (according to the physical memory layout). We used Struct_ here as\n * Struct is a reserved word in Flatbuffers\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Struct_ {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Struct_}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Struct_=} obj\n                     * @returns {Struct_}\n                     */\n                    static getRootAsStruct_(bb, obj) {\n                        return (obj || new Struct_).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startStruct_(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endStruct_(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Struct_ = Struct_;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class List {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {List}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {List=} obj\n                     * @returns {List}\n                     */\n                    static getRootAsList(bb, obj) {\n                        return (obj || new List).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startList(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.List = List;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeList {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeList}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeList=} obj\n                     * @returns {FixedSizeList}\n                     */\n                    static getRootAsFixedSizeList(bb, obj) {\n                        return (obj || new FixedSizeList).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of list items per value\n                     *\n                     * @returns {number}\n                     */\n                    listSize() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeList(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} listSize\n                     */\n                    static addListSize(builder, listSize) {\n                        builder.addFieldInt32(0, listSize, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeList(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeList = FixedSizeList;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A Map is a logical nested type that is represented as\n *\n * List<entry: Struct<key: K, value: V>>\n *\n * In this layout, the keys and values are each respectively contiguous. We do\n * not constrain the key and value types, so the application is responsible\n * for ensuring that the keys are hashable and unique. Whether the keys are sorted\n * may be set in the metadata for this field\n *\n * In a Field with Map type, the Field has a child Struct field, which then\n * has two children: key type and the second the value type. The names of the\n * child fields may be respectively \"entry\", \"key\", and \"value\", but this is\n * not enforced\n *\n * Map\n *   - child[0] entry: Struct\n *     - child[0] key: K\n *     - child[1] value: V\n *\n * Neither the \"entry\" field nor the \"key\" field may be nullable.\n *\n * The metadata is structured so that Arrow systems without special handling\n * for Map can make Map an alias for List. The \"layout\" attribute for the Map\n * field must have the same contents as a List.\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Map {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Map}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Map=} obj\n                     * @returns {Map}\n                     */\n                    static getRootAsMap(bb, obj) {\n                        return (obj || new Map).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Set to true if the keys within each value are sorted\n                     *\n                     * @returns {boolean}\n                     */\n                    keysSorted() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMap(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} keysSorted\n                     */\n                    static addKeysSorted(builder, keysSorted) {\n                        builder.addFieldInt8(0, +keysSorted, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMap(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Map = Map;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A union is a complex type with children in Field\n * By default ids in the type vector refer to the offsets in the children\n * optionally typeIds provides an indirection between the child offset and the type id\n * for each child typeIds[offset] is the id used in the type vector\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Union {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Union}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Union=} obj\n                     * @returns {Union}\n                     */\n                    static getRootAsUnion(bb, obj) {\n                        return (obj || new Union).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.UnionMode}\n                     */\n                    mode() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.UnionMode} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.UnionMode.Sparse;\n                    }\n                    /**\n                     * @param {number} index\n                     * @returns {number}\n                     */\n                    typeIds(index) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb.__vector(this.bb_pos + offset) + index * 4) : 0;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    typeIdsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {Int32Array}\n                     */\n                    typeIdsArray() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? new Int32Array(this.bb.bytes().buffer, this.bb.bytes().byteOffset + this.bb.__vector(this.bb_pos + offset), this.bb.__vector_len(this.bb_pos + offset)) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUnion(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.UnionMode} mode\n                     */\n                    static addMode(builder, mode) {\n                        builder.addFieldInt16(0, mode, org.apache.arrow.flatbuf.UnionMode.Sparse);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeIdsOffset\n                     */\n                    static addTypeIds(builder, typeIdsOffset) {\n                        builder.addFieldOffset(1, typeIdsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<number>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createTypeIdsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addInt32(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startTypeIdsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUnion(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Union = Union;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Int {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Int}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Int=} obj\n                     * @returns {Int}\n                     */\n                    static getRootAsInt(bb, obj) {\n                        return (obj || new Int).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    isSigned() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInt(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isSigned\n                     */\n                    static addIsSigned(builder, isSigned) {\n                        builder.addFieldInt8(1, +isSigned, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInt(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Int = Int;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FloatingPoint {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FloatingPoint}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FloatingPoint=} obj\n                     * @returns {FloatingPoint}\n                     */\n                    static getRootAsFloatingPoint(bb, obj) {\n                        return (obj || new FloatingPoint).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Precision}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Precision} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Precision.HALF;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFloatingPoint(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Precision} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt16(0, precision, org.apache.arrow.flatbuf.Precision.HALF);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFloatingPoint(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FloatingPoint = FloatingPoint;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Unicode with UTF-8 encoding\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Utf8 {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Utf8}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Utf8=} obj\n                     * @returns {Utf8}\n                     */\n                    static getRootAsUtf8(bb, obj) {\n                        return (obj || new Utf8).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startUtf8(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endUtf8(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Utf8 = Utf8;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Binary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Binary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Binary=} obj\n                     * @returns {Binary}\n                     */\n                    static getRootAsBinary(bb, obj) {\n                        return (obj || new Binary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBinary(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Binary = Binary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FixedSizeBinary {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FixedSizeBinary}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {FixedSizeBinary=} obj\n                     * @returns {FixedSizeBinary}\n                     */\n                    static getRootAsFixedSizeBinary(bb, obj) {\n                        return (obj || new FixedSizeBinary).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Number of bytes per value\n                     *\n                     * @returns {number}\n                     */\n                    byteWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFixedSizeBinary(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} byteWidth\n                     */\n                    static addByteWidth(builder, byteWidth) {\n                        builder.addFieldInt32(0, byteWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFixedSizeBinary(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.FixedSizeBinary = FixedSizeBinary;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Bool {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Bool}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Bool=} obj\n                     * @returns {Bool}\n                     */\n                    static getRootAsBool(bb, obj) {\n                        return (obj || new Bool).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startBool(builder) {\n                        builder.startObject(0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endBool(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Bool = Bool;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Decimal {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Decimal}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Decimal=} obj\n                     * @returns {Decimal}\n                     */\n                    static getRootAsDecimal(bb, obj) {\n                        return (obj || new Decimal).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * Total number of decimal digits\n                     *\n                     * @returns {number}\n                     */\n                    precision() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Number of digits after the decimal point \".\"\n                     *\n                     * @returns {number}\n                     */\n                    scale() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDecimal(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} precision\n                     */\n                    static addPrecision(builder, precision) {\n                        builder.addFieldInt32(0, precision, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} scale\n                     */\n                    static addScale(builder, scale) {\n                        builder.addFieldInt32(1, scale, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDecimal(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Decimal = Decimal;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Date is either a 32-bit or 64-bit type representing elapsed time since UNIX\n * epoch (1970-01-01), stored in either of two units:\n *\n * * Milliseconds (64 bits) indicating UNIX time elapsed since the epoch (no\n *   leap seconds), where the values are evenly divisible by 86400000\n * * Days (32 bits) since the UNIX epoch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Date {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Date}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Date=} obj\n                     * @returns {Date}\n                     */\n                    static getRootAsDate(bb, obj) {\n                        return (obj || new Date).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.DateUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.DateUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.DateUnit.MILLISECOND;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDate(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.DateUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.DateUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDate(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Date = Date;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time type. The physical storage type depends on the unit\n * - SECOND and MILLISECOND: 32 bits\n * - MICROSECOND and NANOSECOND: 64 bits\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Time {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Time}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Time=} obj\n                     * @returns {Time}\n                     */\n                    static getRootAsTime(bb, obj) {\n                        return (obj || new Time).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.MILLISECOND;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.readInt32(this.bb_pos + offset) : 32;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTime(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.MILLISECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt32(1, bitWidth, 32);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTime(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Time = Time;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * Time elapsed from the Unix epoch, 00:00:00.000 on 1 January 1970, excluding\n * leap seconds, as a 64-bit integer. Note that UNIX time does not include\n * leap seconds.\n *\n * The Timestamp metadata supports both \"time zone naive\" and \"time zone\n * aware\" timestamps. Read about the timezone attribute for more detail\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Timestamp {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Timestamp}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Timestamp=} obj\n                     * @returns {Timestamp}\n                     */\n                    static getRootAsTimestamp(bb, obj) {\n                        return (obj || new Timestamp).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.TimeUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.TimeUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.TimeUnit.SECOND;\n                    }\n                    timezone(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startTimestamp(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.TimeUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.TimeUnit.SECOND);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} timezoneOffset\n                     */\n                    static addTimezone(builder, timezoneOffset) {\n                        builder.addFieldOffset(1, timezoneOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endTimestamp(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Timestamp = Timestamp;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Interval {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Interval}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Interval=} obj\n                     * @returns {Interval}\n                     */\n                    static getRootAsInterval(bb, obj) {\n                        return (obj || new Interval).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.IntervalUnit}\n                     */\n                    unit() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.IntervalUnit} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startInterval(builder) {\n                        builder.startObject(1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.IntervalUnit} unit\n                     */\n                    static addUnit(builder, unit) {\n                        builder.addFieldInt16(0, unit, org.apache.arrow.flatbuf.IntervalUnit.YEAR_MONTH);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endInterval(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Interval = Interval;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * represents the physical layout of a buffer\n * buffers have fixed width slots of a given type\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class VectorLayout {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {VectorLayout}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {VectorLayout=} obj\n                     * @returns {VectorLayout}\n                     */\n                    static getRootAsVectorLayout(bb, obj) {\n                        return (obj || new VectorLayout).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * the width of a slot in the buffer (typically 1, 8, 16, 32 or 64)\n                     *\n                     * @returns {number}\n                     */\n                    bitWidth() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt16(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * the purpose of the vector\n                     *\n                     * @returns {org.apache.arrow.flatbuf.VectorType}\n                     */\n                    type() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.VectorType} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.VectorType.OFFSET;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startVectorLayout(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} bitWidth\n                     */\n                    static addBitWidth(builder, bitWidth) {\n                        builder.addFieldInt16(0, bitWidth, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.VectorType} type\n                     */\n                    static addType(builder, type) {\n                        builder.addFieldInt16(1, type, org.apache.arrow.flatbuf.VectorType.OFFSET);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endVectorLayout(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.VectorLayout = VectorLayout;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * user defined key value pairs to add custom metadata to arrow\n * key namespacing is the responsibility of the user\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class KeyValue {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {KeyValue}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {KeyValue=} obj\n                     * @returns {KeyValue}\n                     */\n                    static getRootAsKeyValue(bb, obj) {\n                        return (obj || new KeyValue).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    key(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    value(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startKeyValue(builder) {\n                        builder.startObject(2);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} keyOffset\n                     */\n                    static addKey(builder, keyOffset) {\n                        builder.addFieldOffset(0, keyOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} valueOffset\n                     */\n                    static addValue(builder, valueOffset) {\n                        builder.addFieldOffset(1, valueOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endKeyValue(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.KeyValue = KeyValue;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Dictionary encoding metadata\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryEncoding {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryEncoding}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryEncoding=} obj\n                     * @returns {DictionaryEncoding}\n                     */\n                    static getRootAsDictionaryEncoding(bb, obj) {\n                        return (obj || new DictionaryEncoding).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * The known dictionary id in the application where this data is used. In\n                     * the file or streaming formats, the dictionary ids are found in the\n                     * DictionaryBatch messages\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * The dictionary indices are constrained to be positive integers. If this\n                     * field is null, the indices must be signed int32\n                     *\n                     * @param {org.apache.arrow.flatbuf.Int=} obj\n                     * @returns {org.apache.arrow.flatbuf.Int|null}\n                     */\n                    indexType(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Int).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * By default, dictionaries are not ordered, or the order does not have\n                     * semantic meaning. In some statistical, applications, dictionary-encoding\n                     * is used to represent ordered categorical data, and we provide a way to\n                     * preserve that metadata here\n                     *\n                     * @returns {boolean}\n                     */\n                    isOrdered() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryEncoding(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} indexTypeOffset\n                     */\n                    static addIndexType(builder, indexTypeOffset) {\n                        builder.addFieldOffset(1, indexTypeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isOrdered\n                     */\n                    static addIsOrdered(builder, isOrdered) {\n                        builder.addFieldInt8(2, +isOrdered, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryEncoding(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryEncoding = DictionaryEncoding;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A field represents a named column in a record / row batch or child of a\n * nested type.\n *\n * - children is only for nested Arrow arrays\n * - For primitive types, children will have length 0\n * - nullable should default to true in general\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Field {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Field}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Field=} obj\n                     * @returns {Field}\n                     */\n                    static getRootAsField(bb, obj) {\n                        return (obj || new Field).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    name(optionalEncoding) {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.__string(this.bb_pos + offset, optionalEncoding) : null;\n                    }\n                    /**\n                     * @returns {boolean}\n                     */\n                    nullable() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.Type}\n                     */\n                    typeType() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Type} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Type.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    type(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.DictionaryEncoding=} obj\n                     * @returns {org.apache.arrow.flatbuf.DictionaryEncoding|null}\n                     */\n                    dictionary(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 12);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.DictionaryEncoding).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    children(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    childrenLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 14);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * layout of buffers produced for this type (as derived from the Type)\n                     * does not include children\n                     * each recordbatch will return instances of those Buffers.\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.VectorLayout=} obj\n                     * @returns {org.apache.arrow.flatbuf.VectorLayout}\n                     */\n                    layout(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.VectorLayout).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    layoutLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 16);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 18);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startField(builder) {\n                        builder.startObject(8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nameOffset\n                     */\n                    static addName(builder, nameOffset) {\n                        builder.addFieldOffset(0, nameOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} nullable\n                     */\n                    static addNullable(builder, nullable) {\n                        builder.addFieldInt8(1, +nullable, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Type} typeType\n                     */\n                    static addTypeType(builder, typeType) {\n                        builder.addFieldInt8(2, typeType, org.apache.arrow.flatbuf.Type.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} typeOffset\n                     */\n                    static addType(builder, typeOffset) {\n                        builder.addFieldOffset(3, typeOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionaryOffset\n                     */\n                    static addDictionary(builder, dictionaryOffset) {\n                        builder.addFieldOffset(4, dictionaryOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} childrenOffset\n                     */\n                    static addChildren(builder, childrenOffset) {\n                        builder.addFieldOffset(5, childrenOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createChildrenVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startChildrenVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} layoutOffset\n                     */\n                    static addLayout(builder, layoutOffset) {\n                        builder.addFieldOffset(6, layoutOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createLayoutVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startLayoutVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(7, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endField(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.Field = Field;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Buffer represents a single contiguous memory segment\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Buffer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Buffer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The relative offset into the shared memory page where the bytes for this\n                     * buffer starts\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The absolute length (in bytes) of the memory buffer. The memory is found\n                     * from offset (inclusive) to offset + length (non-inclusive).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {flatbuffers.Long} length\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBuffer(builder, offset, length) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(length);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Buffer = Buffer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * A Schema describes the columns in a row batch\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Schema {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Schema}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Schema=} obj\n                     * @returns {Schema}\n                     */\n                    static getRootAsSchema(bb, obj) {\n                        return (obj || new Schema).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * endianness of the buffer\n                     * it is Little Endian by default\n                     * if endianness doesn't match the underlying system then the vectors need to be converted\n                     *\n                     * @returns {org.apache.arrow.flatbuf.Endianness}\n                     */\n                    endianness() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.Endianness} */ (this.bb.readInt16(this.bb_pos + offset)) : org.apache.arrow.flatbuf.Endianness.Little;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Field=} obj\n                     * @returns {org.apache.arrow.flatbuf.Field}\n                     */\n                    fields(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Field).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    fieldsLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.KeyValue=} obj\n                     * @returns {org.apache.arrow.flatbuf.KeyValue}\n                     */\n                    customMetadata(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.KeyValue).__init(this.bb.__indirect(this.bb.__vector(this.bb_pos + offset) + index * 4), this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    customMetadataLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startSchema(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.Endianness} endianness\n                     */\n                    static addEndianness(builder, endianness) {\n                        builder.addFieldInt16(0, endianness, org.apache.arrow.flatbuf.Endianness.Little);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} fieldsOffset\n                     */\n                    static addFields(builder, fieldsOffset) {\n                        builder.addFieldOffset(1, fieldsOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldsVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startFieldsVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} customMetadataOffset\n                     */\n                    static addCustomMetadata(builder, customMetadataOffset) {\n                        builder.addFieldOffset(2, customMetadataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {Array.<flatbuffers.Offset>} data\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createCustomMetadataVector(builder, data) {\n                        builder.startVector(4, data.length, 4);\n                        for (let i = data.length - 1; i >= 0; i--) {\n                            builder.addOffset(data[i]);\n                        }\n                        return builder.endVector();\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startCustomMetadataVector(builder, numElems) {\n                        builder.startVector(4, numElems, 4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endSchema(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishSchemaBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Schema = Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nexport const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });\n/**\n * @ignore\n */\nexport class ArrowJSON {\n    constructor(_json) {\n        this._json = _json;\n    }\n    get schema() { return this._json['schema']; }\n    get batches() { return (this._json['batches'] || []); }\n    get dictionaries() { return (this._json['dictionaries'] || []); }\n}\nObject.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; } });\nObject.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []); } });\nObject.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []); } });\nexport class ReadableInterop {\n    tee() {\n        return this._getReadableDOMStream().tee();\n    }\n    pipe(writable, options) {\n        return this._getReadableNodeStream().pipe(writable, options);\n    }\n    pipeTo(writable, options) { return this._getReadableDOMStream().pipeTo(writable, options); }\n    pipeThrough(duplex, options) {\n        return this._getReadableDOMStream().pipeThrough(duplex, options);\n    }\n    _getReadableDOMStream() {\n        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());\n    }\n    _getReadableNodeStream() {\n        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());\n    }\n}\n/**\n * @ignore\n */\nexport class AsyncQueue extends ReadableInterop {\n    constructor() {\n        super();\n        this.values = [];\n        this.resolvers = [];\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    get closed() { return this._closedPromise; }\n    async cancel(reason) { await this.return(reason); }\n    write(value) {\n        if (this._ensureOpen()) {\n            this.resolvers.length <= 0\n                ? (this.values.push(value))\n                : (this.resolvers.shift().resolve({ done: false, value }));\n        }\n    }\n    abort(value) {\n        if (this._closedPromiseResolve) {\n            this.resolvers.length <= 0\n                ? (this._error = { error: value })\n                : (this.resolvers.shift().reject({ done: true, value }));\n        }\n    }\n    close() {\n        if (this._closedPromiseResolve) {\n            const { resolvers } = this;\n            while (resolvers.length > 0) {\n                resolvers.shift().resolve(ITERATOR_DONE);\n            }\n            this._closedPromiseResolve();\n            this._closedPromiseResolve = undefined;\n        }\n    }\n    [Symbol.asyncIterator]() { return this; }\n    toReadableDOMStream(options) {\n        return streamAdapters.toReadableDOMStream(this, options);\n    }\n    toReadableNodeStream(options) {\n        return streamAdapters.toReadableNodeStream(this, options);\n    }\n    async throw(_) { await this.abort(_); return ITERATOR_DONE; }\n    async return(_) { await this.close(); return ITERATOR_DONE; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    next(..._args) {\n        if (this.values.length > 0) {\n            return Promise.resolve({ done: false, value: this.values.shift() });\n        }\n        else if (this._error) {\n            return Promise.reject({ done: true, value: this._error.error });\n        }\n        else if (!this._closedPromiseResolve) {\n            return Promise.resolve(ITERATOR_DONE);\n        }\n        else {\n            return new Promise((resolve, reject) => {\n                this.resolvers.push({ resolve, reject });\n            });\n        }\n    }\n    _ensureOpen() {\n        if (this._closedPromiseResolve) {\n            return true;\n        }\n        throw new Error(`${this.constructor.name} is closed`);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ReadableInterop } from '../io/interfaces';\nconst isObject = (x) => x != null && Object(x) === x;\nconst hasFuncs = (x, ...fn) => hasProps(x, ...fn.map((f) => [f, 'function']));\nconst hasProps = (x, ...ks) => isObject(x) && ks.every(([k, t]) => t ? (x[k] != null && typeof x[k] === t) : (k in x));\n/** @ignore */ export const isPromise = (x) => hasFuncs(x, 'then');\n/** @ignore */ export const isObservable = (x) => hasFuncs(x, 'subscribe');\n/** @ignore */ export const isIterable = (x) => hasFuncs(x, Symbol.iterator);\n/** @ignore */ export const isAsyncIterable = (x) => hasFuncs(x, Symbol.asyncIterator);\n/** @ignore */ export const isArrowJSON = (x) => hasProps(x, ['schema', 'object']);\n/** @ignore */ export const isArrayLike = (x) => hasProps(x, ['length', 'number']);\n/** @ignore */ export const isIteratorResult = (x) => hasProps(x, ['done'], ['value']);\n/** @ignore */ export const isUnderlyingSink = (x) => hasFuncs(x, 'abort', 'close', 'start', 'write');\n/** @ignore */ export const isFileHandle = (x) => hasFuncs(x, 'stat') && hasProps(x, ['fd', 'number']);\n/** @ignore */ export const isFSReadStream = (x) => isReadableNodeStream(x) && hasProps(x, ['bytesRead', 'number']);\n/** @ignore */ export const isFetchResponse = (x) => hasProps(x, ['body'], ['bodyUsed', 'boolean'], ['ok', 'boolean']);\n/** @ignore */ export const isWritableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'abort', 'getWriter');\n/** @ignore */ export const isWritableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'write', 'cork', 'uncork', 'end');\n/** @ignore */ export const isReadableDOMStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'tee', 'cancel', 'pipeTo', 'getReader');\n/** @ignore */ export const isReadableNodeStream = (x) => !(x instanceof ReadableInterop) && hasFuncs(x, 'read', 'pipe', 'unpipe', 'pause', 'resume', 'wrap');\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { isPromise, isIterable, isAsyncIterable, isIteratorResult } from './compat';\nconst SharedArrayBuf = (typeof SharedArrayBuffer !== 'undefined' ? SharedArrayBuffer : ArrayBuffer);\nfunction collapseContiguousByteRanges(chunks) {\n    for (let x, y, i = 0; ++i < chunks.length;) {\n        x = chunks[i - 1];\n        y = chunks[i - 0];\n        // continue x and y don't share the same underlying ArrayBuffer\n        if (!x || !y || x.buffer !== y.buffer) {\n            continue;\n        }\n        const { byteOffset: xOffset, byteLength: xLen } = x;\n        const { byteOffset: yOffset, byteLength: yLen } = y;\n        // continue if the byte ranges of x and y aren't contiguous\n        if ((xOffset + xLen) < yOffset || (yOffset + yLen) < xOffset) {\n            continue;\n        }\n        chunks.splice(--i, 2, new Uint8Array(x.buffer, xOffset, yOffset - xOffset + yLen));\n    }\n    return chunks;\n}\n/**\n * @ignore\n */\nexport function memcpy(target, source, targetByteOffset = 0, sourceByteLength = source.byteLength) {\n    const targetByteLength = target.byteLength;\n    const dst = new Uint8Array(target.buffer, target.byteOffset, targetByteLength);\n    const src = new Uint8Array(source.buffer, source.byteOffset, Math.min(sourceByteLength, targetByteLength));\n    dst.set(src, targetByteOffset);\n    return target;\n}\n/**\n * @ignore\n */\nexport function joinUint8Arrays(chunks, size) {\n    // collapse chunks that share the same underlying ArrayBuffer and whose byte ranges overlap,\n    // to avoid unnecessarily copying the bytes to do this buffer join. This is a common case during\n    // streaming, where we may be reading partial byte ranges out of the same underlying ArrayBuffer\n    chunks = collapseContiguousByteRanges(chunks);\n    let offset = 0, index = -1, chunksLen = chunks.length;\n    let source, sliced, buffer;\n    let length = typeof size === 'number' ? size : chunks.reduce((x, y) => x + y.length, 0);\n    while (++index < chunksLen) {\n        source = chunks[index];\n        sliced = source.subarray(0, Math.min(source.length, length - offset));\n        if (length <= (offset + sliced.length)) {\n            if (sliced.length < source.length) {\n                chunks[index] = source.subarray(sliced.length);\n            }\n            else if (sliced.length === source.length) {\n                index++;\n            }\n            buffer ? memcpy(buffer, sliced, offset) : (buffer = sliced);\n            break;\n        }\n        (buffer || (buffer = new Uint8Array(length))).set(sliced, offset);\n        offset += sliced.length;\n    }\n    return [buffer || new Uint8Array(0), chunks.slice(index)];\n}\n/**\n * @ignore\n */\nexport function toArrayBufferView(ArrayBufferViewCtor, input) {\n    let value = isIteratorResult(input) ? input.value : input;\n    if (!value) {\n        return new ArrayBufferViewCtor(0);\n    }\n    if (typeof value === 'string') {\n        value = decodeUtf8(value);\n    }\n    if (value instanceof ArrayBufferViewCtor) {\n        return value;\n    }\n    if (value instanceof ArrayBuffer) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof SharedArrayBuf) {\n        return new ArrayBufferViewCtor(value);\n    }\n    if (value instanceof ByteBuffer) {\n        return toArrayBufferView(ArrayBufferViewCtor, value.bytes());\n    }\n    return !ArrayBuffer.isView(value) ? ArrayBufferViewCtor.from(value) : value.byteLength <= 0 ? new ArrayBufferViewCtor(0)\n        : new ArrayBufferViewCtor(value.buffer, value.byteOffset, value.byteLength / ArrayBufferViewCtor.BYTES_PER_ELEMENT);\n}\n/** @ignore */ export const toInt8Array = (input) => toArrayBufferView(Int8Array, input);\n/** @ignore */ export const toInt16Array = (input) => toArrayBufferView(Int16Array, input);\n/** @ignore */ export const toInt32Array = (input) => toArrayBufferView(Int32Array, input);\n/** @ignore */ export const toUint8Array = (input) => toArrayBufferView(Uint8Array, input);\n/** @ignore */ export const toUint16Array = (input) => toArrayBufferView(Uint16Array, input);\n/** @ignore */ export const toUint32Array = (input) => toArrayBufferView(Uint32Array, input);\n/** @ignore */ export const toFloat32Array = (input) => toArrayBufferView(Float32Array, input);\n/** @ignore */ export const toFloat64Array = (input) => toArrayBufferView(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArray = (input) => toArrayBufferView(Uint8ClampedArray, input);\nconst pump = (iterator) => { iterator.next(); return iterator; };\n/** @ignore */\nexport function* toArrayBufferViewIterator(ArrayCtor, source) {\n    const wrap = function* (x) { yield x; };\n    const buffers = (typeof source === 'string') ? wrap(source)\n        : (ArrayBuffer.isView(source)) ? wrap(source)\n            : (source instanceof ArrayBuffer) ? wrap(source)\n                : (source instanceof SharedArrayBuf) ? wrap(source)\n                    : !isIterable(source) ? wrap(source) : source;\n    yield* pump((function* (it) {\n        let r = null;\n        do {\n            r = it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.iterator]()));\n}\n/** @ignore */ export const toInt8ArrayIterator = (input) => toArrayBufferViewIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayIterator = (input) => toArrayBufferViewIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayIterator = (input) => toArrayBufferViewIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayIterator = (input) => toArrayBufferViewIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayIterator = (input) => toArrayBufferViewIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayIterator = (input) => toArrayBufferViewIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayIterator = (input) => toArrayBufferViewIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayIterator = (input) => toArrayBufferViewIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayIterator = (input) => toArrayBufferViewIterator(Uint8ClampedArray, input);\n/** @ignore */\nexport async function* toArrayBufferViewAsyncIterator(ArrayCtor, source) {\n    // if a Promise, unwrap the Promise and iterate the resolved value\n    if (isPromise(source)) {\n        return yield* toArrayBufferViewAsyncIterator(ArrayCtor, await source);\n    }\n    const wrap = async function* (x) { yield await x; };\n    const emit = async function* (source) {\n        yield* pump((function* (it) {\n            let r = null;\n            do {\n                r = it.next(yield r && r.value);\n            } while (!r.done);\n        })(source[Symbol.iterator]()));\n    };\n    const buffers = (typeof source === 'string') ? wrap(source) // if string, wrap in an AsyncIterableIterator\n        : (ArrayBuffer.isView(source)) ? wrap(source) // if TypedArray, wrap in an AsyncIterableIterator\n            : (source instanceof ArrayBuffer) ? wrap(source) // if ArrayBuffer, wrap in an AsyncIterableIterator\n                : (source instanceof SharedArrayBuf) ? wrap(source) // if SharedArrayBuffer, wrap in an AsyncIterableIterator\n                    : isIterable(source) ? emit(source) // If Iterable, wrap in an AsyncIterableIterator and compose the `next` values\n                        : !isAsyncIterable(source) ? wrap(source) // If not an AsyncIterable, treat as a sentinel and wrap in an AsyncIterableIterator\n                            : source; // otherwise if AsyncIterable, use it\n    yield* pump((async function* (it) {\n        let r = null;\n        do {\n            r = await it.next(yield toArrayBufferView(ArrayCtor, r));\n        } while (!r.done);\n    })(buffers[Symbol.asyncIterator]()));\n}\n/** @ignore */ export const toInt8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int8Array, input);\n/** @ignore */ export const toInt16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int16Array, input);\n/** @ignore */ export const toInt32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Int32Array, input);\n/** @ignore */ export const toUint8ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8Array, input);\n/** @ignore */ export const toUint16ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint16Array, input);\n/** @ignore */ export const toUint32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint32Array, input);\n/** @ignore */ export const toFloat32ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float32Array, input);\n/** @ignore */ export const toFloat64ArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Float64Array, input);\n/** @ignore */ export const toUint8ClampedArrayAsyncIterator = (input) => toArrayBufferViewAsyncIterator(Uint8ClampedArray, input);\n/**\n * @ignore\n */\nfunction decodeUtf8(chunk) {\n    const bytes = new Uint8Array(chunk.length);\n    for (let i = -1, n = chunk.length; ++i < n;) {\n        bytes[i] = chunk.charCodeAt(i);\n    }\n    return bytes;\n}\n/**\n * @ignore\n */\nexport function rebaseValueOffsets(offset, length, valueOffsets) {\n    // If we have a non-zero offset, create a new offsets array with the values\n    // shifted by the start offset, such that the new start offset is 0\n    if (offset !== 0) {\n        valueOffsets = valueOffsets.slice(0, length + 1);\n        for (let i = -1; ++i <= length;) {\n            valueOffsets[i] += offset;\n        }\n    }\n    return valueOffsets;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport class Vector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFXckIsTUFBTSxPQUFnQixNQUFNO0NBdUIzQiIsImZpbGUiOiJ2ZWN0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4vZGF0YSc7XG5pbXBvcnQgeyBEYXRhVHlwZSB9IGZyb20gJy4vdHlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4ge1xuICAgIHJlYWRvbmx5IFRUeXBlOiBUWydUVHlwZSddO1xuICAgIHJlYWRvbmx5IFRBcnJheTogVFsnVEFycmF5J107XG4gICAgcmVhZG9ubHkgVFZhbHVlOiBUWydUVmFsdWUnXTtcbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGltcGxlbWVudHMgSXRlcmFibGU8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgZGF0YTogRGF0YTxUPjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZTogVDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgdHlwZUlkOiBUWydUVHlwZSddO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBsZW5ndGg6IG51bWJlcjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgcmVhZG9ubHkgc3RyaWRlOiBudW1iZXI7XG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IG51bGxDb3VudDogbnVtYmVyO1xuICAgIHB1YmxpYyBhYnN0cmFjdCByZWFkb25seSBudW1DaGlsZHJlbjogbnVtYmVyO1xuXG4gICAgcHVibGljIGFic3RyYWN0IHJlYWRvbmx5IEFycmF5VHlwZTogVFsnQXJyYXlUeXBlJ107XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgaXNWYWxpZChpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBwdWJsaWMgYWJzdHJhY3QgZ2V0KGluZGV4OiBudW1iZXIpOiBUWydUVmFsdWUnXSB8IG51bGw7XG4gICAgcHVibGljIGFic3RyYWN0IHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsKTogdm9pZDtcbiAgICBwdWJsaWMgYWJzdHJhY3QgaW5kZXhPZih2YWx1ZTogVFsnVFZhbHVlJ10gfCBudWxsLCBmcm9tSW5kZXg/OiBudW1iZXIpOiBudW1iZXI7XG5cbiAgICBwdWJsaWMgYWJzdHJhY3QgdG9BcnJheSgpOiBUWydUQXJyYXknXTtcbiAgICBwdWJsaWMgYWJzdHJhY3QgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXSB8IG51bGw+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBzbGljZShiZWdpbj86IG51bWJlciwgZW5kPzogbnVtYmVyKTogVmVjdG9yPFQ+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBjb25jYXQodGhpczogVmVjdG9yPFQ+LCAuLi5vdGhlcnM6IFZlY3RvcjxUPltdKTogVmVjdG9yPFQ+O1xuXG4gICAgcHVibGljIGFic3RyYWN0IGdldENoaWxkQXQ8UiBleHRlbmRzIERhdGFUeXBlID0gYW55PihpbmRleDogbnVtYmVyKTogVmVjdG9yPFI+IHwgbnVsbDtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nimport * as Schema_ from '../../fb/Schema';\nimport * as Message_ from '../../fb/Message';\nimport { Schema, Field } from '../../schema';\nimport { toUint8Array } from '../../util/buffer';\nimport { MessageHeader, MetadataVersion } from '../../enum';\nimport { instance as typeAssembler } from '../../visitor/typeassembler';\nimport { fieldFromJSON, schemaFromJSON, recordBatchFromJSON, dictionaryBatchFromJSON } from './json';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar Type = Schema_.org.apache.arrow.flatbuf.Type;\nvar _Field = Schema_.org.apache.arrow.flatbuf.Field;\nvar _Schema = Schema_.org.apache.arrow.flatbuf.Schema;\nvar _Buffer = Schema_.org.apache.arrow.flatbuf.Buffer;\nvar _Message = Message_.org.apache.arrow.flatbuf.Message;\nvar _KeyValue = Schema_.org.apache.arrow.flatbuf.KeyValue;\nvar _FieldNode = Message_.org.apache.arrow.flatbuf.FieldNode;\nvar _Endianness = Schema_.org.apache.arrow.flatbuf.Endianness;\nvar _RecordBatch = Message_.org.apache.arrow.flatbuf.RecordBatch;\nvar _DictionaryBatch = Message_.org.apache.arrow.flatbuf.DictionaryBatch;\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\n/**\n * @ignore\n */\nexport class Message {\n    constructor(bodyLength, version, headerType, header) {\n        this._version = version;\n        this._headerType = headerType;\n        this.body = new Uint8Array(0);\n        header && (this._createHeader = () => header);\n        this._bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n    /** @nocollapse */\n    static fromJSON(msg, headerType) {\n        const message = new Message(0, MetadataVersion.V4, headerType);\n        message._createHeader = messageHeaderFromJSON(msg, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const _message = _Message.getRootAsMessage(buf);\n        const bodyLength = _message.bodyLength();\n        const version = _message.version();\n        const headerType = _message.headerType();\n        const message = new Message(bodyLength, version, headerType);\n        message._createHeader = decodeMessageHeader(_message, headerType);\n        return message;\n    }\n    /** @nocollapse */\n    static encode(message) {\n        let b = new Builder(), headerOffset = -1;\n        if (message.isSchema()) {\n            headerOffset = Schema.encode(b, message.header());\n        }\n        else if (message.isRecordBatch()) {\n            headerOffset = RecordBatch.encode(b, message.header());\n        }\n        else if (message.isDictionaryBatch()) {\n            headerOffset = DictionaryBatch.encode(b, message.header());\n        }\n        _Message.startMessage(b);\n        _Message.addVersion(b, MetadataVersion.V4);\n        _Message.addHeader(b, headerOffset);\n        _Message.addHeaderType(b, message.headerType);\n        _Message.addBodyLength(b, new Long(message.bodyLength, 0));\n        _Message.finishMessageBuffer(b, _Message.endMessage(b));\n        return b.asUint8Array();\n    }\n    /** @nocollapse */\n    static from(header, bodyLength = 0) {\n        if (header instanceof Schema) {\n            return new Message(0, MetadataVersion.V4, MessageHeader.Schema, header);\n        }\n        if (header instanceof RecordBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.RecordBatch, header);\n        }\n        if (header instanceof DictionaryBatch) {\n            return new Message(bodyLength, MetadataVersion.V4, MessageHeader.DictionaryBatch, header);\n        }\n        throw new Error(`Unrecognized Message header: ${header}`);\n    }\n    get type() { return this.headerType; }\n    get version() { return this._version; }\n    get headerType() { return this._headerType; }\n    get bodyLength() { return this._bodyLength; }\n    header() { return this._createHeader(); }\n    isSchema() { return this.headerType === MessageHeader.Schema; }\n    isRecordBatch() { return this.headerType === MessageHeader.RecordBatch; }\n    isDictionaryBatch() { return this.headerType === MessageHeader.DictionaryBatch; }\n}\n/**\n * @ignore\n */\nexport class RecordBatch {\n    get nodes() { return this._nodes; }\n    get length() { return this._length; }\n    get buffers() { return this._buffers; }\n    constructor(length, nodes, buffers) {\n        this._nodes = nodes;\n        this._buffers = buffers;\n        this._length = typeof length === 'number' ? length : length.low;\n    }\n}\n/**\n * @ignore\n */\nexport class DictionaryBatch {\n    get id() { return this._id; }\n    get data() { return this._data; }\n    get isDelta() { return this._isDelta; }\n    get length() { return this.data.length; }\n    get nodes() { return this.data.nodes; }\n    get buffers() { return this.data.buffers; }\n    constructor(data, id, isDelta = false) {\n        this._data = data;\n        this._isDelta = isDelta;\n        this._id = typeof id === 'number' ? id : id.low;\n    }\n}\n/**\n * @ignore\n */\nexport class BufferRegion {\n    constructor(offset, length) {\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.length = typeof length === 'number' ? length : length.low;\n    }\n}\n/**\n * @ignore\n */\nexport class FieldNode {\n    constructor(length, nullCount) {\n        this.length = typeof length === 'number' ? length : length.low;\n        this.nullCount = typeof nullCount === 'number' ? nullCount : nullCount.low;\n    }\n}\nfunction messageHeaderFromJSON(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.fromJSON(message);\n            case MessageHeader.RecordBatch: return RecordBatch.fromJSON(message);\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.fromJSON(message);\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nfunction decodeMessageHeader(message, type) {\n    return (() => {\n        switch (type) {\n            case MessageHeader.Schema: return Schema.decode(message.header(new _Schema()));\n            case MessageHeader.RecordBatch: return RecordBatch.decode(message.header(new _RecordBatch()), message.version());\n            case MessageHeader.DictionaryBatch: return DictionaryBatch.decode(message.header(new _DictionaryBatch()), message.version());\n        }\n        throw new Error(`Unrecognized Message type: { name: ${MessageHeader[type]}, type: ${type} }`);\n    });\n}\nField['encode'] = encodeField;\nField['decode'] = decodeField;\nField['fromJSON'] = fieldFromJSON;\nSchema['encode'] = encodeSchema;\nSchema['decode'] = decodeSchema;\nSchema['fromJSON'] = schemaFromJSON;\nRecordBatch['encode'] = encodeRecordBatch;\nRecordBatch['decode'] = decodeRecordBatch;\nRecordBatch['fromJSON'] = recordBatchFromJSON;\nDictionaryBatch['encode'] = encodeDictionaryBatch;\nDictionaryBatch['decode'] = decodeDictionaryBatch;\nDictionaryBatch['fromJSON'] = dictionaryBatchFromJSON;\nFieldNode['encode'] = encodeFieldNode;\nFieldNode['decode'] = decodeFieldNode;\nBufferRegion['encode'] = encodeBufferRegion;\nBufferRegion['decode'] = decodeBufferRegion;\nfunction decodeSchema(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    const fields = decodeSchemaFields(_schema, dictionaries, dictionaryFields);\n    return new Schema(fields, decodeCustomMetadata(_schema), dictionaries, dictionaryFields);\n}\nfunction decodeRecordBatch(batch, version = MetadataVersion.V4) {\n    return new RecordBatch(batch.length(), decodeFieldNodes(batch), decodeBuffers(batch, version));\n}\nfunction decodeDictionaryBatch(batch, version = MetadataVersion.V4) {\n    return new DictionaryBatch(RecordBatch.decode(batch.data(), version), batch.id(), batch.isDelta());\n}\nfunction decodeBufferRegion(b) {\n    return new BufferRegion(b.offset(), b.length());\n}\nfunction decodeFieldNode(f) {\n    return new FieldNode(f.length(), f.nullCount());\n}\nfunction decodeFieldNodes(batch) {\n    return Array.from({ length: batch.nodesLength() }, (_, i) => batch.nodes(i)).filter(Boolean).map(FieldNode.decode);\n}\nfunction decodeBuffers(batch, version) {\n    return Array.from({ length: batch.buffersLength() }, (_, i) => batch.buffers(i)).filter(Boolean).map(v3Compat(version, BufferRegion.decode));\n}\nfunction v3Compat(version, decode) {\n    return (buffer, i) => {\n        // If this Arrow buffer was written before version 4,\n        // advance the buffer's bb_pos 8 bytes to skip past\n        // the now-removed page_id field\n        if (version < MetadataVersion.V4) {\n            buffer.bb_pos += (8 * (i + 1));\n        }\n        return decode(buffer);\n    };\n}\nfunction decodeSchemaFields(schema, dictionaries, dictionaryFields) {\n    return Array.from({ length: schema.fieldsLength() }, (_, i) => schema.fields(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\nfunction decodeFieldChildren(field, dictionaries, dictionaryFields) {\n    return Array.from({ length: field.childrenLength() }, (_, i) => field.children(i)).filter(Boolean).map((f) => Field.decode(f, dictionaries, dictionaryFields));\n}\nfunction decodeField(f, dictionaries, dictionaryFields) {\n    let id;\n    let field;\n    let type;\n    let keys;\n    let dictType;\n    let dictMeta;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = f.dictionary())) {\n        type = decodeFieldType(f, decodeFieldChildren(f, dictionaries, dictionaryFields));\n        field = new Field(f.name(), type, f.nullable(), decodeCustomMetadata(f));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta.id().low)) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictionaries.set(id, type = decodeFieldType(f, decodeFieldChildren(f)));\n        dictType = new Dictionary(type, keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta.indexType()) ? decodeIndexType(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta.isOrdered());\n        dictField = new Field(f.name(), dictType, f.nullable(), decodeCustomMetadata(f));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\nfunction decodeCustomMetadata(parent) {\n    const data = new Map();\n    if (parent) {\n        for (let entry, key, i = -1, n = parent.customMetadataLength() | 0; ++i < n;) {\n            if ((entry = parent.customMetadata(i)) && (key = entry.key()) != null) {\n                data.set(key, entry.value());\n            }\n        }\n    }\n    return data;\n}\nfunction decodeIndexType(_type) {\n    return new Int(_type.isSigned(), _type.bitWidth());\n}\nfunction decodeFieldType(f, children) {\n    const typeId = f.typeType();\n    switch (typeId) {\n        case Type.NONE: return new DataType();\n        case Type.Null: return new Null();\n        case Type.Binary: return new Binary();\n        case Type.Utf8: return new Utf8();\n        case Type.Bool: return new Bool();\n        case Type.List: return new List((children || [])[0]);\n        case Type.Struct_: return new Struct(children || []);\n    }\n    switch (typeId) {\n        case Type.Int: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Int());\n            return new Int(t.isSigned(), t.bitWidth());\n        }\n        case Type.FloatingPoint: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FloatingPoint());\n            return new Float(t.precision());\n        }\n        case Type.Decimal: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Decimal());\n            return new Decimal(t.scale(), t.precision());\n        }\n        case Type.Date: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Date());\n            return new Date_(t.unit());\n        }\n        case Type.Time: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Time());\n            return new Time(t.unit(), t.bitWidth());\n        }\n        case Type.Timestamp: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Timestamp());\n            return new Timestamp(t.unit(), t.timezone());\n        }\n        case Type.Interval: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Interval());\n            return new Interval(t.unit());\n        }\n        case Type.Union: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Union());\n            return new Union(t.mode(), t.typeIdsArray() || [], children || []);\n        }\n        case Type.FixedSizeBinary: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeBinary());\n            return new FixedSizeBinary(t.byteWidth());\n        }\n        case Type.FixedSizeList: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.FixedSizeList());\n            return new FixedSizeList(t.listSize(), (children || [])[0]);\n        }\n        case Type.Map: {\n            const t = f.type(new Schema_.org.apache.arrow.flatbuf.Map());\n            return new Map_(children || [], t.keysSorted());\n        }\n    }\n    throw new Error(`Unrecognized type: \"${Type[typeId]}\" (${typeId})`);\n}\nfunction encodeSchema(b, schema) {\n    const fieldOffsets = schema.fields.map((f) => Field.encode(b, f));\n    _Schema.startFieldsVector(b, fieldOffsets.length);\n    const fieldsVectorOffset = _Schema.createFieldsVector(b, fieldOffsets);\n    const metadataOffset = !(schema.metadata && schema.metadata.size > 0) ? -1 :\n        _Schema.createCustomMetadataVector(b, [...schema.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    _Schema.startSchema(b);\n    _Schema.addFields(b, fieldsVectorOffset);\n    _Schema.addEndianness(b, platformIsLittleEndian ? _Endianness.Little : _Endianness.Big);\n    if (metadataOffset !== -1) {\n        _Schema.addCustomMetadata(b, metadataOffset);\n    }\n    return _Schema.endSchema(b);\n}\nfunction encodeField(b, field) {\n    let nameOffset = -1;\n    let typeOffset = -1;\n    let dictionaryOffset = -1;\n    let type = field.type;\n    let typeId = field.typeId;\n    if (!DataType.isDictionary(type)) {\n        typeOffset = typeAssembler.visit(type, b);\n    }\n    else {\n        typeId = type.dictionary.typeId;\n        dictionaryOffset = typeAssembler.visit(type, b);\n        typeOffset = typeAssembler.visit(type.dictionary, b);\n    }\n    const childOffsets = (type.children || []).map((f) => Field.encode(b, f));\n    const childrenVectorOffset = _Field.createChildrenVector(b, childOffsets);\n    const metadataOffset = !(field.metadata && field.metadata.size > 0) ? -1 :\n        _Field.createCustomMetadataVector(b, [...field.metadata].map(([k, v]) => {\n            const key = b.createString(`${k}`);\n            const val = b.createString(`${v}`);\n            _KeyValue.startKeyValue(b);\n            _KeyValue.addKey(b, key);\n            _KeyValue.addValue(b, val);\n            return _KeyValue.endKeyValue(b);\n        }));\n    if (field.name) {\n        nameOffset = b.createString(field.name);\n    }\n    _Field.startField(b);\n    _Field.addType(b, typeOffset);\n    _Field.addTypeType(b, typeId);\n    _Field.addChildren(b, childrenVectorOffset);\n    _Field.addNullable(b, !!field.nullable);\n    if (nameOffset !== -1) {\n        _Field.addName(b, nameOffset);\n    }\n    if (dictionaryOffset !== -1) {\n        _Field.addDictionary(b, dictionaryOffset);\n    }\n    if (metadataOffset !== -1) {\n        _Field.addCustomMetadata(b, metadataOffset);\n    }\n    return _Field.endField(b);\n}\nfunction encodeRecordBatch(b, recordBatch) {\n    const nodes = recordBatch.nodes || [];\n    const buffers = recordBatch.buffers || [];\n    _RecordBatch.startNodesVector(b, nodes.length);\n    nodes.slice().reverse().forEach((n) => FieldNode.encode(b, n));\n    const nodesVectorOffset = b.endVector();\n    _RecordBatch.startBuffersVector(b, buffers.length);\n    buffers.slice().reverse().forEach((b_) => BufferRegion.encode(b, b_));\n    const buffersVectorOffset = b.endVector();\n    _RecordBatch.startRecordBatch(b);\n    _RecordBatch.addLength(b, new Long(recordBatch.length, 0));\n    _RecordBatch.addNodes(b, nodesVectorOffset);\n    _RecordBatch.addBuffers(b, buffersVectorOffset);\n    return _RecordBatch.endRecordBatch(b);\n}\nfunction encodeDictionaryBatch(b, dictionaryBatch) {\n    const dataOffset = RecordBatch.encode(b, dictionaryBatch.data);\n    _DictionaryBatch.startDictionaryBatch(b);\n    _DictionaryBatch.addId(b, new Long(dictionaryBatch.id, 0));\n    _DictionaryBatch.addIsDelta(b, dictionaryBatch.isDelta);\n    _DictionaryBatch.addData(b, dataOffset);\n    return _DictionaryBatch.endDictionaryBatch(b);\n}\nfunction encodeFieldNode(b, node) {\n    return _FieldNode.createFieldNode(b, new Long(node.length, 0), new Long(node.nullCount, 0));\n}\nfunction encodeBufferRegion(b, node) {\n    return _Buffer.createBuffer(b, new Long(node.offset, 0), new Long(node.length, 0));\n}\nconst platformIsLittleEndian = (function () {\n    const buffer = new ArrayBuffer(2);\n    new DataView(buffer).setInt16(0, 256, true /* littleEndian */);\n    // Int16Array uses the platform's endianness.\n    return new Int16Array(buffer)[0] === 256;\n})();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                flatbuf.Schema = NS16187549871986683199.org.apache.arrow.flatbuf.Schema;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * The root Message type\n * This union enables us to easily send different message types without\n * redundant storage, and in the future we can easily add new message types.\n *\n * Arrow implementations do not need to implement all of the message types,\n * which may include experimental metadata types. For maximum compatibility,\n * it is best to send data using RecordBatch\n *\n * @enum\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                let MessageHeader;\n                (function (MessageHeader) {\n                    MessageHeader[MessageHeader[\"NONE\"] = 0] = \"NONE\";\n                    MessageHeader[MessageHeader[\"Schema\"] = 1] = \"Schema\";\n                    MessageHeader[MessageHeader[\"DictionaryBatch\"] = 2] = \"DictionaryBatch\";\n                    MessageHeader[MessageHeader[\"RecordBatch\"] = 3] = \"RecordBatch\";\n                    MessageHeader[MessageHeader[\"Tensor\"] = 4] = \"Tensor\";\n                })(MessageHeader = flatbuf.MessageHeader || (flatbuf.MessageHeader = {}));\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * ----------------------------------------------------------------------\n * Data structures for describing a table row batch (a collection of\n * equal-length Arrow arrays)\n * Metadata about a field at some level of a nested type tree (but not\n * its children).\n *\n * For example, a List<Int16> with values [[1, 2, 3], null, [4], [5, 6], null]\n * would have {length: 5, null_count: 2} for its List node, and {length: 6,\n * null_count: 0} for its Int16 node, as separate FieldNode structs\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class FieldNode {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {FieldNode}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * The number of value slots in the Arrow array at this level of a nested\n                     * tree\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * The number of observed nulls. Fields with null_count == 0 may choose not\n                     * to write their physical validity bitmap out as a materialized buffer,\n                     * instead setting the length of the bitmap buffer to 0.\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    nullCount() {\n                        return this.bb.readInt64(this.bb_pos + 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     * @param {flatbuffers.Long} null_count\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createFieldNode(builder, length, null_count) {\n                        builder.prep(8, 16);\n                        builder.writeInt64(null_count);\n                        builder.writeInt64(length);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.FieldNode = FieldNode;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * A data header describing the shared memory layout of a \"record\" or \"row\"\n * batch. Some systems call this a \"row batch\" internally and others a \"record\n * batch\".\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class RecordBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {RecordBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {RecordBatch=} obj\n                     * @returns {RecordBatch}\n                     */\n                    static getRootAsRecordBatch(bb, obj) {\n                        return (obj || new RecordBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * number of records / rows. The arrays in the batch should all have this\n                     * length\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    length() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * Nodes correspond to the pre-ordered flattened logical schema\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.FieldNode=} obj\n                     * @returns {org.apache.arrow.flatbuf.FieldNode}\n                     */\n                    nodes(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.FieldNode).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    nodesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * Buffers correspond to the pre-ordered flattened buffer tree\n                     *\n                     * The number of buffers appended to this list depends on the schema. For\n                     * example, most primitive arrays will have 2 buffers, 1 for the validity\n                     * bitmap and 1 for the values. For struct arrays, there will only be a\n                     * single buffer for the validity (nulls) bitmap\n                     *\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Buffer=} obj\n                     * @returns {org.apache.arrow.flatbuf.Buffer}\n                     */\n                    buffers(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Buffer).__init(this.bb.__vector(this.bb_pos + offset) + index * 16, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    buffersLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startRecordBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} length\n                     */\n                    static addLength(builder, length) {\n                        builder.addFieldInt64(0, length, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} nodesOffset\n                     */\n                    static addNodes(builder, nodesOffset) {\n                        builder.addFieldOffset(1, nodesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startNodesVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} buffersOffset\n                     */\n                    static addBuffers(builder, buffersOffset) {\n                        builder.addFieldOffset(2, buffersOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startBuffersVector(builder, numElems) {\n                        builder.startVector(16, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endRecordBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.RecordBatch = RecordBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * For sending dictionary encoding information. Any Field can be\n * dictionary-encoded, but in this case none of its children may be\n * dictionary-encoded.\n * There is one vector / column per dictionary, but that vector / column\n * may be spread across multiple dictionary batches by using the isDelta\n * flag\n *\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class DictionaryBatch {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {DictionaryBatch}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {DictionaryBatch=} obj\n                     * @returns {DictionaryBatch}\n                     */\n                    static getRootAsDictionaryBatch(bb, obj) {\n                        return (obj || new DictionaryBatch).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    id() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.RecordBatch=} obj\n                     * @returns {org.apache.arrow.flatbuf.RecordBatch|null}\n                     */\n                    data(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.RecordBatch).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * If isDelta is true the values in the dictionary are to be appended to a\n                     * dictionary with the indicated id\n                     *\n                     * @returns {boolean}\n                     */\n                    isDelta() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? !!this.bb.readInt8(this.bb_pos + offset) : false;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startDictionaryBatch(builder) {\n                        builder.startObject(3);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} id\n                     */\n                    static addId(builder, id) {\n                        builder.addFieldInt64(0, id, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dataOffset\n                     */\n                    static addData(builder, dataOffset) {\n                        builder.addFieldOffset(1, dataOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {boolean} isDelta\n                     */\n                    static addIsDelta(builder, isDelta) {\n                        builder.addFieldInt8(2, +isDelta, +false);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endDictionaryBatch(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                }\n                flatbuf.DictionaryBatch = DictionaryBatch;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Message {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Message}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Message=} obj\n                     * @returns {Message}\n                     */\n                    static getRootAsMessage(bb, obj) {\n                        return (obj || new Message).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MessageHeader}\n                     */\n                    headerType() {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MessageHeader} */ (this.bb.readUint8(this.bb_pos + offset)) : org.apache.arrow.flatbuf.MessageHeader.NONE;\n                    }\n                    /**\n                     * @param {flatbuffers.Table} obj\n                     * @returns {?flatbuffers.Table}\n                     */\n                    header(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__union(obj, this.bb_pos + offset) : null;\n                    }\n                    /**\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.readInt64(this.bb_pos + offset) : this.bb.createLong(0, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startMessage(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MessageHeader} headerType\n                     */\n                    static addHeaderType(builder, headerType) {\n                        builder.addFieldInt8(1, headerType, org.apache.arrow.flatbuf.MessageHeader.NONE);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} headerOffset\n                     */\n                    static addHeader(builder, headerOffset) {\n                        builder.addFieldOffset(2, headerOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} bodyLength\n                     */\n                    static addBodyLength(builder, bodyLength) {\n                        builder.addFieldInt64(3, bodyLength, builder.createLong(0, 0));\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endMessage(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishMessageBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Message = Message;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport * as Schema_ from './fb/Schema';\nimport * as Message_ from './fb/Message';\nexport var ArrowType = Schema_.org.apache.arrow.flatbuf.Type;\nexport var DateUnit = Schema_.org.apache.arrow.flatbuf.DateUnit;\nexport var TimeUnit = Schema_.org.apache.arrow.flatbuf.TimeUnit;\nexport var Precision = Schema_.org.apache.arrow.flatbuf.Precision;\nexport var UnionMode = Schema_.org.apache.arrow.flatbuf.UnionMode;\nexport var VectorType = Schema_.org.apache.arrow.flatbuf.VectorType;\nexport var IntervalUnit = Schema_.org.apache.arrow.flatbuf.IntervalUnit;\nexport var MessageHeader = Message_.org.apache.arrow.flatbuf.MessageHeader;\nexport var MetadataVersion = Schema_.org.apache.arrow.flatbuf.MetadataVersion;\n/**\n * *\n * Main data type enumeration:\n * *\n * Data types in this library are all *logical*. They can be expressed as\n * either a primitive physical type (bytes or bits of some fixed size), a\n * nested type consisting of other data types, or another data type (e.g. a\n * timestamp encoded as an int64)\n */\nexport var Type;\n(function (Type) {\n    Type[Type[\"NONE\"] = 0] = \"NONE\";\n    Type[Type[\"Null\"] = 1] = \"Null\";\n    Type[Type[\"Int\"] = 2] = \"Int\";\n    Type[Type[\"Float\"] = 3] = \"Float\";\n    Type[Type[\"Binary\"] = 4] = \"Binary\";\n    Type[Type[\"Utf8\"] = 5] = \"Utf8\";\n    Type[Type[\"Bool\"] = 6] = \"Bool\";\n    Type[Type[\"Decimal\"] = 7] = \"Decimal\";\n    Type[Type[\"Date\"] = 8] = \"Date\";\n    Type[Type[\"Time\"] = 9] = \"Time\";\n    Type[Type[\"Timestamp\"] = 10] = \"Timestamp\";\n    Type[Type[\"Interval\"] = 11] = \"Interval\";\n    Type[Type[\"List\"] = 12] = \"List\";\n    Type[Type[\"Struct\"] = 13] = \"Struct\";\n    Type[Type[\"Union\"] = 14] = \"Union\";\n    Type[Type[\"FixedSizeBinary\"] = 15] = \"FixedSizeBinary\";\n    Type[Type[\"FixedSizeList\"] = 16] = \"FixedSizeList\";\n    Type[Type[\"Map\"] = 17] = \"Map\";\n    // These enum values are here so that TypeScript can narrow the type signatures further\n    // beyond the base Arrow types. The base Arrow types include metadata like bitWidths that\n    // impact the type signatures of the values we return. For example, the Int8Vector reads\n    // 1-byte numbers from an Int8Array, an Int32Vector reads a 4-byte number from an Int32Array,\n    // and an Int64Vector reads a pair of 4-byte lo, hi int32s, and returns them as a zero-copy\n    // slice from an underlying Int32Array. Library consumers benefit by doing this type narrowing,\n    // since we can ensure the types across all public methods are propagated and never bail to `any`.\n    // These values are _never_ actually used at runtime, and they will _never_ be written into the\n    // flatbuffers metadata of serialized Arrow IPC payloads.\n    Type[Type[\"Dictionary\"] = -1] = \"Dictionary\";\n    Type[Type[\"Int8\"] = -2] = \"Int8\";\n    Type[Type[\"Int16\"] = -3] = \"Int16\";\n    Type[Type[\"Int32\"] = -4] = \"Int32\";\n    Type[Type[\"Int64\"] = -5] = \"Int64\";\n    Type[Type[\"Uint8\"] = -6] = \"Uint8\";\n    Type[Type[\"Uint16\"] = -7] = \"Uint16\";\n    Type[Type[\"Uint32\"] = -8] = \"Uint32\";\n    Type[Type[\"Uint64\"] = -9] = \"Uint64\";\n    Type[Type[\"Float16\"] = -10] = \"Float16\";\n    Type[Type[\"Float32\"] = -11] = \"Float32\";\n    Type[Type[\"Float64\"] = -12] = \"Float64\";\n    Type[Type[\"DateDay\"] = -13] = \"DateDay\";\n    Type[Type[\"DateMillisecond\"] = -14] = \"DateMillisecond\";\n    Type[Type[\"TimestampSecond\"] = -15] = \"TimestampSecond\";\n    Type[Type[\"TimestampMillisecond\"] = -16] = \"TimestampMillisecond\";\n    Type[Type[\"TimestampMicrosecond\"] = -17] = \"TimestampMicrosecond\";\n    Type[Type[\"TimestampNanosecond\"] = -18] = \"TimestampNanosecond\";\n    Type[Type[\"TimeSecond\"] = -19] = \"TimeSecond\";\n    Type[Type[\"TimeMillisecond\"] = -20] = \"TimeMillisecond\";\n    Type[Type[\"TimeMicrosecond\"] = -21] = \"TimeMicrosecond\";\n    Type[Type[\"TimeNanosecond\"] = -22] = \"TimeNanosecond\";\n    Type[Type[\"DenseUnion\"] = -23] = \"DenseUnion\";\n    Type[Type[\"SparseUnion\"] = -24] = \"SparseUnion\";\n    Type[Type[\"IntervalDayTime\"] = -25] = \"IntervalDayTime\";\n    Type[Type[\"IntervalYearMonth\"] = -26] = \"IntervalYearMonth\";\n})(Type || (Type = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// automatically generated by the FlatBuffers compiler, do not modify\nimport * as NS16187549871986683199 from './Schema';\n/**\n * ----------------------------------------------------------------------\n * Arrow File metadata\n *\n *\n * @constructor\n */\nexport var org;\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Footer {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Footer}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @param {Footer=} obj\n                     * @returns {Footer}\n                     */\n                    static getRootAsFooter(bb, obj) {\n                        return (obj || new Footer).__init(bb.readInt32(bb.position()) + bb.position(), bb);\n                    }\n                    /**\n                     * @returns {org.apache.arrow.flatbuf.MetadataVersion}\n                     */\n                    version() {\n                        let offset = this.bb.__offset(this.bb_pos, 4);\n                        return offset ? /** @type {org.apache.arrow.flatbuf.MetadataVersion} */ (this.bb.readInt16(this.bb_pos + offset)) : NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1;\n                    }\n                    /**\n                     * @param {org.apache.arrow.flatbuf.Schema=} obj\n                     * @returns {org.apache.arrow.flatbuf.Schema|null}\n                     */\n                    schema(obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 6);\n                        return offset ? (obj || new NS16187549871986683199.org.apache.arrow.flatbuf.Schema).__init(this.bb.__indirect(this.bb_pos + offset), this.bb) : null;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    dictionaries(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    dictionariesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 8);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {number} index\n                     * @param {org.apache.arrow.flatbuf.Block=} obj\n                     * @returns {org.apache.arrow.flatbuf.Block}\n                     */\n                    recordBatches(index, obj) {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? (obj || new org.apache.arrow.flatbuf.Block).__init(this.bb.__vector(this.bb_pos + offset) + index * 24, this.bb) : null;\n                    }\n                    /**\n                     * @returns {number}\n                     */\n                    recordBatchesLength() {\n                        let offset = this.bb.__offset(this.bb_pos, 10);\n                        return offset ? this.bb.__vector_len(this.bb_pos + offset) : 0;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     */\n                    static startFooter(builder) {\n                        builder.startObject(4);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {org.apache.arrow.flatbuf.MetadataVersion} version\n                     */\n                    static addVersion(builder, version) {\n                        builder.addFieldInt16(0, version, NS16187549871986683199.org.apache.arrow.flatbuf.MetadataVersion.V1);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} schemaOffset\n                     */\n                    static addSchema(builder, schemaOffset) {\n                        builder.addFieldOffset(1, schemaOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} dictionariesOffset\n                     */\n                    static addDictionaries(builder, dictionariesOffset) {\n                        builder.addFieldOffset(2, dictionariesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startDictionariesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} recordBatchesOffset\n                     */\n                    static addRecordBatches(builder, recordBatchesOffset) {\n                        builder.addFieldOffset(3, recordBatchesOffset, 0);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {number} numElems\n                     */\n                    static startRecordBatchesVector(builder, numElems) {\n                        builder.startVector(24, numElems, 8);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static endFooter(builder) {\n                        let offset = builder.endObject();\n                        return offset;\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Offset} offset\n                     */\n                    static finishFooterBuffer(builder, offset) {\n                        builder.finish(offset);\n                    }\n                }\n                flatbuf.Footer = Footer;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n/**\n * @constructor\n */\n(function (org) {\n    var apache;\n    (function (apache) {\n        var arrow;\n        (function (arrow) {\n            var flatbuf;\n            (function (flatbuf) {\n                class Block {\n                    constructor() {\n                        /**\n                         * @type {number}\n                         */\n                        this.bb_pos = 0;\n                    }\n                    /**\n                     * @param {number} i\n                     * @param {flatbuffers.ByteBuffer} bb\n                     * @returns {Block}\n                     */\n                    __init(i, bb) {\n                        this.bb_pos = i;\n                        this.bb = bb;\n                        return this;\n                    }\n                    /**\n                     * Index to the start of the RecordBlock (note this is past the Message header)\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    offset() {\n                        return this.bb.readInt64(this.bb_pos);\n                    }\n                    /**\n                     * Length of the metadata\n                     *\n                     * @returns {number}\n                     */\n                    metaDataLength() {\n                        return this.bb.readInt32(this.bb_pos + 8);\n                    }\n                    /**\n                     * Length of the data (this is aligned so there can be a gap between this and\n                     * the metatdata).\n                     *\n                     * @returns {flatbuffers.Long}\n                     */\n                    bodyLength() {\n                        return this.bb.readInt64(this.bb_pos + 16);\n                    }\n                    /**\n                     * @param {flatbuffers.Builder} builder\n                     * @param {flatbuffers.Long} offset\n                     * @param {number} metaDataLength\n                     * @param {flatbuffers.Long} bodyLength\n                     * @returns {flatbuffers.Offset}\n                     */\n                    static createBlock(builder, offset, metaDataLength, bodyLength) {\n                        builder.prep(8, 24);\n                        builder.writeInt64(bodyLength);\n                        builder.pad(4);\n                        builder.writeInt32(metaDataLength);\n                        builder.writeInt64(offset);\n                        return builder.offset();\n                    }\n                }\n                flatbuf.Block = Block;\n            })(flatbuf = arrow.flatbuf || (arrow.flatbuf = {}));\n        })(arrow = apache.arrow || (apache.arrow = {}));\n    })(apache = org.apache || (org.apache = {}));\n})(org || (org = {}));\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type, Precision, UnionMode, DateUnit, TimeUnit, IntervalUnit } from './enum';\nexport class DataType {\n    constructor(_children) {\n        this._children = _children;\n    }\n    /** @nocollapse */ static isNull(x) { return x && x.typeId === Type.Null; }\n    /** @nocollapse */ static isInt(x) { return x && x.typeId === Type.Int; }\n    /** @nocollapse */ static isFloat(x) { return x && x.typeId === Type.Float; }\n    /** @nocollapse */ static isBinary(x) { return x && x.typeId === Type.Binary; }\n    /** @nocollapse */ static isUtf8(x) { return x && x.typeId === Type.Utf8; }\n    /** @nocollapse */ static isBool(x) { return x && x.typeId === Type.Bool; }\n    /** @nocollapse */ static isDecimal(x) { return x && x.typeId === Type.Decimal; }\n    /** @nocollapse */ static isDate(x) { return x && x.typeId === Type.Date; }\n    /** @nocollapse */ static isTime(x) { return x && x.typeId === Type.Time; }\n    /** @nocollapse */ static isTimestamp(x) { return x && x.typeId === Type.Timestamp; }\n    /** @nocollapse */ static isInterval(x) { return x && x.typeId === Type.Interval; }\n    /** @nocollapse */ static isList(x) { return x && x.typeId === Type.List; }\n    /** @nocollapse */ static isStruct(x) { return x && x.typeId === Type.Struct; }\n    /** @nocollapse */ static isUnion(x) { return x && x.typeId === Type.Union; }\n    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.typeId === Type.FixedSizeBinary; }\n    /** @nocollapse */ static isFixedSizeList(x) { return x && x.typeId === Type.FixedSizeList; }\n    /** @nocollapse */ static isMap(x) { return x && x.typeId === Type.Map; }\n    /** @nocollapse */ static isDictionary(x) { return x && x.typeId === Type.Dictionary; }\n    get children() { return this._children; }\n    get typeId() { return Type.NONE; }\n}\nDataType[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Array;\n    return proto[Symbol.toStringTag] = 'DataType';\n})(DataType.prototype);\nexport class Null extends DataType {\n    toString() { return `Null`; }\n    get typeId() { return Type.Null; }\n}\nNull[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Null';\n})(Null.prototype);\nclass Int_ extends DataType {\n    constructor(_isSigned, _bitWidth) {\n        super();\n        this._isSigned = _isSigned;\n        this._bitWidth = _bitWidth;\n    }\n    get typeId() { return Type.Int; }\n    get isSigned() { return this._isSigned; }\n    get bitWidth() { return this._bitWidth; }\n    get ArrayType() {\n        switch (this._bitWidth) {\n            case 8: return (this._isSigned ? Int8Array : Uint8Array);\n            case 16: return (this._isSigned ? Int16Array : Uint16Array);\n            case 32: return (this._isSigned ? Int32Array : Uint32Array);\n            case 64: return (this._isSigned ? Int32Array : Uint32Array);\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }\n}\nInt_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Int';\n})(Int_.prototype);\nexport { Int_ as Int };\nexport class Int8 extends Int_ {\n    constructor() { super(true, 8); }\n}\nexport class Int16 extends Int_ {\n    constructor() { super(true, 16); }\n}\nexport class Int32 extends Int_ {\n    constructor() { super(true, 32); }\n}\nexport class Int64 extends Int_ {\n    constructor() { super(true, 64); }\n}\nexport class Uint8 extends Int_ {\n    constructor() { super(false, 8); }\n}\nexport class Uint16 extends Int_ {\n    constructor() { super(false, 16); }\n}\nexport class Uint32 extends Int_ {\n    constructor() { super(false, 32); }\n}\nexport class Uint64 extends Int_ {\n    constructor() { super(false, 64); }\n}\nexport class Float extends DataType {\n    constructor(_precision) {\n        super();\n        this._precision = _precision;\n    }\n    get typeId() { return Type.Float; }\n    get precision() { return this._precision; }\n    // @ts-ignore\n    get ArrayType() {\n        switch (this.precision) {\n            case Precision.HALF: return Uint16Array;\n            case Precision.SINGLE: return Float32Array;\n            case Precision.DOUBLE: return Float64Array;\n        }\n        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);\n    }\n    toString() { return `Float${(this.precision << 5) || 16}`; }\n}\nFloat[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Float';\n})(Float.prototype);\nexport class Float16 extends Float {\n    constructor() { super(Precision.HALF); }\n}\nexport class Float32 extends Float {\n    constructor() { super(Precision.SINGLE); }\n}\nexport class Float64 extends Float {\n    constructor() { super(Precision.DOUBLE); }\n}\nexport class Binary extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Binary; }\n    toString() { return `Binary`; }\n}\nBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Binary';\n})(Binary.prototype);\nexport class Utf8 extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Utf8; }\n    toString() { return `Utf8`; }\n}\nUtf8[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Utf8';\n})(Utf8.prototype);\nexport class Bool extends DataType {\n    constructor() {\n        super();\n    }\n    get typeId() { return Type.Bool; }\n    toString() { return `Bool`; }\n}\nBool[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'Bool';\n})(Bool.prototype);\nexport class Decimal extends DataType {\n    constructor(_scale, _precision) {\n        super();\n        this._scale = _scale;\n        this._precision = _precision;\n    }\n    get typeId() { return Type.Decimal; }\n    get scale() { return this._scale; }\n    get precision() { return this._precision; }\n    toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }\n}\nDecimal[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Decimal';\n})(Decimal.prototype);\nexport class Date_ extends DataType {\n    constructor(_unit) {\n        super();\n        this._unit = _unit;\n    }\n    get typeId() { return Type.Date; }\n    get unit() { return this._unit; }\n    toString() { return `Date${(this._unit + 1) * 32}<${DateUnit[this._unit]}>`; }\n}\nDate_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Date';\n})(Date_.prototype);\nexport class DateDay extends Date_ {\n    constructor() { super(DateUnit.DAY); }\n}\nexport class DateMillisecond extends Date_ {\n    constructor() { super(DateUnit.MILLISECOND); }\n}\nclass Time_ extends DataType {\n    constructor(_unit, _bitWidth) {\n        super();\n        this._unit = _unit;\n        this._bitWidth = _bitWidth;\n    }\n    get typeId() { return Type.Time; }\n    get unit() { return this._unit; }\n    get bitWidth() { return this._bitWidth; }\n    toString() { return `Time${this._bitWidth}<${TimeUnit[this._unit]}>`; }\n}\nTime_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint32Array;\n    return proto[Symbol.toStringTag] = 'Time';\n})(Time_.prototype);\nexport { Time_ as Time };\nexport class TimeSecond extends Time_ {\n    constructor() { super(TimeUnit.SECOND, 32); }\n}\nexport class TimeMillisecond extends Time_ {\n    constructor() { super(TimeUnit.MILLISECOND, 32); }\n}\nexport class TimeMicrosecond extends Time_ {\n    constructor() { super(TimeUnit.MICROSECOND, 64); }\n}\nexport class TimeNanosecond extends Time_ {\n    constructor() { super(TimeUnit.NANOSECOND, 64); }\n}\nclass Timestamp_ extends DataType {\n    constructor(_unit, _timezone) {\n        super();\n        this._unit = _unit;\n        this._timezone = _timezone;\n    }\n    get typeId() { return Type.Timestamp; }\n    get unit() { return this._unit; }\n    get timezone() { return this._timezone; }\n    toString() { return `Timestamp<${TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }\n}\nTimestamp_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Timestamp';\n})(Timestamp_.prototype);\nexport { Timestamp_ as Timestamp };\nexport class TimestampSecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.SECOND, timezone); }\n}\nexport class TimestampMillisecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MILLISECOND, timezone); }\n}\nexport class TimestampMicrosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.MICROSECOND, timezone); }\n}\nexport class TimestampNanosecond extends Timestamp_ {\n    constructor(timezone) { super(TimeUnit.NANOSECOND, timezone); }\n}\nclass Interval_ extends DataType {\n    constructor(_unit) {\n        super();\n        this._unit = _unit;\n    }\n    get typeId() { return Type.Interval; }\n    get unit() { return this._unit; }\n    toString() { return `Interval<${IntervalUnit[this._unit]}>`; }\n}\nInterval_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Interval';\n})(Interval_.prototype);\nexport { Interval_ as Interval };\nexport class IntervalDayTime extends Interval_ {\n    constructor() { super(IntervalUnit.DAY_TIME); }\n}\nexport class IntervalYearMonth extends Interval_ {\n    constructor() { super(IntervalUnit.YEAR_MONTH); }\n}\nexport class List extends DataType {\n    constructor(child) {\n        super([child]);\n    }\n    get typeId() { return Type.List; }\n    toString() { return `List<${this.valueType}>`; }\n    get children() { return this._children; }\n    get valueType() { return this._children[0].type; }\n    get valueField() { return this._children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n}\nList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'List';\n})(List.prototype);\nexport class Struct extends DataType {\n    constructor(_children) {\n        super(_children);\n        this._children = _children;\n    }\n    get typeId() { return Type.Struct; }\n    get children() { return this._children; }\n    toString() { return `Struct<${this._children.map((f) => f.type).join(`, `)}>`; }\n}\nStruct[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Struct';\n})(Struct.prototype);\nclass Union_ extends DataType {\n    constructor(_mode, _typeIds, _children) {\n        super(_children);\n        this._mode = _mode;\n        this._children = _children;\n        this._typeIds = _typeIds = Int32Array.from(_typeIds);\n        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {\n            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;\n        }, Object.create(null));\n    }\n    get typeId() { return Type.Union; }\n    get mode() { return this._mode; }\n    get typeIds() { return this._typeIds; }\n    get children() { return this._children; }\n    get typeIdToChildIndex() { return this._typeIdToChildIndex; }\n    toString() {\n        return `${this[Symbol.toStringTag]}<${this._children.map((x) => `${x.type}`).join(` | `)}>`;\n    }\n}\nUnion_[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Int32Array;\n    return proto[Symbol.toStringTag] = 'Union';\n})(Union_.prototype);\nexport { Union_ as Union };\nexport class DenseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Dense, typeIds, children);\n    }\n}\nexport class SparseUnion extends Union_ {\n    constructor(typeIds, children) {\n        super(UnionMode.Sparse, typeIds, children);\n    }\n}\nexport class FixedSizeBinary extends DataType {\n    constructor(_byteWidth) {\n        super();\n        this._byteWidth = _byteWidth;\n    }\n    get typeId() { return Type.FixedSizeBinary; }\n    get byteWidth() { return this._byteWidth; }\n    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }\n}\nFixedSizeBinary[Symbol.toStringTag] = ((proto) => {\n    proto.ArrayType = Uint8Array;\n    return proto[Symbol.toStringTag] = 'FixedSizeBinary';\n})(FixedSizeBinary.prototype);\nexport class FixedSizeList extends DataType {\n    constructor(_listSize, child) {\n        super([child]);\n        this._listSize = _listSize;\n    }\n    get typeId() { return Type.FixedSizeList; }\n    get listSize() { return this._listSize; }\n    get children() { return this._children; }\n    get valueType() { return this.children[0].type; }\n    get valueField() { return this.children[0]; }\n    get ArrayType() { return this.valueType.ArrayType; }\n    toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }\n}\nFixedSizeList[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'FixedSizeList';\n})(FixedSizeList.prototype);\nexport class Map_ extends DataType {\n    constructor(_children, _keysSorted = false) {\n        super(_children);\n        this._children = _children;\n        this._keysSorted = _keysSorted;\n    }\n    get typeId() { return Type.Map; }\n    get children() { return this._children; }\n    get keysSorted() { return this._keysSorted; }\n    toString() { return `Map<${this.children.join(`, `)}>`; }\n}\nMap_[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Map_';\n})(Map_.prototype);\nconst getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);\nexport class Dictionary extends DataType {\n    constructor(dictionary, indices, id, isOrdered, dictionaryVector) {\n        super();\n        this._indices = indices;\n        this._dictionary = dictionary;\n        this._isOrdered = isOrdered || false;\n        this._dictionaryVector = dictionaryVector;\n        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;\n    }\n    set dictionaryVector(v) { this._dictionaryVector = v; }\n    get dictionaryVector() { return this._dictionaryVector; }\n    get typeId() { return Type.Dictionary; }\n    get id() { return this._id; }\n    get indices() { return this._indices; }\n    get dictionary() { return this._dictionary; }\n    get isOrdered() { return this._isOrdered; }\n    set children(_) { }\n    get children() { return this.dictionary.children; }\n    get valueType() { return this.dictionary; }\n    get ArrayType() { return this.dictionary.ArrayType; }\n    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }\n}\nDictionary[Symbol.toStringTag] = ((proto) => {\n    return proto[Symbol.toStringTag] = 'Dictionary';\n})(Dictionary.prototype);\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DataType } from './type';\nexport class Schema {\n    constructor(fields, metadata, dictionaries, dictionaryFields) {\n        this._fields = fields;\n        this._metadata = metadata || Schema.prototype._metadata;\n        if (!dictionaries || !dictionaryFields) {\n            ({ dictionaries, dictionaryFields } = generateDictionaryMap(fields, dictionaries || new Map(), dictionaryFields || new Map()));\n        }\n        this._dictionaries = dictionaries;\n        this._dictionaryFields = dictionaryFields;\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new Schema(vectors.map((v, i) => new Field('' + (names[i] || i), v.type)));\n    }\n    get fields() { return this._fields; }\n    get metadata() { return this._metadata; }\n    get dictionaries() { return this._dictionaries; }\n    get dictionaryFields() { return this._dictionaryFields; }\n    select(...columnNames) {\n        const names = columnNames.reduce((xs, x) => (xs[x] = true) && xs, Object.create(null));\n        return new Schema(this.fields.filter((f) => names[f.name]), this.metadata);\n    }\n}\nSchema[Symbol.toStringTag] = ((prototype) => {\n    prototype._metadata = Object.freeze(new Map());\n    return 'Schema';\n})(Schema.prototype);\nexport class Field {\n    constructor(name, type, nullable = false, metadata) {\n        this._name = name;\n        this._type = type;\n        this._nullable = nullable;\n        this._metadata = metadata;\n    }\n    get type() { return this._type; }\n    get name() { return this._name; }\n    get nullable() { return this._nullable; }\n    get metadata() { return this._metadata; }\n    get typeId() { return this._type.typeId; }\n    get [Symbol.toStringTag]() { return 'Field'; }\n    get indices() {\n        return DataType.isDictionary(this._type) ? this._type.indices : this._type;\n    }\n    toString() { return `${this.name}: ${this.type}`; }\n}\nfunction generateDictionaryMap(fields, dictionaries, dictionaryFields) {\n    for (let i = -1, n = fields.length; ++i < n;) {\n        const field = fields[i];\n        const type = field.type;\n        if (DataType.isDictionary(type)) {\n            if (!dictionaryFields.get(type.id)) {\n                dictionaryFields.set(type.id, []);\n            }\n            if (!dictionaries.has(type.id)) {\n                dictionaries.set(type.id, type.dictionary);\n                dictionaryFields.get(type.id).push(field);\n            }\n            else if (dictionaries.get(type.id) !== type.dictionary) {\n                throw new Error(`Cannot create Schema containing two different dictionaries with the same Id`);\n            }\n        }\n        if (type.children) {\n            generateDictionaryMap(type.children, dictionaries, dictionaryFields);\n        }\n    }\n    return { dictionaries, dictionaryFields };\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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IFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YVR5cGUsIERpY3Rpb25hcnkgfSBmcm9tICcuL3R5cGUnO1xuaW1wb3J0IHsgVmVjdG9yIGFzIFZUeXBlIH0gZnJvbSAnLi9pbnRlcmZhY2VzJztcblxuZXhwb3J0IGNsYXNzIFNjaGVtYTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG5cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4odmVjdG9yczogVlR5cGU8VFtrZXlvZiBUXT5bXSwgbmFtZXM6IChrZXlvZiBUKVtdID0gW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hlbWE8VD4odmVjdG9ycy5tYXAoKHYsIGkpID0+IG5ldyBGaWVsZCgnJyArIChuYW1lc1tpXSB8fCBpKSwgdi50eXBlKSkpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfZmllbGRzOiBGaWVsZFtdO1xuICAgIHByb3RlY3RlZCBfbWV0YWRhdGE6IE1hcDxzdHJpbmcsIHN0cmluZz47XG4gICAgcHJvdGVjdGVkIF9kaWN0aW9uYXJpZXM6IE1hcDxudW1iZXIsIERhdGFUeXBlPjtcbiAgICBwcm90ZWN0ZWQgX2RpY3Rpb25hcnlGaWVsZHM6IE1hcDxudW1iZXIsIEZpZWxkPERpY3Rpb25hcnk+W10+O1xuICAgIHB1YmxpYyBnZXQgZmllbGRzKCk6IEZpZWxkW10geyByZXR1cm4gdGhpcy5fZmllbGRzOyB9XG4gICAgcHVibGljIGdldCBtZXRhZGF0YSgpOiBNYXA8c3RyaW5nLCBzdHJpbmc+IHsgcmV0dXJuIHRoaXMuX21ldGFkYXRhOyB9XG4gICAgcHVibGljIGdldCBkaWN0aW9uYXJpZXMoKTogTWFwPG51bWJlciwgRGF0YVR5cGU+IHsgcmV0dXJuIHRoaXMuX2RpY3Rpb25hcmllczsgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyeUZpZWxkcygpOiBNYXA8bnVtYmVyLCBGaWVsZDxEaWN0aW9uYXJ5PltdPiB7IHJldHVybiB0aGlzLl9kaWN0aW9uYXJ5RmllbGRzOyB9XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZHM6IEZpZWxkW10sXG4gICAgICAgICAgICAgICAgbWV0YWRhdGE/OiBNYXA8c3RyaW5nLCBzdHJpbmc+LFxuICAgICAgICAgICAgICAgIGRpY3Rpb25hcmllcz86IE1hcDxudW1iZXIsIERhdGFUeXBlPixcbiAgICAgICAgICAgICAgICBkaWN0aW9uYXJ5RmllbGRzPzogTWFwPG51bWJlciwgRmllbGQ8RGljdGlvbmFyeT5bXT4pIHtcbiAgICAgICAgdGhpcy5fZmllbGRzID0gZmllbGRzO1xuICAgICAgICB0aGlzLl9tZXRhZGF0YSA9IG1ldGFkYXRhIHx8IFNjaGVtYS5wcm90b3R5cGUuX21ldGFkYXRhO1xuICAgICAgICBpZiAoIWRpY3Rpb25hcmllcyB8fCAhZGljdGlvbmFyeUZpZWxkcykge1xuICAgICAgICAgICAgKHsgZGljdGlvbmFyaWVzLCBkaWN0aW9uYXJ5RmllbGRzIH0gPSBnZW5lcmF0ZURpY3Rpb25hcnlNYXAoXG4gICAgICAgICAgICAgICAgZmllbGRzLCBkaWN0aW9uYXJpZXMgfHwgbmV3IE1hcCgpLCBkaWN0aW9uYXJ5RmllbGRzIHx8IG5ldyBNYXAoKVxuICAgICAgICAgICAgKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fZGljdGlvbmFyaWVzID0gZGljdGlvbmFyaWVzO1xuICAgICAgICB0aGlzLl9kaWN0aW9uYXJ5RmllbGRzID0gZGljdGlvbmFyeUZpZWxkcztcbiAgICB9XG4gICAgcHVibGljIHNlbGVjdDxLIGV4dGVuZHMga2V5b2YgVCA9IGFueT4oLi4uY29sdW1uTmFtZXM6IEtbXSkge1xuICAgICAgICBjb25zdCBuYW1lcyA9IGNvbHVtbk5hbWVzLnJlZHVjZSgoeHMsIHgpID0+ICh4c1t4XSA9IHRydWUpICYmIHhzLCBPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBTY2hlbWE8eyBbUCBpbiBLXTogVFtQXSB9Pih0aGlzLmZpZWxkcy5maWx0ZXIoKGYpID0+IG5hbWVzW2YubmFtZV0pLCB0aGlzLm1ldGFkYXRhKTtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9ICgocHJvdG90eXBlOiBTY2hlbWEpID0+IHtcbiAgICAgICAgKHByb3RvdHlwZSBhcyBhbnkpLl9tZXRhZGF0YSA9IE9iamVjdC5mcmVlemUobmV3IE1hcCgpKTtcbiAgICAgICAgcmV0dXJuICdTY2hlbWEnO1xuICAgIH0pKFNjaGVtYS5wcm90b3R5cGUpO1xufVxuXG5leHBvcnQgY2xhc3MgRmllbGQ8VCBleHRlbmRzIERhdGFUeXBlID0gRGF0YVR5cGU+IHtcbiAgICBwcm90ZWN0ZWQgX3R5cGU6IFQ7XG4gICAgcHJvdGVjdGVkIF9uYW1lOiBzdHJpbmc7XG4gICAgcHJvdGVjdGVkIF9udWxsYWJsZTogdHJ1ZSB8IGZhbHNlO1xuICAgIHByb3RlY3RlZCBfbWV0YWRhdGE/OiBNYXA8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbDtcbiAgICBjb25zdHJ1Y3RvcihuYW1lOiBzdHJpbmcsIHR5cGU6IFQsIG51bGxhYmxlOiB0cnVlIHwgZmFsc2UgPSBmYWxzZSwgbWV0YWRhdGE/OiBNYXA8c3RyaW5nLCBzdHJpbmc+IHwgbnVsbCkge1xuICAgICAgICB0aGlzLl9uYW1lID0gbmFtZTtcbiAgICAgICAgdGhpcy5fdHlwZSA9IHR5cGU7XG4gICAgICAgIHRoaXMuX251bGxhYmxlID0gbnVsbGFibGU7XG4gICAgICAgIHRoaXMuX21ldGFkYXRhID0gbWV0YWRhdGE7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgdHlwZSgpIHsgcmV0dXJuIHRoaXMuX3R5cGU7IH1cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKSB7IHJldHVybiB0aGlzLl9uYW1lOyB9XG4gICAgcHVibGljIGdldCBudWxsYWJsZSgpIHsgcmV0dXJuIHRoaXMuX251bGxhYmxlOyB9XG4gICAgcHVibGljIGdldCBtZXRhZGF0YSgpIHsgcmV0dXJuIHRoaXMuX21ldGFkYXRhOyB9XG4gICAgcHVibGljIGdldCB0eXBlSWQoKSB7IHJldHVybiB0aGlzLl90eXBlLnR5cGVJZDsgfVxuICAgIHB1YmxpYyBnZXQgW1N5bWJvbC50b1N0cmluZ1RhZ10oKTogc3RyaW5nIHsgcmV0dXJuICdGaWVsZCc7IH1cbiAgICBwdWJsaWMgZ2V0IGluZGljZXMoKSB7XG4gICAgICAgIHJldHVybiBEYXRhVHlwZS5pc0RpY3Rpb25hcnkodGhpcy5fdHlwZSkgPyB0aGlzLl90eXBlLmluZGljZXMgOiB0aGlzLl90eXBlO1xuICAgIH1cbiAgICBwdWJsaWMgdG9TdHJpbmcoKSB7IHJldHVybiBgJHt0aGlzLm5hbWV9OiAke3RoaXMudHlwZX1gOyB9XG59XG5cbmZ1bmN0aW9uIGdlbmVyYXRlRGljdGlvbmFyeU1hcChmaWVsZHM6IEZpZWxkW10sIGRpY3Rpb25hcmllczogTWFwPG51bWJlciwgRGF0YVR5cGU+LCBkaWN0aW9uYXJ5RmllbGRzOiBNYXA8bnVtYmVyLCBGaWVsZDxEaWN0aW9uYXJ5PltdPikge1xuXG4gICAgZm9yIChsZXQgaSA9IC0xLCBuID0gZmllbGRzLmxlbmd0aDsgKytpIDwgbjspIHtcbiAgICAgICAgY29uc3QgZmllbGQgPSBmaWVsZHNbaV07XG4gICAgICAgIGNvbnN0IHR5cGUgPSBmaWVsZC50eXBlO1xuICAgICAgICBpZiAoRGF0YVR5cGUuaXNEaWN0aW9uYXJ5KHR5cGUpKSB7XG4gICAgICAgICAgICBpZiAoIWRpY3Rpb25hcnlGaWVsZHMuZ2V0KHR5cGUuaWQpKSB7XG4gICAgICAgICAgICAgICAgZGljdGlvbmFyeUZpZWxkcy5zZXQodHlwZS5pZCwgW10pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFkaWN0aW9uYXJpZXMuaGFzKHR5cGUuaWQpKSB7XG4gICAgICAgICAgICAgICAgZGljdGlvbmFyaWVzLnNldCh0eXBlLmlkLCB0eXBlLmRpY3Rpb25hcnkpO1xuICAgICAgICAgICAgICAgIGRpY3Rpb25hcnlGaWVsZHMuZ2V0KHR5cGUuaWQpIS5wdXNoKGZpZWxkIGFzIGFueSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRpY3Rpb25hcmllcy5nZXQodHlwZS5pZCkgIT09IHR5cGUuZGljdGlvbmFyeSkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQ2Fubm90IGNyZWF0ZSBTY2hlbWEgY29udGFpbmluZyB0d28gZGlmZmVyZW50IGRpY3Rpb25hcmllcyB3aXRoIHRoZSBzYW1lIElkYCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUuY2hpbGRyZW4pIHtcbiAgICAgICAgICAgIGdlbmVyYXRlRGljdGlvbmFyeU1hcCh0eXBlLmNoaWxkcmVuLCBkaWN0aW9uYXJpZXMsIGRpY3Rpb25hcnlGaWVsZHMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgZGljdGlvbmFyaWVzLCBkaWN0aW9uYXJ5RmllbGRzIH07XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/* tslint:disable:class-name */\nimport * as File_ from '../../fb/File';\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nvar Builder = flatbuffers.Builder;\nvar ByteBuffer = flatbuffers.ByteBuffer;\nvar _Block = File_.org.apache.arrow.flatbuf.Block;\nvar _Footer = File_.org.apache.arrow.flatbuf.Footer;\nimport { Schema } from '../../schema';\nimport { MetadataVersion } from '../../enum';\nimport { toUint8Array } from '../../util/buffer';\nclass Footer_ {\n    constructor(schema, version = MetadataVersion.V4, recordBatches, dictionaryBatches) {\n        this.schema = schema;\n        this.version = version;\n        recordBatches && (this._recordBatches = recordBatches);\n        dictionaryBatches && (this._dictionaryBatches = dictionaryBatches);\n    }\n    /** @nocollapse */\n    static decode(buf) {\n        buf = new ByteBuffer(toUint8Array(buf));\n        const footer = _Footer.getRootAsFooter(buf);\n        const schema = Schema.decode(footer.schema());\n        return new OffHeapFooter(schema, footer);\n    }\n    /** @nocollapse */\n    static encode(footer) {\n        const b = new Builder();\n        const schemaOffset = Schema.encode(b, footer.schema);\n        _Footer.startRecordBatchesVector(b, footer.numRecordBatches);\n        [...footer.recordBatches()].slice().reverse().forEach((rb) => FileBlock.encode(b, rb));\n        const recordBatchesOffset = b.endVector();\n        _Footer.startDictionariesVector(b, footer.numDictionaries);\n        [...footer.dictionaryBatches()].slice().reverse().forEach((db) => FileBlock.encode(b, db));\n        const dictionaryBatchesOffset = b.endVector();\n        _Footer.startFooter(b);\n        _Footer.addSchema(b, schemaOffset);\n        _Footer.addVersion(b, MetadataVersion.V4);\n        _Footer.addRecordBatches(b, recordBatchesOffset);\n        _Footer.addDictionaries(b, dictionaryBatchesOffset);\n        _Footer.finishFooterBuffer(b, _Footer.endFooter(b));\n        return b.asUint8Array();\n    }\n    get numRecordBatches() { return this._recordBatches.length; }\n    get numDictionaries() { return this._dictionaryBatches.length; }\n    *recordBatches() {\n        for (let block, i = -1, n = this.numRecordBatches; ++i < n;) {\n            if (block = this.getRecordBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    *dictionaryBatches() {\n        for (let block, i = -1, n = this.numDictionaries; ++i < n;) {\n            if (block = this.getDictionaryBatch(i)) {\n                yield block;\n            }\n        }\n    }\n    getRecordBatch(index) {\n        return index >= 0\n            && index < this.numRecordBatches\n            && this._recordBatches[index] || null;\n    }\n    getDictionaryBatch(index) {\n        return index >= 0\n            && index < this.numDictionaries\n            && this._dictionaryBatches[index] || null;\n    }\n}\nexport { Footer_ as Footer };\nclass OffHeapFooter extends Footer_ {\n    constructor(schema, _footer) {\n        super(schema, _footer.version());\n        this._footer = _footer;\n    }\n    get numRecordBatches() { return this._footer.recordBatchesLength(); }\n    get numDictionaries() { return this._footer.dictionariesLength(); }\n    getRecordBatch(index) {\n        if (index >= 0 && index < this.numRecordBatches) {\n            const fileBlock = this._footer.recordBatches(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n    getDictionaryBatch(index) {\n        if (index >= 0 && index < this.numDictionaries) {\n            const fileBlock = this._footer.dictionaries(index);\n            if (fileBlock) {\n                return FileBlock.decode(fileBlock);\n            }\n        }\n        return null;\n    }\n}\nexport class FileBlock {\n    /** @nocollapse */\n    static decode(block) {\n        return new FileBlock(block.metaDataLength(), block.bodyLength(), block.offset());\n    }\n    /** @nocollapse */\n    static encode(b, fileBlock) {\n        const { metaDataLength } = fileBlock;\n        const offset = new Long(fileBlock.offset, 0);\n        const bodyLength = new Long(fileBlock.bodyLength, 0);\n        return _Block.createBlock(b, offset, metaDataLength, bodyLength);\n    }\n    constructor(metaDataLength, bodyLength, offset) {\n        this.metaDataLength = metaDataLength;\n        this.offset = typeof offset === 'number' ? offset : offset.low;\n        this.bodyLength = typeof bodyLength === 'number' ? bodyLength : bodyLength.low;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n/**\n * @ignore\n */\nexport function getBool(_data, _index, byte, bit) {\n    return (byte & 1 << bit) !== 0;\n}\n/**\n * @ignore\n */\nexport function getBit(_data, _index, byte, bit) {\n    return (byte & 1 << bit) >> bit;\n}\n/**\n * @ignore\n */\nexport function setBool(bytes, index, value) {\n    return value ?\n        !!(bytes[index >> 3] |= (1 << (index % 8))) || true :\n        !(bytes[index >> 3] &= ~(1 << (index % 8))) && false;\n}\n/**\n * @ignore\n */\nexport function truncateBitmap(offset, length, bitmap) {\n    const alignedSize = (bitmap.byteLength + 7) & ~7;\n    if (offset > 0 || bitmap.byteLength < alignedSize) {\n        const bytes = new Uint8Array(alignedSize);\n        bytes.set((offset % 8 === 0)\n            // If the offset is a multiple of 8 bits, it's safe to slice the bitmap\n            ? bitmap.subarray(offset >> 3)\n            // Otherwise iterate each bit from the offset and return a new one\n            : packBools(iterateBits(bitmap, offset, length, null, getBool)));\n        return bytes;\n    }\n    return bitmap;\n}\n/**\n * @ignore\n */\nexport function packBools(values) {\n    let n = 0, i = 0;\n    let xs = [];\n    let bit = 0, byte = 0;\n    for (const value of values) {\n        value && (byte |= 1 << bit);\n        if (++bit === 8) {\n            xs[i++] = byte;\n            byte = bit = 0;\n        }\n    }\n    if (i === 0 || bit > 0) {\n        xs[i++] = byte;\n    }\n    if (i % 8 && (n = i + 8 - i % 8)) {\n        do {\n            xs[i] = 0;\n        } while (++i < n);\n    }\n    return new Uint8Array(xs);\n}\n/**\n * @ignore\n */\nexport function* iterateBits(bytes, begin, length, context, get) {\n    let bit = begin % 8;\n    let byteIndex = begin >> 3;\n    let index = 0, remaining = length;\n    for (; remaining > 0; bit = 0) {\n        let byte = bytes[byteIndex++];\n        do {\n            yield get(context, index++, byte, bit);\n        } while (--remaining > 0 && ++bit < 8);\n    }\n}\n/**\n * Compute the population count (the number of bits set to 1) for a range of bits in a Uint8Array.\n * @param vector The Uint8Array of bits for which to compute the population count.\n * @param lhs The range's left-hand side (or start) bit\n * @param rhs The range's right-hand side (or end) bit\n */\n/**\n * @ignore\n */\nexport function popcnt_bit_range(data, lhs, rhs) {\n    if (rhs - lhs <= 0) {\n        return 0;\n    }\n    // If the bit range is less than one byte, sum the 1 bits in the bit range\n    if (rhs - lhs < 8) {\n        let sum = 0;\n        for (const bit of iterateBits(data, lhs, rhs - lhs, data, getBit)) {\n            sum += bit;\n        }\n        return sum;\n    }\n    // Get the next lowest multiple of 8 from the right hand side\n    const rhsInside = rhs >> 3 << 3;\n    // Get the next highest multiple of 8 from the left hand side\n    const lhsInside = lhs + (lhs % 8 === 0 ? 0 : 8 - lhs % 8);\n    return (\n    // Get the popcnt of bits between the left hand side, and the next highest multiple of 8\n    popcnt_bit_range(data, lhs, lhsInside) +\n        // Get the popcnt of bits between the right hand side, and the next lowest multiple of 8\n        popcnt_bit_range(data, rhsInside, rhs) +\n        // Get the popcnt of all bits between the left and right hand sides' multiples of 8\n        popcnt_array(data, lhsInside >> 3, (rhsInside - lhsInside) >> 3));\n}\n/**\n * @ignore\n */\nexport function popcnt_array(arr, byteOffset, byteLength) {\n    let cnt = 0, pos = byteOffset | 0;\n    const view = new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n    const len = byteLength === void 0 ? arr.byteLength : pos + byteLength;\n    while (len - pos >= 4) {\n        cnt += popcnt_uint32(view.getUint32(pos));\n        pos += 4;\n    }\n    while (len - pos >= 2) {\n        cnt += popcnt_uint32(view.getUint16(pos));\n        pos += 2;\n    }\n    while (len - pos >= 1) {\n        cnt += popcnt_uint32(view.getUint8(pos));\n        pos += 1;\n    }\n    return cnt;\n}\n/**\n * @ignore\n */\nexport function popcnt_uint32(uint32) {\n    let i = uint32 | 0;\n    i = i - ((i >>> 1) & 0x55555555);\n    i = (i & 0x33333333) + ((i >>> 2) & 0x33333333);\n    return (((i + (i >>> 4)) & 0x0F0F0F0F) * 0x01010101) >>> 24;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { popcnt_bit_range } from './util/bit';\nimport { toArrayBufferView } from './util/buffer';\nimport { VectorType as BufferType, UnionMode } from './enum';\nexport const kUnknownNullCount = -1;\nexport class Data {\n    constructor(type, offset, length, nullCount, buffers, childData) {\n        this._buffers = [];\n        this._type = type;\n        this._offset = Math.floor(Math.max(offset || 0, 0));\n        this._length = Math.floor(Math.max(length || 0, 0));\n        this._buffers = Object.assign([], buffers);\n        this._nullCount = Math.floor(Math.max(nullCount || 0, -1));\n        this._childData = (childData || []).map((x) => x instanceof Data ? x : x.data);\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get offset() { return this._offset; }\n    get typeId() { return this._type.typeId; }\n    get childData() { return this._childData; }\n    get ArrayType() { return this._type.ArrayType; }\n    get values() { return this._buffers[BufferType.DATA]; }\n    get typeIds() { return this._buffers[BufferType.TYPE]; }\n    get nullBitmap() { return this._buffers[BufferType.VALIDITY]; }\n    get valueOffsets() { return this._buffers[BufferType.OFFSET]; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        let nullBitmap;\n        if (nullCount === kUnknownNullCount && (nullBitmap = this._buffers[BufferType.VALIDITY])) {\n            this._nullCount = nullCount = this._length - popcnt_bit_range(nullBitmap, this._offset, this._offset + this._length);\n        }\n        return nullCount;\n    }\n    clone(type, offset = this._offset, length = this._length, nullCount = this._nullCount, buffers = this._buffers, childData = this._childData) {\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n    slice(offset, length) {\n        // +true === 1, +false === 0, so this means\n        // we keep nullCount at 0 if it's already 0,\n        // otherwise set to the invalidated flag -1\n        const nullCount = +(this._nullCount === 0) - 1;\n        const buffers = this.sliceBuffers(offset, length);\n        const childData = this.sliceChildren(offset, length);\n        return this.clone(this._type, this._offset + offset, length, nullCount, buffers, childData);\n    }\n    sliceBuffers(offset, length) {\n        let arr, buffers = Object.assign([], this._buffers);\n        // If typeIds exist, slice the typeIds buffer\n        (arr = buffers[BufferType.TYPE]) && (buffers[BufferType.TYPE] = this.sliceData(arr, offset, length));\n        // If offsets exist, only slice the offsets buffer\n        (arr = buffers[BufferType.OFFSET]) && (buffers[BufferType.OFFSET] = this.sliceOffsets(arr, offset, length)) ||\n            // Otherwise if no offsets, slice the data buffer\n            (arr = buffers[BufferType.DATA]) && (buffers[BufferType.DATA] = this.sliceData(arr, offset, length));\n        return buffers;\n    }\n    sliceChildren(offset, length) {\n        // Only slice children if this isn't variable width data\n        if (!this._buffers[BufferType.OFFSET]) {\n            return this._childData.map((child) => child.slice(offset, length));\n        }\n        return this._childData;\n    }\n    sliceData(data, offset, length) {\n        // Don't slice the data vector for Booleans, since the offset goes by bits not bytes\n        return this._type.typeId === 6 ? data : data.subarray(offset, offset + length);\n    }\n    sliceOffsets(valueOffsets, offset, length) {\n        return valueOffsets.subarray(offset, offset + length + 1);\n    }\n    //\n    // Convenience methods for creating Data instances for each of the Arrow Vector types\n    //\n    /** @nocollapse */\n    static Null(type, offset, length, nullCount, nullBitmap) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        });\n    }\n    /** @nocollapse */\n    static Int(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Dictionary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.indices.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Float(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Bool(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Decimal(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Date(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Time(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Timestamp(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Interval(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static FixedSizeBinary(type, offset, length, nullCount, nullBitmap, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.DATA]: toArrayBufferView(type.ArrayType, data)\n        });\n    }\n    /** @nocollapse */\n    static Binary(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static Utf8(type, offset, length, nullCount, nullBitmap, valueOffsets, data) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets),\n            [BufferType.DATA]: toArrayBufferView(Uint8Array, data)\n        });\n    }\n    /** @nocollapse */\n    static List(type, offset, length, nullCount, nullBitmap, valueOffsets, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.OFFSET]: toArrayBufferView(Int32Array, valueOffsets)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    static FixedSizeList(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, [childData]);\n    }\n    /** @nocollapse */\n    static Struct(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Map(type, offset, length, nullCount, nullBitmap, childData) {\n        return new Data(type, offset, length, nullCount, {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap)\n        }, childData);\n    }\n    /** @nocollapse */\n    static Union(type, offset, length, nullCount, nullBitmap, typeIds, valueOffsetsOrChildData, childData) {\n        const buffers = {\n            [BufferType.VALIDITY]: toArrayBufferView(Uint8Array, nullBitmap),\n            [BufferType.TYPE]: toArrayBufferView(type.ArrayType, typeIds)\n        };\n        if (type.mode === UnionMode.Sparse) {\n            return new Data(type, offset, length, nullCount, buffers, valueOffsetsOrChildData);\n        }\n        buffers[BufferType.OFFSET] = toArrayBufferView(Int32Array, valueOffsetsOrChildData);\n        return new Data(type, offset, length, nullCount, buffers, childData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport function valueToString(x) {\n    return typeof x === 'string' ? `\"${x}\"` : ArrayBuffer.isView(x) ? `[${x}]` : JSON.stringify(x);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInV0aWwvcHJldHR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixNQUFNLFVBQVUsYUFBYSxDQUFDLENBQU07SUFDaEMsT0FBTyxPQUFPLENBQUMsS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFdBQVcsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbkcsQ0FBQyIsImZpbGUiOiJ1dGlsL3ByZXR0eS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5leHBvcnQgZnVuY3Rpb24gdmFsdWVUb1N0cmluZyh4OiBhbnkpIHtcbiAgICByZXR1cm4gdHlwZW9mIHggPT09ICdzdHJpbmcnID8gYFwiJHt4fVwiYCA6IEFycmF5QnVmZmVyLmlzVmlldyh4KSA/IGBbJHt4fV1gIDogSlNPTi5zdHJpbmdpZnkoeCk7XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { valueToString } from '../util/pretty';\nconst columnDescriptor = { enumerable: true, configurable: false, get: () => { } };\nconst lengthDescriptor = { writable: false, enumerable: false, configurable: false, value: -1 };\nconst rowIndexDescriptor = { writable: false, enumerable: false, configurable: true, value: null };\nconst rowParentDescriptor = { writable: false, enumerable: false, configurable: false, value: null };\nconst row = { parent: rowParentDescriptor, rowIndex: rowIndexDescriptor };\nexport class Row {\n    constructor(fields, fieldsAreEnumerable) {\n        lengthDescriptor.value = fields.length;\n        Object.defineProperty(this, 'length', lengthDescriptor);\n        fields.forEach((field, columnIndex) => {\n            columnDescriptor.get = this._bindGetter(columnIndex);\n            // set configurable to true to ensure Object.defineProperty\n            // doesn't throw in the case of duplicate column names\n            columnDescriptor.configurable = true;\n            columnDescriptor.enumerable = fieldsAreEnumerable;\n            Object.defineProperty(this, field.name, columnDescriptor);\n            columnDescriptor.configurable = false;\n            columnDescriptor.enumerable = !fieldsAreEnumerable;\n            Object.defineProperty(this, columnIndex, columnDescriptor);\n            columnDescriptor.get = null;\n        });\n    }\n    /** @nocollapse */\n    static new(schemaOrFields, fieldsAreEnumerable = false) {\n        let schema, fields;\n        if (Array.isArray(schemaOrFields)) {\n            fields = schemaOrFields;\n        }\n        else {\n            schema = schemaOrFields;\n            fieldsAreEnumerable = true;\n            fields = Object.keys(schema).map((x) => new Field(x, schema[x]));\n        }\n        return new Row(fields, fieldsAreEnumerable);\n    }\n    *[Symbol.iterator]() {\n        for (let i = -1, n = this.length; ++i < n;) {\n            yield this[i];\n        }\n    }\n    _bindGetter(colIndex) {\n        return function () {\n            let child = this.parent.getChildAt(colIndex);\n            return child ? child.get(this.rowIndex) : null;\n        };\n    }\n    get(key) { return this[key]; }\n    bind(parent, rowIndex) {\n        rowIndexDescriptor.value = rowIndex;\n        rowParentDescriptor.value = parent;\n        const bound = Object.create(this, row);\n        rowIndexDescriptor.value = null;\n        rowParentDescriptor.value = null;\n        return bound;\n    }\n    toJSON() {\n        return DataType.isStruct(this.parent.type) ? [...this] :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = this[prop]) && props || props;\n            }, {});\n    }\n    toString() {\n        return DataType.isStruct(this.parent.type) ?\n            [...this].map((x) => valueToString(x)).join(', ') :\n            Object.getOwnPropertyNames(this).reduce((props, prop) => {\n                return (props[prop] = valueToString(this[prop])) && props || props;\n            }, {});\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Row } from '../vector/row';\nexport function clampIndex(source, index, then) {\n    const length = source.length;\n    const adjust = index > -1 ? index : (length + (index % length));\n    return then ? then(source, adjust) : adjust;\n}\nlet tmp;\nexport function clampRange(source, begin, end, then) {\n    // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n    // clamp between 0 and length, and wrap around on negative indices, e.g.\n    // slice(-1, 5) or slice(5, -1)\n    let { length: len = 0 } = source;\n    let lhs = typeof begin !== 'number' ? 0 : begin;\n    let rhs = typeof end !== 'number' ? len : end;\n    // wrap around on negative start/end positions\n    (lhs < 0) && (lhs = ((lhs % len) + len) % len);\n    (rhs < 0) && (rhs = ((rhs % len) + len) % len);\n    // ensure lhs <= rhs\n    (rhs < lhs) && (tmp = lhs, lhs = rhs, rhs = tmp);\n    // ensure rhs <= length\n    (rhs > len) && (rhs = len);\n    return then ? then(source, lhs, rhs) : [lhs, rhs];\n}\nexport function createElementComparator(search) {\n    // Compare primitives\n    if (search == null || typeof search !== 'object') {\n        return (value) => value === search;\n    }\n    // Compare Dates\n    if (search instanceof Date) {\n        search = search.valueOf();\n        return (value) => value && (value.valueOf() === search) || false;\n    }\n    // Compare Array-likes\n    if (Array.isArray(search) || ArrayBuffer.isView(search)) {\n        const n = search.length;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[i]);\n        }\n        return (value) => {\n            if (!value || value.length !== n) {\n                return false;\n            }\n            // Handle the case where the search element is an Array, but the\n            // values are Rows or Vectors, e.g. list.indexOf(['foo', 'bar'])\n            if ((value instanceof Row) || (value instanceof Vector)) {\n                for (let i = -1, n = value.length; ++i < n;) {\n                    if (!(fns[i](value.get(i)))) {\n                        return false;\n                    }\n                }\n                return true;\n            }\n            for (let i = -1, n = value.length; ++i < n;) {\n                if (!(fns[i](value[i]))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // Compare Rows and Vectors\n    if ((search instanceof Row) || (search instanceof Vector)) {\n        const n = search.length;\n        const C = search.constructor;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search.get(i));\n        }\n        return (value) => {\n            if (!(value instanceof C)) {\n                return false;\n            }\n            if (!(value.length === n)) {\n                return false;\n            }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value.get(i)))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // Compare non-empty Objects\n    const keys = Object.keys(search);\n    if (keys.length > 0) {\n        const n = keys.length;\n        const fns = [];\n        for (let i = -1; ++i < n;) {\n            fns[i] = createElementComparator(search[keys[i]]);\n        }\n        return (value) => {\n            if (!value || typeof value !== 'object') {\n                return false;\n            }\n            for (let i = -1; ++i < n;) {\n                if (!(fns[i](value[keys[i]]))) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    }\n    // No valid comparator\n    return () => false;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { clampRange } from '../util/vector';\nexport class ChunkedVector extends Vector {\n    constructor(type, chunks = [], offsets = calculateOffsets(chunks)) {\n        super();\n        this._nullCount = -1;\n        this._type = type;\n        this._chunks = chunks;\n        this._chunkOffsets = offsets;\n        this._length = offsets[offsets.length - 1];\n        this._numChildren = (this._type.children || []).length;\n    }\n    /** @nocollapse */\n    static flatten(...vectors) {\n        return vectors.reduce(function flatten(xs, x) {\n            return x instanceof ChunkedVector ? x.chunks.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof Vector);\n    }\n    /** @nocollapse */\n    static concat(...vectors) {\n        return new ChunkedVector(vectors[0].type, ChunkedVector.flatten(...vectors));\n    }\n    get type() { return this._type; }\n    get length() { return this._length; }\n    get chunks() { return this._chunks; }\n    get typeId() { return this._type.typeId; }\n    get ArrayType() { return this._type.ArrayType; }\n    get numChildren() { return this._numChildren; }\n    get data() { return this._chunks[0] ? this._chunks[0].data : null; }\n    get stride() { return this._chunks[0] ? this._chunks[0].stride : 1; }\n    get nullCount() {\n        let nullCount = this._nullCount;\n        if (nullCount < 0) {\n            this._nullCount = nullCount = this._chunks.reduce((x, { nullCount }) => x + nullCount, 0);\n        }\n        return nullCount;\n    }\n    *[Symbol.iterator]() {\n        for (const chunk of this._chunks) {\n            yield* chunk;\n        }\n    }\n    concat(...others) {\n        return ChunkedVector.concat(this, ...others);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this._numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let child, field, chunks;\n        if (child = columns[index]) {\n            return child;\n        }\n        if (field = (this._type.children || [])[index]) {\n            chunks = this._chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new ChunkedVector(field.type, chunks));\n            }\n        }\n        return null;\n    }\n    search(index, then) {\n        let idx = index;\n        // binary search to find the child vector and value indices\n        let offsets = this._chunkOffsets, rhs = offsets.length - 1;\n        // return early if out of bounds, or if there's just one child\n        if (idx < 0) {\n            return null;\n        }\n        if (idx >= offsets[rhs]) {\n            return null;\n        }\n        if (rhs <= 1) {\n            return then ? then(this, 0, idx) : [0, idx];\n        }\n        let lhs = 0, pos = 0, mid = 0;\n        do {\n            if (lhs + 1 === rhs) {\n                return then ? then(this, lhs, idx - pos) : [lhs, idx - pos];\n            }\n            mid = lhs + ((rhs - lhs) / 2) | 0;\n            idx >= offsets[mid] ? (lhs = mid) : (rhs = mid);\n        } while (idx < offsets[rhs] && idx >= (pos = offsets[lhs]));\n        return null;\n    }\n    isValid(index) {\n        return !!this.search(index, this.isValidInternal);\n    }\n    get(index) {\n        return this.search(index, this.getInternal);\n    }\n    set(index, value) {\n        this.search(index, ({ chunks }, i, j) => chunks[i].set(j, value));\n    }\n    indexOf(element, offset) {\n        if (offset && typeof offset === 'number') {\n            return this.search(offset, (self, i, j) => this.indexOfInternal(self, i, j, element));\n        }\n        return this.indexOfInternal(this, 0, Math.max(0, offset || 0), element);\n    }\n    toArray() {\n        const { chunks } = this;\n        const n = chunks.length;\n        let { ArrayType } = this._type;\n        if (n <= 0) {\n            return new ArrayType(0);\n        }\n        if (n <= 1) {\n            return chunks[0].toArray();\n        }\n        let len = 0, src = new Array(n);\n        for (let i = -1; ++i < n;) {\n            len += (src[i] = chunks[i].toArray()).length;\n        }\n        if (ArrayType !== src[0].constructor) {\n            ArrayType = src[0].constructor;\n        }\n        let dst = new ArrayType(len);\n        let set = ArrayType === Array ? arraySet : typedSet;\n        for (let i = -1, idx = 0; ++i < n;) {\n            idx = set(src[i], dst, idx);\n        }\n        return dst;\n    }\n    slice(begin, end) {\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n    getInternal({ _chunks }, i, j) { return _chunks[i].get(j); }\n    isValidInternal({ _chunks }, i, j) { return _chunks[i].isValid(j); }\n    indexOfInternal({ _chunks }, chunkIndex, fromIndex, element) {\n        let i = chunkIndex - 1, n = _chunks.length;\n        let start = fromIndex, offset = 0, found = -1;\n        while (++i < n) {\n            if (~(found = _chunks[i].indexOf(element, start))) {\n                return offset + found;\n            }\n            start = 0;\n            offset += _chunks[i].length;\n        }\n        return -1;\n    }\n    sliceInternal(column, offset, length) {\n        const slices = [];\n        const { type, chunks, _chunkOffsets: chunkOffsets } = column;\n        for (let i = -1, n = chunks.length; ++i < n;) {\n            const chunk = chunks[i];\n            const chunkLength = chunk.length;\n            const chunkOffset = chunkOffsets[i];\n            // If the child is to the right of the slice boundary, we can stop\n            if (chunkOffset >= offset + length) {\n                continue;\n            }\n            // If the child is to the left of of the slice boundary, exclude\n            if (offset >= chunkOffset + chunkLength) {\n                continue;\n            }\n            // If the child is between both left and right boundaries, include w/o slicing\n            if (chunkOffset >= offset && (chunkOffset + chunkLength) <= offset + length) {\n                slices.push(chunk);\n                continue;\n            }\n            // If the child overlaps one of the slice boundaries, include that slice\n            const begin = Math.max(0, offset - chunkOffset);\n            const end = begin + Math.min(chunkLength - begin, (offset + length) - chunkOffset);\n            slices.push(chunk.slice(begin, end));\n        }\n        return new ChunkedVector(type, slices);\n    }\n}\nfunction calculateOffsets(vectors) {\n    let offsets = new Uint32Array((vectors || []).length + 1);\n    let offset = offsets[0] = 0, length = offsets.length;\n    for (let index = 0; ++index < length;) {\n        offsets[index] = (offset += vectors[index - 1].length);\n    }\n    return offsets;\n}\nconst typedSet = (src, dst, offset) => {\n    dst.set(src, offset);\n    return (offset + src.length);\n};\nconst arraySet = (src, dst, offset) => {\n    let idx = offset - 1;\n    for (let i = -1, n = src.length; ++i < n;) {\n        dst[++idx] = src[i];\n    }\n    return idx;\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { ChunkedVector } from './chunked';\nimport { clampRange } from '../util/vector';\nexport class BaseVector extends Vector {\n    constructor(data, children, stride) {\n        super();\n        this._stride = 1;\n        this._numChildren = 0;\n        this._children = children;\n        this._numChildren = data.childData.length;\n        this._bindDataAccessors(this._data = data);\n        this._stride = Math.floor(Math.max(stride || 1, 1));\n    }\n    get data() { return this._data; }\n    get stride() { return this._stride; }\n    get numChildren() { return this._numChildren; }\n    get type() { return this.data.type; }\n    get typeId() { return this.data.typeId; }\n    get length() { return this.data.length; }\n    get offset() { return this.data.offset; }\n    get nullCount() { return this.data.nullCount; }\n    get VectorName() { return this.constructor.name; }\n    get ArrayType() { return this.data.ArrayType; }\n    get values() { return this.data.values; }\n    get typeIds() { return this.data.typeIds; }\n    get nullBitmap() { return this.data.nullBitmap; }\n    get valueOffsets() { return this.data.valueOffsets; }\n    get [Symbol.toStringTag]() { return `${this.VectorName}<${this.type[Symbol.toStringTag]}>`; }\n    clone(data, children = this._children, stride = this.stride) {\n        return Vector.new(data, children, stride);\n    }\n    concat(...others) {\n        return ChunkedVector.concat(this, ...others);\n    }\n    isValid(index) {\n        if (this.nullCount > 0) {\n            const idx = this.offset + index;\n            const val = this.nullBitmap[idx >> 3];\n            const mask = (val & (1 << (idx % 8)));\n            return mask !== 0;\n        }\n        return true;\n    }\n    getChildAt(index) {\n        return index < 0 || index >= this.numChildren ? null : ((this._children || (this._children = []))[index] ||\n            (this._children[index] = Vector.new(this.data.childData[index])));\n    }\n    // @ts-ignore\n    toJSON() { }\n    slice(begin, end) {\n        // Adjust args similar to Array.prototype.slice. Normalize begin/end to\n        // clamp between 0 and length, and wrap around on negative indices, e.g.\n        // slice(-1, 5) or slice(5, -1)\n        return clampRange(this, begin, end, this.sliceInternal);\n    }\n    sliceInternal(vector, offset, length) {\n        const stride = vector.stride;\n        return vector.clone(vector.data.slice(offset * stride, (length - offset) * stride));\n    }\n    // @ts-ignore\n    _bindDataAccessors(data) {\n        // Implementation in src/vectors/index.ts due to circular dependency/packaging shenanigans\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Map_ } from '../type';\nexport class StructVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], false);\n    }\n    asMap(keysSorted = false) {\n        return Vector.new(this.data.clone(new Map_(this.type.children, keysSorted)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9zdHJ1Y3QudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBWSxJQUFJLEVBQVUsTUFBTSxTQUFTLENBQUM7QUFFakQsTUFBTSxPQUFPLFlBQTBELFNBQVEsVUFBcUI7SUFBcEc7O1FBQ1csYUFBUSxHQUFXLEdBQUcsQ0FBQyxHQUFHLENBQUksSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLElBQUksRUFBRSxFQUFFLEtBQUssQ0FBQyxDQUFDO0lBSTFFLENBQUM7SUFIVSxLQUFLLENBQUMsYUFBc0IsS0FBSztRQUNwQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2pGLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3Ivc3RydWN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IFJvdyB9IGZyb20gJy4vcm93JztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IERhdGFUeXBlLCBNYXBfLCBTdHJ1Y3QgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFN0cnVjdFZlY3RvcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIEJhc2VWZWN0b3I8U3RydWN0PFQ+PiB7XG4gICAgcHVibGljIHJvd1Byb3h5OiBSb3c8VD4gPSBSb3cubmV3PFQ+KHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSwgZmFsc2UpO1xuICAgIHB1YmxpYyBhc01hcChrZXlzU29ydGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBNYXBfKHRoaXMudHlwZS5jaGlsZHJlbiwga2V5c1NvcnRlZCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Schema } from './schema';\nimport { Struct } from './type';\nimport { StructVector } from './vector/struct';\nexport class RecordBatch extends Vector {\n    constructor(...args) {\n        super();\n        this._schema = args[0];\n        let data;\n        let children;\n        if (typeof args[1] === 'number') {\n            const fields = this.schema.fields;\n            const [, numRows, childData] = args;\n            data = Data.Struct(new Struct(fields), 0, numRows, 0, null, childData);\n        }\n        else {\n            [, data, children] = args;\n        }\n        this.impl = new StructVector(data, children);\n    }\n    /** @nocollapse */\n    static from(vectors, names = []) {\n        return new RecordBatch(Schema.from(vectors, names), vectors.reduce((len, vec) => Math.max(len, vec.length), 0), vectors);\n    }\n    clone(data, children = this.impl.children) {\n        return new RecordBatch(this.schema, data, children);\n    }\n    get schema() { return this._schema; }\n    get data() { return this.impl.data; }\n    get type() { return this.impl.type; }\n    get typeId() { return this.impl.typeId; }\n    get length() { return this.impl.length; }\n    get stride() { return this.impl.stride; }\n    get numCols() { return this.schema.fields.length; }\n    get rowProxy() { return this.impl.rowProxy; }\n    get nullCount() { return this.impl.nullCount; }\n    get numChildren() { return this.impl.numChildren; }\n    get ArrayType() { return this.impl.ArrayType; }\n    get(index) {\n        return this.impl.get(index);\n    }\n    set(index, value) {\n        this.impl.set(index, value);\n    }\n    isValid(index) { return this.impl.isValid(index); }\n    indexOf(value, fromIndex) { return this.impl.indexOf(value, fromIndex); }\n    toArray() { return this.impl.toArray(); }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    slice(begin, end) {\n        const { length, childData } = this.impl.slice(begin, end).data;\n        return new RecordBatch(this.schema, length, childData);\n    }\n    concat(...others) {\n        return this.impl.concat(...others.map((x) => x instanceof RecordBatch ? x.impl : x));\n    }\n    getChildAt(index) { return this.impl.getChildAt(index); }\n    select(...columnNames) {\n        const fields = this.schema.fields;\n        const schema = this.schema.select(...columnNames);\n        const childNames = columnNames.reduce((xs, x) => (xs[x] = true) && xs, {});\n        const childData = this.data.childData.filter((_, i) => childNames[fields[i].name]);\n        const structData = Data.Struct(new Struct(schema.fields), 0, this.length, 0, null, childData);\n        return new RecordBatch(schema, structData);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './adapters';\nimport { ITERATOR_DONE, AsyncQueue } from './interfaces';\nimport { toUint8Array, joinUint8Arrays } from '../util/buffer';\nimport { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\n/**\n * @ignore\n */\nexport class AsyncByteQueue extends AsyncQueue {\n    write(value) {\n        if ((value = toUint8Array(value)).byteLength > 0) {\n            return super.write(value);\n        }\n    }\n    toUint8Array(sync = false) {\n        return sync ? joinUint8Arrays(this.values.slice())[0] : (async () => {\n            let buffers = [], byteLength = 0;\n            for await (const chunk of this) {\n                buffers.push(chunk);\n                byteLength += chunk.byteLength;\n            }\n            return joinUint8Arrays(buffers, byteLength)[0];\n        })();\n    }\n}\n/**\n * @ignore\n */\nexport class ByteStream {\n    constructor(source) {\n        if (source) {\n            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));\n        }\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\n/**\n * @ignore\n */\nexport class AsyncByteStream {\n    constructor(source) {\n        if (source instanceof AsyncByteStream) {\n            this.source = source.source;\n        }\n        else if (source instanceof AsyncByteQueue) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableNodeStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source));\n        }\n        else if (isFetchResponse(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body));\n        }\n        else if (isIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));\n        }\n        else if (isPromise(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isAsyncIterable(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));\n        }\n        else if (isReadableDOMStream(source)) {\n            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source));\n        }\n    }\n    next(value) { return this.source.next(value); }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    get closed() { return this.source.closed; }\n    cancel(reason) { return this.source.cancel(reason); }\n    peek(size) { return this.source.peek(size); }\n    read(size) { return this.source.read(size); }\n}\nclass ByteStreamSource {\n    constructor(source) {\n        this.source = source;\n    }\n    cancel(reason) { this.return(reason); }\n    peek(size) { return this.next(size, 'peek').value; }\n    read(size) { return this.next(size, 'read').value; }\n    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }\n    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }\n    return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }\n}\nclass AsyncByteStreamSource {\n    constructor(source) {\n        this.source = source;\n        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);\n    }\n    async cancel(reason) { await this.return(reason); }\n    get closed() { return this._closedPromise; }\n    async read(size) { return (await this.next(size, 'read')).value; }\n    async peek(size) { return (await this.next(size, 'peek')).value; }\n    async next(size, cmd = 'read') { return (await this.source.next({ cmd, size })); }\n    async throw(value) {\n        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n    async return(value) {\n        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;\n        this._closedPromiseResolve && this._closedPromiseResolve();\n        this._closedPromiseResolve = undefined;\n        return Object.create(result);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ByteStream, AsyncByteStream } from './stream';\n/**\n * @ignore\n */\nexport class RandomAccessFile extends ByteStream {\n    constructor(buffer, byteLength = buffer.byteLength) {\n        super();\n        this.position = 0;\n        this.buffer = buffer;\n        this.size = byteLength;\n    }\n    readInt32(position) {\n        const { buffer, byteOffset } = this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    read(nBytes) {\n        const { buffer, size, position } = this;\n        if (buffer && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            this.position = Math.min(size, position + Math.min(size - position, nBytes));\n            return buffer.subarray(position, this.position);\n        }\n        return null;\n    }\n    readAt(position, nBytes) {\n        const buf = this.buffer;\n        const end = Math.min(this.size, position + nBytes);\n        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);\n    }\n    close() { this.buffer && (this.buffer = null); }\n    throw(value) { this.close(); return { done: true, value }; }\n    return(value) { this.close(); return { done: true, value }; }\n}\n/**\n * @ignore\n */\nexport class AsyncRandomAccessFile extends AsyncByteStream {\n    constructor(file, byteLength) {\n        super();\n        this.position = 0;\n        this.file = file;\n        this.size = byteLength;\n        if ((typeof byteLength) !== 'number') {\n            (async () => this.size = (await file.stat()).size)();\n        }\n    }\n    async readInt32(position) {\n        const { buffer, byteOffset } = await this.readAt(position, 4);\n        return new DataView(buffer, byteOffset).getInt32(0, true);\n    }\n    async seek(position) {\n        this.position = Math.min(position, this.size);\n        return position < this.size;\n    }\n    async read(nBytes) {\n        const { file, size, position } = this;\n        if (file && position < size) {\n            if (typeof nBytes !== 'number') {\n                nBytes = Infinity;\n            }\n            let pos = position, offset = 0, bytesRead = 0;\n            let end = Math.min(size, pos + Math.min(size - pos, nBytes));\n            let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));\n            while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {\n                ({ bytesRead } = await file.read(buffer, offset, buffer.byteLength - offset, pos));\n            }\n            return buffer;\n        }\n        return null;\n    }\n    async readAt(position, nBytes) {\n        const { file, size } = this;\n        if (file && (position + nBytes) < size) {\n            const end = Math.min(size, position + nBytes);\n            const buffer = new Uint8Array(end - position);\n            return (await file.read(buffer, 0, nBytes, position)).buffer;\n        }\n        return new Uint8Array(nBytes);\n    }\n    async close() { const f = this.file; this.file = null; f && await f.close(); }\n    async throw(value) { await this.close(); return { done: true, value }; }\n    async return(value) { await this.close(); return { done: true, value }; }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","'use strict';\n\n// This is free and unencumbered software released into the public domain.\n// See LICENSE.md for more information.\n\n//\n// Utilities\n//\n\n/**\n * @param {number} a The number to test.\n * @param {number} min The minimum value in the range, inclusive.\n * @param {number} max The maximum value in the range, inclusive.\n * @return {boolean} True if a >= min and a <= max.\n */\nfunction inRange(a, min, max) {\n  return min <= a && a <= max;\n}\n\n/**\n * @param {*} o\n * @return {Object}\n */\nfunction ToDictionary(o) {\n  if (o === undefined) return {};\n  if (o === Object(o)) return o;\n  throw TypeError('Could not convert argument to dictionary');\n}\n\n/**\n * @param {string} string Input string of UTF-16 code units.\n * @return {!Array.<number>} Code points.\n */\nfunction stringToCodePoints(string) {\n  // https://heycam.github.io/webidl/#dfn-obtain-unicode\n\n  // 1. Let S be the DOMString value.\n  var s = String(string);\n\n  // 2. Let n be the length of S.\n  var n = s.length;\n\n  // 3. Initialize i to 0.\n  var i = 0;\n\n  // 4. Initialize U to be an empty sequence of Unicode characters.\n  var u = [];\n\n  // 5. While i < n:\n  while (i < n) {\n\n    // 1. Let c be the code unit in S at index i.\n    var c = s.charCodeAt(i);\n\n    // 2. Depending on the value of c:\n\n    // c < 0xD800 or c > 0xDFFF\n    if (c < 0xD800 || c > 0xDFFF) {\n      // Append to U the Unicode character with code point c.\n      u.push(c);\n    }\n\n    // 0xDC00 ≤ c ≤ 0xDFFF\n    else if (0xDC00 <= c && c <= 0xDFFF) {\n      // Append to U a U+FFFD REPLACEMENT CHARACTER.\n      u.push(0xFFFD);\n    }\n\n    // 0xD800 ≤ c ≤ 0xDBFF\n    else if (0xD800 <= c && c <= 0xDBFF) {\n      // 1. If i = n−1, then append to U a U+FFFD REPLACEMENT\n      // CHARACTER.\n      if (i === n - 1) {\n        u.push(0xFFFD);\n      }\n      // 2. Otherwise, i < n−1:\n      else {\n        // 1. Let d be the code unit in S at index i+1.\n        var d = string.charCodeAt(i + 1);\n\n        // 2. If 0xDC00 ≤ d ≤ 0xDFFF, then:\n        if (0xDC00 <= d && d <= 0xDFFF) {\n          // 1. Let a be c & 0x3FF.\n          var a = c & 0x3FF;\n\n          // 2. Let b be d & 0x3FF.\n          var b = d & 0x3FF;\n\n          // 3. Append to U the Unicode character with code point\n          // 2^16+2^10*a+b.\n          u.push(0x10000 + (a << 10) + b);\n\n          // 4. Set i to i+1.\n          i += 1;\n        }\n\n        // 3. Otherwise, d < 0xDC00 or d > 0xDFFF. Append to U a\n        // U+FFFD REPLACEMENT CHARACTER.\n        else  {\n          u.push(0xFFFD);\n        }\n      }\n    }\n\n    // 3. Set i to i+1.\n    i += 1;\n  }\n\n  // 6. Return U.\n  return u;\n}\n\n/**\n * @param {!Array.<number>} code_points Array of code points.\n * @return {string} string String of UTF-16 code units.\n */\nfunction codePointsToString(code_points) {\n  var s = '';\n  for (var i = 0; i < code_points.length; ++i) {\n    var cp = code_points[i];\n    if (cp <= 0xFFFF) {\n      s += String.fromCharCode(cp);\n    } else {\n      cp -= 0x10000;\n      s += String.fromCharCode((cp >> 10) + 0xD800,\n                               (cp & 0x3FF) + 0xDC00);\n    }\n  }\n  return s;\n}\n\n\n//\n// Implementation of Encoding specification\n// https://encoding.spec.whatwg.org/\n//\n\n//\n// 3. Terminology\n//\n\n/**\n * End-of-stream is a special token that signifies no more tokens\n * are in the stream.\n * @const\n */ var end_of_stream = -1;\n\n/**\n * A stream represents an ordered sequence of tokens.\n *\n * @constructor\n * @param {!(Array.<number>|Uint8Array)} tokens Array of tokens that provide the\n * stream.\n */\nfunction Stream(tokens) {\n  /** @type {!Array.<number>} */\n  this.tokens = [].slice.call(tokens);\n}\n\nStream.prototype = {\n  /**\n   * @return {boolean} True if end-of-stream has been hit.\n   */\n  endOfStream: function() {\n    return !this.tokens.length;\n  },\n\n  /**\n   * When a token is read from a stream, the first token in the\n   * stream must be returned and subsequently removed, and\n   * end-of-stream must be returned otherwise.\n   *\n   * @return {number} Get the next token from the stream, or\n   * end_of_stream.\n   */\n   read: function() {\n    if (!this.tokens.length)\n      return end_of_stream;\n     return this.tokens.shift();\n   },\n\n  /**\n   * When one or more tokens are prepended to a stream, those tokens\n   * must be inserted, in given order, before the first token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The token(s) to prepend to the stream.\n   */\n  prepend: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.unshift(tokens.pop());\n    } else {\n      this.tokens.unshift(token);\n    }\n  },\n\n  /**\n   * When one or more tokens are pushed to a stream, those tokens\n   * must be inserted, in given order, after the last token in the\n   * stream.\n   *\n   * @param {(number|!Array.<number>)} token The tokens(s) to prepend to the stream.\n   */\n  push: function(token) {\n    if (Array.isArray(token)) {\n      var tokens = /**@type {!Array.<number>}*/(token);\n      while (tokens.length)\n        this.tokens.push(tokens.shift());\n    } else {\n      this.tokens.push(token);\n    }\n  }\n};\n\n//\n// 4. Encodings\n//\n\n// 4.1 Encoders and decoders\n\n/** @const */\nvar finished = -1;\n\n/**\n * @param {boolean} fatal If true, decoding errors raise an exception.\n * @param {number=} opt_code_point Override the standard fallback code point.\n * @return {number} The code point to insert on a decoding error.\n */\nfunction decoderError(fatal, opt_code_point) {\n  if (fatal)\n    throw TypeError('Decoder error');\n  return opt_code_point || 0xFFFD;\n}\n\n/** @interface */\nfunction Decoder() {}\nDecoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point, or |finished|.\n   */\n  handler: function(stream, bite) {}\n};\n\n/** @interface */\nfunction Encoder() {}\nEncoder.prototype = {\n  /**\n   * @param {Stream} stream The stream of code points being encoded.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit, or |finished|.\n   */\n  handler: function(stream, code_point) {}\n};\n\n//\n// 7. API\n//\n\n/** @const */ var DEFAULT_ENCODING = 'utf-8';\n\n// 7.1 Interface TextDecoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextDecoder(encoding, options) {\n  if (!(this instanceof TextDecoder)) {\n    return new TextDecoder(encoding, options);\n  }\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {boolean} */\n  this._BOMseen = false;\n  /** @private @type {?Decoder} */\n  this._decoder = null;\n  /** @private @type {boolean} */\n  this._fatal = Boolean(options['fatal']);\n  /** @private @type {boolean} */\n  this._ignoreBOM = Boolean(options['ignoreBOM']);\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n  Object.defineProperty(this, 'fatal', {value: this._fatal});\n  Object.defineProperty(this, 'ignoreBOM', {value: this._ignoreBOM});\n}\n\nTextDecoder.prototype = {\n  /**\n   * @param {ArrayBufferView=} input The buffer of bytes to decode.\n   * @param {Object=} options\n   * @return {string} The decoded string.\n   */\n  decode: function decode(input, options) {\n    var bytes;\n    if (typeof input === 'object' && input instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input);\n    } else if (typeof input === 'object' && 'buffer' in input &&\n               input.buffer instanceof ArrayBuffer) {\n      bytes = new Uint8Array(input.buffer,\n                             input.byteOffset,\n                             input.byteLength);\n    } else {\n      bytes = new Uint8Array(0);\n    }\n\n    options = ToDictionary(options);\n\n    if (!this._streaming) {\n      this._decoder = new UTF8Decoder({fatal: this._fatal});\n      this._BOMseen = false;\n    }\n    this._streaming = Boolean(options['stream']);\n\n    var input_stream = new Stream(bytes);\n\n    var code_points = [];\n\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n\n    while (!input_stream.endOfStream()) {\n      result = this._decoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (result === null)\n        continue;\n      if (Array.isArray(result))\n        code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n      else\n        code_points.push(result);\n    }\n    if (!this._streaming) {\n      do {\n        result = this._decoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (result === null)\n          continue;\n        if (Array.isArray(result))\n          code_points.push.apply(code_points, /**@type {!Array.<number>}*/(result));\n        else\n          code_points.push(result);\n      } while (!input_stream.endOfStream());\n      this._decoder = null;\n    }\n\n    if (code_points.length) {\n      // If encoding is one of utf-8, utf-16be, and utf-16le, and\n      // ignore BOM flag and BOM seen flag are unset, run these\n      // subsubsteps:\n      if (['utf-8'].indexOf(this.encoding) !== -1 &&\n          !this._ignoreBOM && !this._BOMseen) {\n        // If token is U+FEFF, set BOM seen flag.\n        if (code_points[0] === 0xFEFF) {\n          this._BOMseen = true;\n          code_points.shift();\n        } else {\n          // Otherwise, if token is not end-of-stream, set BOM seen\n          // flag and append token to output.\n          this._BOMseen = true;\n        }\n      }\n    }\n\n    return codePointsToString(code_points);\n  }\n};\n\n// 7.2 Interface TextEncoder\n\n/**\n * @constructor\n * @param {string=} encoding The label of the encoding;\n *     defaults to 'utf-8'.\n * @param {Object=} options\n */\nfunction TextEncoder(encoding, options) {\n  if (!(this instanceof TextEncoder))\n    return new TextEncoder(encoding, options);\n  encoding = encoding !== undefined ? String(encoding).toLowerCase() : DEFAULT_ENCODING;\n  if (encoding !== DEFAULT_ENCODING) {\n    throw new Error('Encoding not supported. Only utf-8 is supported');\n  }\n  options = ToDictionary(options);\n\n  /** @private @type {boolean} */\n  this._streaming = false;\n  /** @private @type {?Encoder} */\n  this._encoder = null;\n  /** @private @type {{fatal: boolean}} */\n  this._options = {fatal: Boolean(options['fatal'])};\n\n  Object.defineProperty(this, 'encoding', {value: 'utf-8'});\n}\n\nTextEncoder.prototype = {\n  /**\n   * @param {string=} opt_string The string to encode.\n   * @param {Object=} options\n   * @return {Uint8Array} Encoded bytes, as a Uint8Array.\n   */\n  encode: function encode(opt_string, options) {\n    opt_string = opt_string ? String(opt_string) : '';\n    options = ToDictionary(options);\n\n    // NOTE: This option is nonstandard. None of the encodings\n    // permitted for encoding (i.e. UTF-8, UTF-16) are stateful,\n    // so streaming is not necessary.\n    if (!this._streaming)\n      this._encoder = new UTF8Encoder(this._options);\n    this._streaming = Boolean(options['stream']);\n\n    var bytes = [];\n    var input_stream = new Stream(stringToCodePoints(opt_string));\n    /** @type {?(number|!Array.<number>)} */\n    var result;\n    while (!input_stream.endOfStream()) {\n      result = this._encoder.handler(input_stream, input_stream.read());\n      if (result === finished)\n        break;\n      if (Array.isArray(result))\n        bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n      else\n        bytes.push(result);\n    }\n    if (!this._streaming) {\n      while (true) {\n        result = this._encoder.handler(input_stream, input_stream.read());\n        if (result === finished)\n          break;\n        if (Array.isArray(result))\n          bytes.push.apply(bytes, /**@type {!Array.<number>}*/(result));\n        else\n          bytes.push(result);\n      }\n      this._encoder = null;\n    }\n    return new Uint8Array(bytes);\n  }\n};\n\n//\n// 8. The encoding\n//\n\n// 8.1 utf-8\n\n/**\n * @constructor\n * @implements {Decoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Decoder(options) {\n  var fatal = options.fatal;\n\n  // utf-8's decoder's has an associated utf-8 code point, utf-8\n  // bytes seen, and utf-8 bytes needed (all initially 0), a utf-8\n  // lower boundary (initially 0x80), and a utf-8 upper boundary\n  // (initially 0xBF).\n  var /** @type {number} */ utf8_code_point = 0,\n      /** @type {number} */ utf8_bytes_seen = 0,\n      /** @type {number} */ utf8_bytes_needed = 0,\n      /** @type {number} */ utf8_lower_boundary = 0x80,\n      /** @type {number} */ utf8_upper_boundary = 0xBF;\n\n  /**\n   * @param {Stream} stream The stream of bytes being decoded.\n   * @param {number} bite The next byte read from the stream.\n   * @return {?(number|!Array.<number>)} The next code point(s)\n   *     decoded, or null if not enough data exists in the input\n   *     stream to decode a complete code point.\n   */\n  this.handler = function(stream, bite) {\n    // 1. If byte is end-of-stream and utf-8 bytes needed is not 0,\n    // set utf-8 bytes needed to 0 and return error.\n    if (bite === end_of_stream && utf8_bytes_needed !== 0) {\n      utf8_bytes_needed = 0;\n      return decoderError(fatal);\n    }\n\n    // 2. If byte is end-of-stream, return finished.\n    if (bite === end_of_stream)\n      return finished;\n\n    // 3. If utf-8 bytes needed is 0, based on byte:\n    if (utf8_bytes_needed === 0) {\n\n      // 0x00 to 0x7F\n      if (inRange(bite, 0x00, 0x7F)) {\n        // Return a code point whose value is byte.\n        return bite;\n      }\n\n      // 0xC2 to 0xDF\n      if (inRange(bite, 0xC2, 0xDF)) {\n        // Set utf-8 bytes needed to 1 and utf-8 code point to byte\n        // − 0xC0.\n        utf8_bytes_needed = 1;\n        utf8_code_point = bite - 0xC0;\n      }\n\n      // 0xE0 to 0xEF\n      else if (inRange(bite, 0xE0, 0xEF)) {\n        // 1. If byte is 0xE0, set utf-8 lower boundary to 0xA0.\n        if (bite === 0xE0)\n          utf8_lower_boundary = 0xA0;\n        // 2. If byte is 0xED, set utf-8 upper boundary to 0x9F.\n        if (bite === 0xED)\n          utf8_upper_boundary = 0x9F;\n        // 3. Set utf-8 bytes needed to 2 and utf-8 code point to\n        // byte − 0xE0.\n        utf8_bytes_needed = 2;\n        utf8_code_point = bite - 0xE0;\n      }\n\n      // 0xF0 to 0xF4\n      else if (inRange(bite, 0xF0, 0xF4)) {\n        // 1. If byte is 0xF0, set utf-8 lower boundary to 0x90.\n        if (bite === 0xF0)\n          utf8_lower_boundary = 0x90;\n        // 2. If byte is 0xF4, set utf-8 upper boundary to 0x8F.\n        if (bite === 0xF4)\n          utf8_upper_boundary = 0x8F;\n        // 3. Set utf-8 bytes needed to 3 and utf-8 code point to\n        // byte − 0xF0.\n        utf8_bytes_needed = 3;\n        utf8_code_point = bite - 0xF0;\n      }\n\n      // Otherwise\n      else {\n        // Return error.\n        return decoderError(fatal);\n      }\n\n      // Then (byte is in the range 0xC2 to 0xF4) set utf-8 code\n      // point to utf-8 code point << (6 × utf-8 bytes needed) and\n      // return continue.\n      utf8_code_point = utf8_code_point << (6 * utf8_bytes_needed);\n      return null;\n    }\n\n    // 4. If byte is not in the range utf-8 lower boundary to utf-8\n    // upper boundary, run these substeps:\n    if (!inRange(bite, utf8_lower_boundary, utf8_upper_boundary)) {\n\n      // 1. Set utf-8 code point, utf-8 bytes needed, and utf-8\n      // bytes seen to 0, set utf-8 lower boundary to 0x80, and set\n      // utf-8 upper boundary to 0xBF.\n      utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n      utf8_lower_boundary = 0x80;\n      utf8_upper_boundary = 0xBF;\n\n      // 2. Prepend byte to stream.\n      stream.prepend(bite);\n\n      // 3. Return error.\n      return decoderError(fatal);\n    }\n\n    // 5. Set utf-8 lower boundary to 0x80 and utf-8 upper boundary\n    // to 0xBF.\n    utf8_lower_boundary = 0x80;\n    utf8_upper_boundary = 0xBF;\n\n    // 6. Increase utf-8 bytes seen by one and set utf-8 code point\n    // to utf-8 code point + (byte − 0x80) << (6 × (utf-8 bytes\n    // needed − utf-8 bytes seen)).\n    utf8_bytes_seen += 1;\n    utf8_code_point += (bite - 0x80) << (6 * (utf8_bytes_needed - utf8_bytes_seen));\n\n    // 7. If utf-8 bytes seen is not equal to utf-8 bytes needed,\n    // continue.\n    if (utf8_bytes_seen !== utf8_bytes_needed)\n      return null;\n\n    // 8. Let code point be utf-8 code point.\n    var code_point = utf8_code_point;\n\n    // 9. Set utf-8 code point, utf-8 bytes needed, and utf-8 bytes\n    // seen to 0.\n    utf8_code_point = utf8_bytes_needed = utf8_bytes_seen = 0;\n\n    // 10. Return a code point whose value is code point.\n    return code_point;\n  };\n}\n\n/**\n * @constructor\n * @implements {Encoder}\n * @param {{fatal: boolean}} options\n */\nfunction UTF8Encoder(options) {\n  var fatal = options.fatal;\n  /**\n   * @param {Stream} stream Input stream.\n   * @param {number} code_point Next code point read from the stream.\n   * @return {(number|!Array.<number>)} Byte(s) to emit.\n   */\n  this.handler = function(stream, code_point) {\n    // 1. If code point is end-of-stream, return finished.\n    if (code_point === end_of_stream)\n      return finished;\n\n    // 2. If code point is in the range U+0000 to U+007F, return a\n    // byte whose value is code point.\n    if (inRange(code_point, 0x0000, 0x007f))\n      return code_point;\n\n    // 3. Set count and offset based on the range code point is in:\n    var count, offset;\n    // U+0080 to U+07FF:    1 and 0xC0\n    if (inRange(code_point, 0x0080, 0x07FF)) {\n      count = 1;\n      offset = 0xC0;\n    }\n    // U+0800 to U+FFFF:    2 and 0xE0\n    else if (inRange(code_point, 0x0800, 0xFFFF)) {\n      count = 2;\n      offset = 0xE0;\n    }\n    // U+10000 to U+10FFFF: 3 and 0xF0\n    else if (inRange(code_point, 0x10000, 0x10FFFF)) {\n      count = 3;\n      offset = 0xF0;\n    }\n\n    // 4.Let bytes be a byte sequence whose first byte is (code\n    // point >> (6 × count)) + offset.\n    var bytes = [(code_point >> (6 * count)) + offset];\n\n    // 5. Run these substeps while count is greater than 0:\n    while (count > 0) {\n\n      // 1. Set temp to code point >> (6 × (count − 1)).\n      var temp = code_point >> (6 * (count - 1));\n\n      // 2. Append to bytes 0x80 | (temp & 0x3F).\n      bytes.push(0x80 | (temp & 0x3F));\n\n      // 3. Decrease count by one.\n      count -= 1;\n    }\n\n    // 6. Return bytes bytes, in order.\n    return bytes;\n  };\n}\n\nexport {TextEncoder, TextDecoder};\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from './data';\nimport { Vector } from './vector';\nimport { Type, Precision, DateUnit, TimeUnit, IntervalUnit, UnionMode } from './enum';\nimport { DataType, } from './type';\nexport class Visitor {\n    visitMany(nodes, ...args) {\n        return nodes.map((node, i) => this.visit(node, ...args.map((x) => x[i])));\n    }\n    visit(node, ...args) {\n        return this.getVisitFn(node, false).call(this, node, ...args);\n    }\n    getVisitFn(node, throwIfNotFound = true) {\n        return getVisitFn(this, node, throwIfNotFound);\n    }\n    visitNull(_node, ..._args) { return null; }\n    visitBool(_node, ..._args) { return null; }\n    visitInt(_node, ..._args) { return null; }\n    visitFloat(_node, ..._args) { return null; }\n    visitUtf8(_node, ..._args) { return null; }\n    visitBinary(_node, ..._args) { return null; }\n    visitFixedSizeBinary(_node, ..._args) { return null; }\n    visitDate(_node, ..._args) { return null; }\n    visitTimestamp(_node, ..._args) { return null; }\n    visitTime(_node, ..._args) { return null; }\n    visitDecimal(_node, ..._args) { return null; }\n    visitList(_node, ..._args) { return null; }\n    visitStruct(_node, ..._args) { return null; }\n    visitUnion(_node, ..._args) { return null; }\n    visitDictionary(_node, ..._args) { return null; }\n    visitInterval(_node, ..._args) { return null; }\n    visitFixedSizeList(_node, ..._args) { return null; }\n    visitMap(_node, ..._args) { return null; }\n}\nfunction getVisitFn(visitor, node, throwIfNotFound = true) {\n    let fn = null;\n    let dtype = Type.NONE;\n    // tslint:disable\n    if (node instanceof Data) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof Vector) {\n        dtype = inferDType(node.type);\n    }\n    else if (node instanceof DataType) {\n        dtype = inferDType(node);\n    }\n    else if (typeof (dtype = node) !== 'number') {\n        dtype = Type[node];\n    }\n    switch (dtype) {\n        case Type.Null:\n            fn = visitor.visitNull;\n            break;\n        case Type.Bool:\n            fn = visitor.visitBool;\n            break;\n        case Type.Int:\n            fn = visitor.visitInt;\n            break;\n        case Type.Int8:\n            fn = visitor.visitInt8 || visitor.visitInt;\n            break;\n        case Type.Int16:\n            fn = visitor.visitInt16 || visitor.visitInt;\n            break;\n        case Type.Int32:\n            fn = visitor.visitInt32 || visitor.visitInt;\n            break;\n        case Type.Int64:\n            fn = visitor.visitInt64 || visitor.visitInt;\n            break;\n        case Type.Uint8:\n            fn = visitor.visitUint8 || visitor.visitInt;\n            break;\n        case Type.Uint16:\n            fn = visitor.visitUint16 || visitor.visitInt;\n            break;\n        case Type.Uint32:\n            fn = visitor.visitUint32 || visitor.visitInt;\n            break;\n        case Type.Uint64:\n            fn = visitor.visitUint64 || visitor.visitInt;\n            break;\n        case Type.Float:\n            fn = visitor.visitFloat;\n            break;\n        case Type.Float16:\n            fn = visitor.visitFloat16 || visitor.visitFloat;\n            break;\n        case Type.Float32:\n            fn = visitor.visitFloat32 || visitor.visitFloat;\n            break;\n        case Type.Float64:\n            fn = visitor.visitFloat64 || visitor.visitFloat;\n            break;\n        case Type.Utf8:\n            fn = visitor.visitUtf8;\n            break;\n        case Type.Binary:\n            fn = visitor.visitBinary;\n            break;\n        case Type.FixedSizeBinary:\n            fn = visitor.visitFixedSizeBinary;\n            break;\n        case Type.Date:\n            fn = visitor.visitDate;\n            break;\n        case Type.DateDay:\n            fn = visitor.visitDateDay || visitor.visitDate;\n            break;\n        case Type.DateMillisecond:\n            fn = visitor.visitDateMillisecond || visitor.visitDate;\n            break;\n        case Type.Timestamp:\n            fn = visitor.visitTimestamp;\n            break;\n        case Type.TimestampSecond:\n            fn = visitor.visitTimestampSecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMillisecond:\n            fn = visitor.visitTimestampMillisecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampMicrosecond:\n            fn = visitor.visitTimestampMicrosecond || visitor.visitTimestamp;\n            break;\n        case Type.TimestampNanosecond:\n            fn = visitor.visitTimestampNanosecond || visitor.visitTimestamp;\n            break;\n        case Type.Time:\n            fn = visitor.visitTime;\n            break;\n        case Type.TimeSecond:\n            fn = visitor.visitTimeSecond || visitor.visitTime;\n            break;\n        case Type.TimeMillisecond:\n            fn = visitor.visitTimeMillisecond || visitor.visitTime;\n            break;\n        case Type.TimeMicrosecond:\n            fn = visitor.visitTimeMicrosecond || visitor.visitTime;\n            break;\n        case Type.TimeNanosecond:\n            fn = visitor.visitTimeNanosecond || visitor.visitTime;\n            break;\n        case Type.Decimal:\n            fn = visitor.visitDecimal;\n            break;\n        case Type.List:\n            fn = visitor.visitList;\n            break;\n        case Type.Struct:\n            fn = visitor.visitStruct;\n            break;\n        case Type.Union:\n            fn = visitor.visitUnion;\n            break;\n        case Type.DenseUnion:\n            fn = visitor.visitDenseUnion || visitor.visitUnion;\n            break;\n        case Type.SparseUnion:\n            fn = visitor.visitSparseUnion || visitor.visitUnion;\n            break;\n        case Type.Dictionary:\n            fn = visitor.visitDictionary;\n            break;\n        case Type.Interval:\n            fn = visitor.visitInterval;\n            break;\n        case Type.IntervalDayTime:\n            fn = visitor.visitIntervalDayTime || visitor.visitInterval;\n            break;\n        case Type.IntervalYearMonth:\n            fn = visitor.visitIntervalYearMonth || visitor.visitInterval;\n            break;\n        case Type.FixedSizeList:\n            fn = visitor.visitFixedSizeList;\n            break;\n        case Type.Map:\n            fn = visitor.visitMap;\n            break;\n    }\n    if (typeof fn === 'function')\n        return fn;\n    if (!throwIfNotFound)\n        return () => null;\n    throw new Error(`Unrecognized type '${Type[dtype]}'`);\n}\nfunction inferDType(type) {\n    switch (type.typeId) {\n        case Type.Null: return Type.Null;\n        case Type.Int:\n            const { bitWidth, isSigned } = type;\n            switch (bitWidth) {\n                case 8: return isSigned ? Type.Int8 : Type.Uint8;\n                case 16: return isSigned ? Type.Int16 : Type.Uint16;\n                case 32: return isSigned ? Type.Int32 : Type.Uint32;\n                case 64: return isSigned ? Type.Int64 : Type.Uint64;\n            }\n            return Type.Int;\n        case Type.Float:\n            switch (type.precision) {\n                case Precision.HALF: return Type.Float16;\n                case Precision.SINGLE: return Type.Float32;\n                case Precision.DOUBLE: return Type.Float64;\n            }\n            return Type.Float;\n        case Type.Binary: return Type.Binary;\n        case Type.Utf8: return Type.Utf8;\n        case Type.Bool: return Type.Bool;\n        case Type.Decimal: return Type.Decimal;\n        case Type.Time:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimeSecond;\n                case TimeUnit.MILLISECOND: return Type.TimeMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimeMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimeNanosecond;\n            }\n            return Type.Time;\n        case Type.Timestamp:\n            switch (type.unit) {\n                case TimeUnit.SECOND: return Type.TimestampSecond;\n                case TimeUnit.MILLISECOND: return Type.TimestampMillisecond;\n                case TimeUnit.MICROSECOND: return Type.TimestampMicrosecond;\n                case TimeUnit.NANOSECOND: return Type.TimestampNanosecond;\n            }\n            return Type.Timestamp;\n        case Type.Date:\n            switch (type.unit) {\n                case DateUnit.DAY: return Type.DateDay;\n                case DateUnit.MILLISECOND: return Type.DateMillisecond;\n            }\n            return Type.Date;\n        case Type.Interval:\n            switch (type.unit) {\n                case IntervalUnit.DAY_TIME: return Type.IntervalDayTime;\n                case IntervalUnit.YEAR_MONTH: return Type.IntervalYearMonth;\n            }\n            return Type.Interval;\n        case Type.Map: return Type.Map;\n        case Type.List: return Type.List;\n        case Type.Struct: return Type.Struct;\n        case Type.Union:\n            switch (type.mode) {\n                case UnionMode.Dense: return Type.DenseUnion;\n                case UnionMode.Sparse: return Type.SparseUnion;\n            }\n            return Type.Union;\n        case Type.FixedSizeBinary: return Type.FixedSizeBinary;\n        case Type.FixedSizeList: return Type.FixedSizeList;\n        case Type.Dictionary: return Type.Dictionary;\n    }\n    throw new Error(`Unrecognized type '${Type[type.typeId]}'`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nconst carryBit16 = 1 << 16;\nfunction intAsHex(value) {\n    if (value < 0) {\n        value = 0xFFFFFFFF + value + 1;\n    }\n    return `0x${value.toString(16)}`;\n}\nconst kInt32DecimalDigits = 8;\nconst kPowersOfTen = [1,\n    10,\n    100,\n    1000,\n    10000,\n    100000,\n    1000000,\n    10000000,\n    100000000];\nexport class BaseInt64 {\n    constructor(buffer) {\n        this.buffer = buffer;\n    }\n    high() { return this.buffer[1]; }\n    low() { return this.buffer[0]; }\n    _times(other) {\n        // Break the left and right numbers into 16 bit chunks\n        // so that we can multiply them without overflow.\n        const L = new Uint32Array([\n            this.buffer[1] >>> 16,\n            this.buffer[1] & 0xFFFF,\n            this.buffer[0] >>> 16,\n            this.buffer[0] & 0xFFFF\n        ]);\n        const R = new Uint32Array([\n            other.buffer[1] >>> 16,\n            other.buffer[1] & 0xFFFF,\n            other.buffer[0] >>> 16,\n            other.buffer[0] & 0xFFFF\n        ]);\n        let product = L[3] * R[3];\n        this.buffer[0] = product & 0xFFFF;\n        let sum = product >>> 16;\n        product = L[2] * R[3];\n        sum += product;\n        product = (L[3] * R[2]) >>> 0;\n        sum += product;\n        this.buffer[0] += sum << 16;\n        this.buffer[1] = (sum >>> 0 < product ? carryBit16 : 0);\n        this.buffer[1] += sum >>> 16;\n        this.buffer[1] += L[1] * R[3] + L[2] * R[2] + L[3] * R[1];\n        this.buffer[1] += (L[0] * R[3] + L[1] * R[2] + L[2] * R[1] + L[3] * R[0]) << 16;\n        return this;\n    }\n    _plus(other) {\n        const sum = (this.buffer[0] + other.buffer[0]) >>> 0;\n        this.buffer[1] += other.buffer[1];\n        if (sum < (this.buffer[0] >>> 0)) {\n            ++this.buffer[1];\n        }\n        this.buffer[0] = sum;\n    }\n    lessThan(other) {\n        return this.buffer[1] < other.buffer[1] ||\n            (this.buffer[1] === other.buffer[1] && this.buffer[0] < other.buffer[0]);\n    }\n    equals(other) {\n        return this.buffer[1] === other.buffer[1] && this.buffer[0] == other.buffer[0];\n    }\n    greaterThan(other) {\n        return other.lessThan(this);\n    }\n    hex() {\n        return `${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n}\nexport class Uint64 extends BaseInt64 {\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Uint64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Uint64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        const length = str.length;\n        let out = new Uint64(out_buffer);\n        for (let posn = 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Uint64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Uint64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Uint64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Uint64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int64 extends BaseInt64 {\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        return this;\n    }\n    times(other) {\n        this._times(other);\n        return this;\n    }\n    plus(other) {\n        this._plus(other);\n        return this;\n    }\n    lessThan(other) {\n        // force high bytes to be signed\n        const this_high = this.buffer[1] << 0;\n        const other_high = other.buffer[1] << 0;\n        return this_high < other_high ||\n            (this_high === other_high && this.buffer[0] < other.buffer[0]);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(2)) {\n        return Int64.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(2)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int64.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(2)) {\n        // TODO: Assert that out_buffer is 0 and length = 2\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int64(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int64(new Uint32Array([parseInt(str.substr(posn, group), 10), 0]));\n            const multiple = new Int64(new Uint32Array([kPowersOfTen[group], 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        const data = new Uint32Array(values.length * 2);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int64.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 2 * i * 4, 2));\n        }\n        return data;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int64(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n}\nexport class Int128 {\n    constructor(buffer) {\n        this.buffer = buffer;\n        // buffer[3] MSB (high)\n        // buffer[2]\n        // buffer[1]\n        // buffer[0] LSB (low)\n    }\n    high() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n    }\n    low() {\n        return new Int64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset, 2));\n    }\n    negate() {\n        this.buffer[0] = ~this.buffer[0] + 1;\n        this.buffer[1] = ~this.buffer[1];\n        this.buffer[2] = ~this.buffer[2];\n        this.buffer[3] = ~this.buffer[3];\n        if (this.buffer[0] == 0) {\n            ++this.buffer[1];\n        }\n        if (this.buffer[1] == 0) {\n            ++this.buffer[2];\n        }\n        if (this.buffer[2] == 0) {\n            ++this.buffer[3];\n        }\n        return this;\n    }\n    times(other) {\n        // Break the left and right numbers into 32 bit chunks\n        // so that we can multiply them without overflow.\n        const L0 = new Uint64(new Uint32Array([this.buffer[3], 0]));\n        const L1 = new Uint64(new Uint32Array([this.buffer[2], 0]));\n        const L2 = new Uint64(new Uint32Array([this.buffer[1], 0]));\n        const L3 = new Uint64(new Uint32Array([this.buffer[0], 0]));\n        const R0 = new Uint64(new Uint32Array([other.buffer[3], 0]));\n        const R1 = new Uint64(new Uint32Array([other.buffer[2], 0]));\n        const R2 = new Uint64(new Uint32Array([other.buffer[1], 0]));\n        const R3 = new Uint64(new Uint32Array([other.buffer[0], 0]));\n        let product = Uint64.multiply(L3, R3);\n        this.buffer[0] = product.low();\n        let sum = new Uint64(new Uint32Array([product.high(), 0]));\n        product = Uint64.multiply(L2, R3);\n        sum.plus(product);\n        product = Uint64.multiply(L3, R2);\n        sum.plus(product);\n        this.buffer[1] = sum.low();\n        this.buffer[3] = (sum.lessThan(product) ? 1 : 0);\n        this.buffer[2] = sum.high();\n        let high = new Uint64(new Uint32Array(this.buffer.buffer, this.buffer.byteOffset + 8, 2));\n        high.plus(Uint64.multiply(L1, R3))\n            .plus(Uint64.multiply(L2, R2))\n            .plus(Uint64.multiply(L3, R1));\n        this.buffer[3] += Uint64.multiply(L0, R3)\n            .plus(Uint64.multiply(L1, R2))\n            .plus(Uint64.multiply(L2, R1))\n            .plus(Uint64.multiply(L3, R0)).low();\n        return this;\n    }\n    plus(other) {\n        let sums = new Uint32Array(4);\n        sums[3] = (this.buffer[3] + other.buffer[3]) >>> 0;\n        sums[2] = (this.buffer[2] + other.buffer[2]) >>> 0;\n        sums[1] = (this.buffer[1] + other.buffer[1]) >>> 0;\n        sums[0] = (this.buffer[0] + other.buffer[0]) >>> 0;\n        if (sums[0] < (this.buffer[0] >>> 0)) {\n            ++sums[1];\n        }\n        if (sums[1] < (this.buffer[1] >>> 0)) {\n            ++sums[2];\n        }\n        if (sums[2] < (this.buffer[2] >>> 0)) {\n            ++sums[3];\n        }\n        this.buffer[3] = sums[3];\n        this.buffer[2] = sums[2];\n        this.buffer[1] = sums[1];\n        this.buffer[0] = sums[0];\n        return this;\n    }\n    hex() {\n        return `${intAsHex(this.buffer[3])} ${intAsHex(this.buffer[2])} ${intAsHex(this.buffer[1])} ${intAsHex(this.buffer[0])}`;\n    }\n    /** @nocollapse */\n    static multiply(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.times(right);\n    }\n    /** @nocollapse */\n    static add(left, right) {\n        let rtrn = new Int128(new Uint32Array(left.buffer));\n        return rtrn.plus(right);\n    }\n    /** @nocollapse */\n    static from(val, out_buffer = new Uint32Array(4)) {\n        return Int128.fromString(typeof (val) === 'string' ? val : val.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromNumber(num, out_buffer = new Uint32Array(4)) {\n        // Always parse numbers as strings - pulling out high and low bits\n        // directly seems to lose precision sometimes\n        // For example:\n        //     > -4613034156400212000 >>> 0\n        //     721782784\n        // The correct lower 32-bits are 721782752\n        return Int128.fromString(num.toString(), out_buffer);\n    }\n    /** @nocollapse */\n    static fromString(str, out_buffer = new Uint32Array(4)) {\n        // TODO: Assert that out_buffer is 0 and length = 4\n        const negate = str.startsWith('-');\n        const length = str.length;\n        let out = new Int128(out_buffer);\n        for (let posn = negate ? 1 : 0; posn < length;) {\n            const group = kInt32DecimalDigits < length - posn ?\n                kInt32DecimalDigits : length - posn;\n            const chunk = new Int128(new Uint32Array([parseInt(str.substr(posn, group), 10), 0, 0, 0]));\n            const multiple = new Int128(new Uint32Array([kPowersOfTen[group], 0, 0, 0]));\n            out.times(multiple);\n            out.plus(chunk);\n            posn += group;\n        }\n        return negate ? out.negate() : out;\n    }\n    /** @nocollapse */\n    static convertArray(values) {\n        // TODO: Distinguish between string and number at compile-time\n        const data = new Uint32Array(values.length * 4);\n        for (let i = -1, n = values.length; ++i < n;) {\n            Int128.from(values[i], new Uint32Array(data.buffer, data.byteOffset + 4 * 4 * i, 4));\n        }\n        return data;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { Data } from '../data';\nimport { Field } from '../schema';\nimport { DataType } from '../type';\nimport { Visitor } from '../visitor';\nimport { packBools } from '../util/bit';\nimport { Int64, Int128 } from '../util/int';\nimport { UnionMode, DateUnit } from '../enum';\nimport { toArrayBufferView } from '../util/buffer';\nconst utf8Encoder = new TextEncoder('utf-8');\nexport class VectorLoader extends Visitor {\n    constructor(bytes, nodes, buffers) {\n        super();\n        this.nodesIndex = -1;\n        this.buffersIndex = -1;\n        this.bytes = bytes;\n        this.nodes = nodes;\n        this.buffers = buffers;\n    }\n    visit(node) {\n        return super.visit(node instanceof Field ? node.type : node);\n    }\n    visitNull(type, { length, nullCount } = this.nextFieldNode()) { return Data.Null(type, 0, length, nullCount, this.readNullBitmap(type, nullCount)); }\n    visitBool(type, { length, nullCount } = this.nextFieldNode()) { return Data.Bool(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitInt(type, { length, nullCount } = this.nextFieldNode()) { return Data.Int(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFloat(type, { length, nullCount } = this.nextFieldNode()) { return Data.Float(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitUtf8(type, { length, nullCount } = this.nextFieldNode()) { return Data.Utf8(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Binary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.readData(type)); }\n    visitFixedSizeBinary(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeBinary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDate(type, { length, nullCount } = this.nextFieldNode()) { return Data.Date(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTimestamp(type, { length, nullCount } = this.nextFieldNode()) { return Data.Timestamp(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitTime(type, { length, nullCount } = this.nextFieldNode()) { return Data.Time(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitDecimal(type, { length, nullCount } = this.nextFieldNode()) { return Data.Decimal(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitList(type, { length, nullCount } = this.nextFieldNode()) { return Data.List(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readOffsets(type), this.visit(type.children[0])); }\n    visitStruct(type, { length, nullCount } = this.nextFieldNode()) { return Data.Struct(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    visitUnion(type) { return type.mode === UnionMode.Sparse ? this.visitSparseUnion(type) : this.visitDenseUnion(type); }\n    visitDenseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.readOffsets(type), this.visitMany(type.children)); }\n    visitSparseUnion(type, { length, nullCount } = this.nextFieldNode()) { return Data.Union(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readTypeIds(type), this.visitMany(type.children)); }\n    visitDictionary(type, { length, nullCount } = this.nextFieldNode()) { return Data.Dictionary(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type.indices)); }\n    visitInterval(type, { length, nullCount } = this.nextFieldNode()) { return Data.Interval(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.readData(type)); }\n    visitFixedSizeList(type, { length, nullCount } = this.nextFieldNode()) { return Data.FixedSizeList(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visit(type.children[0])); }\n    visitMap(type, { length, nullCount } = this.nextFieldNode()) { return Data.Map(type, 0, length, nullCount, this.readNullBitmap(type, nullCount), this.visitMany(type.children)); }\n    nextFieldNode() { return this.nodes[++this.nodesIndex]; }\n    nextBufferRange() { return this.buffers[++this.buffersIndex]; }\n    readNullBitmap(type, nullCount, buffer = this.nextBufferRange()) {\n        return nullCount > 0 && this.readData(type, buffer) || new Uint8Array(0);\n    }\n    readOffsets(type, buffer) { return this.readData(type, buffer); }\n    readTypeIds(type, buffer) { return this.readData(type, buffer); }\n    readData(_type, { length, offset } = this.nextBufferRange()) {\n        return this.bytes.subarray(offset, offset + length);\n    }\n}\nexport class JSONVectorLoader extends VectorLoader {\n    constructor(sources, nodes, buffers) {\n        super(new Uint8Array(0), nodes, buffers);\n        this.sources = sources;\n    }\n    readNullBitmap(_type, nullCount, { offset } = this.nextBufferRange()) {\n        return nullCount <= 0 ? new Uint8Array(0) : packBools(this.sources[offset]);\n    }\n    readOffsets(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int32Array, this.sources[offset]));\n    }\n    readTypeIds(_type, { offset } = this.nextBufferRange()) {\n        return toArrayBufferView(Uint8Array, toArrayBufferView(Int8Array, this.sources[offset]));\n    }\n    readData(type, { offset } = this.nextBufferRange()) {\n        const { sources } = this;\n        if (DataType.isTimestamp(type)) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if ((DataType.isInt(type) || DataType.isTime(type)) && type.bitWidth === 64) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDate(type) && type.unit === DateUnit.MILLISECOND) {\n            return toArrayBufferView(Uint8Array, Int64.convertArray(sources[offset]));\n        }\n        else if (DataType.isDecimal(type)) {\n            return toArrayBufferView(Uint8Array, Int128.convertArray(sources[offset]));\n        }\n        else if (DataType.isBinary(type) || DataType.isFixedSizeBinary(type)) {\n            return binaryDataFromJSON(sources[offset]);\n        }\n        else if (DataType.isBool(type)) {\n            return packBools(sources[offset]);\n        }\n        else if (DataType.isUtf8(type)) {\n            return utf8Encoder.encode(sources[offset].join(''));\n        }\n        return toArrayBufferView(Uint8Array, toArrayBufferView(type.ArrayType, sources[offset].map((x) => +x)));\n    }\n}\nfunction binaryDataFromJSON(values) {\n    // \"DATA\": [\"49BC7D5B6C47D2\",\"3F5FB6D9322026\"]\n    // There are definitely more efficient ways to do this... but it gets the\n    // job done.\n    const joined = values.join('');\n    const data = new Uint8Array(joined.length / 2);\n    for (let i = 0; i < joined.length; i += 2) {\n        data[i >> 1] = parseInt(joined.substr(i, 2), 16);\n    }\n    return data;\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { flatbuffers } from 'flatbuffers';\nvar Long = flatbuffers.Long;\nimport * as Schema_ from '../fb/Schema';\nimport { Visitor } from '../visitor';\nvar Null = Schema_.org.apache.arrow.flatbuf.Null;\nvar Int = Schema_.org.apache.arrow.flatbuf.Int;\nvar FloatingPoint = Schema_.org.apache.arrow.flatbuf.FloatingPoint;\nvar Binary = Schema_.org.apache.arrow.flatbuf.Binary;\nvar Bool = Schema_.org.apache.arrow.flatbuf.Bool;\nvar Utf8 = Schema_.org.apache.arrow.flatbuf.Utf8;\nvar Decimal = Schema_.org.apache.arrow.flatbuf.Decimal;\nvar Date = Schema_.org.apache.arrow.flatbuf.Date;\nvar Time = Schema_.org.apache.arrow.flatbuf.Time;\nvar Timestamp = Schema_.org.apache.arrow.flatbuf.Timestamp;\nvar Interval = Schema_.org.apache.arrow.flatbuf.Interval;\nvar List = Schema_.org.apache.arrow.flatbuf.List;\nvar Struct = Schema_.org.apache.arrow.flatbuf.Struct_;\nvar Union = Schema_.org.apache.arrow.flatbuf.Union;\nvar DictionaryEncoding = Schema_.org.apache.arrow.flatbuf.DictionaryEncoding;\nvar FixedSizeBinary = Schema_.org.apache.arrow.flatbuf.FixedSizeBinary;\nvar FixedSizeList = Schema_.org.apache.arrow.flatbuf.FixedSizeList;\nvar Map_ = Schema_.org.apache.arrow.flatbuf.Map;\nexport class TypeAssembler extends Visitor {\n    visit(node, builder) {\n        return (node == null || builder == null) ? undefined : super.visit(node, builder);\n    }\n    visitNull(_node, b) {\n        Null.startNull(b);\n        return Null.endNull(b);\n    }\n    visitInt(node, b) {\n        Int.startInt(b);\n        Int.addBitWidth(b, node.bitWidth);\n        Int.addIsSigned(b, node.isSigned);\n        return Int.endInt(b);\n    }\n    visitFloat(node, b) {\n        FloatingPoint.startFloatingPoint(b);\n        FloatingPoint.addPrecision(b, node.precision);\n        return FloatingPoint.endFloatingPoint(b);\n    }\n    visitBinary(_node, b) {\n        Binary.startBinary(b);\n        return Binary.endBinary(b);\n    }\n    visitBool(_node, b) {\n        Bool.startBool(b);\n        return Bool.endBool(b);\n    }\n    visitUtf8(_node, b) {\n        Utf8.startUtf8(b);\n        return Utf8.endUtf8(b);\n    }\n    visitDecimal(node, b) {\n        Decimal.startDecimal(b);\n        Decimal.addScale(b, node.scale);\n        Decimal.addPrecision(b, node.precision);\n        return Decimal.endDecimal(b);\n    }\n    visitDate(node, b) {\n        Date.startDate(b);\n        Date.addUnit(b, node.unit);\n        return Date.endDate(b);\n    }\n    visitTime(node, b) {\n        Time.startTime(b);\n        Time.addUnit(b, node.unit);\n        Time.addBitWidth(b, node.bitWidth);\n        return Time.endTime(b);\n    }\n    visitTimestamp(node, b) {\n        const timezone = (node.timezone && b.createString(node.timezone)) || undefined;\n        Timestamp.startTimestamp(b);\n        Timestamp.addUnit(b, node.unit);\n        if (timezone !== undefined) {\n            Timestamp.addTimezone(b, timezone);\n        }\n        return Timestamp.endTimestamp(b);\n    }\n    visitInterval(node, b) {\n        Interval.startInterval(b);\n        Interval.addUnit(b, node.unit);\n        return Interval.endInterval(b);\n    }\n    visitList(_node, b) {\n        List.startList(b);\n        return List.endList(b);\n    }\n    visitStruct(_node, b) {\n        Struct.startStruct_(b);\n        return Struct.endStruct_(b);\n    }\n    visitUnion(node, b) {\n        Union.startTypeIdsVector(b, node.typeIds.length);\n        const typeIds = Union.createTypeIdsVector(b, node.typeIds);\n        Union.startUnion(b);\n        Union.addMode(b, node.mode);\n        Union.addTypeIds(b, typeIds);\n        return Union.endUnion(b);\n    }\n    visitDictionary(node, b) {\n        const indexType = this.visit(node.indices, b);\n        DictionaryEncoding.startDictionaryEncoding(b);\n        DictionaryEncoding.addId(b, new Long(node.id, 0));\n        DictionaryEncoding.addIsOrdered(b, node.isOrdered);\n        if (indexType !== undefined) {\n            DictionaryEncoding.addIndexType(b, indexType);\n        }\n        return DictionaryEncoding.endDictionaryEncoding(b);\n    }\n    visitFixedSizeBinary(node, b) {\n        FixedSizeBinary.startFixedSizeBinary(b);\n        FixedSizeBinary.addByteWidth(b, node.byteWidth);\n        return FixedSizeBinary.endFixedSizeBinary(b);\n    }\n    visitFixedSizeList(node, b) {\n        FixedSizeList.startFixedSizeList(b);\n        FixedSizeList.addListSize(b, node.listSize);\n        return FixedSizeList.endFixedSizeList(b);\n    }\n    visitMap(node, b) {\n        Map_.startMap(b);\n        Map_.addKeysSorted(b, node.keysSorted);\n        return Map_.endMap(b);\n    }\n}\nexport const instance = new TypeAssembler();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Schema, Field } from '../../schema';\nimport { DataType, Dictionary, Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct, Union, Bool, Null, Int, Float, Date_, Time, Interval, Timestamp, Int32, } from '../../type';\nimport { DictionaryBatch, RecordBatch, FieldNode, BufferRegion } from './message';\nimport { TimeUnit, Precision, IntervalUnit, UnionMode, DateUnit } from '../../enum';\nexport function schemaFromJSON(_schema, dictionaries = new Map(), dictionaryFields = new Map()) {\n    return new Schema(schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields), customMetadataFromJSON(_schema['customMetadata']), dictionaries, dictionaryFields);\n}\nexport function recordBatchFromJSON(b) {\n    return new RecordBatch(b['count'], fieldNodesFromJSON(b['columns']), buffersFromJSON(b['columns']));\n}\nexport function dictionaryBatchFromJSON(b) {\n    return new DictionaryBatch(recordBatchFromJSON(b['data']), b['id'], b['isDelta']);\n}\nfunction schemaFieldsFromJSON(_schema, dictionaries, dictionaryFields) {\n    return (_schema['fields'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\nfunction fieldChildrenFromJSON(_field, dictionaries, dictionaryFields) {\n    return (_field['children'] || []).filter(Boolean).map((f) => Field.fromJSON(f, dictionaries, dictionaryFields));\n}\nfunction fieldNodesFromJSON(xs) {\n    return (xs || []).reduce((fieldNodes, column) => [\n        ...fieldNodes,\n        new FieldNode(column['count'], nullCountFromJSON(column['VALIDITY'])),\n        ...fieldNodesFromJSON(column['children'])\n    ], []);\n}\nfunction buffersFromJSON(xs, buffers = []) {\n    for (let i = -1, n = (xs || []).length; ++i < n;) {\n        const column = xs[i];\n        column['VALIDITY'] && buffers.push(new BufferRegion(buffers.length, column['VALIDITY'].length));\n        column['OFFSET'] && buffers.push(new BufferRegion(buffers.length, column['OFFSET'].length));\n        column['TYPE'] && buffers.push(new BufferRegion(buffers.length, column['TYPE'].length));\n        column['DATA'] && buffers.push(new BufferRegion(buffers.length, column['DATA'].length));\n        buffers = buffersFromJSON(column['children'], buffers);\n    }\n    return buffers;\n}\nfunction nullCountFromJSON(validity) {\n    return (validity || []).reduce((sum, val) => sum + +(val === 0), 0);\n}\nexport function fieldFromJSON(_field, dictionaries, dictionaryFields) {\n    let id;\n    let keys;\n    let field;\n    let dictMeta;\n    let type;\n    let dictType;\n    let dictField;\n    // If no dictionary encoding, or in the process of decoding the children of a dictionary-encoded field\n    if (!dictionaries || !dictionaryFields || !(dictMeta = _field['dictionary'])) {\n        type = typeFromJSON(_field, fieldChildrenFromJSON(_field, dictionaries, dictionaryFields));\n        field = new Field(_field['name'], type, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n    }\n    // tslint:disable\n    // If dictionary encoded and the first time we've seen this dictionary id, decode\n    // the data type and child fields, then wrap in a Dictionary type and insert the\n    // data type into the dictionary types map.\n    else if (!dictionaries.has(id = dictMeta['id'])) {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictionaries.set(id, type = typeFromJSON(_field, fieldChildrenFromJSON(_field)));\n        dictType = new Dictionary(type, keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.set(id, [field = dictField]);\n    }\n    // If dictionary encoded, and have already seen this dictionary Id in the schema, then reuse the\n    // data type and wrap in a new Dictionary type and field.\n    else {\n        // a dictionary index defaults to signed 32 bit int if unspecified\n        keys = (keys = dictMeta['indexType']) ? indexTypeFromJSON(keys) : new Int32();\n        dictType = new Dictionary(dictionaries.get(id), keys, id, dictMeta['isOrdered']);\n        dictField = new Field(_field['name'], dictType, _field['nullable'], customMetadataFromJSON(_field['customMetadata']));\n        dictionaryFields.get(id).push(field = dictField);\n    }\n    return field || null;\n}\nfunction customMetadataFromJSON(_metadata) {\n    return new Map(Object.entries(_metadata || {}));\n}\nfunction indexTypeFromJSON(_type) {\n    return new Int(_type['isSigned'], _type['bitWidth']);\n}\nfunction typeFromJSON(f, children) {\n    const typeId = f['type']['name'];\n    switch (typeId) {\n        case 'NONE': return new DataType();\n        case 'null': return new Null();\n        case 'binary': return new Binary();\n        case 'utf8': return new Utf8();\n        case 'bool': return new Bool();\n        case 'list': return new List((children || [])[0]);\n        case 'struct': return new Struct(children || []);\n    }\n    switch (typeId) {\n        case 'int': {\n            const t = f['type'];\n            return new Int(t['isSigned'], t['bitWidth']);\n        }\n        case 'floatingpoint': {\n            const t = f['type'];\n            return new Float(Precision[t['precision']]);\n        }\n        case 'decimal': {\n            const t = f['type'];\n            return new Decimal(t['scale'], t['precision']);\n        }\n        case 'date': {\n            const t = f['type'];\n            return new Date_(DateUnit[t['unit']]);\n        }\n        case 'time': {\n            const t = f['type'];\n            return new Time(TimeUnit[t['unit']], t['bitWidth']);\n        }\n        case 'timestamp': {\n            const t = f['type'];\n            return new Timestamp(TimeUnit[t['unit']], t['timezone']);\n        }\n        case 'interval': {\n            const t = f['type'];\n            return new Interval(IntervalUnit[t['unit']]);\n        }\n        case 'union': {\n            const t = f['type'];\n            return new Union(UnionMode[t['mode']], (t['typeIds'] || []), children || []);\n        }\n        case 'fixedsizebinary': {\n            const t = f['type'];\n            return new FixedSizeBinary(t['byteWidth']);\n        }\n        case 'fixedsizelist': {\n            const t = f['type'];\n            return new FixedSizeList(t['listSize'], (children || [])[0]);\n        }\n        case 'map': {\n            const t = f['type'];\n            return new Map_(children || [], t['keysSorted']);\n        }\n    }\n    throw new Error(`Unrecognized type: \"${typeId}\"`);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MessageHeader } from '../enum';\nimport { flatbuffers } from 'flatbuffers';\nvar ByteBuffer = flatbuffers.ByteBuffer;\nimport { Message } from './metadata/message';\nimport { isFileHandle } from '../util/compat';\nimport { AsyncRandomAccessFile } from '../io/file';\nimport { toUint8Array } from '../util/buffer';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { ArrowJSON, ITERATOR_DONE } from '../io/interfaces';\nconst invalidMessageType = (type) => `Expected ${MessageHeader[type]} Message in stream, but was null or length 0.`;\nconst nullMessage = (type) => `Header pointer of flatbuffer-encoded ${MessageHeader[type]} Message is null or length 0.`;\nconst invalidMessageMetadata = (expected, actual) => `Expected to read ${expected} metadata bytes, but only read ${actual}.`;\nconst invalidMessageBodyLength = (expected, actual) => `Expected to read ${expected} bytes for message body, but only read ${actual}.`;\nexport class MessageReader {\n    constructor(source) {\n        this.source = source instanceof ByteStream ? source : new ByteStream(source);\n    }\n    [Symbol.iterator]() { return this; }\n    next() {\n        let r;\n        if ((r = this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    throw(value) { return this.source.throw(value); }\n    return(value) { return this.source.return(value); }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    readMetadataLength() {\n        const buf = this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0));\n        return { done: len <= 0, value: len };\n    }\n    readMetadata(metadataLength) {\n        const buf = this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\nexport class AsyncMessageReader {\n    constructor(source, byteLength) {\n        this.source = source instanceof AsyncByteStream ? source\n            : (isFileHandle(source) && typeof byteLength === 'number')\n                ? new AsyncRandomAccessFile(source, byteLength)\n                : new AsyncByteStream(source);\n    }\n    [Symbol.asyncIterator]() { return this; }\n    async next() {\n        let r;\n        if ((r = await this.readMetadataLength()).done) {\n            return ITERATOR_DONE;\n        }\n        if ((r = await this.readMetadata(r.value)).done) {\n            return ITERATOR_DONE;\n        }\n        return r;\n    }\n    async throw(value) { return await this.source.throw(value); }\n    async return(value) { return await this.source.return(value); }\n    async readMessage(type) {\n        let r;\n        if ((r = await this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    async readMessageBody(bodyLength) {\n        if (bodyLength <= 0) {\n            return new Uint8Array(0);\n        }\n        const buf = toUint8Array(await this.source.read(bodyLength));\n        if (buf.byteLength < bodyLength) {\n            throw new Error(invalidMessageBodyLength(bodyLength, buf.byteLength));\n        }\n        // Work around bugs in fs.ReadStream's internal Buffer pooling, see: https://github.com/nodejs/node/issues/24817\n        return buf.byteOffset % 8 === 0 ? buf : buf.slice();\n    }\n    async readSchema(throwIfNull = false) {\n        const type = MessageHeader.Schema;\n        const message = await this.readMessage(type);\n        const schema = message && message.header();\n        if (throwIfNull && !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n    async readMetadataLength() {\n        const buf = await this.source.read(PADDING);\n        const bb = buf && new ByteBuffer(buf);\n        const len = +(bb && bb.readInt32(0));\n        return { done: len <= 0, value: len };\n    }\n    async readMetadata(metadataLength) {\n        const buf = await this.source.read(metadataLength);\n        if (!buf) {\n            return ITERATOR_DONE;\n        }\n        if (buf.byteLength < metadataLength) {\n            throw new Error(invalidMessageMetadata(metadataLength, buf.byteLength));\n        }\n        return { done: false, value: Message.decode(buf) };\n    }\n}\nexport class JSONMessageReader extends MessageReader {\n    constructor(source) {\n        super(new Uint8Array(0));\n        this._schema = false;\n        this._body = [];\n        this._batchIndex = 0;\n        this._dictionaryIndex = 0;\n        this._json = source instanceof ArrowJSON ? source : new ArrowJSON(source);\n    }\n    next() {\n        const { _json, _batchIndex, _dictionaryIndex } = this;\n        const numBatches = _json.batches.length;\n        const numDictionaries = _json.dictionaries.length;\n        if (!this._schema) {\n            this._schema = true;\n            const message = Message.fromJSON(_json.schema, MessageHeader.Schema);\n            return { value: message, done: _batchIndex >= numBatches && _dictionaryIndex >= numDictionaries };\n        }\n        if (_dictionaryIndex < numDictionaries) {\n            const batch = _json.dictionaries[this._dictionaryIndex++];\n            this._body = batch['data']['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.DictionaryBatch);\n            return { done: false, value: message };\n        }\n        if (_batchIndex < numBatches) {\n            const batch = _json.batches[this._batchIndex++];\n            this._body = batch['columns'];\n            const message = Message.fromJSON(batch, MessageHeader.RecordBatch);\n            return { done: false, value: message };\n        }\n        this._body = [];\n        return ITERATOR_DONE;\n    }\n    readMessageBody(_bodyLength) {\n        return flattenDataSources(this._body);\n        function flattenDataSources(xs) {\n            return (xs || []).reduce((buffers, column) => [\n                ...buffers,\n                ...(column['VALIDITY'] && [column['VALIDITY']] || []),\n                ...(column['OFFSET'] && [column['OFFSET']] || []),\n                ...(column['TYPE'] && [column['TYPE']] || []),\n                ...(column['DATA'] && [column['DATA']] || []),\n                ...flattenDataSources(column['children'])\n            ], []);\n        }\n    }\n    readMessage(type) {\n        let r;\n        if ((r = this.next()).done) {\n            return null;\n        }\n        if ((type != null) && r.value.headerType !== type) {\n            throw new Error(invalidMessageType(type));\n        }\n        return r.value;\n    }\n    readSchema() {\n        const type = MessageHeader.Schema;\n        const message = this.readMessage(type);\n        const schema = message && message.header();\n        if (!message || !schema) {\n            throw new Error(nullMessage(type));\n        }\n        return schema;\n    }\n}\nexport const PADDING = 4;\nexport const MAGIC_STR = 'ARROW1';\nexport const MAGIC = new Uint8Array(MAGIC_STR.length);\nfor (let i = 0; i < MAGIC_STR.length; i += 1 | 0) {\n    MAGIC[i] = MAGIC_STR.charCodeAt(i);\n}\nexport function checkForMagicArrowString(buffer, index = 0) {\n    for (let i = -1, n = MAGIC.length; ++i < n;) {\n        if (MAGIC[i] !== buffer[index + i]) {\n            return false;\n        }\n    }\n    return true;\n}\nexport function isValidArrowFile(bb) {\n    let fileLength = bb.capacity(), footerLength, lengthOffset;\n    if ((fileLength < magicX2AndPadding /*                                  Arrow buffer too small */) ||\n        (!checkForMagicArrowString(bb.bytes(), 0) /*                        Missing magic start    */) ||\n        (!checkForMagicArrowString(bb.bytes(), fileLength - magicLength) /* Missing magic end      */) ||\n        ( /*                                                                 Invalid footer length  */(footerLength = bb.readInt32(lengthOffset = fileLength - magicAndPadding)) < 1 &&\n            (footerLength + lengthOffset > fileLength))) {\n        return false;\n    }\n    return true;\n}\nexport const magicLength = MAGIC.length;\nexport const magicAndPadding = magicLength + PADDING;\nexport const magicX2AndPadding = magicLength * 2 + PADDING;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { MessageHeader } from '../enum';\nimport { Footer } from './metadata/file';\nimport streamAdapters from '../io/adapters';\nimport { RecordBatch } from '../recordbatch';\nimport { ByteStream, AsyncByteStream } from '../io/stream';\nimport { toUint8Array } from '../util/buffer';\nimport { RandomAccessFile, AsyncRandomAccessFile } from '../io/file';\nimport { VectorLoader, JSONVectorLoader } from '../visitor/vectorloader';\nimport { ArrowJSON, ReadableInterop, ITERATOR_DONE } from '../io/interfaces';\nimport { isPromise, isArrowJSON, isFileHandle, isFetchResponse, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';\nimport { MessageReader, AsyncMessageReader, checkForMagicArrowString, magicLength, magicAndPadding, magicX2AndPadding, JSONMessageReader } from './message';\nexport class RecordBatchReader extends ReadableInterop {\n    constructor(impl) {\n        super();\n        this.impl = impl;\n    }\n    get closed() { return this.impl.closed; }\n    get schema() { return this.impl.schema; }\n    get autoClose() { return this.impl.autoClose; }\n    get dictionaries() { return this.impl.dictionaries; }\n    get numDictionaries() { return this.impl.numDictionaries; }\n    get numRecordBatches() { return this.impl.numRecordBatches; }\n    next(value) { return this.impl.next(value); }\n    throw(value) { return this.impl.throw(value); }\n    return(value) { return this.impl.return(value); }\n    reset(schema) { this.impl.reset(schema); return this; }\n    toReadableDOMStream() { return streamAdapters.toReadableDOMStream(this); }\n    toReadableNodeStream() { return streamAdapters.toReadableNodeStream(this, { objectMode: true }); }\n    isSync() {\n        return (this instanceof RecordBatchFileReader) || (this instanceof RecordBatchStreamReader);\n    }\n    isAsync() {\n        return (this instanceof AsyncRecordBatchFileReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    isFile() {\n        return (this instanceof RecordBatchFileReader) || (this instanceof AsyncRecordBatchFileReader);\n    }\n    isStream() {\n        return (this instanceof RecordBatchStreamReader) || (this instanceof AsyncRecordBatchStreamReader);\n    }\n    /** @nocollapse */\n    static throughNode() { throw new Error(`\"asNodeStream\" not available in this environment`); }\n    /** @nocollapse */\n    static throughDOM() {\n        throw new Error(`\"asDOMStream\" not available in this environment`);\n    }\n    /** @nocollapse */\n    static from(source) {\n        if (source instanceof RecordBatchReader) {\n            return source;\n        }\n        else if (isArrowJSON(source)) {\n            return RecordBatchReader.fromJSON(source);\n        }\n        else if (isFileHandle(source)) {\n            return RecordBatchReader.fromFileHandle(source);\n        }\n        else if (isPromise(source)) {\n            return (async () => await RecordBatchReader.from(await source))();\n        }\n        else if (isPromise(source)) {\n            return (async () => await RecordBatchReader.from(await source))();\n        }\n        else if (isFetchResponse(source) || isReadableDOMStream(source) || isReadableNodeStream(source) || isAsyncIterable(source)) {\n            return RecordBatchReader.fromAsyncByteStream(new AsyncByteStream(source));\n        }\n        return RecordBatchReader.fromByteStream(new ByteStream(source));\n    }\n    static fromJSON(source) {\n        return new RecordBatchStreamReader(new ArrowJSON(source));\n    }\n    static fromByteStream(source) {\n        const bytes = source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n                ? new RecordBatchFileReader(source.read())\n                : new RecordBatchStreamReader(source)\n            : new RecordBatchStreamReader(function* () { }());\n    }\n    static async fromAsyncByteStream(source) {\n        const bytes = await source.peek((magicLength + 7) & ~7);\n        return bytes && bytes.byteLength >= 4\n            ? checkForMagicArrowString(bytes)\n                ? new RecordBatchFileReader(await source.read())\n                : new AsyncRecordBatchStreamReader(source)\n            : new AsyncRecordBatchStreamReader(async function* () { }());\n    }\n    static async fromFileHandle(source) {\n        const { size } = await source.stat();\n        const file = new AsyncRandomAccessFile(source, size);\n        if (size >= magicX2AndPadding) {\n            if (checkForMagicArrowString(await file.readAt(0, (magicLength + 7) & ~7))) {\n                return new AsyncRecordBatchFileReader(file);\n            }\n        }\n        return new AsyncRecordBatchStreamReader(file);\n    }\n}\nexport class RecordBatchFileReader extends RecordBatchReader {\n    constructor(source, dictionaries) {\n        if (source instanceof AsyncRecordBatchFileReaderImpl) {\n            super(source);\n        }\n        else if (source instanceof RandomAccessFile) {\n            super(new RecordBatchFileReaderImpl(source, dictionaries));\n        }\n        else {\n            super(new RecordBatchFileReaderImpl(new RandomAccessFile(toUint8Array(source)), dictionaries));\n        }\n    }\n    get footer() { return this.impl.footer; }\n    cancel() { this.impl.close(); }\n    open(autoClose) { this.impl.open(autoClose); return this; }\n    readRecordBatch(index) { return this.impl.readRecordBatch(index); }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    async *[Symbol.asyncIterator]() { yield* this[Symbol.iterator](); }\n}\nexport class RecordBatchStreamReader extends RecordBatchReader {\n    constructor(source, dictionaries) {\n        super(isArrowJSON(source)\n            ? new RecordBatchJSONReaderImpl(new JSONMessageReader(source), dictionaries)\n            : new RecordBatchStreamReaderImpl(new MessageReader(source), dictionaries));\n    }\n    cancel() { this.impl.close(); }\n    open(autoClose) { this.impl.open(autoClose); return this; }\n    [Symbol.iterator]() { return this.impl[Symbol.iterator](); }\n    async *[Symbol.asyncIterator]() { yield* this[Symbol.iterator](); }\n}\nexport class AsyncRecordBatchStreamReader extends RecordBatchReader {\n    constructor(source, byteLength) {\n        super(new AsyncRecordBatchStreamReaderImpl(new AsyncMessageReader(source, byteLength)));\n    }\n    async cancel() { await this.impl.close(); }\n    async open(autoClose) { await this.impl.open(autoClose); return this; }\n    [Symbol.asyncIterator]() { return this.impl[Symbol.asyncIterator](); }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchStreamReader is not Iterable`); }\n}\nexport class AsyncRecordBatchFileReader extends RecordBatchReader {\n    constructor(source, ...rest) {\n        let [byteLength, dictionaries] = rest;\n        if (byteLength && typeof byteLength !== 'number') {\n            dictionaries = byteLength;\n        }\n        let file = source instanceof AsyncRandomAccessFile ? source : new AsyncRandomAccessFile(source, byteLength);\n        super(new AsyncRecordBatchFileReaderImpl(file, dictionaries));\n    }\n    get footer() { return this.impl.footer; }\n    async cancel() { await this.impl.close(); }\n    async open(autoClose) { await this.impl.open(autoClose); return this; }\n    readRecordBatch(index) { return this.impl.readRecordBatch(index); }\n    [Symbol.asyncIterator]() { return this.impl[Symbol.asyncIterator](); }\n    [Symbol.iterator]() { throw new Error(`AsyncRecordBatchFileReader is not Iterable`); }\n}\nclass RecordBatchReaderImplBase {\n    constructor(dictionaries = new Map()) {\n        this.closed = false;\n        this.autoClose = true;\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.dictionaries = dictionaries;\n    }\n    get numDictionaries() { return this.dictionaryIndex; }\n    get numRecordBatches() { return this.recordBatchIndex; }\n    reset(schema) {\n        this.dictionaryIndex = 0;\n        this.recordBatchIndex = 0;\n        this.schema = schema;\n        this.dictionaries = new Map();\n        return this;\n    }\n    _loadRecordBatch(header, body) {\n        return new RecordBatch(this.schema, header.length, this._loadVectors(header, body, this.schema.fields));\n    }\n    _loadDictionaryBatch(header, body) {\n        const { id, isDelta, data } = header;\n        const { dictionaries, schema } = this;\n        if (isDelta || !dictionaries.get(id)) {\n            const type = schema.dictionaries.get(id);\n            const vector = (isDelta ? dictionaries.get(id).concat(Vector.new(this._loadVectors(data, body, [type])[0])) :\n                Vector.new(this._loadVectors(data, body, [type])[0]));\n            (schema.dictionaryFields.get(id) || []).forEach(({ type }) => type.dictionaryVector = vector);\n            return vector;\n        }\n        return dictionaries.get(id);\n    }\n    _loadVectors(header, body, types) {\n        return new VectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\nclass RecordBatchStreamReaderImpl extends RecordBatchReaderImplBase {\n    constructor(reader, dictionaries = new Map()) {\n        super(dictionaries);\n        this.reader = reader;\n    }\n    [Symbol.iterator]() {\n        return this;\n    }\n    close() {\n        if (!this.closed && (this.closed = true)) {\n            this.reset().reader.return();\n            this.reader = null;\n            this.dictionaries = null;\n        }\n        return this;\n    }\n    open(autoClose = this.autoClose) {\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = this.reader.readSchema()))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    throw(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    return(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message, { reader } = this;\n        while (message = this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return this.return();\n    }\n    readNextMessageAndValidate(type) {\n        return this.reader.readMessage(type);\n    }\n}\nclass AsyncRecordBatchStreamReaderImpl extends RecordBatchReaderImplBase {\n    constructor(reader, dictionaries = new Map()) {\n        super(dictionaries);\n        this.reader = reader;\n    }\n    [Symbol.asyncIterator]() {\n        return this;\n    }\n    async close() {\n        if (!this.closed && (this.closed = true)) {\n            await this.reset().reader.return();\n            this.reader = null;\n            this.dictionaries = null;\n        }\n        return this;\n    }\n    async open(autoClose) {\n        // default args in an async function crash closure-compiler at the moment\n        // so do this instead. https://github.com/google/closure-compiler/issues/3178\n        autoClose !== undefined || (autoClose = this.autoClose);\n        if (!this.closed) {\n            this.autoClose = autoClose;\n            if (!(this.schema || (this.schema = (await this.reader.readSchema())))) {\n                return this.close();\n            }\n        }\n        return this;\n    }\n    async throw(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.throw(value);\n        }\n        return ITERATOR_DONE;\n    }\n    async return(value) {\n        if (!this.closed && this.autoClose && (this.closed = true)) {\n            return await this.reset().reader.return(value);\n        }\n        return ITERATOR_DONE;\n    }\n    async next() {\n        if (this.closed) {\n            return ITERATOR_DONE;\n        }\n        let message, { reader } = this;\n        while (message = await this.readNextMessageAndValidate()) {\n            if (message.isSchema()) {\n                await this.reset(message.header());\n            }\n            else if (message.isRecordBatch()) {\n                this.recordBatchIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return { done: false, value: recordBatch };\n            }\n            else if (message.isDictionaryBatch()) {\n                this.dictionaryIndex++;\n                const header = message.header();\n                const buffer = await reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n        return await this.return();\n    }\n    async readNextMessageAndValidate(type) {\n        return await this.reader.readMessage(type);\n    }\n}\nclass RecordBatchFileReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(file, dictionaries = new Map()) {\n        super(new MessageReader(file), dictionaries);\n        this.file = file;\n    }\n    get numDictionaries() { return this.footer.numDictionaries; }\n    get numRecordBatches() { return this.footer.numRecordBatches; }\n    open(autoClose = this.autoClose) {\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return super.open(autoClose);\n    }\n    readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this.footer) {\n            this.open();\n        }\n        const block = this.footer.getRecordBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    readDictionaryBatch(index) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && this.file.seek(block.offset)) {\n            const message = this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    readFooter() {\n        const { file } = this;\n        const size = file.size;\n        const offset = size - magicAndPadding;\n        const length = file.readInt32(offset);\n        const buffer = file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    readNextMessageAndValidate(type) {\n        if (!this.footer) {\n            this.open();\n        }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && this.file.seek(block.offset)) {\n                return this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\nclass AsyncRecordBatchFileReaderImpl extends AsyncRecordBatchStreamReaderImpl {\n    constructor(file, dictionaries = new Map()) {\n        super(new AsyncMessageReader(file), dictionaries);\n        this.file = file;\n    }\n    get numDictionaries() { return this.footer.numDictionaries; }\n    get numRecordBatches() { return this.footer.numRecordBatches; }\n    async open(autoClose) {\n        // default args in an async function crash closure-compiler at the moment\n        // so do this instead. https://github.com/google/closure-compiler/issues/3178\n        autoClose !== undefined || (autoClose = this.autoClose);\n        if (!this.closed && !this.footer) {\n            this.schema = (this.footer = await this.readFooter()).schema;\n            for (const block of this.footer.dictionaryBatches()) {\n                block && this.readDictionaryBatch(this.dictionaryIndex++);\n            }\n        }\n        return await super.open(autoClose);\n    }\n    async readRecordBatch(index) {\n        if (this.closed) {\n            return null;\n        }\n        if (!this.footer) {\n            await this.open();\n        }\n        const block = this.footer.getRecordBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.RecordBatch);\n            if (message && message.isRecordBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const recordBatch = this._loadRecordBatch(header, buffer);\n                return recordBatch;\n            }\n        }\n        return null;\n    }\n    async readDictionaryBatch(index) {\n        const block = this.footer.getDictionaryBatch(index);\n        if (block && (await this.file.seek(block.offset))) {\n            const message = await this.reader.readMessage(MessageHeader.DictionaryBatch);\n            if (message && message.isDictionaryBatch()) {\n                const header = message.header();\n                const buffer = await this.reader.readMessageBody(message.bodyLength);\n                const vector = this._loadDictionaryBatch(header, buffer);\n                this.dictionaries.set(header.id, vector);\n            }\n        }\n    }\n    async readFooter() {\n        const { file } = this;\n        const offset = file.size - magicAndPadding;\n        const length = await file.readInt32(offset);\n        const buffer = await file.readAt(offset - length, length);\n        return Footer.decode(buffer);\n    }\n    async readNextMessageAndValidate(type) {\n        if (!this.footer) {\n            await this.open();\n        }\n        if (this.recordBatchIndex < this.numRecordBatches) {\n            const block = this.footer.getRecordBatch(this.recordBatchIndex);\n            if (block && await this.file.seek(block.offset)) {\n                return await this.reader.readMessage(type);\n            }\n        }\n        return null;\n    }\n}\nclass RecordBatchJSONReaderImpl extends RecordBatchStreamReaderImpl {\n    constructor(reader, dictionaries = new Map()) {\n        super(reader, dictionaries);\n        this.reader = reader;\n    }\n    _loadVectors(header, body, types) {\n        return new JSONVectorLoader(body, header.nodes, header.buffers).visitMany(types);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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WSxDQUFDLENBQUM7UUFEVixXQUFNLEdBQU4sTUFBTSxDQUFtQjtJQUUvQyxDQUFDO0lBQ1MsWUFBWSxDQUFDLE1BQTRCLEVBQUUsSUFBUyxFQUFFLEtBQTJCO1FBQ3ZGLE9BQU8sSUFBSSxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLEtBQUssRUFBRSxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ3JGLENBQUM7Q0FDSiIsImZpbGUiOiJpcGMvcmVhZGVyLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgTWVzc2FnZUhlYWRlciB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgRm9vdGVyIH0gZnJvbSAnLi9tZXRhZGF0YS9maWxlJztcbmltcG9ydCB7IFNjaGVtYSwgRmllbGQgfSBmcm9tICcuLi9zY2hlbWEnO1xuaW1wb3J0IHN0cmVhbUFkYXB0ZXJzIGZyb20gJy4uL2lvL2FkYXB0ZXJzJztcbmltcG9ydCB7IE1lc3NhZ2UgfSBmcm9tICcuL21ldGFkYXRhL21lc3NhZ2UnO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgKiBhcyBtZXRhZGF0YSBmcm9tICcuL21ldGFkYXRhL21lc3NhZ2UnO1xuaW1wb3J0IHsgQnl0ZVN0cmVhbSwgQXN5bmNCeXRlU3RyZWFtIH0gZnJvbSAnLi4vaW8vc3RyZWFtJztcbmltcG9ydCB7IEFycmF5QnVmZmVyVmlld0lucHV0LCB0b1VpbnQ4QXJyYXkgfSBmcm9tICcuLi91dGlsL2J1ZmZlcic7XG5pbXBvcnQgeyBSYW5kb21BY2Nlc3NGaWxlLCBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUgfSBmcm9tICcuLi9pby9maWxlJztcbmltcG9ydCB7IFZlY3RvckxvYWRlciwgSlNPTlZlY3RvckxvYWRlciB9IGZyb20gJy4uL3Zpc2l0b3IvdmVjdG9ybG9hZGVyJztcbmltcG9ydCB7IEFycm93SlNPTiwgQXJyb3dKU09OTGlrZSwgRmlsZUhhbmRsZSwgUmVhZGFibGVJbnRlcm9wLCBJVEVSQVRPUl9ET05FIH0gZnJvbSAnLi4vaW8vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBpc1Byb21pc2UsIGlzQXJyb3dKU09OLCBpc0ZpbGVIYW5kbGUsIGlzRmV0Y2hSZXNwb25zZSwgaXNBc3luY0l0ZXJhYmxlLCBpc1JlYWRhYmxlRE9NU3RyZWFtLCBpc1JlYWRhYmxlTm9kZVN0cmVhbSB9IGZyb20gJy4uL3V0aWwvY29tcGF0JztcbmltcG9ydCB7IE1lc3NhZ2VSZWFkZXIsIEFzeW5jTWVzc2FnZVJlYWRlciwgY2hlY2tGb3JNYWdpY0Fycm93U3RyaW5nLCBtYWdpY0xlbmd0aCwgbWFnaWNBbmRQYWRkaW5nLCBtYWdpY1gyQW5kUGFkZGluZywgSlNPTk1lc3NhZ2VSZWFkZXIgfSBmcm9tICcuL21lc3NhZ2UnO1xuXG5leHBvcnQgdHlwZSBGcm9tQXJnMCA9IEFycm93SlNPTkxpa2U7XG5leHBvcnQgdHlwZSBGcm9tQXJnMSA9IEl0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0PiB8IEFycmF5QnVmZmVyVmlld0lucHV0O1xuZXhwb3J0IHR5cGUgRnJvbUFyZzIgPSBQcm9taXNlTGlrZTxJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBBcnJheUJ1ZmZlclZpZXdJbnB1dD47XG5leHBvcnQgdHlwZSBGcm9tQXJnMyA9IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSB8IFJlYWRhYmxlU3RyZWFtPEFycmF5QnVmZmVyVmlld0lucHV0PiB8IEFzeW5jSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+O1xuZXhwb3J0IHR5cGUgRnJvbUFyZzQgPSBSZXNwb25zZSB8IEZpbGVIYW5kbGUgfCBQcm9taXNlTGlrZTxGaWxlSGFuZGxlPiB8IFByb21pc2VMaWtlPFJlc3BvbnNlPjtcbmV4cG9ydCB0eXBlIEZyb21BcmdzID0gRnJvbUFyZzAgfCBGcm9tQXJnMyB8IEZyb21BcmcxIHwgRnJvbUFyZzIgfCBGcm9tQXJnNDtcblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFJlY29yZEJhdGNoUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgUmVhZGFibGVJbnRlcm9wPFJlY29yZEJhdGNoPFQ+PiB7XG5cbiAgICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIGltcGw6IElSZWNvcmRCYXRjaFJlYWRlckltcGw8VD4pIHsgc3VwZXIoKTsgfVxuXG4gICAgcHVibGljIGdldCBjbG9zZWQoKSB7IHJldHVybiB0aGlzLmltcGwuY2xvc2VkOyB9XG4gICAgcHVibGljIGdldCBzY2hlbWEoKSB7IHJldHVybiB0aGlzLmltcGwuc2NoZW1hOyB9XG4gICAgcHVibGljIGdldCBhdXRvQ2xvc2UoKSB7IHJldHVybiB0aGlzLmltcGwuYXV0b0Nsb3NlOyB9XG4gICAgcHVibGljIGdldCBkaWN0aW9uYXJpZXMoKSB7IHJldHVybiB0aGlzLmltcGwuZGljdGlvbmFyaWVzOyB9XG4gICAgcHVibGljIGdldCBudW1EaWN0aW9uYXJpZXMoKSB7IHJldHVybiB0aGlzLmltcGwubnVtRGljdGlvbmFyaWVzOyB9XG4gICAgcHVibGljIGdldCBudW1SZWNvcmRCYXRjaGVzKCkgeyByZXR1cm4gdGhpcy5pbXBsLm51bVJlY29yZEJhdGNoZXM7IH1cblxuICAgIHB1YmxpYyBuZXh0KHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLmltcGwubmV4dCh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgdGhyb3codmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuaW1wbC50aHJvdyh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgcmV0dXJuKHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLmltcGwucmV0dXJuKHZhbHVlKTsgfVxuICAgIHB1YmxpYyByZXNldChzY2hlbWE/OiBTY2hlbWE8VD4gfCBudWxsKSB7IHRoaXMuaW1wbC5yZXNldChzY2hlbWEpOyByZXR1cm4gdGhpczsgfVxuXG4gICAgcHVibGljIGFic3RyYWN0IGNhbmNlbCgpOiB2b2lkIHwgUHJvbWlzZTx2b2lkPjtcbiAgICBwdWJsaWMgYWJzdHJhY3Qgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKTogdGhpcyB8IFByb21pc2U8dGhpcz47XG4gICAgcHVibGljIGFic3RyYWN0IFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+O1xuICAgIHB1YmxpYyBhYnN0cmFjdCBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk6IEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj47XG5cbiAgICBwdWJsaWMgdG9SZWFkYWJsZURPTVN0cmVhbSgpIHsgcmV0dXJuIHN0cmVhbUFkYXB0ZXJzLnRvUmVhZGFibGVET01TdHJlYW0odGhpcyk7IH1cbiAgICBwdWJsaWMgdG9SZWFkYWJsZU5vZGVTdHJlYW0oKSB7IHJldHVybiBzdHJlYW1BZGFwdGVycy50b1JlYWRhYmxlTm9kZVN0cmVhbSh0aGlzLCB7IG9iamVjdE1vZGU6IHRydWUgfSk7IH1cblxuICAgIHB1YmxpYyBpc1N5bmMoKTogdGhpcyBpcyBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPiB7XG4gICAgICAgIHJldHVybiAodGhpcyBpbnN0YW5jZW9mIFJlY29yZEJhdGNoRmlsZVJlYWRlcikgfHwgKHRoaXMgaW5zdGFuY2VvZiBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcik7XG4gICAgfVxuICAgIHB1YmxpYyBpc0FzeW5jKCk6IHRoaXMgaXMgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+IHtcbiAgICAgICAgcmV0dXJuICh0aGlzIGluc3RhbmNlb2YgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXIpIHx8ICh0aGlzIGluc3RhbmNlb2YgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcik7XG4gICAgfVxuICAgIHB1YmxpYyBpc0ZpbGUoKTogdGhpcyBpcyBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcjxUPiB7XG4gICAgICAgIHJldHVybiAodGhpcyBpbnN0YW5jZW9mIFJlY29yZEJhdGNoRmlsZVJlYWRlcikgfHwgKHRoaXMgaW5zdGFuY2VvZiBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcik7XG4gICAgfVxuICAgIHB1YmxpYyBpc1N0cmVhbSgpOiB0aGlzIGlzIFJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+IHwgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPiB7XG4gICAgICAgIHJldHVybiAodGhpcyBpbnN0YW5jZW9mIFJlY29yZEJhdGNoU3RyZWFtUmVhZGVyKSB8fCAodGhpcyBpbnN0YW5jZW9mIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXIpO1xuICAgIH1cblxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgdGhyb3VnaE5vZGUoKTogaW1wb3J0KCdzdHJlYW0nKS5EdXBsZXggeyB0aHJvdyBuZXcgRXJyb3IoYFwiYXNOb2RlU3RyZWFtXCIgbm90IGF2YWlsYWJsZSBpbiB0aGlzIGVudmlyb25tZW50YCk7IH1cbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIHRocm91Z2hET008VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oKTogeyB3cml0YWJsZTogV3JpdGFibGVTdHJlYW08VWludDhBcnJheT4sIHJlYWRhYmxlOiBSZWFkYWJsZVN0cmVhbTxSZWNvcmRCYXRjaDxUPj4gfSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgXCJhc0RPTVN0cmVhbVwiIG5vdCBhdmFpbGFibGUgaW4gdGhpcyBlbnZpcm9ubWVudGApO1xuICAgIH1cblxuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgUmVjb3JkQmF0Y2hSZWFkZXI+KHNvdXJjZTogVCk6IFQ7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHNvdXJjZTogRnJvbUFyZzApOiBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4oc291cmNlOiBGcm9tQXJnMSk6IFJlY29yZEJhdGNoRmlsZVJlYWRlcjxUPiB8IFJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pihzb3VyY2U6IEZyb21BcmcyKTogUHJvbWlzZTxSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4gfCBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPj47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+KHNvdXJjZTogRnJvbUFyZzMpOiBQcm9taXNlPFJlY29yZEJhdGNoRmlsZVJlYWRlcjxUPiB8IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pihzb3VyY2U6IEZyb21Bcmc0KTogUHJvbWlzZTxBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcjxUPiB8IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4+O1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55Pihzb3VyY2U6IGFueSkge1xuICAgICAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgUmVjb3JkQmF0Y2hSZWFkZXIpIHtcbiAgICAgICAgICAgIHJldHVybiBzb3VyY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBcnJvd0pTT04oc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIFJlY29yZEJhdGNoUmVhZGVyLmZyb21KU09OPFQ+KHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGaWxlSGFuZGxlKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWNvcmRCYXRjaFJlYWRlci5mcm9tRmlsZUhhbmRsZTxUPihzb3VyY2UpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZTxGcm9tQXJnMT4oc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiBhd2FpdCBSZWNvcmRCYXRjaFJlYWRlci5mcm9tPFQ+KGF3YWl0IHNvdXJjZSkpKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlPEZpbGVIYW5kbGUgfCBSZXNwb25zZT4oc291cmNlKSkge1xuICAgICAgICAgICAgcmV0dXJuIChhc3luYyAoKSA9PiBhd2FpdCBSZWNvcmRCYXRjaFJlYWRlci5mcm9tPFQ+KGF3YWl0IHNvdXJjZSkpKCk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGZXRjaFJlc3BvbnNlKHNvdXJjZSkgfHwgaXNSZWFkYWJsZURPTVN0cmVhbShzb3VyY2UpIHx8IGlzUmVhZGFibGVOb2RlU3RyZWFtKHNvdXJjZSkgfHwgaXNBc3luY0l0ZXJhYmxlKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBSZWNvcmRCYXRjaFJlYWRlci5mcm9tQXN5bmNCeXRlU3RyZWFtPFQ+KG5ldyBBc3luY0J5dGVTdHJlYW0oc291cmNlKSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIFJlY29yZEJhdGNoUmVhZGVyLmZyb21CeXRlU3RyZWFtPFQ+KG5ldyBCeXRlU3RyZWFtKHNvdXJjZSkpO1xuICAgIH1cbiAgICBwcml2YXRlIHN0YXRpYyBmcm9tSlNPTjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9Pihzb3VyY2U6IEFycm93SlNPTkxpa2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPihuZXcgQXJyb3dKU09OKHNvdXJjZSkpO1xuICAgIH1cbiAgICBwcml2YXRlIHN0YXRpYyBmcm9tQnl0ZVN0cmVhbTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9Pihzb3VyY2U6IEJ5dGVTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBzb3VyY2UucGVlaygobWFnaWNMZW5ndGggKyA3KSAmIH43KTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzICYmIGJ5dGVzLmJ5dGVMZW5ndGggPj0gNFxuICAgICAgICAgICAgPyBjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYnl0ZXMpXG4gICAgICAgICAgICA/IG5ldyBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4oc291cmNlLnJlYWQoKSlcbiAgICAgICAgICAgIDogbmV3IFJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+KHNvdXJjZSlcbiAgICAgICAgICAgIDogbmV3IFJlY29yZEJhdGNoU3RyZWFtUmVhZGVyPFQ+KGZ1bmN0aW9uKigpOiBhbnkge30oKSk7XG4gICAgfVxuICAgIHByaXZhdGUgc3RhdGljIGFzeW5jIGZyb21Bc3luY0J5dGVTdHJlYW08VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfT4oc291cmNlOiBBc3luY0J5dGVTdHJlYW0pIHtcbiAgICAgICAgY29uc3QgYnl0ZXMgPSBhd2FpdCBzb3VyY2UucGVlaygobWFnaWNMZW5ndGggKyA3KSAmIH43KTtcbiAgICAgICAgcmV0dXJuIGJ5dGVzICYmIGJ5dGVzLmJ5dGVMZW5ndGggPj0gNFxuICAgICAgICAgICAgPyBjaGVja0Zvck1hZ2ljQXJyb3dTdHJpbmcoYnl0ZXMpXG4gICAgICAgICAgICA/IG5ldyBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VD4oYXdhaXQgc291cmNlLnJlYWQoKSlcbiAgICAgICAgICAgIDogbmV3IEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VD4oc291cmNlKVxuICAgICAgICAgICAgOiBuZXcgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPihhc3luYyBmdW5jdGlvbiooKTogYW55IHt9KCkpO1xuICAgIH1cbiAgICBwcml2YXRlIHN0YXRpYyBhc3luYyBmcm9tRmlsZUhhbmRsZTxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9Pihzb3VyY2U6IEZpbGVIYW5kbGUpIHtcbiAgICAgICAgY29uc3QgeyBzaXplIH0gPSBhd2FpdCBzb3VyY2Uuc3RhdCgpO1xuICAgICAgICBjb25zdCBmaWxlID0gbmV3IEFzeW5jUmFuZG9tQWNjZXNzRmlsZShzb3VyY2UsIHNpemUpO1xuICAgICAgICBpZiAoc2l6ZSA+PSBtYWdpY1gyQW5kUGFkZGluZykge1xuICAgICAgICAgICAgaWYgKGNoZWNrRm9yTWFnaWNBcnJvd1N0cmluZyhhd2FpdCBmaWxlLnJlYWRBdCgwLCAobWFnaWNMZW5ndGggKyA3KSAmIH43KSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3IEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQ+KGZpbGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUPihmaWxlKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRCYXRjaEZpbGVSZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBSZWNvcmRCYXRjaFJlYWRlcjxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByb3RlY3RlZCBpbXBsOiBSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQ+O1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQ+KTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IFJhbmRvbUFjY2Vzc0ZpbGUsIGRpY3Rpb25hcmllcz86IE1hcDxudW1iZXIsIFZlY3Rvcj4pO1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQXJyYXlCdWZmZXJWaWV3SW5wdXQsIGRpY3Rpb25hcmllcz86IE1hcDxudW1iZXIsIFZlY3Rvcj4pO1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQ+IHwgUmFuZG9tQWNjZXNzRmlsZSB8IEFycmF5QnVmZmVyVmlld0lucHV0LCBkaWN0aW9uYXJpZXM/OiBNYXA8bnVtYmVyLCBWZWN0b3I+KSB7XG4gICAgICAgIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlckltcGwpIHtcbiAgICAgICAgICAgIHN1cGVyKHNvdXJjZSk7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlIGluc3RhbmNlb2YgUmFuZG9tQWNjZXNzRmlsZSkge1xuICAgICAgICAgICAgc3VwZXIobmV3IFJlY29yZEJhdGNoRmlsZVJlYWRlckltcGwoc291cmNlLCBkaWN0aW9uYXJpZXMpKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHN1cGVyKG5ldyBSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsKG5ldyBSYW5kb21BY2Nlc3NGaWxlKHRvVWludDhBcnJheShzb3VyY2UpKSwgZGljdGlvbmFyaWVzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIGdldCBmb290ZXIoKSB7IHJldHVybiB0aGlzLmltcGwuZm9vdGVyOyB9XG4gICAgcHVibGljIGNhbmNlbCgpIHsgdGhpcy5pbXBsLmNsb3NlKCk7IH1cbiAgICBwdWJsaWMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7IHRoaXMuaW1wbC5vcGVuKGF1dG9DbG9zZSk7IHJldHVybiB0aGlzOyB9XG4gICAgcHVibGljIHJlYWRSZWNvcmRCYXRjaChpbmRleDogbnVtYmVyKSB7IHJldHVybiB0aGlzLmltcGwucmVhZFJlY29yZEJhdGNoKGluZGV4KTsgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpIHsgcmV0dXJuICh0aGlzLmltcGwgYXMgSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4pW1N5bWJvbC5pdGVyYXRvcl0oKTsgfVxuICAgIHB1YmxpYyBhc3luYyAqW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHsgeWllbGQqIHRoaXNbU3ltYm9sLml0ZXJhdG9yXSgpOyB9XG59XG5cbmV4cG9ydCBjbGFzcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiBleHRlbmRzIFJlY29yZEJhdGNoUmVhZGVyPFQ+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdGVjdGVkIGltcGw6IFJlY29yZEJhdGNoU3RyZWFtUmVhZGVySW1wbDxUPjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEJ5dGVTdHJlYW0gfCBBcnJvd0pTT04gfCBBcnJheUJ1ZmZlclZpZXcgfCBJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXc+LCBkaWN0aW9uYXJpZXM/OiBNYXA8bnVtYmVyLCBWZWN0b3I+KSB7XG4gICAgICAgIHN1cGVyKGlzQXJyb3dKU09OKHNvdXJjZSlcbiAgICAgICAgICAgID8gbmV3IFJlY29yZEJhdGNoSlNPTlJlYWRlckltcGwobmV3IEpTT05NZXNzYWdlUmVhZGVyKHNvdXJjZSksIGRpY3Rpb25hcmllcylcbiAgICAgICAgICAgIDogbmV3IFJlY29yZEJhdGNoU3RyZWFtUmVhZGVySW1wbChuZXcgTWVzc2FnZVJlYWRlcihzb3VyY2UpLCBkaWN0aW9uYXJpZXMpKTtcbiAgICB9XG4gICAgcHVibGljIGNhbmNlbCgpIHsgdGhpcy5pbXBsLmNsb3NlKCk7IH1cbiAgICBwdWJsaWMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7IHRoaXMuaW1wbC5vcGVuKGF1dG9DbG9zZSk7IHJldHVybiB0aGlzOyB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCkgeyByZXR1cm4gKHRoaXMuaW1wbCBhcyBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PilbU3ltYm9sLml0ZXJhdG9yXSgpOyB9XG4gICAgcHVibGljIGFzeW5jICpbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk6IEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4geyB5aWVsZCogdGhpc1tTeW1ib2wuaXRlcmF0b3JdKCk7IH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBSZWNvcmRCYXRjaFJlYWRlcjxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByb3RlY3RlZCBpbXBsOiBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVySW1wbDxUPjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jQnl0ZVN0cmVhbSB8IEZpbGVIYW5kbGUgfCBOb2RlSlMuUmVhZGFibGVTdHJlYW0gfCBSZWFkYWJsZVN0cmVhbTxBcnJheUJ1ZmZlclZpZXc+IHwgQXN5bmNJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXc+LCBieXRlTGVuZ3RoPzogbnVtYmVyKSB7XG4gICAgICAgIHN1cGVyKG5ldyBBc3luY1JlY29yZEJhdGNoU3RyZWFtUmVhZGVySW1wbChuZXcgQXN5bmNNZXNzYWdlUmVhZGVyKHNvdXJjZSBhcyBGaWxlSGFuZGxlLCBieXRlTGVuZ3RoKSkpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgY2FuY2VsKCkgeyBhd2FpdCB0aGlzLmltcGwuY2xvc2UoKTsgfVxuICAgIHB1YmxpYyBhc3luYyBvcGVuKGF1dG9DbG9zZT86IGJvb2xlYW4pIHsgYXdhaXQgdGhpcy5pbXBsLm9wZW4oYXV0b0Nsb3NlKTsgcmV0dXJuIHRoaXM7IH1cbiAgICBwdWJsaWMgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHsgcmV0dXJuICh0aGlzLmltcGwgYXMgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PilbU3ltYm9sLmFzeW5jSXRlcmF0b3JdKCk7IH1cbiAgICBwdWJsaWMgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4geyB0aHJvdyBuZXcgRXJyb3IoYEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXIgaXMgbm90IEl0ZXJhYmxlYCk7IH1cbn1cblxuZXhwb3J0IGNsYXNzIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgUmVjb3JkQmF0Y2hSZWFkZXI8VD4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcm90ZWN0ZWQgaW1wbDogQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQ+O1xuICAgIGNvbnN0cnVjdG9yKHNvdXJjZTogQXN5bmNSYW5kb21BY2Nlc3NGaWxlKTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jUmFuZG9tQWNjZXNzRmlsZSwgZGljdGlvbmFyaWVzOiBNYXA8bnVtYmVyLCBWZWN0b3I+KTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEZpbGVIYW5kbGUsIGJ5dGVMZW5ndGg6IG51bWJlciwgZGljdGlvbmFyaWVzOiBNYXA8bnVtYmVyLCBWZWN0b3I+KTtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U6IEFzeW5jUmFuZG9tQWNjZXNzRmlsZSB8IEZpbGVIYW5kbGUsIC4uLnJlc3Q6IChudW1iZXIgfCBNYXA8bnVtYmVyLCBWZWN0b3I+KVtdKSB7XG4gICAgICAgIGxldCBbYnl0ZUxlbmd0aCwgZGljdGlvbmFyaWVzXSA9IHJlc3QgYXMgW251bWJlciwgTWFwPG51bWJlciwgVmVjdG9yPl07XG4gICAgICAgIGlmIChieXRlTGVuZ3RoICYmIHR5cGVvZiBieXRlTGVuZ3RoICE9PSAnbnVtYmVyJykgeyBkaWN0aW9uYXJpZXMgPSBieXRlTGVuZ3RoOyB9XG4gICAgICAgIGxldCBmaWxlID0gc291cmNlIGluc3RhbmNlb2YgQXN5bmNSYW5kb21BY2Nlc3NGaWxlID8gc291cmNlIDogbmV3IEFzeW5jUmFuZG9tQWNjZXNzRmlsZShzb3VyY2UsIGJ5dGVMZW5ndGgpO1xuICAgICAgICBzdXBlcihuZXcgQXN5bmNSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsKGZpbGUsIGRpY3Rpb25hcmllcykpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IGZvb3RlcigpIHsgcmV0dXJuIHRoaXMuaW1wbC5mb290ZXI7IH1cbiAgICBwdWJsaWMgYXN5bmMgY2FuY2VsKCkgeyBhd2FpdCB0aGlzLmltcGwuY2xvc2UoKTsgfVxuICAgIHB1YmxpYyBhc3luYyBvcGVuKGF1dG9DbG9zZT86IGJvb2xlYW4pIHsgYXdhaXQgdGhpcy5pbXBsLm9wZW4oYXV0b0Nsb3NlKTsgcmV0dXJuIHRoaXM7IH1cbiAgICBwdWJsaWMgcmVhZFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIHRoaXMuaW1wbC5yZWFkUmVjb3JkQmF0Y2goaW5kZXgpOyB9XG4gICAgcHVibGljIFtTeW1ib2wuYXN5bmNJdGVyYXRvcl0oKSB7IHJldHVybiAodGhpcy5pbXBsIGFzIEFzeW5jSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4pW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOyB9XG4gICAgcHVibGljIFtTeW1ib2wuaXRlcmF0b3JdKCk6IEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHsgdGhyb3cgbmV3IEVycm9yKGBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlciBpcyBub3QgSXRlcmFibGVgKTsgfVxufVxuXG5hYnN0cmFjdCBjbGFzcyBSZWNvcmRCYXRjaFJlYWRlckltcGxCYXNlPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IHtcblxuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgc2NoZW1hOiBTY2hlbWE7XG4gICAgcHVibGljIGNsb3NlZCA9IGZhbHNlO1xuICAgIHB1YmxpYyBhdXRvQ2xvc2UgPSB0cnVlO1xuICAgIHB1YmxpYyBkaWN0aW9uYXJ5SW5kZXggPSAwO1xuICAgIHB1YmxpYyByZWNvcmRCYXRjaEluZGV4ID0gMDtcbiAgICBwdWJsaWMgZGljdGlvbmFyaWVzOiBNYXA8bnVtYmVyLCBWZWN0b3I+O1xuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5SW5kZXg7IH1cbiAgICBwdWJsaWMgZ2V0IG51bVJlY29yZEJhdGNoZXMoKSB7IHJldHVybiB0aGlzLnJlY29yZEJhdGNoSW5kZXg7IH1cblxuICAgIGNvbnN0cnVjdG9yKGRpY3Rpb25hcmllcyA9IG5ldyBNYXA8bnVtYmVyLCBWZWN0b3I+KCkpIHtcbiAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMgPSBkaWN0aW9uYXJpZXM7XG4gICAgfVxuICAgIHB1YmxpYyByZXNldChzY2hlbWE/OiBTY2hlbWE8VD4gfCBudWxsKSB7XG4gICAgICAgIHRoaXMuZGljdGlvbmFyeUluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5yZWNvcmRCYXRjaEluZGV4ID0gMDtcbiAgICAgICAgdGhpcy5zY2hlbWEgPSA8YW55PiBzY2hlbWE7XG4gICAgICAgIHRoaXMuZGljdGlvbmFyaWVzID0gbmV3IE1hcCgpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9sb2FkUmVjb3JkQmF0Y2goaGVhZGVyOiBtZXRhZGF0YS5SZWNvcmRCYXRjaCwgYm9keTogYW55KSB7XG4gICAgICAgIHJldHVybiBuZXcgUmVjb3JkQmF0Y2g8VD4odGhpcy5zY2hlbWEsIGhlYWRlci5sZW5ndGgsIHRoaXMuX2xvYWRWZWN0b3JzKGhlYWRlciwgYm9keSwgdGhpcy5zY2hlbWEuZmllbGRzKSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfbG9hZERpY3Rpb25hcnlCYXRjaChoZWFkZXI6IG1ldGFkYXRhLkRpY3Rpb25hcnlCYXRjaCwgYm9keTogYW55KSB7XG4gICAgICAgIGNvbnN0IHsgaWQsIGlzRGVsdGEsIGRhdGEgfSA9IGhlYWRlcjtcbiAgICAgICAgY29uc3QgeyBkaWN0aW9uYXJpZXMsIHNjaGVtYSB9ID0gdGhpcztcbiAgICAgICAgaWYgKGlzRGVsdGEgfHwgIWRpY3Rpb25hcmllcy5nZXQoaWQpKSB7XG5cbiAgICAgICAgICAgIGNvbnN0IHR5cGUgPSBzY2hlbWEuZGljdGlvbmFyaWVzLmdldChpZCkhO1xuICAgICAgICAgICAgY29uc3QgdmVjdG9yID0gKGlzRGVsdGEgPyBkaWN0aW9uYXJpZXMuZ2V0KGlkKSEuY29uY2F0KFxuICAgICAgICAgICAgICAgIFZlY3Rvci5uZXcodGhpcy5fbG9hZFZlY3RvcnMoZGF0YSwgYm9keSwgW3R5cGVdKVswXSkpIDpcbiAgICAgICAgICAgICAgICBWZWN0b3IubmV3KHRoaXMuX2xvYWRWZWN0b3JzKGRhdGEsIGJvZHksIFt0eXBlXSlbMF0pKSBhcyBWZWN0b3I7XG5cbiAgICAgICAgICAgIChzY2hlbWEuZGljdGlvbmFyeUZpZWxkcy5nZXQoaWQpIHx8IFtdKS5mb3JFYWNoKCh7IHR5cGUgfSkgPT4gdHlwZS5kaWN0aW9uYXJ5VmVjdG9yID0gdmVjdG9yKTtcblxuICAgICAgICAgICAgcmV0dXJuIHZlY3RvcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZGljdGlvbmFyaWVzLmdldChpZCkhO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgX2xvYWRWZWN0b3JzKGhlYWRlcjogbWV0YWRhdGEuUmVjb3JkQmF0Y2gsIGJvZHk6IGFueSwgdHlwZXM6IChGaWVsZCB8IERhdGFUeXBlKVtdKSB7XG4gICAgICAgIHJldHVybiBuZXcgVmVjdG9yTG9hZGVyKGJvZHksIGhlYWRlci5ub2RlcywgaGVhZGVyLmJ1ZmZlcnMpLnZpc2l0TWFueSh0eXBlcyk7XG4gICAgfVxufVxuXG5jbGFzcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT5cbiAgICBleHRlbmRzIFJlY29yZEJhdGNoUmVhZGVySW1wbEJhc2U8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hSZWFkZXJJbXBsPFQ+LCBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZGVyOiBNZXNzYWdlUmVhZGVyLCBkaWN0aW9uYXJpZXMgPSBuZXcgTWFwPG51bWJlciwgVmVjdG9yPigpKSB7XG4gICAgICAgIHN1cGVyKGRpY3Rpb25hcmllcyk7XG4gICAgfVxuICAgIHB1YmxpYyBbU3ltYm9sLml0ZXJhdG9yXSgpOiBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG4gICAgICAgIHJldHVybiB0aGlzIGFzIEl0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+O1xuICAgIH1cbiAgICBwdWJsaWMgY2xvc2UoKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQgJiYgKHRoaXMuY2xvc2VkID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMucmVzZXQoKS5yZWFkZXIucmV0dXJuKCk7XG4gICAgICAgICAgICB0aGlzLnJlYWRlciA9IDxhbnk+IG51bGw7XG4gICAgICAgICAgICB0aGlzLmRpY3Rpb25hcmllcyA9IDxhbnk+IG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyBvcGVuKGF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlKSB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYXV0b0Nsb3NlID0gYXV0b0Nsb3NlO1xuICAgICAgICAgICAgaWYgKCEodGhpcy5zY2hlbWEgfHwgKHRoaXMuc2NoZW1hID0gdGhpcy5yZWFkZXIucmVhZFNjaGVtYSgpISkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvc2UoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcHVibGljIHRocm93KHZhbHVlPzogYW55KTogSXRlcmF0b3JSZXN1bHQ8YW55PiB7XG4gICAgICAgIGlmICghdGhpcy5jbG9zZWQgJiYgdGhpcy5hdXRvQ2xvc2UgJiYgKHRoaXMuY2xvc2VkID0gdHJ1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJlc2V0KCkucmVhZGVyLnRocm93KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSVRFUkFUT1JfRE9ORTtcbiAgICB9XG4gICAgcHVibGljIHJldHVybih2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT4ge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmIHRoaXMuYXV0b0Nsb3NlICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5yZXNldCgpLnJlYWRlci5yZXR1cm4odmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBJVEVSQVRPUl9ET05FO1xuICAgIH1cbiAgICBwdWJsaWMgbmV4dCgpOiBJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4ge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHsgcmV0dXJuIElURVJBVE9SX0RPTkU7IH1cbiAgICAgICAgbGV0IG1lc3NhZ2U6IE1lc3NhZ2UgfCBudWxsLCB7IHJlYWRlciB9ID0gdGhpcztcbiAgICAgICAgd2hpbGUgKG1lc3NhZ2UgPSB0aGlzLnJlYWROZXh0TWVzc2FnZUFuZFZhbGlkYXRlKCkpIHtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlLmlzU2NoZW1hKCkpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnJlc2V0KG1lc3NhZ2UuaGVhZGVyKCkpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChtZXNzYWdlLmlzUmVjb3JkQmF0Y2goKSkge1xuICAgICAgICAgICAgICAgIHRoaXMucmVjb3JkQmF0Y2hJbmRleCsrO1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IG1lc3NhZ2UuaGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gcmVhZGVyLnJlYWRNZXNzYWdlQm9keShtZXNzYWdlLmJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHJlY29yZEJhdGNoID0gdGhpcy5fbG9hZFJlY29yZEJhdGNoKGhlYWRlciwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICByZXR1cm4geyBkb25lOiBmYWxzZSwgdmFsdWU6IHJlY29yZEJhdGNoIH07XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaXNEaWN0aW9uYXJ5QmF0Y2goKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyeUluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSByZWFkZXIucmVhZE1lc3NhZ2VCb2R5KG1lc3NhZ2UuYm9keUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVjdG9yID0gdGhpcy5fbG9hZERpY3Rpb25hcnlCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMuc2V0KGhlYWRlci5pZCwgdmVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5yZXR1cm4oKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlYWROZXh0TWVzc2FnZUFuZFZhbGlkYXRlPFQgZXh0ZW5kcyBNZXNzYWdlSGVhZGVyPih0eXBlPzogVCB8IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlPFQ+KHR5cGUpO1xuICAgIH1cbn1cblxuY2xhc3MgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT5cbiAgICBleHRlbmRzIFJlY29yZEJhdGNoUmVhZGVySW1wbEJhc2U8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hSZWFkZXJJbXBsPFQ+LCBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHtcblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCByZWFkZXI6IEFzeW5jTWVzc2FnZVJlYWRlciwgZGljdGlvbmFyaWVzID0gbmV3IE1hcDxudW1iZXIsIFZlY3Rvcj4oKSkge1xuICAgICAgICBzdXBlcihkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMgYXMgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PjtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIGNsb3NlKCkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICBhd2FpdCB0aGlzLnJlc2V0KCkucmVhZGVyLnJldHVybigpO1xuICAgICAgICAgICAgdGhpcy5yZWFkZXIgPSA8YW55PiBudWxsO1xuICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMgPSA8YW55PiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7XG4gICAgICAgIC8vIGRlZmF1bHQgYXJncyBpbiBhbiBhc3luYyBmdW5jdGlvbiBjcmFzaCBjbG9zdXJlLWNvbXBpbGVyIGF0IHRoZSBtb21lbnRcbiAgICAgICAgLy8gc28gZG8gdGhpcyBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMxNzhcbiAgICAgICAgYXV0b0Nsb3NlICE9PSB1bmRlZmluZWQgfHwgKGF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlKTtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCkge1xuICAgICAgICAgICAgdGhpcy5hdXRvQ2xvc2UgPSBhdXRvQ2xvc2U7XG4gICAgICAgICAgICBpZiAoISh0aGlzLnNjaGVtYSB8fCAodGhpcy5zY2hlbWEgPSAoYXdhaXQgdGhpcy5yZWFkZXIucmVhZFNjaGVtYSgpKSEpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyB0aHJvdyh2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8YW55Pj4ge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmIHRoaXMuYXV0b0Nsb3NlICYmICh0aGlzLmNsb3NlZCA9IHRydWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZXNldCgpLnJlYWRlci50aHJvdyh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIElURVJBVE9SX0RPTkU7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZXR1cm4odmFsdWU/OiBhbnkpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+IHtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiB0aGlzLmF1dG9DbG9zZSAmJiAodGhpcy5jbG9zZWQgPSB0cnVlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGF3YWl0IHRoaXMucmVzZXQoKS5yZWFkZXIucmV0dXJuKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gSVRFUkFUT1JfRE9ORTtcbiAgICB9XG4gICAgcHVibGljIGFzeW5jIG5leHQoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlZCkgeyByZXR1cm4gSVRFUkFUT1JfRE9ORTsgfVxuICAgICAgICBsZXQgbWVzc2FnZTogTWVzc2FnZSB8IG51bGwsIHsgcmVhZGVyIH0gPSB0aGlzO1xuICAgICAgICB3aGlsZSAobWVzc2FnZSA9IGF3YWl0IHRoaXMucmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGUoKSkge1xuICAgICAgICAgICAgaWYgKG1lc3NhZ2UuaXNTY2hlbWEoKSkge1xuICAgICAgICAgICAgICAgIGF3YWl0IHRoaXMucmVzZXQobWVzc2FnZS5oZWFkZXIoKSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKG1lc3NhZ2UuaXNSZWNvcmRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvcmRCYXRjaEluZGV4Kys7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCByZWFkZXIucmVhZE1lc3NhZ2VCb2R5KG1lc3NhZ2UuYm9keUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVjb3JkQmF0Y2ggPSB0aGlzLl9sb2FkUmVjb3JkQmF0Y2goaGVhZGVyLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHJldHVybiB7IGRvbmU6IGZhbHNlLCB2YWx1ZTogcmVjb3JkQmF0Y2ggfTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAobWVzc2FnZS5pc0RpY3Rpb25hcnlCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJ5SW5kZXgrKztcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IHJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSB0aGlzLl9sb2FkRGljdGlvbmFyeUJhdGNoKGhlYWRlciwgYnVmZmVyKTtcbiAgICAgICAgICAgICAgICB0aGlzLmRpY3Rpb25hcmllcy5zZXQoaGVhZGVyLmlkLCB2ZWN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhd2FpdCB0aGlzLnJldHVybigpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGU8VCBleHRlbmRzIE1lc3NhZ2VIZWFkZXI+KHR5cGU/OiBUIHwgbnVsbCkge1xuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWFkZXIucmVhZE1lc3NhZ2U8VD4odHlwZSk7XG4gICAgfVxufVxuXG5jbGFzcyBSZWNvcmRCYXRjaEZpbGVSZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+XG4gICAgZXh0ZW5kcyBSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPiwgSXRlcmFibGVJdGVyYXRvcjxSZWNvcmRCYXRjaDxUPj4ge1xuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1YmxpYyBmb290ZXI6IEZvb3RlcjtcbiAgICBwdWJsaWMgZ2V0IG51bURpY3Rpb25hcmllcygpIHsgcmV0dXJuIHRoaXMuZm9vdGVyLm51bURpY3Rpb25hcmllczsgfVxuICAgIHB1YmxpYyBnZXQgbnVtUmVjb3JkQmF0Y2hlcygpIHsgcmV0dXJuIHRoaXMuZm9vdGVyLm51bVJlY29yZEJhdGNoZXM7IH1cblxuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBmaWxlOiBSYW5kb21BY2Nlc3NGaWxlLCBkaWN0aW9uYXJpZXMgPSBuZXcgTWFwPG51bWJlciwgVmVjdG9yPigpKSB7XG4gICAgICAgIHN1cGVyKG5ldyBNZXNzYWdlUmVhZGVyKGZpbGUpLCBkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgb3BlbihhdXRvQ2xvc2UgPSB0aGlzLmF1dG9DbG9zZSkge1xuICAgICAgICBpZiAoIXRoaXMuY2xvc2VkICYmICF0aGlzLmZvb3Rlcikge1xuICAgICAgICAgICAgdGhpcy5zY2hlbWEgPSAodGhpcy5mb290ZXIgPSB0aGlzLnJlYWRGb290ZXIoKSkuc2NoZW1hO1xuICAgICAgICAgICAgZm9yIChjb25zdCBibG9jayBvZiB0aGlzLmZvb3Rlci5kaWN0aW9uYXJ5QmF0Y2hlcygpKSB7XG4gICAgICAgICAgICAgICAgYmxvY2sgJiYgdGhpcy5yZWFkRGljdGlvbmFyeUJhdGNoKHRoaXMuZGljdGlvbmFyeUluZGV4KyspO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdXBlci5vcGVuKGF1dG9DbG9zZSk7XG4gICAgfVxuICAgIHB1YmxpYyByZWFkUmVjb3JkQmF0Y2goaW5kZXg6IG51bWJlcikge1xuICAgICAgICBpZiAodGhpcy5jbG9zZWQpIHsgcmV0dXJuIG51bGw7IH1cbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZShNZXNzYWdlSGVhZGVyLlJlY29yZEJhdGNoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UuaXNSZWNvcmRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRCYXRjaCA9IHRoaXMuX2xvYWRSZWNvcmRCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZEJhdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZERpY3Rpb25hcnlCYXRjaChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5mb290ZXIuZ2V0RGljdGlvbmFyeUJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZShNZXNzYWdlSGVhZGVyLkRpY3Rpb25hcnlCYXRjaCk7XG4gICAgICAgICAgICBpZiAobWVzc2FnZSAmJiBtZXNzYWdlLmlzRGljdGlvbmFyeUJhdGNoKCkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBoZWFkZXIgPSBtZXNzYWdlLmhlYWRlcigpO1xuICAgICAgICAgICAgICAgIGNvbnN0IGJ1ZmZlciA9IHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlQm9keShtZXNzYWdlLmJvZHlMZW5ndGgpO1xuICAgICAgICAgICAgICAgIGNvbnN0IHZlY3RvciA9IHRoaXMuX2xvYWREaWN0aW9uYXJ5QmF0Y2goaGVhZGVyLCBidWZmZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyaWVzLnNldChoZWFkZXIuaWQsIHZlY3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHJvdGVjdGVkIHJlYWRGb290ZXIoKSB7XG4gICAgICAgIGNvbnN0IHsgZmlsZSB9ID0gdGhpcztcbiAgICAgICAgY29uc3Qgc2l6ZSA9IGZpbGUuc2l6ZTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gc2l6ZSAtIG1hZ2ljQW5kUGFkZGluZztcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gZmlsZS5yZWFkSW50MzIob2Zmc2V0KTtcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZmlsZS5yZWFkQXQob2Zmc2V0IC0gbGVuZ3RoLCBsZW5ndGgpO1xuICAgICAgICByZXR1cm4gRm9vdGVyLmRlY29kZShidWZmZXIpO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVhZE5leHRNZXNzYWdlQW5kVmFsaWRhdGU8VCBleHRlbmRzIE1lc3NhZ2VIZWFkZXI+KHR5cGU/OiBUIHwgbnVsbCk6IE1lc3NhZ2U8VD4gfCBudWxsIHtcbiAgICAgICAgaWYgKCF0aGlzLmZvb3RlcikgeyB0aGlzLm9wZW4oKTsgfVxuICAgICAgICBpZiAodGhpcy5yZWNvcmRCYXRjaEluZGV4IDwgdGhpcy5udW1SZWNvcmRCYXRjaGVzKSB7XG4gICAgICAgICAgICBjb25zdCBibG9jayA9IHRoaXMuZm9vdGVyLmdldFJlY29yZEJhdGNoKHRoaXMucmVjb3JkQmF0Y2hJbmRleCk7XG4gICAgICAgICAgICBpZiAoYmxvY2sgJiYgdGhpcy5maWxlLnNlZWsoYmxvY2sub2Zmc2V0KSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZSh0eXBlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG5cbmNsYXNzIEFzeW5jUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PlxuICAgIGV4dGVuZHMgQXN5bmNSZWNvcmRCYXRjaFN0cmVhbVJlYWRlckltcGw8VD5cbiAgICAgICAgaW1wbGVtZW50cyBJUmVjb3JkQmF0Y2hGaWxlUmVhZGVySW1wbDxUPiwgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PiB7XG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGZvb3RlcjogRm9vdGVyO1xuICAgIHB1YmxpYyBnZXQgbnVtRGljdGlvbmFyaWVzKCkgeyByZXR1cm4gdGhpcy5mb290ZXIubnVtRGljdGlvbmFyaWVzOyB9XG4gICAgcHVibGljIGdldCBudW1SZWNvcmRCYXRjaGVzKCkgeyByZXR1cm4gdGhpcy5mb290ZXIubnVtUmVjb3JkQmF0Y2hlczsgfVxuXG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIGZpbGU6IEFzeW5jUmFuZG9tQWNjZXNzRmlsZSwgZGljdGlvbmFyaWVzID0gbmV3IE1hcDxudW1iZXIsIFZlY3Rvcj4oKSkge1xuICAgICAgICBzdXBlcihuZXcgQXN5bmNNZXNzYWdlUmVhZGVyKGZpbGUpLCBkaWN0aW9uYXJpZXMpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKSB7XG4gICAgICAgIC8vIGRlZmF1bHQgYXJncyBpbiBhbiBhc3luYyBmdW5jdGlvbiBjcmFzaCBjbG9zdXJlLWNvbXBpbGVyIGF0IHRoZSBtb21lbnRcbiAgICAgICAgLy8gc28gZG8gdGhpcyBpbnN0ZWFkLiBodHRwczovL2dpdGh1Yi5jb20vZ29vZ2xlL2Nsb3N1cmUtY29tcGlsZXIvaXNzdWVzLzMxNzhcbiAgICAgICAgYXV0b0Nsb3NlICE9PSB1bmRlZmluZWQgfHwgKGF1dG9DbG9zZSA9IHRoaXMuYXV0b0Nsb3NlKTtcbiAgICAgICAgaWYgKCF0aGlzLmNsb3NlZCAmJiAhdGhpcy5mb290ZXIpIHtcbiAgICAgICAgICAgIHRoaXMuc2NoZW1hID0gKHRoaXMuZm9vdGVyID0gYXdhaXQgdGhpcy5yZWFkRm9vdGVyKCkpLnNjaGVtYTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgYmxvY2sgb2YgdGhpcy5mb290ZXIuZGljdGlvbmFyeUJhdGNoZXMoKSkge1xuICAgICAgICAgICAgICAgIGJsb2NrICYmIHRoaXMucmVhZERpY3Rpb25hcnlCYXRjaCh0aGlzLmRpY3Rpb25hcnlJbmRleCsrKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXdhaXQgc3VwZXIub3BlbihhdXRvQ2xvc2UpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgcmVhZFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKHRoaXMuY2xvc2VkKSB7IHJldHVybiBudWxsOyB9XG4gICAgICAgIGlmICghdGhpcy5mb290ZXIpIHsgYXdhaXQgdGhpcy5vcGVuKCk7IH1cbiAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmZvb3Rlci5nZXRSZWNvcmRCYXRjaChpbmRleCk7XG4gICAgICAgIGlmIChibG9jayAmJiAoYXdhaXQgdGhpcy5maWxlLnNlZWsoYmxvY2sub2Zmc2V0KSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG1lc3NhZ2UgPSBhd2FpdCB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZShNZXNzYWdlSGVhZGVyLlJlY29yZEJhdGNoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UuaXNSZWNvcmRCYXRjaCgpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgaGVhZGVyID0gbWVzc2FnZS5oZWFkZXIoKTtcbiAgICAgICAgICAgICAgICBjb25zdCBidWZmZXIgPSBhd2FpdCB0aGlzLnJlYWRlci5yZWFkTWVzc2FnZUJvZHkobWVzc2FnZS5ib2R5TGVuZ3RoKTtcbiAgICAgICAgICAgICAgICBjb25zdCByZWNvcmRCYXRjaCA9IHRoaXMuX2xvYWRSZWNvcmRCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlY29yZEJhdGNoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmVhZERpY3Rpb25hcnlCYXRjaChpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJsb2NrID0gdGhpcy5mb290ZXIuZ2V0RGljdGlvbmFyeUJhdGNoKGluZGV4KTtcbiAgICAgICAgaWYgKGJsb2NrICYmIChhd2FpdCB0aGlzLmZpbGUuc2VlayhibG9jay5vZmZzZXQpKSkge1xuICAgICAgICAgICAgY29uc3QgbWVzc2FnZSA9IGF3YWl0IHRoaXMucmVhZGVyLnJlYWRNZXNzYWdlKE1lc3NhZ2VIZWFkZXIuRGljdGlvbmFyeUJhdGNoKTtcbiAgICAgICAgICAgIGlmIChtZXNzYWdlICYmIG1lc3NhZ2UuaXNEaWN0aW9uYXJ5QmF0Y2goKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGhlYWRlciA9IG1lc3NhZ2UuaGVhZGVyKCk7XG4gICAgICAgICAgICAgICAgY29uc3QgYnVmZmVyID0gYXdhaXQgdGhpcy5yZWFkZXIucmVhZE1lc3NhZ2VCb2R5KG1lc3NhZ2UuYm9keUxlbmd0aCk7XG4gICAgICAgICAgICAgICAgY29uc3QgdmVjdG9yID0gdGhpcy5fbG9hZERpY3Rpb25hcnlCYXRjaChoZWFkZXIsIGJ1ZmZlcik7XG4gICAgICAgICAgICAgICAgdGhpcy5kaWN0aW9uYXJpZXMuc2V0KGhlYWRlci5pZCwgdmVjdG9yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBwcm90ZWN0ZWQgYXN5bmMgcmVhZEZvb3RlcigpIHtcbiAgICAgICAgY29uc3QgeyBmaWxlIH0gPSB0aGlzO1xuICAgICAgICBjb25zdCBvZmZzZXQgPSBmaWxlLnNpemUgLSBtYWdpY0FuZFBhZGRpbmc7XG4gICAgICAgIGNvbnN0IGxlbmd0aCA9IGF3YWl0IGZpbGUucmVhZEludDMyKG9mZnNldCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlciA9IGF3YWl0IGZpbGUucmVhZEF0KG9mZnNldCAtIGxlbmd0aCwgbGVuZ3RoKTtcbiAgICAgICAgcmV0dXJuIEZvb3Rlci5kZWNvZGUoYnVmZmVyKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGFzeW5jIHJlYWROZXh0TWVzc2FnZUFuZFZhbGlkYXRlPFQgZXh0ZW5kcyBNZXNzYWdlSGVhZGVyPih0eXBlPzogVCB8IG51bGwpOiBQcm9taXNlPE1lc3NhZ2U8VD4gfCBudWxsPiB7XG4gICAgICAgIGlmICghdGhpcy5mb290ZXIpIHsgYXdhaXQgdGhpcy5vcGVuKCk7IH1cbiAgICAgICAgaWYgKHRoaXMucmVjb3JkQmF0Y2hJbmRleCA8IHRoaXMubnVtUmVjb3JkQmF0Y2hlcykge1xuICAgICAgICAgICAgY29uc3QgYmxvY2sgPSB0aGlzLmZvb3Rlci5nZXRSZWNvcmRCYXRjaCh0aGlzLnJlY29yZEJhdGNoSW5kZXgpO1xuICAgICAgICAgICAgaWYgKGJsb2NrICYmIGF3YWl0IHRoaXMuZmlsZS5zZWVrKGJsb2NrLm9mZnNldCkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5yZWFkZXIucmVhZE1lc3NhZ2UodHlwZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxufVxuXG5jbGFzcyBSZWNvcmRCYXRjaEpTT05SZWFkZXJJbXBsPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IGV4dGVuZHMgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXJJbXBsPFQ+IHtcbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgcmVhZGVyOiBKU09OTWVzc2FnZVJlYWRlciwgZGljdGlvbmFyaWVzID0gbmV3IE1hcDxudW1iZXIsIFZlY3Rvcj4oKSkge1xuICAgICAgICBzdXBlcihyZWFkZXIsIGRpY3Rpb25hcmllcyk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfbG9hZFZlY3RvcnMoaGVhZGVyOiBtZXRhZGF0YS5SZWNvcmRCYXRjaCwgYm9keTogYW55LCB0eXBlczogKEZpZWxkIHwgRGF0YVR5cGUpW10pIHtcbiAgICAgICAgcmV0dXJuIG5ldyBKU09OVmVjdG9yTG9hZGVyKGJvZHksIGhlYWRlci5ub2RlcywgaGVhZGVyLmJ1ZmZlcnMpLnZpc2l0TWFueSh0eXBlcyk7XG4gICAgfVxufVxuXG5pbnRlcmZhY2UgSVJlY29yZEJhdGNoUmVhZGVySW1wbDxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG5cbiAgICBjbG9zZWQ6IGJvb2xlYW47XG4gICAgc2NoZW1hOiBTY2hlbWE8VD47XG4gICAgYXV0b0Nsb3NlOiBib29sZWFuO1xuICAgIG51bURpY3Rpb25hcmllczogbnVtYmVyO1xuICAgIG51bVJlY29yZEJhdGNoZXM6IG51bWJlcjtcbiAgICBkaWN0aW9uYXJpZXM6IE1hcDxudW1iZXIsIFZlY3Rvcj47XG5cbiAgICBvcGVuKGF1dG9DbG9zZT86IGJvb2xlYW4pOiB0aGlzIHwgUHJvbWlzZTx0aGlzPjtcbiAgICByZXNldChzY2hlbWE/OiBTY2hlbWE8VD4gfCBudWxsKTogdGhpcztcbiAgICBjbG9zZSgpOiB0aGlzIHwgUHJvbWlzZTx0aGlzPjtcblxuICAgIFtTeW1ib2wuaXRlcmF0b3JdPygpOiBJdGVyYWJsZUl0ZXJhdG9yPFJlY29yZEJhdGNoPFQ+PjtcbiAgICBbU3ltYm9sLmFzeW5jSXRlcmF0b3JdPygpOiBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8UmVjb3JkQmF0Y2g8VD4+O1xuXG4gICAgdGhyb3codmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+IHwgUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxhbnk+PjtcbiAgICByZXR1cm4odmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+IHwgUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxhbnk+PjtcbiAgICBuZXh0KHZhbHVlPzogYW55KTogSXRlcmF0b3JSZXN1bHQ8UmVjb3JkQmF0Y2g8VD4+IHwgUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4+O1xufVxuXG5pbnRlcmZhY2UgSVJlY29yZEJhdGNoRmlsZVJlYWRlckltcGw8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBJUmVjb3JkQmF0Y2hSZWFkZXJJbXBsPFQ+IHtcblxuICAgIGZvb3RlcjogRm9vdGVyO1xuXG4gICAgcmVhZFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpOiBSZWNvcmRCYXRjaDxUPiB8IG51bGwgfCBQcm9taXNlPFJlY29yZEJhdGNoPFQ+IHwgbnVsbD47XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkQmF0Y2hGaWxlUmVhZGVyPFQgZXh0ZW5kcyB7IFtrZXk6IHN0cmluZ106IERhdGFUeXBlIH0gPSBhbnk+IHtcbiAgICBjYW5jZWwoKTogdm9pZDtcbiAgICBvcGVuKGF1dG9DbG9zZT86IGJvb2xlYW4pOiB0aGlzO1xuICAgIHRocm93KHZhbHVlPzogYW55KTogSXRlcmF0b3JSZXN1bHQ8YW55PjtcbiAgICByZXR1cm4odmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+O1xuICAgIG5leHQodmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj47XG4gICAgcmVhZFJlY29yZEJhdGNoKGluZGV4OiBudW1iZXIpOiBSZWNvcmRCYXRjaDxUPiB8IG51bGw7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4ge1xuICAgIGNhbmNlbCgpOiB2b2lkO1xuICAgIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbik6IHRoaXM7XG4gICAgdGhyb3codmFsdWU/OiBhbnkpOiBJdGVyYXRvclJlc3VsdDxhbnk+O1xuICAgIHJldHVybih2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PGFueT47XG4gICAgbmV4dCh2YWx1ZT86IGFueSk6IEl0ZXJhdG9yUmVzdWx0PFJlY29yZEJhdGNoPFQ+Pjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBBc3luY1JlY29yZEJhdGNoRmlsZVJlYWRlcjxUIGV4dGVuZHMgeyBba2V5OiBzdHJpbmddOiBEYXRhVHlwZSB9ID0gYW55PiB7XG4gICAgY2FuY2VsKCk6IFByb21pc2U8dm9pZD47XG4gICAgb3BlbihhdXRvQ2xvc2U/OiBib29sZWFuKTogUHJvbWlzZTx0aGlzPjtcbiAgICB0aHJvdyh2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8YW55Pj47XG4gICAgcmV0dXJuKHZhbHVlPzogYW55KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxhbnk+PjtcbiAgICBuZXh0KHZhbHVlPzogYW55KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxSZWNvcmRCYXRjaDxUPj4+O1xuICAgIHJlYWRSZWNvcmRCYXRjaChpbmRleDogbnVtYmVyKTogUHJvbWlzZTxSZWNvcmRCYXRjaDxUPiB8IG51bGw+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEFzeW5jUmVjb3JkQmF0Y2hTdHJlYW1SZWFkZXI8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4ge1xuICAgIGNhbmNlbCgpOiBQcm9taXNlPHZvaWQ+O1xuICAgIG9wZW4oYXV0b0Nsb3NlPzogYm9vbGVhbik6IFByb21pc2U8dGhpcz47XG4gICAgdGhyb3codmFsdWU/OiBhbnkpOiBQcm9taXNlPEl0ZXJhdG9yUmVzdWx0PGFueT4+O1xuICAgIHJldHVybih2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8YW55Pj47XG4gICAgbmV4dCh2YWx1ZT86IGFueSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8UmVjb3JkQmF0Y2g8VD4+Pjtcbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { Visitor } from '../visitor';\nimport { UnionMode } from '../enum';\nimport { RecordBatch } from '../recordbatch';\nimport { rebaseValueOffsets } from '../util/buffer';\nimport { packBools, truncateBitmap } from '../util/bit';\nimport { BufferRegion, FieldNode } from '../ipc/metadata/message';\nimport { DataType, } from '../type';\nexport class VectorAssembler extends Visitor {\n    constructor() {\n        super();\n        this._byteLength = 0;\n        this._nodes = [];\n        this._buffers = [];\n        this._bufferRegions = [];\n    }\n    /** @nocollapse */\n    static assemble(...args) {\n        const vectors = args.reduce(function flatten(xs, x) {\n            if (Array.isArray(x)) {\n                return x.reduce(flatten, xs);\n            }\n            if (!(x instanceof RecordBatch)) {\n                return [...xs, x];\n            }\n            return [...xs, ...x.schema.fields.map((_, i) => x.getChildAt(i))];\n        }, []).filter((x) => x instanceof Vector);\n        return new VectorAssembler().visitMany(vectors)[0];\n    }\n    visit(vector) {\n        if (!DataType.isDictionary(vector.type)) {\n            const { data, length, nullCount } = vector;\n            if (length > 2147483647) {\n                throw new RangeError('Cannot write arrays larger than 2^31 - 1 in length');\n            }\n            addBuffer.call(this, nullCount <= 0\n                ? new Uint8Array(0) // placeholder validity buffer\n                : truncateBitmap(data.offset, length, data.nullBitmap)).nodes.push(new FieldNode(length, nullCount));\n        }\n        return super.visit(vector);\n    }\n    visitNull(_nullV) { return this; }\n    visitDictionary(vector) {\n        // Assemble the indices here, Dictionary assembled separately.\n        return this.visit(vector.indices);\n    }\n    get nodes() { return this._nodes; }\n    get buffers() { return this._buffers; }\n    get byteLength() { return this._byteLength; }\n    get bufferRegions() { return this._bufferRegions; }\n}\nfunction addBuffer(values) {\n    const byteLength = (values.byteLength + 7) & ~7; // Round up to a multiple of 8\n    this.buffers.push(values);\n    this.bufferRegions.push(new BufferRegion(this._byteLength, byteLength));\n    this._byteLength += byteLength;\n    return this;\n}\nfunction assembleUnion(vector) {\n    const { type, length, typeIds, valueOffsets } = vector;\n    // All Union Vectors have a typeIds buffer\n    addBuffer.call(this, typeIds);\n    // If this is a Sparse Union, treat it like all other Nested types\n    if (type.mode === UnionMode.Sparse) {\n        return assembleNestedVector.call(this, vector);\n    }\n    else if (type.mode === UnionMode.Dense) {\n        // If this is a Dense Union, add the valueOffsets buffer and potentially slice the children\n        if (vector.offset <= 0) {\n            // If the Vector hasn't been sliced, write the existing valueOffsets\n            addBuffer.call(this, valueOffsets);\n            // We can treat this like all other Nested types\n            return assembleNestedVector.call(this, vector);\n        }\n        else {\n            // A sliced Dense Union is an unpleasant case. Because the offsets are different for\n            // each child vector, we need to \"rebase\" the valueOffsets for each child\n            // Union typeIds are not necessary 0-indexed\n            const maxChildTypeId = typeIds.reduce((x, y) => Math.max(x, y), typeIds[0]);\n            const childLengths = new Int32Array(maxChildTypeId + 1);\n            // Set all to -1 to indicate that we haven't observed a first occurrence of a particular child yet\n            const childOffsets = new Int32Array(maxChildTypeId + 1).fill(-1);\n            const shiftedOffsets = new Int32Array(length);\n            // If we have a non-zero offset, then the value offsets do not start at\n            // zero. We must a) create a new offsets array with shifted offsets and\n            // b) slice the values array accordingly\n            const unshiftedOffsets = rebaseValueOffsets(-valueOffsets[0], length, valueOffsets);\n            for (let typeId, shift, index = -1; ++index < length;) {\n                if ((shift = childOffsets[typeId = typeIds[index]]) === -1) {\n                    shift = childOffsets[typeId] = unshiftedOffsets[typeId];\n                }\n                shiftedOffsets[index] = unshiftedOffsets[index] - shift;\n                ++childLengths[typeId];\n            }\n            addBuffer.call(this, shiftedOffsets);\n            // Slice and visit children accordingly\n            for (let child, childIndex = -1, numChildren = type.children.length; ++childIndex < numChildren;) {\n                if (child = vector.getChildAt(childIndex)) {\n                    const typeId = type.typeIds[childIndex];\n                    const childLength = Math.min(length, childLengths[typeId]);\n                    this.visit(child.slice(childOffsets[typeId], childLength));\n                }\n            }\n        }\n    }\n    return this;\n}\nfunction assembleBoolVector(vector) {\n    // Bool vector is a special case of FlatVector, as its data buffer needs to stay packed\n    let values;\n    if (vector.nullCount >= vector.length) {\n        // If all values are null, just insert a placeholder empty data buffer (fastest path)\n        return addBuffer.call(this, new Uint8Array(0));\n    }\n    else if ((values = vector.values) instanceof Uint8Array) {\n        // If values is already a Uint8Array, slice the bitmap (fast path)\n        return addBuffer.call(this, truncateBitmap(vector.offset, vector.length, values));\n    }\n    // Otherwise if the underlying data *isn't* a Uint8Array, enumerate\n    // the values as bools and re-pack them into a Uint8Array (slow path)\n    return addBuffer.call(this, packBools(vector));\n}\nfunction assembleFlatVector(vector) {\n    return addBuffer.call(this, vector.values.subarray(0, vector.length * vector.stride));\n}\nfunction assembleFlatListVector(vector) {\n    const { length, values, valueOffsets } = vector;\n    const firstOffset = valueOffsets[0];\n    const lastOffset = valueOffsets[length];\n    const byteLength = Math.min(lastOffset - firstOffset, values.byteLength - firstOffset);\n    // Push in the order FlatList types read their buffers\n    addBuffer.call(this, rebaseValueOffsets(-valueOffsets[0], length, valueOffsets)); // valueOffsets buffer first\n    addBuffer.call(this, values.subarray(firstOffset, firstOffset + byteLength)); // sliced values buffer second\n    return this;\n}\nfunction assembleListVector(vector) {\n    const { length, valueOffsets } = vector;\n    // If we have valueOffsets (ListVector), push that buffer first\n    if (valueOffsets) {\n        addBuffer.call(this, rebaseValueOffsets(valueOffsets[0], length, valueOffsets));\n    }\n    // Then insert the List's values child\n    return this.visit(vector.getChildAt(0));\n}\nfunction assembleNestedVector(vector) {\n    return this.visitMany(vector.type.children.map((_, i) => vector.getChildAt(i)).filter(Boolean))[0];\n}\nVectorAssembler.prototype.visitBool = assembleBoolVector;\nVectorAssembler.prototype.visitInt = assembleFlatVector;\nVectorAssembler.prototype.visitFloat = assembleFlatVector;\nVectorAssembler.prototype.visitUtf8 = assembleFlatListVector;\nVectorAssembler.prototype.visitBinary = assembleFlatListVector;\nVectorAssembler.prototype.visitFixedSizeBinary = assembleFlatVector;\nVectorAssembler.prototype.visitDate = assembleFlatVector;\nVectorAssembler.prototype.visitTimestamp = assembleFlatVector;\nVectorAssembler.prototype.visitTime = assembleFlatVector;\nVectorAssembler.prototype.visitDecimal = assembleFlatVector;\nVectorAssembler.prototype.visitList = assembleListVector;\nVectorAssembler.prototype.visitStruct = assembleNestedVector;\nVectorAssembler.prototype.visitUnion = assembleUnion;\nVectorAssembler.prototype.visitInterval = assembleFlatVector;\nVectorAssembler.prototype.visitFixedSizeList = assembleListVector;\nVectorAssembler.prototype.visitMap = assembleNestedVector;\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { MAGIC } from './message';\nimport { Schema } from '../schema';\nimport { Message } from './metadata/message';\nimport * as metadata from './metadata/message';\nimport { ChunkedVector } from '../vector/chunked';\nimport { FileBlock, Footer } from './metadata/file';\nimport { MessageHeader, MetadataVersion } from '../enum';\nimport { AsyncByteQueue } from '../io/stream';\nimport { VectorAssembler } from '../visitor/vectorassembler';\nimport { isWritableDOMStream, isWritableNodeStream, isAsyncIterable } from '../util/compat';\nimport { ReadableInterop } from '../io/interfaces';\nconst kAlignmentBytes = new Uint8Array(64).fill(0);\nexport class RecordBatchWriter extends ReadableInterop {\n    constructor() {\n        super(...arguments);\n        this.position = 0;\n        this.started = false;\n        // @ts-ignore\n        this.sink = new AsyncByteQueue();\n        this.schema = null;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n    }\n    /** @nocollapse */\n    static throughNode() { throw new Error(`\"throughNode\" not available in this environment`); }\n    /** @nocollapse */\n    static throughDOM() {\n        throw new Error(`\"throughDOM\" not available in this environment`);\n    }\n    toUint8Array(sync = false) {\n        return this.sink.toUint8Array(sync);\n    }\n    get closed() { return this.sink.closed; }\n    [Symbol.asyncIterator]() { return this.sink[Symbol.asyncIterator](); }\n    toReadableDOMStream(options) { return this.sink.toReadableDOMStream(options); }\n    toReadableNodeStream(options) { return this.sink.toReadableNodeStream(options); }\n    close() { return this.reset().sink.close(); }\n    abort(reason) { return this.reset().sink.abort(reason); }\n    reset(sink = this.sink, schema) {\n        if ((sink === this.sink) || (sink instanceof AsyncByteQueue)) {\n            this.sink = sink;\n        }\n        else {\n            this.sink = new AsyncByteQueue();\n            if (sink && isWritableDOMStream(sink)) {\n                this.toReadableDOMStream().pipeTo(sink);\n            }\n            else if (sink && isWritableNodeStream(sink)) {\n                this.toReadableNodeStream().pipe(sink);\n            }\n        }\n        this.position = 0;\n        this.schema = null;\n        this.started = false;\n        this.dictionaryBlocks = [];\n        this.recordBatchBlocks = [];\n        if (schema instanceof Schema) {\n            this.started = true;\n            this.schema = schema;\n            this._writeSchema(schema);\n        }\n        return this;\n    }\n    write(chunk) {\n        if (!this.sink) {\n            throw new Error(`RecordBatchWriter is closed`);\n        }\n        if (!this.started && (this.started = true)) {\n            this._writeSchema(this.schema = chunk.schema);\n        }\n        if (chunk.schema !== this.schema) {\n            throw new Error('Schemas unequal');\n        }\n        this._writeRecordBatch(chunk);\n    }\n    _writeMessage(message, alignment = 8) {\n        const a = alignment - 1;\n        const buffer = Message.encode(message);\n        const flatbufferSize = buffer.byteLength;\n        const alignedSize = (flatbufferSize + 4 + a) & ~a;\n        const nPaddingBytes = alignedSize - flatbufferSize - 4;\n        if (message.headerType === MessageHeader.RecordBatch) {\n            this.recordBatchBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n        else if (message.headerType === MessageHeader.DictionaryBatch) {\n            this.dictionaryBlocks.push(new FileBlock(alignedSize, message.bodyLength, this.position));\n        }\n        // Write the flatbuffer size prefix including padding\n        this._write(Int32Array.of(alignedSize - 4));\n        // Write the flatbuffer\n        if (flatbufferSize > 0) {\n            this._write(buffer);\n        }\n        // Write any padding\n        return this._writePadding(nPaddingBytes);\n    }\n    _write(buffer) {\n        if (buffer && buffer.byteLength > 0) {\n            this.sink.write(buffer);\n            this.position += buffer.byteLength;\n        }\n        return this;\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMessage(Message.from(schema))\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n    _writeFooter() {\n        const { schema, recordBatchBlocks, dictionaryBlocks } = this;\n        const buffer = Footer.encode(new Footer(schema, MetadataVersion.V4, recordBatchBlocks, dictionaryBlocks));\n        return this\n            ._write(buffer) // Write the flatbuffer\n            ._write(Int32Array.of(buffer.byteLength)) // then the footer size suffix\n            ._writeMagic(); // then the magic suffix\n    }\n    _writeMagic() {\n        return this._write(MAGIC);\n    }\n    _writePadding(nBytes) {\n        return nBytes > 0 ? this._write(kAlignmentBytes.subarray(0, nBytes)) : this;\n    }\n    _writeRecordBatch(records) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(records);\n        const recordBatch = new metadata.RecordBatch(records.length, nodes, bufferRegions);\n        const message = Message.from(recordBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeDictionaryBatch(dictionary, id, isDelta = false) {\n        const { byteLength, nodes, bufferRegions, buffers } = VectorAssembler.assemble(dictionary);\n        const recordBatch = new metadata.RecordBatch(dictionary.length, nodes, bufferRegions);\n        const dictionaryBatch = new metadata.DictionaryBatch(recordBatch, id, isDelta);\n        const message = Message.from(dictionaryBatch, byteLength);\n        return this\n            ._writeMessage(message)\n            ._writeBodyBuffers(buffers);\n    }\n    _writeBodyBuffers(buffers) {\n        let buffer;\n        let size, padding;\n        for (let i = -1, n = buffers.length; ++i < n;) {\n            if ((buffer = buffers[i]) && (size = buffer.byteLength) > 0) {\n                this._write(buffer);\n                if ((padding = ((size + 7) & ~7) - size) > 0) {\n                    this._writePadding(padding);\n                }\n            }\n        }\n        return this;\n    }\n    _writeDictionaries(dictionaryFields) {\n        for (const [id, fields] of dictionaryFields) {\n            const vector = fields[0].type.dictionaryVector;\n            if (!(vector instanceof ChunkedVector)) {\n                this._writeDictionaryBatch(vector, id, false);\n            }\n            else {\n                const chunks = vector.chunks;\n                for (let i = -1, n = chunks.length; ++i < n;) {\n                    this._writeDictionaryBatch(chunks[i], id, i > 0);\n                }\n            }\n        }\n        return this;\n    }\n}\nexport class RecordBatchFileWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(batches) {\n        const writer = new RecordBatchFileWriter();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) {\n                writer.write(batch);\n            }\n            writer.close();\n            return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) {\n                writer.write(batch);\n            }\n            writer.close();\n            return writer;\n        })();\n    }\n    close() {\n        this._writeFooter();\n        return super.close();\n    }\n    _writeSchema(schema) {\n        return this\n            ._writeMagic()._writePadding(2)\n            ._writeDictionaries(schema.dictionaryFields);\n    }\n}\nexport class RecordBatchStreamWriter extends RecordBatchWriter {\n    /** @nocollapse */\n    static writeAll(batches) {\n        const writer = new RecordBatchStreamWriter();\n        if (!isAsyncIterable(batches)) {\n            for (const batch of batches) {\n                writer.write(batch);\n            }\n            writer.close();\n            return writer;\n        }\n        return (async () => {\n            for await (const batch of batches) {\n                writer.write(batch);\n            }\n            writer.close();\n            return writer;\n        })();\n    }\n    close() {\n        this._writePadding(4);\n        return super.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { ChunkedVector } from './vector/chunked';\nexport class Column extends ChunkedVector {\n    constructor(field, vectors = [], offsets) {\n        super(field.type, ChunkedVector.flatten(...vectors), offsets);\n        this._field = field;\n    }\n    get field() { return this._field; }\n    get name() { return this.field.name; }\n    slice(begin, end) {\n        return new Column(this.field, super.slice(begin, end).chunks);\n    }\n    getChildAt(index) {\n        if (index < 0 || index >= this.numChildren) {\n            return null;\n        }\n        let columns = this._children || (this._children = []);\n        let column, field, chunks;\n        if (column = columns[index]) {\n            return column;\n        }\n        if (field = (this.type.children || [])[index]) {\n            chunks = this.chunks\n                .map((vector) => vector.getChildAt(index))\n                .filter((vec) => vec != null);\n            if (chunks.length > 0) {\n                return (columns[index] = new Column(field, chunks));\n            }\n        }\n        return null;\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNvbHVtbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFLckIsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBRWpELE1BQU0sT0FBTyxNQUFpQyxTQUFRLGFBQWdCO0lBRWxFLFlBQVksS0FBZSxFQUFFLFVBQXVCLEVBQUUsRUFBRSxPQUFxQjtRQUN6RSxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksRUFBRSxhQUFhLENBQUMsT0FBTyxDQUFDLEdBQUcsT0FBTyxDQUFDLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFDOUQsSUFBSSxDQUFDLE1BQU0sR0FBRyxLQUFLLENBQUM7SUFDeEIsQ0FBQztJQUtELElBQVcsS0FBSyxLQUFLLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDMUMsSUFBVyxJQUFJLEtBQUssT0FBTyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUM7SUFFdEMsS0FBSyxDQUFDLEtBQWMsRUFBRSxHQUFZO1FBQ3JDLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLEtBQUssRUFBRSxLQUFLLENBQUMsS0FBSyxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNsRSxDQUFDO0lBRU0sVUFBVSxDQUEyQixLQUFhO1FBRXJELElBQUksS0FBSyxHQUFHLENBQUMsSUFBSSxLQUFLLElBQUksSUFBSSxDQUFDLFdBQVcsRUFBRTtZQUFFLE9BQU8sSUFBSSxDQUFDO1NBQUU7UUFFNUQsSUFBSSxPQUFPLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEdBQUcsRUFBRSxDQUFDLENBQUM7UUFDdEQsSUFBSSxNQUFpQixFQUFFLEtBQWUsRUFBRSxNQUFtQixDQUFDO1FBRTVELElBQUksTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsRUFBRTtZQUFFLE9BQU8sTUFBTSxDQUFDO1NBQUU7UUFDL0MsSUFBSSxLQUFLLEdBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxFQUFFLENBQUMsQ0FBQyxLQUFLLENBQWMsRUFBRTtZQUN6RCxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQU07aUJBQ2YsR0FBRyxDQUFDLENBQUMsTUFBTSxFQUFFLEVBQUUsQ0FBQyxNQUFNLENBQUMsVUFBVSxDQUFJLEtBQUssQ0FBQyxDQUFDO2lCQUM1QyxNQUFNLENBQUMsQ0FBQyxHQUFHLEVBQW9CLEVBQUUsQ0FBQyxHQUFHLElBQUksSUFBSSxDQUFDLENBQUM7WUFDcEQsSUFBSSxNQUFNLENBQUMsTUFBTSxHQUFHLENBQUMsRUFBRTtnQkFDbkIsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsR0FBRyxJQUFJLE1BQU0sQ0FBSSxLQUFLLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUMxRDtTQUNKO1FBRUQsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztDQUNKIiwiZmlsZSI6ImNvbHVtbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBGaWVsZCB9IGZyb20gJy4vc2NoZW1hJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4vdmVjdG9yJztcbmltcG9ydCB7IERhdGFUeXBlIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IENodW5rZWRWZWN0b3IgfSBmcm9tICcuL3ZlY3Rvci9jaHVua2VkJztcblxuZXhwb3J0IGNsYXNzIENvbHVtbjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQ2h1bmtlZFZlY3RvcjxUPiB7XG5cbiAgICBjb25zdHJ1Y3RvcihmaWVsZDogRmllbGQ8VD4sIHZlY3RvcnM6IFZlY3RvcjxUPltdID0gW10sIG9mZnNldHM/OiBVaW50MzJBcnJheSkge1xuICAgICAgICBzdXBlcihmaWVsZC50eXBlLCBDaHVua2VkVmVjdG9yLmZsYXR0ZW4oLi4udmVjdG9ycyksIG9mZnNldHMpO1xuICAgICAgICB0aGlzLl9maWVsZCA9IGZpZWxkO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfY2hpbGRyZW4/OiBDb2x1bW5bXTtcbiAgICBwcm90ZWN0ZWQgX2ZpZWxkOiBGaWVsZDxUPjtcblxuICAgIHB1YmxpYyBnZXQgZmllbGQoKSB7IHJldHVybiB0aGlzLl9maWVsZDsgfVxuICAgIHB1YmxpYyBnZXQgbmFtZSgpIHsgcmV0dXJuIHRoaXMuZmllbGQubmFtZTsgfVxuXG4gICAgcHVibGljIHNsaWNlKGJlZ2luPzogbnVtYmVyLCBlbmQ/OiBudW1iZXIpOiBDb2x1bW48VD4ge1xuICAgICAgICByZXR1cm4gbmV3IENvbHVtbih0aGlzLmZpZWxkLCBzdXBlci5zbGljZShiZWdpbiwgZW5kKS5jaHVua3MpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4oaW5kZXg6IG51bWJlcik6IENvbHVtbjxSPiB8IG51bGwge1xuXG4gICAgICAgIGlmIChpbmRleCA8IDAgfHwgaW5kZXggPj0gdGhpcy5udW1DaGlsZHJlbikgeyByZXR1cm4gbnVsbDsgfVxuXG4gICAgICAgIGxldCBjb2x1bW5zID0gdGhpcy5fY2hpbGRyZW4gfHwgKHRoaXMuX2NoaWxkcmVuID0gW10pO1xuICAgICAgICBsZXQgY29sdW1uOiBDb2x1bW48Uj4sIGZpZWxkOiBGaWVsZDxSPiwgY2h1bmtzOiBWZWN0b3I8Uj5bXTtcblxuICAgICAgICBpZiAoY29sdW1uID0gY29sdW1uc1tpbmRleF0pIHsgcmV0dXJuIGNvbHVtbjsgfVxuICAgICAgICBpZiAoZmllbGQgPSAoKHRoaXMudHlwZS5jaGlsZHJlbiB8fCBbXSlbaW5kZXhdIGFzIEZpZWxkPFI+KSkge1xuICAgICAgICAgICAgY2h1bmtzID0gdGhpcy5jaHVua3NcbiAgICAgICAgICAgICAgICAubWFwKCh2ZWN0b3IpID0+IHZlY3Rvci5nZXRDaGlsZEF0PFI+KGluZGV4KSlcbiAgICAgICAgICAgICAgICAuZmlsdGVyKCh2ZWMpOiB2ZWMgaXMgVmVjdG9yPFI+ID0+IHZlYyAhPSBudWxsKTtcbiAgICAgICAgICAgIGlmIChjaHVua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoY29sdW1uc1tpbmRleF0gPSBuZXcgQ29sdW1uPFI+KGZpZWxkLCBjaHVua3MpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Utf8 } from '../type';\nexport class BinaryVector extends BaseVector {\n    asUtf8() {\n        return Vector.new(this.data.clone(new Utf8()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9iaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQVUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRXZDLE1BQU0sT0FBTyxZQUFhLFNBQVEsVUFBa0I7SUFDekMsTUFBTTtRQUNULE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNuRCxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2JpbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBCaW5hcnksIFV0ZjggfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIEJpbmFyeVZlY3RvciBleHRlbmRzIEJhc2VWZWN0b3I8QmluYXJ5PiB7XG4gICAgcHVibGljIGFzVXRmOCgpIHtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcodGhpcy5kYXRhLmNsb25lKG5ldyBVdGY4KCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Bool } from '../type';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { packBools } from '../util/bit';\nexport class BoolVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        let length = 0, bitmap = packBools(function* () {\n            for (let x of data) {\n                length++;\n                yield x;\n            }\n        }());\n        return Vector.new(Data.Bool(new Bool(), 0, length, 0, null, bitmap));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9ib29sLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDL0IsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFFeEMsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFnQjtJQUM1QyxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLElBQXVCO1FBQ3RDLElBQUksTUFBTSxHQUFHLENBQUMsRUFBRSxNQUFNLEdBQUcsU0FBUyxDQUFDLFFBQVEsQ0FBQztZQUN4QyxLQUFLLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRTtnQkFBRSxNQUFNLEVBQUUsQ0FBQztnQkFBQyxNQUFNLENBQUMsQ0FBQzthQUFFO1FBQzlDLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDTCxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksRUFBRSxFQUFFLENBQUMsRUFBRSxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQ3pFLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvYm9vbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCb29sIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBwYWNrQm9vbHMgfSBmcm9tICcuLi91dGlsL2JpdCc7XG5cbmV4cG9ydCBjbGFzcyBCb29sVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxCb29sPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEl0ZXJhYmxlPGJvb2xlYW4+KSB7XG4gICAgICAgIGxldCBsZW5ndGggPSAwLCBiaXRtYXAgPSBwYWNrQm9vbHMoZnVuY3Rpb24qKCkge1xuICAgICAgICAgICAgZm9yIChsZXQgeCBvZiBkYXRhKSB7IGxlbmd0aCsrOyB5aWVsZCB4OyB9XG4gICAgICAgIH0oKSk7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuQm9vbChuZXcgQm9vbCgpLCAwLCBsZW5ndGgsIDAsIG51bGwsIGJpdG1hcCkpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { DateUnit } from '../enum';\nimport { BaseVector } from './base';\nimport * as IntUtil from '../util/int';\nimport { DateDay, DateMillisecond } from '../type';\nexport class DateVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n    /** @nocollapse */\n    static from(data, unit = DateUnit.MILLISECOND) {\n        switch (unit) {\n            case DateUnit.DAY: {\n                const values = Int32Array.from(data.map((d) => d.valueOf() / 86400000));\n                return Vector.new(Data.Date(new DateDay(), 0, data.length, 0, null, values));\n            }\n            case DateUnit.MILLISECOND: {\n                const values = IntUtil.Int64.convertArray(data.map((d) => d.valueOf()));\n                return Vector.new(Data.Date(new DateMillisecond(), 0, data.length, 0, null, values));\n            }\n        }\n        throw new TypeError(`Unrecognized date unit \"${DateUnit[unit]}\"`);\n    }\n}\nexport class DateDayVector extends DateVector {\n}\nexport class DateMillisecondVector extends DateVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kYXRlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sS0FBSyxPQUFPLE1BQU0sYUFBYSxDQUFDO0FBQ3ZDLE9BQU8sRUFBUyxPQUFPLEVBQUUsZUFBZSxFQUFHLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxVQUFvQyxTQUFRLFVBQWE7SUFlbEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFoQkQsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBb0MsSUFBWSxFQUFFLE9BQWtCLFFBQVEsQ0FBQyxXQUFXO1FBQ3RHLFFBQVEsSUFBSSxFQUFFO1lBQ1YsS0FBSyxRQUFRLENBQUMsR0FBRyxDQUFDLENBQUM7Z0JBQ2YsTUFBTSxNQUFNLEdBQUcsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDaEY7WUFDRCxLQUFLLFFBQVEsQ0FBQyxXQUFXLENBQUMsQ0FBQztnQkFDdkIsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUMsQ0FBQztnQkFDeEUsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxlQUFlLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7YUFDeEY7U0FDSjtRQUNELE1BQU0sSUFBSSxTQUFTLENBQUMsMkJBQTJCLFFBQVEsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdEUsQ0FBQztDQUlKO0FBQ0QsTUFBTSxPQUFPLGFBQWMsU0FBUSxVQUFtQjtDQUFHO0FBQ3pELE1BQU0sT0FBTyxxQkFBc0IsU0FBUSxVQUEyQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9kYXRlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBEYXRlVW5pdCB9IGZyb20gJy4uL2VudW0nO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgKiBhcyBJbnRVdGlsIGZyb20gJy4uL3V0aWwvaW50JztcbmltcG9ydCB7IERhdGVfLCBEYXRlRGF5LCBEYXRlTWlsbGlzZWNvbmQgIH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBEYXRlVmVjdG9yPFQgZXh0ZW5kcyBEYXRlXyA9IERhdGVfPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgRGF0ZV8gPSBEYXRlTWlsbGlzZWNvbmQ+KGRhdGE6IERhdGVbXSwgdW5pdDogVFsndW5pdCddID0gRGF0ZVVuaXQuTUlMTElTRUNPTkQpIHtcbiAgICAgICAgc3dpdGNoICh1bml0KSB7XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0LkRBWToge1xuICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlcyA9IEludDMyQXJyYXkuZnJvbShkYXRhLm1hcCgoZCkgPT4gZC52YWx1ZU9mKCkgLyA4NjQwMDAwMCkpO1xuICAgICAgICAgICAgICAgIHJldHVybiBWZWN0b3IubmV3KERhdGEuRGF0ZShuZXcgRGF0ZURheSgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgdmFsdWVzKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0Lk1JTExJU0VDT05EOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gSW50VXRpbC5JbnQ2NC5jb252ZXJ0QXJyYXkoZGF0YS5tYXAoKGQpID0+IGQudmFsdWVPZigpKSk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5EYXRlKG5ldyBEYXRlTWlsbGlzZWNvbmQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIHZhbHVlcykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCBkYXRlIHVuaXQgXCIke0RhdGVVbml0W3VuaXRdfVwiYCk7XG4gICAgfVxuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCBkYXRhLnR5cGUudW5pdCArIDEpO1xuICAgIH1cbn1cbmV4cG9ydCBjbGFzcyBEYXRlRGF5VmVjdG9yIGV4dGVuZHMgRGF0ZVZlY3RvcjxEYXRlRGF5PiB7fVxuZXhwb3J0IGNsYXNzIERhdGVNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIERhdGVWZWN0b3I8RGF0ZU1pbGxpc2Vjb25kPiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class DecimalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 4);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kZWNpbWFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUlyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxhQUFjLFNBQVEsVUFBbUI7SUFDbEQsWUFBWSxJQUFtQjtRQUMzQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUM5QixDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2RlY2ltYWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgRGVjaW1hbCB9IGZyb20gJy4uL3R5cGUnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5cbmV4cG9ydCBjbGFzcyBEZWNpbWFsVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxEZWNpbWFsPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxEZWNpbWFsPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIDQpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Dictionary } from '../type';\nexport class DictionaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, 1);\n        this._indices = Vector.new(data.clone(this.type.indices));\n    }\n    /** @nocollapse */\n    static from(values, indices, keys) {\n        const type = new Dictionary(values.type, indices, null, null, values);\n        return Vector.new(Data.Dictionary(type, 0, keys.length, 0, null, keys));\n    }\n    _bindDataAccessors() { }\n    get indices() { return this._indices; }\n    get dictionary() { return this.type.dictionaryVector; }\n    getKey(index) { return this.indices.get(index); }\n    getValue(key) { return this.dictionary.get(key); }\n    isValid(index) { return this.indices.isValid(index); }\n    reverseLookup(value) { return this.dictionary.indexOf(value); }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9kaWN0aW9uYXJ5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUVwQyxPQUFPLEVBQVksVUFBVSxFQUFTLE1BQU0sU0FBUyxDQUFDO0FBRXRELE1BQU0sT0FBTyxnQkFBdUUsU0FBUSxVQUErQjtJQVV2SCxZQUFZLElBQStCO1FBQ3ZDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDdkIsSUFBSSxDQUFDLFFBQVEsR0FBRyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDO0lBQzlELENBQUM7SUFaRCxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUNkLE1BQWlCLEVBQUUsT0FBYSxFQUNoQyxJQUF3QztRQUV4QyxNQUFNLElBQUksR0FBRyxJQUFJLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RFLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7SUFDNUUsQ0FBQztJQU1TLGtCQUFrQixLQUFJLENBQUM7SUFDakMsSUFBVyxPQUFPLEtBQUssT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM5QyxJQUFXLFVBQVUsS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDO0lBQ3ZELE1BQU0sQ0FBQyxLQUFhLElBQTJCLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLFFBQVEsQ0FBQyxHQUFXLElBQXdCLE9BQU8sSUFBSSxDQUFDLFVBQVUsQ0FBQyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlFLE9BQU8sQ0FBQyxLQUFhLElBQUksT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDOUQsYUFBYSxDQUFDLEtBQVEsSUFBSSxPQUFPLElBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUM1RSIsImZpbGUiOiJ2ZWN0b3IvZGljdGlvbmFyeS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBWZWN0b3IgYXMgViB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgRGF0YVR5cGUsIERpY3Rpb25hcnksIFRLZXlzIH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBEaWN0aW9uYXJ5VmVjdG9yPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueSwgVEtleSBleHRlbmRzIFRLZXlzID0gVEtleXM+IGV4dGVuZHMgQmFzZVZlY3RvcjxEaWN0aW9uYXJ5PFQsIFRLZXk+PiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBEYXRhVHlwZTxhbnk+LCBUS2V5IGV4dGVuZHMgVEtleXMgPSBUS2V5cz4oXG4gICAgICAgIHZhbHVlczogVmVjdG9yPFQ+LCBpbmRpY2VzOiBUS2V5LFxuICAgICAgICBrZXlzOiBBcnJheUxpa2U8bnVtYmVyPiB8IFRLZXlbJ1RBcnJheSddXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IHR5cGUgPSBuZXcgRGljdGlvbmFyeSh2YWx1ZXMudHlwZSwgaW5kaWNlcywgbnVsbCwgbnVsbCwgdmFsdWVzKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5EaWN0aW9uYXJ5KHR5cGUsIDAsIGtleXMubGVuZ3RoLCAwLCBudWxsLCBrZXlzKSk7XG4gICAgfVxuICAgIHByb3RlY3RlZCBfaW5kaWNlczogVjxUS2V5PjtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPERpY3Rpb25hcnk8VCwgVEtleT4+KSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZvaWQgMCwgMSk7XG4gICAgICAgIHRoaXMuX2luZGljZXMgPSBWZWN0b3IubmV3KGRhdGEuY2xvbmUodGhpcy50eXBlLmluZGljZXMpKTtcbiAgICB9XG4gICAgcHJvdGVjdGVkIF9iaW5kRGF0YUFjY2Vzc29ycygpIHt9XG4gICAgcHVibGljIGdldCBpbmRpY2VzKCkgeyByZXR1cm4gdGhpcy5faW5kaWNlczsgfVxuICAgIHB1YmxpYyBnZXQgZGljdGlvbmFyeSgpIHsgcmV0dXJuIHRoaXMudHlwZS5kaWN0aW9uYXJ5VmVjdG9yOyB9XG4gICAgcHVibGljIGdldEtleShpbmRleDogbnVtYmVyKTogVEtleVsnVFZhbHVlJ10gfCBudWxsIHsgcmV0dXJuIHRoaXMuaW5kaWNlcy5nZXQoaW5kZXgpOyB9XG4gICAgcHVibGljIGdldFZhbHVlKGtleTogbnVtYmVyKTogVFsnVFZhbHVlJ10gfCBudWxsIHsgcmV0dXJuIHRoaXMuZGljdGlvbmFyeS5nZXQoa2V5KTsgfVxuICAgIHB1YmxpYyBpc1ZhbGlkKGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIHRoaXMuaW5kaWNlcy5pc1ZhbGlkKGluZGV4KTsgfVxuICAgIHB1YmxpYyByZXZlcnNlTG9va3VwKHZhbHVlOiBUKSB7IHJldHVybiB0aGlzLmRpY3Rpb25hcnkuaW5kZXhPZih2YWx1ZSk7IH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeBinaryVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.byteWidth);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemViaW5hcnkudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLHFCQUFzQixTQUFRLFVBQTJCO0lBQ2xFLFlBQVksSUFBMkI7UUFDbkMsS0FBSyxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0lBQzdDLENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvZml4ZWRzaXplYmluYXJ5LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuaW1wb3J0IHsgRml4ZWRTaXplQmluYXJ5IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBGaXhlZFNpemVCaW5hcnlWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPEZpeGVkU2l6ZUJpbmFyeT4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Rml4ZWRTaXplQmluYXJ5Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5ieXRlV2lkdGgpO1xuICAgIH1cbn1cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class FixedSizeListVector extends BaseVector {\n    constructor(data) {\n        super(data, void 0, data.type.listSize);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9maXhlZHNpemVsaXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxtQkFBOEMsU0FBUSxVQUE0QjtJQUMzRixZQUFZLElBQTRCO1FBQ3BDLEtBQUssQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEVBQUUsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUM1QyxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL2ZpeGVkc2l6ZWxpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgRml4ZWRTaXplTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxGaXhlZFNpemVMaXN0PFQ+PiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxGaXhlZFNpemVMaXN0PFQ+Pikge1xuICAgICAgICBzdXBlcihkYXRhLCB2b2lkIDAsIGRhdGEudHlwZS5saXN0U2l6ZSk7XG4gICAgfVxufVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Float16, Float32, Float64 } from '../type';\nexport class FloatVector extends BaseVector {\n    /** @nocollapse */\n    static from(data) {\n        switch (data.constructor) {\n            case Uint16Array: return Vector.new(Data.Float(new Float16(), 0, data.length, 0, null, data));\n            case Float32Array: return Vector.new(Data.Float(new Float32(), 0, data.length, 0, null, data));\n            case Float64Array: return Vector.new(Data.Float(new Float64(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Float data');\n    }\n}\nexport class Float16Vector extends FloatVector {\n}\nexport class Float32Vector extends FloatVector {\n}\nexport class Float64Vector extends FloatVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9mbG9hdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMvQixPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQ25DLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFTLE9BQU8sRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRTNELE1BQU0sT0FBTyxXQUFxQyxTQUFRLFVBQWE7SUFDbkUsa0JBQWtCO0lBQ1gsTUFBTSxDQUFDLElBQUksQ0FBa0IsSUFBaUI7UUFDakQsUUFBUSxJQUFJLENBQUMsV0FBVyxFQUFFO1lBQ3RCLEtBQUssV0FBVyxDQUFDLENBQUMsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxPQUFPLEVBQUUsRUFBRSxDQUFDLEVBQUUsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7WUFDOUYsS0FBSyxZQUFZLENBQUMsQ0FBQyxPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE9BQU8sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMvRixLQUFLLFlBQVksQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksT0FBTyxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQ2xHO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx5QkFBeUIsQ0FBQyxDQUFDO0lBQ25ELENBQUM7Q0FDSjtBQUVELE1BQU0sT0FBTyxhQUFjLFNBQVEsV0FBb0I7Q0FBRztBQUMxRCxNQUFNLE9BQU8sYUFBYyxTQUFRLFdBQW9CO0NBQUc7QUFDMUQsTUFBTSxPQUFPLGFBQWMsU0FBUSxXQUFvQjtDQUFHIiwiZmlsZSI6InZlY3Rvci9mbG9hdC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBGbG9hdCwgRmxvYXQxNiwgRmxvYXQzMiwgRmxvYXQ2NCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgRmxvYXRWZWN0b3I8VCBleHRlbmRzIEZsb2F0ID0gRmxvYXQ+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tPFQgZXh0ZW5kcyBGbG9hdD4oZGF0YTogVFsnVEFycmF5J10pIHtcbiAgICAgICAgc3dpdGNoIChkYXRhLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICBjYXNlIFVpbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkZsb2F0KG5ldyBGbG9hdDE2KCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIEZsb2F0MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5GbG9hdChuZXcgRmxvYXQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBGbG9hdDY0QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuRmxvYXQobmV3IEZsb2F0NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbnJlY29nbml6ZWQgRmxvYXQgZGF0YScpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb2F0MTZWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDE2PiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0MzJWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDMyPiB7fVxuZXhwb3J0IGNsYXNzIEZsb2F0NjRWZWN0b3IgZXh0ZW5kcyBGbG9hdFZlY3RvcjxGbG9hdDY0PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class IntervalVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, data.type.unit + 1);\n    }\n}\nexport class IntervalDayTimeVector extends IntervalVector {\n}\nexport class IntervalYearMonthVector extends IntervalVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9pbnRlcnZhbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFHckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sY0FBOEMsU0FBUSxVQUFhO0lBQzVFLFlBQVksSUFBYTtRQUNyQixLQUFLLENBQUMsSUFBSSxFQUFFLFNBQVMsRUFBRSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQztJQUMvQyxDQUFDO0NBQ0o7QUFFRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsY0FBK0I7Q0FBRztBQUM3RSxNQUFNLE9BQU8sdUJBQXdCLFNBQVEsY0FBaUM7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50ZXJ2YWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRGF0YSB9IGZyb20gJy4uL2RhdGEnO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBJbnRlcnZhbCwgSW50ZXJ2YWxEYXlUaW1lLCBJbnRlcnZhbFllYXJNb250aCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxWZWN0b3I8VCBleHRlbmRzIEludGVydmFsID0gSW50ZXJ2YWw+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIGRhdGEudHlwZS51bml0ICsgMSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgSW50ZXJ2YWxEYXlUaW1lVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxEYXlUaW1lPiB7fVxuZXhwb3J0IGNsYXNzIEludGVydmFsWWVhck1vbnRoVmVjdG9yIGV4dGVuZHMgSW50ZXJ2YWxWZWN0b3I8SW50ZXJ2YWxZZWFyTW9udGg+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\nexport class IntVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n    /** @nocollapse */\n    static from(data, is64) {\n        if (is64 === true) {\n            return data instanceof Int32Array\n                ? Vector.new(Data.Int(new Int64(), 0, data.length, 0, null, data))\n                : Vector.new(Data.Int(new Uint64(), 0, data.length, 0, null, data));\n        }\n        switch (data.constructor) {\n            case Int8Array: return Vector.new(Data.Int(new Int8(), 0, data.length, 0, null, data));\n            case Int16Array: return Vector.new(Data.Int(new Int16(), 0, data.length, 0, null, data));\n            case Int32Array: return Vector.new(Data.Int(new Int32(), 0, data.length, 0, null, data));\n            case Uint8Array: return Vector.new(Data.Int(new Uint8(), 0, data.length, 0, null, data));\n            case Uint16Array: return Vector.new(Data.Int(new Uint16(), 0, data.length, 0, null, data));\n            case Uint32Array: return Vector.new(Data.Int(new Uint32(), 0, data.length, 0, null, data));\n        }\n        throw new TypeError('Unrecognized Int data');\n    }\n}\nexport class Int8Vector extends IntVector {\n}\nexport class Int16Vector extends IntVector {\n}\nexport class Int32Vector extends IntVector {\n}\nexport class Int64Vector extends IntVector {\n}\nexport class Uint8Vector extends IntVector {\n}\nexport class Uint16Vector extends IntVector {\n}\nexport class Uint32Vector extends IntVector {\n}\nexport class Uint64Vector extends IntVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFDLEdBQUcsQ0FBQyxJQUFJLE1BQU0sRUFBRSxFQUFFLENBQUMsRUFBRSxJQUFJLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUMsQ0FBQztZQUMzRixLQUFLLFdBQVcsQ0FBQyxDQUFDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLElBQUksTUFBTSxFQUFFLEVBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQzlGO1FBQ0QsTUFBTSxJQUFJLFNBQVMsQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7Q0FJSjtBQUVELE1BQU0sT0FBTyxVQUFXLFNBQVEsU0FBZTtDQUFHO0FBQ2xELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sV0FBWSxTQUFRLFNBQWdCO0NBQUc7QUFDcEQsTUFBTSxPQUFPLFdBQVksU0FBUSxTQUFnQjtDQUFHO0FBQ3BELE1BQU0sT0FBTyxXQUFZLFNBQVEsU0FBZ0I7Q0FBRztBQUNwRCxNQUFNLE9BQU8sWUFBYSxTQUFRLFNBQWlCO0NBQUc7QUFDdEQsTUFBTSxPQUFPLFlBQWEsU0FBUSxTQUFpQjtDQUFHO0FBQ3RELE1BQU0sT0FBTyxZQUFhLFNBQVEsU0FBaUI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCB7IERhdGEgfSBmcm9tICcuLi9kYXRhJztcbmltcG9ydCB7IFZlY3RvciB9IGZyb20gJy4uL3ZlY3Rvcic7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFZlY3RvciBhcyBWIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBJbnQsIFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBJbnRWZWN0b3I8VCBleHRlbmRzIEludCA9IEludD4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgc3RhdGljIGZyb208VCBleHRlbmRzIEludD4oZGF0YTogVFsnVEFycmF5J10pOiBWPFQ+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbTxUIGV4dGVuZHMgSW50MzIgfCBVaW50MzI+KGRhdGE6IFRbJ1RBcnJheSddLCBpczY0OiB0cnVlKTogVjxUPjtcbiAgICAvKiogQG5vY29sbGFwc2UgKi9cbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogYW55LCBpczY0PzogYm9vbGVhbikge1xuICAgICAgICBpZiAoaXM2NCA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBJbnQzMkFycmF5XG4gICAgICAgICAgICAgICAgPyBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBJbnQ2NCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpXG4gICAgICAgICAgICAgICAgOiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50NjQoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGRhdGEuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgSW50OEFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBJbnQxNkFycmF5OiByZXR1cm4gVmVjdG9yLm5ldyhEYXRhLkludChuZXcgSW50MTYoKSwgMCwgZGF0YS5sZW5ndGgsIDAsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgSW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IEludDMyKCksIDAsIGRhdGEubGVuZ3RoLCAwLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQ4QXJyYXk6IHJldHVybiBWZWN0b3IubmV3KERhdGEuSW50KG5ldyBVaW50OCgpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MTZBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQxNigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBVaW50MzJBcnJheTogcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5JbnQobmV3IFVpbnQzMigpLCAwLCBkYXRhLmxlbmd0aCwgMCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBJbnQgZGF0YScpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFQ+KSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHVuZGVmaW5lZCwgMSArIE51bWJlcihkYXRhLnR5cGUuYml0V2lkdGggPiAzMikpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludDhWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8SW50OD4ge31cbmV4cG9ydCBjbGFzcyBJbnQxNlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQxNj4ge31cbmV4cG9ydCBjbGFzcyBJbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQzMj4ge31cbmV4cG9ydCBjbGFzcyBJbnQ2NFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxJbnQ2ND4ge31cbmV4cG9ydCBjbGFzcyBVaW50OFZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50OD4ge31cbmV4cG9ydCBjbGFzcyBVaW50MTZWZWN0b3IgZXh0ZW5kcyBJbnRWZWN0b3I8VWludDE2PiB7fVxuZXhwb3J0IGNsYXNzIFVpbnQzMlZlY3RvciBleHRlbmRzIEludFZlY3RvcjxVaW50MzI+IHt9XG5leHBvcnQgY2xhc3MgVWludDY0VmVjdG9yIGV4dGVuZHMgSW50VmVjdG9yPFVpbnQ2ND4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class ListVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9saXN0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFxQyxTQUFRLFVBQW1CO0NBQUciLCJmaWxlIjoidmVjdG9yL2xpc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTGlzdCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgTGlzdFZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBhbnk+IGV4dGVuZHMgQmFzZVZlY3RvcjxMaXN0PFQ+PiB7fVxuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Row } from './row';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Struct } from '../type';\nexport class MapVector extends BaseVector {\n    constructor() {\n        super(...arguments);\n        this.rowProxy = Row.new(this.type.children || [], true);\n    }\n    asStruct() {\n        return Vector.new(this.data.clone(new Struct(this.type.children)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9tYXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBa0IsTUFBTSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBRWpELE1BQU0sT0FBTyxTQUF1RCxTQUFRLFVBQW1CO0lBQS9GOztRQUNXLGFBQVEsR0FBVyxHQUFHLENBQUMsR0FBRyxDQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLEVBQUUsRUFBRSxJQUFJLENBQUMsQ0FBQztJQUl6RSxDQUFDO0lBSFUsUUFBUTtRQUNYLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RSxDQUFDO0NBQ0oiLCJmaWxlIjoidmVjdG9yL21hcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBSb3cgfSBmcm9tICcuL3Jvdyc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTWFwXywgU3RydWN0IH0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBNYXBWZWN0b3I8VCBleHRlbmRzIHsgW2tleTogc3RyaW5nXTogRGF0YVR5cGUgfSA9IGFueT4gZXh0ZW5kcyBCYXNlVmVjdG9yPE1hcF88VD4+IHtcbiAgICBwdWJsaWMgcm93UHJveHk6IFJvdzxUPiA9IFJvdy5uZXc8VD4odGhpcy50eXBlLmNoaWxkcmVuIHx8IFtdLCB0cnVlKTtcbiAgICBwdWJsaWMgYXNTdHJ1Y3QoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KHRoaXMuZGF0YS5jbG9uZShuZXcgU3RydWN0KHRoaXMudHlwZS5jaGlsZHJlbikpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class NullVector extends BaseVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9udWxsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBRXBDLE1BQU0sT0FBTyxVQUFXLFNBQVEsVUFBZ0I7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvbnVsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBOdWxsIH0gZnJvbSAnLi4vdHlwZSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcblxuZXhwb3J0IGNsYXNzIE51bGxWZWN0b3IgZXh0ZW5kcyBCYXNlVmVjdG9yPE51bGw+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimestampVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 2);\n    }\n}\nexport class TimestampSecondVector extends TimestampVector {\n}\nexport class TimestampMillisecondVector extends TimestampVector {\n}\nexport class TimestampMicrosecondVector extends TimestampVector {\n}\nexport class TimestampNanosecondVector extends TimestampVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lc3RhbXAudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELG9EQUFvRDtBQUNwRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQseURBQXlEO0FBQ3pELDREQUE0RDtBQUM1RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBR3JCLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFHcEMsTUFBTSxPQUFPLGVBQWlELFNBQVEsVUFBYTtJQUMvRSxZQUFZLElBQWE7UUFDckIsS0FBSyxDQUFDLElBQUksRUFBRSxTQUFTLEVBQUUsQ0FBQyxDQUFDLENBQUM7SUFDOUIsQ0FBQztDQUNKO0FBQ0QsTUFBTSxPQUFPLHFCQUFzQixTQUFRLGVBQWdDO0NBQUc7QUFDOUUsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLDBCQUEyQixTQUFRLGVBQXFDO0NBQUc7QUFDeEYsTUFBTSxPQUFPLHlCQUEwQixTQUFRLGVBQW9DO0NBQUciLCJmaWxlIjoidmVjdG9yL3RpbWVzdGFtcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWVzdGFtcCwgVGltZXN0YW1wU2Vjb25kLCBUaW1lc3RhbXBNaWxsaXNlY29uZCwgVGltZXN0YW1wTWljcm9zZWNvbmQsIFRpbWVzdGFtcE5hbm9zZWNvbmQgfSBmcm9tICcuLi90eXBlJztcblxuZXhwb3J0IGNsYXNzIFRpbWVzdGFtcFZlY3RvcjxUIGV4dGVuZHMgVGltZXN0YW1wID0gVGltZXN0YW1wPiBleHRlbmRzIEJhc2VWZWN0b3I8VD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdW5kZWZpbmVkLCAyKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZXN0YW1wU2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcFNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWxsaXNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBNaWNyb3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVzdGFtcFZlY3RvcjxUaW1lc3RhbXBNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBOYW5vc2Vjb25kVmVjdG9yIGV4dGVuZHMgVGltZXN0YW1wVmVjdG9yPFRpbWVzdGFtcE5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class TimeVector extends BaseVector {\n    constructor(data) {\n        super(data, undefined, 1 + Number(data.type.bitWidth > 32));\n    }\n}\nexport class TimeSecondVector extends TimeVector {\n}\nexport class TimeMillisecondVector extends TimeVector {\n}\nexport class TimeMicrosecondVector extends TimeVector {\n}\nexport class TimeNanosecondVector extends TimeVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci90aW1lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUdyQixPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBR3BDLE1BQU0sT0FBTyxVQUFrQyxTQUFRLFVBQWE7SUFDaEUsWUFBWSxJQUFhO1FBQ3JCLEtBQUssQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLENBQUMsR0FBRyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUNoRSxDQUFDO0NBQ0o7QUFDRCxNQUFNLE9BQU8sZ0JBQWlCLFNBQVEsVUFBc0I7Q0FBRztBQUMvRCxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8scUJBQXNCLFNBQVEsVUFBMkI7Q0FBRztBQUN6RSxNQUFNLE9BQU8sb0JBQXFCLFNBQVEsVUFBMEI7Q0FBRyIsImZpbGUiOiJ2ZWN0b3IvdGltZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFRpbWUsIFRpbWVTZWNvbmQsIFRpbWVNaWxsaXNlY29uZCwgVGltZU1pY3Jvc2Vjb25kLCBUaW1lTmFub3NlY29uZCB9IGZyb20gJy4uL3R5cGUnO1xuXG5leHBvcnQgY2xhc3MgVGltZVZlY3RvcjxUIGV4dGVuZHMgVGltZSA9IFRpbWU+IGV4dGVuZHMgQmFzZVZlY3RvcjxUPiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPikge1xuICAgICAgICBzdXBlcihkYXRhLCB1bmRlZmluZWQsIDEgKyBOdW1iZXIoZGF0YS50eXBlLmJpdFdpZHRoID4gMzIpKTtcbiAgICB9XG59XG5leHBvcnQgY2xhc3MgVGltZVNlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZVNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWlsbGlzZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWxsaXNlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTWljcm9zZWNvbmRWZWN0b3IgZXh0ZW5kcyBUaW1lVmVjdG9yPFRpbWVNaWNyb3NlY29uZD4ge31cbmV4cG9ydCBjbGFzcyBUaW1lTmFub3NlY29uZFZlY3RvciBleHRlbmRzIFRpbWVWZWN0b3I8VGltZU5hbm9zZWNvbmQ+IHt9XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { BaseVector } from './base';\nexport class UnionVector extends BaseVector {\n    get typeIdToChildIndex() { return this.type.typeIdToChildIndex; }\n}\nexport class DenseUnionVector extends UnionVector {\n    get valueOffsets() { return this.data.valueOffsets; }\n}\nexport class SparseUnionVector extends UnionVector {\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91bmlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUdwQyxNQUFNLE9BQU8sV0FBcUMsU0FBUSxVQUFhO0lBQ25FLElBQVcsa0JBQWtCLEtBQUssT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLGtCQUFrQixDQUFDLENBQUMsQ0FBQztDQUMzRTtBQUVELE1BQU0sT0FBTyxnQkFBaUIsU0FBUSxXQUF1QjtJQUN6RCxJQUFXLFlBQVksS0FBSyxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsWUFBYSxDQUFDLENBQUMsQ0FBQztDQUNoRTtBQUVELE1BQU0sT0FBTyxpQkFBa0IsU0FBUSxXQUF3QjtDQUFHIiwiZmlsZSI6InZlY3Rvci91bmlvbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBCYXNlVmVjdG9yIH0gZnJvbSAnLi9iYXNlJztcbmltcG9ydCB7IFVuaW9uLCBEZW5zZVVuaW9uLCBTcGFyc2VVbmlvbn0gZnJvbSAnLi4vdHlwZSc7XG5cbmV4cG9ydCBjbGFzcyBVbmlvblZlY3RvcjxUIGV4dGVuZHMgVW5pb24gPSBVbmlvbj4gZXh0ZW5kcyBCYXNlVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgZ2V0IHR5cGVJZFRvQ2hpbGRJbmRleCgpIHsgcmV0dXJuIHRoaXMudHlwZS50eXBlSWRUb0NoaWxkSW5kZXg7IH1cbn1cblxuZXhwb3J0IGNsYXNzIERlbnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxEZW5zZVVuaW9uPiB7XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzLmRhdGEudmFsdWVPZmZzZXRzITsgfVxufVxuXG5leHBvcnQgY2xhc3MgU3BhcnNlVW5pb25WZWN0b3IgZXh0ZW5kcyBVbmlvblZlY3RvcjxTcGFyc2VVbmlvbj4ge31cbiJdfQ==\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TextEncoder } from 'text-encoding-utf-8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport const encodeUtf8 = ((encoder) => encoder.encode.bind(encoder))(new TextEncoder('utf-8'));\nexport class SetVisitor extends Visitor {\n}\nconst setEpochMsToDays = (data, index, epochMs) => { data[index] = (epochMs / 86400000) | 0; };\nconst setEpochMsToMillisecondsLong = (data, index, epochMs) => {\n    data[index] = (epochMs % 4294967296) | 0;\n    data[index + 1] = (epochMs / 4294967296) | 0;\n};\nconst setEpochMsToMicrosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs / 1000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000) / 4294967296) | 0;\n};\nconst setEpochMsToNanosecondsLong = (data, index, epochMs) => {\n    data[index] = ((epochMs / 1000000) % 4294967296) | 0;\n    data[index + 1] = ((epochMs / 1000000) / 4294967296) | 0;\n};\nconst setVariableWidthBytes = (values, valueOffsets, index, value) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    if (x != null && y != null) {\n        values.set(value.subarray(0, y - x), x);\n    }\n};\nconst setBool = ({ offset, values }, index, val) => {\n    const idx = offset + index;\n    val ? (values[idx >> 3] |= (1 << (idx % 8))) // true\n        : (values[idx >> 3] &= ~(1 << (idx % 8))); // false\n};\nconst setDateDay = ({ values }, index, value) => { setEpochMsToDays(values, index, value.valueOf()); };\nconst setDateMillisecond = ({ values }, index, value) => { setEpochMsToMillisecondsLong(values, index * 2, value.valueOf()); };\nconst setNumeric = ({ stride, values }, index, value) => { values[stride * index] = value; };\nconst setFloat16 = ({ stride, values }, index, value) => { values[stride * index] = (value * 32767) + 32767; };\nconst setNumericX2 = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\nconst setFixedSizeBinary = ({ stride, values }, index, value) => { values.set(value.subarray(0, stride), stride * index); };\nconst setBinary = ({ values, valueOffsets }, index, value) => setVariableWidthBytes(values, valueOffsets, index, value);\nconst setUtf8 = ({ values, valueOffsets }, index, value) => {\n    setVariableWidthBytes(values, valueOffsets, index, encodeUtf8(value));\n};\nconst setInt = (vector, index, value) => {\n    vector.type.bitWidth < 64\n        ? setNumeric(vector, index, value)\n        : setNumericX2(vector, index, value);\n};\nconst setFloat = (vector, index, value) => {\n    vector.type.precision !== Precision.HALF\n        ? setNumeric(vector, index, value)\n        : setFloat16(vector, index, value);\n};\nconst getDate = (vector, index, value) => {\n    vector.type.unit === DateUnit.DAY\n        ? setDateDay(vector, index, value)\n        : setDateMillisecond(vector, index, value);\n};\nconst setTimestampSecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value / 1000);\nconst setTimestampMillisecond = ({ values }, index, value) => setEpochMsToMillisecondsLong(values, index * 2, value);\nconst setTimestampMicrosecond = ({ values }, index, value) => setEpochMsToMicrosecondsLong(values, index * 2, value);\nconst setTimestampNanosecond = ({ values }, index, value) => setEpochMsToNanosecondsLong(values, index * 2, value);\nconst setTimestamp = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimestampSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimestampMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimestampMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimestampNanosecond(vector, index, value);\n    }\n};\nconst setTimeSecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\nconst setTimeMillisecond = ({ values, stride }, index, value) => { values[stride * index] = value; };\nconst setTimeMicrosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTimeNanosecond = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setTime = (vector, index, value) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return setTimeSecond(vector, index, value);\n        case TimeUnit.MILLISECOND: return setTimeMillisecond(vector, index, value);\n        case TimeUnit.MICROSECOND: return setTimeMicrosecond(vector, index, value);\n        case TimeUnit.NANOSECOND: return setTimeNanosecond(vector, index, value);\n    }\n};\nconst setDecimal = ({ values }, index, value) => { values.set(value.subarray(0, 4), 4 * index); };\nconst setList = (vector, index, value) => {\n    const values = vector.getChildAt(0);\n    const { valueOffsets, stride } = vector;\n    let idx = -1, offset = valueOffsets[index * stride];\n    let end = Math.min(value.length, valueOffsets[(index * stride) + 1] - offset);\n    while (offset < end) {\n        values.set(offset++, value.get(++idx));\n    }\n};\nconst setNested = (vector, index, value) => {\n    vector.type.children.forEach(({ name }, idx) => {\n        const kid = vector.getChildAt(idx);\n        kid && kid.set(index, value[name]);\n    });\n};\nconst setUnion = (vector, index, value) => {\n    vector.type.mode === UnionMode.Dense ?\n        setDenseUnion(vector, index, value) :\n        setSparseUnion(vector, index, value);\n};\nconst setDenseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(vector.valueOffsets[index], value);\n};\nconst setSparseUnion = (vector, index, value) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    child && child.set(index, value);\n};\nconst setDictionary = (vector, index, value) => {\n    return vector.dictionary.set(vector.indices.get(index), value);\n};\nconst setIntervalValue = (vector, index, value) => {\n    (vector.type.unit === IntervalUnit.DAY_TIME)\n        ? setIntervalDayTime(vector, index, value)\n        : setIntervalYearMonth(vector, index, value);\n};\nconst setIntervalDayTime = ({ values }, index, value) => { values.set(value.subarray(0, 2), 2 * index); };\nconst setIntervalYearMonth = ({ values }, index, value) => { values[index] = (value[0] * 12) + (value[1] % 12); };\nconst setFixedSizeList = (vector, index, value) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    for (let idx = -1, offset = index * stride; ++idx < stride;) {\n        child.set(offset + idx, value.get(++idx));\n    }\n};\nSetVisitor.prototype.visitBool = setBool;\nSetVisitor.prototype.visitInt = setInt;\nSetVisitor.prototype.visitInt8 = setNumeric;\nSetVisitor.prototype.visitInt16 = setNumeric;\nSetVisitor.prototype.visitInt32 = setNumeric;\nSetVisitor.prototype.visitInt64 = setNumericX2;\nSetVisitor.prototype.visitUint8 = setNumeric;\nSetVisitor.prototype.visitUint16 = setNumeric;\nSetVisitor.prototype.visitUint32 = setNumeric;\nSetVisitor.prototype.visitUint64 = setNumericX2;\nSetVisitor.prototype.visitFloat = setFloat;\nSetVisitor.prototype.visitFloat16 = setFloat16;\nSetVisitor.prototype.visitFloat32 = setNumeric;\nSetVisitor.prototype.visitFloat64 = setNumeric;\nSetVisitor.prototype.visitUtf8 = setUtf8;\nSetVisitor.prototype.visitBinary = setBinary;\nSetVisitor.prototype.visitFixedSizeBinary = setFixedSizeBinary;\nSetVisitor.prototype.visitDate = getDate;\nSetVisitor.prototype.visitDateDay = setDateDay;\nSetVisitor.prototype.visitDateMillisecond = setDateMillisecond;\nSetVisitor.prototype.visitTimestamp = setTimestamp;\nSetVisitor.prototype.visitTimestampSecond = setTimestampSecond;\nSetVisitor.prototype.visitTimestampMillisecond = setTimestampMillisecond;\nSetVisitor.prototype.visitTimestampMicrosecond = setTimestampMicrosecond;\nSetVisitor.prototype.visitTimestampNanosecond = setTimestampNanosecond;\nSetVisitor.prototype.visitTime = setTime;\nSetVisitor.prototype.visitTimeSecond = setTimeSecond;\nSetVisitor.prototype.visitTimeMillisecond = setTimeMillisecond;\nSetVisitor.prototype.visitTimeMicrosecond = setTimeMicrosecond;\nSetVisitor.prototype.visitTimeNanosecond = setTimeNanosecond;\nSetVisitor.prototype.visitDecimal = setDecimal;\nSetVisitor.prototype.visitList = setList;\nSetVisitor.prototype.visitStruct = setNested;\nSetVisitor.prototype.visitUnion = setUnion;\nSetVisitor.prototype.visitDenseUnion = setDenseUnion;\nSetVisitor.prototype.visitSparseUnion = setSparseUnion;\nSetVisitor.prototype.visitDictionary = setDictionary;\nSetVisitor.prototype.visitInterval = setIntervalValue;\nSetVisitor.prototype.visitIntervalDayTime = setIntervalDayTime;\nSetVisitor.prototype.visitIntervalYearMonth = setIntervalYearMonth;\nSetVisitor.prototype.visitFixedSizeList = setFixedSizeList;\nSetVisitor.prototype.visitMap = setNested;\nexport const instance = new SetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Data } from '../data';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { Binary, Utf8 } from '../type';\nimport { encodeUtf8 } from '../visitor/set';\nexport class Utf8Vector extends BaseVector {\n    /** @nocollapse */\n    static from(values) {\n        const length = values.length;\n        const data = encodeUtf8(values.join(''));\n        const offsets = values.reduce((offsets, str, idx) => ((!(offsets[idx + 1] = offsets[idx] + str.length) || true) && offsets), new Uint32Array(values.length + 1));\n        return Vector.new(Data.Utf8(new Utf8(), 0, length, 0, null, offsets, data));\n    }\n    asBinary() {\n        return Vector.new(this.data.clone(new Binary()));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci91dGY4LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDZEQUE2RDtBQUM3RCwrREFBK0Q7QUFDL0Qsd0RBQXdEO0FBQ3hELDZEQUE2RDtBQUM3RCxvREFBb0Q7QUFDcEQsNkRBQTZEO0FBQzdELDZEQUE2RDtBQUM3RCxFQUFFO0FBQ0YsK0NBQStDO0FBQy9DLEVBQUU7QUFDRiw2REFBNkQ7QUFDN0QsOERBQThEO0FBQzlELHlEQUF5RDtBQUN6RCw0REFBNEQ7QUFDNUQsMERBQTBEO0FBQzFELHFCQUFxQjtBQUVyQixPQUFPLEVBQUUsSUFBSSxFQUFFLE1BQU0sU0FBUyxDQUFDO0FBQy9CLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDbkMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUN2QyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFFNUMsTUFBTSxPQUFPLFVBQVcsU0FBUSxVQUFnQjtJQUM1QyxrQkFBa0I7SUFDWCxNQUFNLENBQUMsSUFBSSxDQUFDLE1BQWdCO1FBQy9CLE1BQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUM7UUFDN0IsTUFBTSxJQUFJLEdBQUcsVUFBVSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUN6QyxNQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLENBQ2pELENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxHQUFHLEdBQUcsQ0FBQyxNQUFNLENBQUMsSUFBSSxJQUFJLENBQUMsSUFBSSxPQUFPLENBQ3ZFLEVBQUUsSUFBSSxXQUFXLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksSUFBSSxFQUFFLEVBQUUsQ0FBQyxFQUFFLE1BQU0sRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBQ2hGLENBQUM7SUFDTSxRQUFRO1FBQ1gsT0FBTyxNQUFNLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3JELENBQUM7Q0FDSiIsImZpbGUiOiJ2ZWN0b3IvdXRmOC5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhIH0gZnJvbSAnLi4vZGF0YSc7XG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgQmFzZVZlY3RvciB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBCaW5hcnksIFV0ZjggfSBmcm9tICcuLi90eXBlJztcbmltcG9ydCB7IGVuY29kZVV0ZjggfSBmcm9tICcuLi92aXNpdG9yL3NldCc7XG5cbmV4cG9ydCBjbGFzcyBVdGY4VmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvcjxVdGY4PiB7XG4gICAgLyoqIEBub2NvbGxhcHNlICovXG4gICAgcHVibGljIHN0YXRpYyBmcm9tKHZhbHVlczogc3RyaW5nW10pIHtcbiAgICAgICAgY29uc3QgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aDtcbiAgICAgICAgY29uc3QgZGF0YSA9IGVuY29kZVV0ZjgodmFsdWVzLmpvaW4oJycpKTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IHZhbHVlcy5yZWR1Y2UoKG9mZnNldHMsIHN0ciwgaWR4KSA9PiAoXG4gICAgICAgICAgICAoIShvZmZzZXRzW2lkeCArIDFdID0gb2Zmc2V0c1tpZHhdICsgc3RyLmxlbmd0aCkgfHwgdHJ1ZSkgJiYgb2Zmc2V0c1xuICAgICAgICApLCBuZXcgVWludDMyQXJyYXkodmFsdWVzLmxlbmd0aCArIDEpKTtcbiAgICAgICAgcmV0dXJuIFZlY3Rvci5uZXcoRGF0YS5VdGY4KG5ldyBVdGY4KCksIDAsIGxlbmd0aCwgMCwgbnVsbCwgb2Zmc2V0cywgZGF0YSkpO1xuICAgIH1cbiAgICBwdWJsaWMgYXNCaW5hcnkoKSB7XG4gICAgICAgIHJldHVybiBWZWN0b3IubmV3KHRoaXMuZGF0YS5jbG9uZShuZXcgQmluYXJ5KCkpKTtcbiAgICB9XG59XG4iXX0=\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License,  Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND,  either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Row } from './row';\nexport { Vector } from '../vector';\nexport { BaseVector } from './base';\nexport { BinaryVector } from './binary';\nexport { BoolVector } from './bool';\nexport { ChunkedVector } from './chunked';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './date';\nexport { DecimalVector } from './decimal';\nexport { DictionaryVector } from './dictionary';\nexport { FixedSizeBinaryVector } from './fixedsizebinary';\nexport { FixedSizeListVector } from './fixedsizelist';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './float';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './interval';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './int';\nexport { ListVector } from './list';\nexport { MapVector } from './map';\nexport { NullVector } from './null';\nexport { StructVector } from './struct';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './timestamp';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './time';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './union';\nexport { Utf8Vector } from './utf8';\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlY3Rvci9hbGwudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsNkRBQTZEO0FBQzdELCtEQUErRDtBQUMvRCx3REFBd0Q7QUFDeEQsNkRBQTZEO0FBQzdELHFEQUFxRDtBQUNyRCw2REFBNkQ7QUFDN0QsNkRBQTZEO0FBQzdELEVBQUU7QUFDRiwrQ0FBK0M7QUFDL0MsRUFBRTtBQUNGLDZEQUE2RDtBQUM3RCw4REFBOEQ7QUFDOUQsMERBQTBEO0FBQzFELDZEQUE2RDtBQUM3RCwwREFBMEQ7QUFDMUQscUJBQXFCO0FBRXJCLE9BQU8sRUFBRSxHQUFHLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUIsT0FBTyxFQUFFLE1BQU0sRUFBRSxNQUFNLFdBQVcsQ0FBQztBQUNuQyxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQ3BDLE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSxVQUFVLENBQUM7QUFDeEMsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sV0FBVyxDQUFDO0FBQzFDLE9BQU8sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLHFCQUFxQixFQUFFLE1BQU0sUUFBUSxDQUFDO0FBQzFFLE9BQU8sRUFBRSxhQUFhLEVBQUUsTUFBTSxXQUFXLENBQUM7QUFDMUMsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sY0FBYyxDQUFDO0FBQ2hELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBQzFELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQ3RELE9BQU8sRUFBRSxXQUFXLEVBQUUsYUFBYSxFQUFFLGFBQWEsRUFBRSxhQUFhLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFDbkYsT0FBTyxFQUFFLGNBQWMsRUFBRSxxQkFBcUIsRUFBRSx1QkFBdUIsRUFBRSxNQUFNLFlBQVksQ0FBQztBQUM1RixPQUFPLEVBQUUsU0FBUyxFQUFFLFVBQVUsRUFBRSxXQUFXLEVBQUUsV0FBVyxFQUFFLFdBQVcsRUFBRSxXQUFXLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxZQUFZLEVBQUUsTUFBTSxPQUFPLENBQUM7QUFDNUksT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLFFBQVEsQ0FBQztBQUNwQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sT0FBTyxDQUFDO0FBQ2xDLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDcEMsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLFVBQVUsQ0FBQztBQUN4QyxPQUFPLEVBQUUsZUFBZSxFQUFFLHFCQUFxQixFQUFFLDBCQUEwQixFQUFFLDBCQUEwQixFQUFFLHlCQUF5QixFQUFFLE1BQU0sYUFBYSxDQUFDO0FBQ3hKLE9BQU8sRUFBRSxVQUFVLEVBQUUsZ0JBQWdCLEVBQUUscUJBQXFCLEVBQUUscUJBQXFCLEVBQUUsb0JBQW9CLEVBQUUsTUFBTSxRQUFRLENBQUM7QUFDMUgsT0FBTyxFQUFFLFdBQVcsRUFBRSxnQkFBZ0IsRUFBRSxpQkFBaUIsRUFBRSxNQUFNLFNBQVMsQ0FBQztBQUMzRSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sUUFBUSxDQUFDIiwiZmlsZSI6InZlY3Rvci9hbGwuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCAgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCAgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCAgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuZXhwb3J0IHsgUm93IH0gZnJvbSAnLi9yb3cnO1xuZXhwb3J0IHsgVmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yJztcbmV4cG9ydCB7IEJhc2VWZWN0b3IgfSBmcm9tICcuL2Jhc2UnO1xuZXhwb3J0IHsgQmluYXJ5VmVjdG9yIH0gZnJvbSAnLi9iaW5hcnknO1xuZXhwb3J0IHsgQm9vbFZlY3RvciB9IGZyb20gJy4vYm9vbCc7XG5leHBvcnQgeyBDaHVua2VkVmVjdG9yIH0gZnJvbSAnLi9jaHVua2VkJztcbmV4cG9ydCB7IERhdGVWZWN0b3IsIERhdGVEYXlWZWN0b3IsIERhdGVNaWxsaXNlY29uZFZlY3RvciB9IGZyb20gJy4vZGF0ZSc7XG5leHBvcnQgeyBEZWNpbWFsVmVjdG9yIH0gZnJvbSAnLi9kZWNpbWFsJztcbmV4cG9ydCB7IERpY3Rpb25hcnlWZWN0b3IgfSBmcm9tICcuL2RpY3Rpb25hcnknO1xuZXhwb3J0IHsgRml4ZWRTaXplQmluYXJ5VmVjdG9yIH0gZnJvbSAnLi9maXhlZHNpemViaW5hcnknO1xuZXhwb3J0IHsgRml4ZWRTaXplTGlzdFZlY3RvciB9IGZyb20gJy4vZml4ZWRzaXplbGlzdCc7XG5leHBvcnQgeyBGbG9hdFZlY3RvciwgRmxvYXQxNlZlY3RvciwgRmxvYXQzMlZlY3RvciwgRmxvYXQ2NFZlY3RvciB9IGZyb20gJy4vZmxvYXQnO1xuZXhwb3J0IHsgSW50ZXJ2YWxWZWN0b3IsIEludGVydmFsRGF5VGltZVZlY3RvciwgSW50ZXJ2YWxZZWFyTW9udGhWZWN0b3IgfSBmcm9tICcuL2ludGVydmFsJztcbmV4cG9ydCB7IEludFZlY3RvciwgSW50OFZlY3RvciwgSW50MTZWZWN0b3IsIEludDMyVmVjdG9yLCBJbnQ2NFZlY3RvciwgVWludDhWZWN0b3IsIFVpbnQxNlZlY3RvciwgVWludDMyVmVjdG9yLCBVaW50NjRWZWN0b3IgfSBmcm9tICcuL2ludCc7XG5leHBvcnQgeyBMaXN0VmVjdG9yIH0gZnJvbSAnLi9saXN0JztcbmV4cG9ydCB7IE1hcFZlY3RvciB9IGZyb20gJy4vbWFwJztcbmV4cG9ydCB7IE51bGxWZWN0b3IgfSBmcm9tICcuL251bGwnO1xuZXhwb3J0IHsgU3RydWN0VmVjdG9yIH0gZnJvbSAnLi9zdHJ1Y3QnO1xuZXhwb3J0IHsgVGltZXN0YW1wVmVjdG9yLCBUaW1lc3RhbXBTZWNvbmRWZWN0b3IsIFRpbWVzdGFtcE1pbGxpc2Vjb25kVmVjdG9yLCBUaW1lc3RhbXBNaWNyb3NlY29uZFZlY3RvciwgVGltZXN0YW1wTmFub3NlY29uZFZlY3RvciB9IGZyb20gJy4vdGltZXN0YW1wJztcbmV4cG9ydCB7IFRpbWVWZWN0b3IsIFRpbWVTZWNvbmRWZWN0b3IsIFRpbWVNaWxsaXNlY29uZFZlY3RvciwgVGltZU1pY3Jvc2Vjb25kVmVjdG9yLCBUaW1lTmFub3NlY29uZFZlY3RvciB9IGZyb20gJy4vdGltZSc7XG5leHBvcnQgeyBVbmlvblZlY3RvciwgRGVuc2VVbmlvblZlY3RvciwgU3BhcnNlVW5pb25WZWN0b3IgfSBmcm9tICcuL3VuaW9uJztcbmV4cG9ydCB7IFV0ZjhWZWN0b3IgfSBmcm9tICcuL3V0ZjgnO1xuIl19\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TextDecoder } from 'text-encoding-utf-8';\nimport { UnionMode, Precision, DateUnit, TimeUnit, IntervalUnit } from '../enum';\nexport const decodeUtf8 = ((decoder) => decoder.decode.bind(decoder))(new TextDecoder('utf-8'));\nexport class GetVisitor extends Visitor {\n}\nconst epochDaysToMs = (data, index) => 86400000 * data[index];\nconst epochMillisecondsLongToMs = (data, index) => 4294967296 * (data[index + 1]) + (data[index] >>> 0);\nconst epochMicrosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000) + ((data[index] >>> 0) / 1000);\nconst epochNanosecondsLongToMs = (data, index) => 4294967296 * (data[index + 1] / 1000000) + ((data[index] >>> 0) / 1000000);\nconst epochMillisecondsToDate = (epochMs) => new Date(epochMs);\nconst epochDaysToDate = (data, index) => epochMillisecondsToDate(epochDaysToMs(data, index));\n// const epochSecondsToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochSecondsToMs(data, index));\n// const epochNanosecondsLongToDate = (data: Int32Array, index: number) => epochMillisecondsToDate(epochNanosecondsLongToMs(data, index));\nconst epochMillisecondsLongToDate = (data, index) => epochMillisecondsToDate(epochMillisecondsLongToMs(data, index));\nconst getNull = (_vector, _index) => null;\nconst getVariableWidthBytes = (values, valueOffsets, index) => {\n    const { [index]: x, [index + 1]: y } = valueOffsets;\n    return x != null && y != null ? values.subarray(x, y) : null;\n};\nconst getBool = ({ offset, values }, index) => {\n    const idx = offset + index;\n    const byte = values[idx >> 3];\n    return (byte & 1 << (idx % 8)) !== 0;\n};\nconst getDateDay = ({ values }, index) => epochDaysToDate(values, index);\nconst getDateMillisecond = ({ values }, index) => epochMillisecondsLongToDate(values, index * 2);\nconst getNumeric = ({ stride, values }, index) => values[stride * index];\nconst getFloat16 = ({ stride, values }, index) => (values[stride * index] - 32767) / 32767;\nconst getNumericX2 = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\nconst getFixedSizeBinary = ({ stride, values }, index) => values.subarray(stride * index, stride * (index + 1));\nconst getBinary = ({ values, valueOffsets }, index) => getVariableWidthBytes(values, valueOffsets, index);\nconst getUtf8 = ({ values, valueOffsets }, index) => {\n    const bytes = getVariableWidthBytes(values, valueOffsets, index);\n    return bytes !== null ? decodeUtf8(bytes) : null;\n};\nconst getInt = (vector, index) => (vector.type.bitWidth < 64\n    ? getNumeric(vector, index)\n    : getNumericX2(vector, index));\nconst getFloat = (vector, index) => (vector.type.precision !== Precision.HALF\n    ? getNumeric(vector, index)\n    : getFloat16(vector, index));\nconst getDate = (vector, index) => (vector.type.unit === DateUnit.DAY\n    ? getDateDay(vector, index)\n    : getDateMillisecond(vector, index));\nconst getTimestampSecond = ({ values }, index) => 1000 * epochMillisecondsLongToMs(values, index * 2);\nconst getTimestampMillisecond = ({ values }, index) => epochMillisecondsLongToMs(values, index * 2);\nconst getTimestampMicrosecond = ({ values }, index) => epochMicrosecondsLongToMs(values, index * 2);\nconst getTimestampNanosecond = ({ values }, index) => epochNanosecondsLongToMs(values, index * 2);\nconst getTimestamp = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimestampSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimestampMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimestampMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimestampNanosecond(vector, index);\n    }\n};\nconst getTimeSecond = ({ values, stride }, index) => values[stride * index];\nconst getTimeMillisecond = ({ values, stride }, index) => values[stride * index];\nconst getTimeMicrosecond = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\nconst getTimeNanosecond = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\nconst getTime = (vector, index) => {\n    switch (vector.type.unit) {\n        case TimeUnit.SECOND: return getTimeSecond(vector, index);\n        case TimeUnit.MILLISECOND: return getTimeMillisecond(vector, index);\n        case TimeUnit.MICROSECOND: return getTimeMicrosecond(vector, index);\n        case TimeUnit.NANOSECOND: return getTimeNanosecond(vector, index);\n    }\n};\nconst getDecimal = ({ values }, index) => values.subarray(4 * index, 4 * (index + 1));\nconst getList = (vector, index) => {\n    const child = vector.getChildAt(0), { valueOffsets, stride } = vector;\n    return child.slice(valueOffsets[index * stride], valueOffsets[(index * stride) + 1]);\n};\nconst getNested = (vector, index) => {\n    return vector.rowProxy.bind(vector, index);\n};\nconst getUnion = (vector, index) => {\n    return vector.type.mode === UnionMode.Dense ?\n        getDenseUnion(vector, index) :\n        getSparseUnion(vector, index);\n};\nconst getDenseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(vector.valueOffsets[index]) : null;\n};\nconst getSparseUnion = (vector, index) => {\n    const { typeIds, type: { typeIdToChildIndex } } = vector;\n    const child = vector.getChildAt(typeIdToChildIndex[typeIds[index]]);\n    return child ? child.get(index) : null;\n};\nconst getDictionary = (vector, index) => {\n    return vector.dictionary.get(vector.indices.get(index));\n};\nconst getInterval = (vector, index) => (vector.type.unit === IntervalUnit.DAY_TIME)\n    ? getIntervalDayTime(vector, index)\n    : getIntervalYearMonth(vector, index);\nconst getIntervalDayTime = ({ values }, index) => values.subarray(2 * index, 2 * (index + 1));\nconst getIntervalYearMonth = ({ values }, index) => {\n    const interval = values[index];\n    const int32s = new Int32Array(2);\n    int32s[0] = interval / 12 | 0; /* years */\n    int32s[1] = interval % 12 | 0; /* months */\n    return int32s;\n};\nconst getFixedSizeList = (vector, index) => {\n    const child = vector.getChildAt(0), { stride } = vector;\n    return child.slice(index * stride, (index + 1) * stride);\n};\nGetVisitor.prototype.visitNull = getNull;\nGetVisitor.prototype.visitBool = getBool;\nGetVisitor.prototype.visitInt = getInt;\nGetVisitor.prototype.visitInt8 = getNumeric;\nGetVisitor.prototype.visitInt16 = getNumeric;\nGetVisitor.prototype.visitInt32 = getNumeric;\nGetVisitor.prototype.visitInt64 = getNumericX2;\nGetVisitor.prototype.visitUint8 = getNumeric;\nGetVisitor.prototype.visitUint16 = getNumeric;\nGetVisitor.prototype.visitUint32 = getNumeric;\nGetVisitor.prototype.visitUint64 = getNumericX2;\nGetVisitor.prototype.visitFloat = getFloat;\nGetVisitor.prototype.visitFloat16 = getFloat16;\nGetVisitor.prototype.visitFloat32 = getNumeric;\nGetVisitor.prototype.visitFloat64 = getNumeric;\nGetVisitor.prototype.visitUtf8 = getUtf8;\nGetVisitor.prototype.visitBinary = getBinary;\nGetVisitor.prototype.visitFixedSizeBinary = getFixedSizeBinary;\nGetVisitor.prototype.visitDate = getDate;\nGetVisitor.prototype.visitDateDay = getDateDay;\nGetVisitor.prototype.visitDateMillisecond = getDateMillisecond;\nGetVisitor.prototype.visitTimestamp = getTimestamp;\nGetVisitor.prototype.visitTimestampSecond = getTimestampSecond;\nGetVisitor.prototype.visitTimestampMillisecond = getTimestampMillisecond;\nGetVisitor.prototype.visitTimestampMicrosecond = getTimestampMicrosecond;\nGetVisitor.prototype.visitTimestampNanosecond = getTimestampNanosecond;\nGetVisitor.prototype.visitTime = getTime;\nGetVisitor.prototype.visitTimeSecond = getTimeSecond;\nGetVisitor.prototype.visitTimeMillisecond = getTimeMillisecond;\nGetVisitor.prototype.visitTimeMicrosecond = getTimeMicrosecond;\nGetVisitor.prototype.visitTimeNanosecond = getTimeNanosecond;\nGetVisitor.prototype.visitDecimal = getDecimal;\nGetVisitor.prototype.visitList = getList;\nGetVisitor.prototype.visitStruct = getNested;\nGetVisitor.prototype.visitUnion = getUnion;\nGetVisitor.prototype.visitDenseUnion = getDenseUnion;\nGetVisitor.prototype.visitSparseUnion = getSparseUnion;\nGetVisitor.prototype.visitDictionary = getDictionary;\nGetVisitor.prototype.visitInterval = getInterval;\nGetVisitor.prototype.visitIntervalDayTime = getIntervalDayTime;\nGetVisitor.prototype.visitIntervalYearMonth = getIntervalYearMonth;\nGetVisitor.prototype.visitFixedSizeList = getFixedSizeList;\nGetVisitor.prototype.visitMap = getNested;\nexport const instance = new GetVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { getBool, iterateBits } from '../util/bit';\nimport { createElementComparator } from '../util/vector';\nexport class IndexOfVisitor extends Visitor {\n}\nfunction nullIndexOf(vector, searchElement) {\n    // if you're looking for nulls and the vector isn't empty, we've got 'em!\n    return searchElement === null && vector.length > 0 ? 0 : -1;\n}\nfunction indexOfNull(vector, fromIndex) {\n    const { nullBitmap } = vector;\n    if (!nullBitmap || vector.nullCount <= 0) {\n        return -1;\n    }\n    let i = 0;\n    for (const isValid of iterateBits(nullBitmap, vector.data.offset + (fromIndex || 0), vector.length, nullBitmap, getBool)) {\n        if (!isValid) {\n            return i;\n        }\n        ++i;\n    }\n    return -1;\n}\nfunction indexOfValue(vector, searchElement, fromIndex) {\n    if (searchElement === undefined) {\n        return -1;\n    }\n    if (searchElement === null) {\n        return indexOfNull(vector, fromIndex);\n    }\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nfunction indexOfUnion(vector, searchElement, fromIndex) {\n    // Unions are special -- they do have a nullBitmap, but so can their children.\n    // If the searchElement is null, we don't know whether it came from the Union's\n    // bitmap or one of its childrens'. So we don't interrogate the Union's bitmap,\n    // since that will report the wrong index if a child has a null before the Union.\n    const compare = createElementComparator(searchElement);\n    for (let i = (fromIndex || 0) - 1, n = vector.length; ++i < n;) {\n        if (compare(vector.get(i))) {\n            return i;\n        }\n    }\n    return -1;\n}\nIndexOfVisitor.prototype.visitNull = nullIndexOf;\nIndexOfVisitor.prototype.visitBool = indexOfValue;\nIndexOfVisitor.prototype.visitInt = indexOfValue;\nIndexOfVisitor.prototype.visitInt8 = indexOfValue;\nIndexOfVisitor.prototype.visitInt16 = indexOfValue;\nIndexOfVisitor.prototype.visitInt32 = indexOfValue;\nIndexOfVisitor.prototype.visitInt64 = indexOfValue;\nIndexOfVisitor.prototype.visitUint8 = indexOfValue;\nIndexOfVisitor.prototype.visitUint16 = indexOfValue;\nIndexOfVisitor.prototype.visitUint32 = indexOfValue;\nIndexOfVisitor.prototype.visitUint64 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat = indexOfValue;\nIndexOfVisitor.prototype.visitFloat16 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat32 = indexOfValue;\nIndexOfVisitor.prototype.visitFloat64 = indexOfValue;\nIndexOfVisitor.prototype.visitUtf8 = indexOfValue;\nIndexOfVisitor.prototype.visitBinary = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeBinary = indexOfValue;\nIndexOfVisitor.prototype.visitDate = indexOfValue;\nIndexOfVisitor.prototype.visitDateDay = indexOfValue;\nIndexOfVisitor.prototype.visitDateMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestamp = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimestampNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTime = indexOfValue;\nIndexOfVisitor.prototype.visitTimeSecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMillisecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeMicrosecond = indexOfValue;\nIndexOfVisitor.prototype.visitTimeNanosecond = indexOfValue;\nIndexOfVisitor.prototype.visitDecimal = indexOfValue;\nIndexOfVisitor.prototype.visitList = indexOfValue;\nIndexOfVisitor.prototype.visitStruct = indexOfValue;\nIndexOfVisitor.prototype.visitUnion = indexOfValue;\nIndexOfVisitor.prototype.visitDenseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitSparseUnion = indexOfUnion;\nIndexOfVisitor.prototype.visitDictionary = indexOfValue;\nIndexOfVisitor.prototype.visitInterval = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalDayTime = indexOfValue;\nIndexOfVisitor.prototype.visitIntervalYearMonth = indexOfValue;\nIndexOfVisitor.prototype.visitFixedSizeList = indexOfValue;\nIndexOfVisitor.prototype.visitMap = indexOfValue;\nexport const instance = new IndexOfVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Type } from '../enum';\nimport { Visitor } from '../visitor';\nimport { iterateBits } from '../util/bit';\nimport { instance as getVisitor } from './get';\nexport class IteratorVisitor extends Visitor {\n}\nfunction nullableIterator(vector) {\n    const getFn = getVisitor.getVisitFn(vector);\n    return iterateBits(vector.nullBitmap, vector.offset, vector.length, vector, (vec, idx, nullByte, nullBit) => ((nullByte & 1 << nullBit) !== 0) ? getFn(vec, idx) : null);\n}\nfunction vectorIterator(vector) {\n    // If nullable, iterate manually\n    if (vector.nullCount > 0) {\n        return nullableIterator(vector);\n    }\n    const { type, typeId, length } = vector;\n    // Fast case, defer to native iterators if possible\n    if (vector.stride === 1 && ((typeId === Type.Timestamp) ||\n        (typeId === Type.Int && type.bitWidth !== 64) ||\n        (typeId === Type.Time && type.bitWidth !== 64) ||\n        (typeId === Type.Float && type.precision > 0 /* Precision.HALF */))) {\n        return vector.values.subarray(0, length)[Symbol.iterator]();\n    }\n    // Otherwise, iterate manually\n    return (function* (getFn) {\n        for (let index = -1; ++index < length;) {\n            yield getFn(vector, index);\n        }\n    })(getVisitor.getVisitFn(vector));\n}\nIteratorVisitor.prototype.visitNull = vectorIterator;\nIteratorVisitor.prototype.visitBool = vectorIterator;\nIteratorVisitor.prototype.visitInt = vectorIterator;\nIteratorVisitor.prototype.visitInt8 = vectorIterator;\nIteratorVisitor.prototype.visitInt16 = vectorIterator;\nIteratorVisitor.prototype.visitInt32 = vectorIterator;\nIteratorVisitor.prototype.visitInt64 = vectorIterator;\nIteratorVisitor.prototype.visitUint8 = vectorIterator;\nIteratorVisitor.prototype.visitUint16 = vectorIterator;\nIteratorVisitor.prototype.visitUint32 = vectorIterator;\nIteratorVisitor.prototype.visitUint64 = vectorIterator;\nIteratorVisitor.prototype.visitFloat = vectorIterator;\nIteratorVisitor.prototype.visitFloat16 = vectorIterator;\nIteratorVisitor.prototype.visitFloat32 = vectorIterator;\nIteratorVisitor.prototype.visitFloat64 = vectorIterator;\nIteratorVisitor.prototype.visitUtf8 = vectorIterator;\nIteratorVisitor.prototype.visitBinary = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeBinary = vectorIterator;\nIteratorVisitor.prototype.visitDate = vectorIterator;\nIteratorVisitor.prototype.visitDateDay = vectorIterator;\nIteratorVisitor.prototype.visitDateMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestamp = vectorIterator;\nIteratorVisitor.prototype.visitTimestampSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimestampNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitTime = vectorIterator;\nIteratorVisitor.prototype.visitTimeSecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMillisecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeMicrosecond = vectorIterator;\nIteratorVisitor.prototype.visitTimeNanosecond = vectorIterator;\nIteratorVisitor.prototype.visitDecimal = vectorIterator;\nIteratorVisitor.prototype.visitList = vectorIterator;\nIteratorVisitor.prototype.visitStruct = vectorIterator;\nIteratorVisitor.prototype.visitUnion = vectorIterator;\nIteratorVisitor.prototype.visitDenseUnion = vectorIterator;\nIteratorVisitor.prototype.visitSparseUnion = vectorIterator;\nIteratorVisitor.prototype.visitDictionary = vectorIterator;\nIteratorVisitor.prototype.visitInterval = vectorIterator;\nIteratorVisitor.prototype.visitIntervalDayTime = vectorIterator;\nIteratorVisitor.prototype.visitIntervalYearMonth = vectorIterator;\nIteratorVisitor.prototype.visitFixedSizeList = vectorIterator;\nIteratorVisitor.prototype.visitMap = vectorIterator;\nexport const instance = new IteratorVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { Type, Precision } from '../enum';\nimport { instance as iteratorVisitor } from './iterator';\nexport class ToArrayVisitor extends Visitor {\n}\nfunction arrayOfVector(vector) {\n    const { type, length, stride } = vector;\n    // Fast case, return subarray if possible\n    switch (type.typeId) {\n        case Type.Int:\n        case Type.Decimal:\n        case Type.Time:\n        case Type.Timestamp:\n            return vector.values.subarray(0, length * stride);\n        case Type.Float:\n            return type.precision === Precision.HALF /* Precision.HALF */\n                ? new Float32Array(vector[Symbol.iterator]())\n                : vector.values.subarray(0, length * stride);\n    }\n    // Otherwise if not primitive, slow copy\n    return [...iteratorVisitor.visit(vector)];\n}\nToArrayVisitor.prototype.visitNull = arrayOfVector;\nToArrayVisitor.prototype.visitBool = arrayOfVector;\nToArrayVisitor.prototype.visitInt = arrayOfVector;\nToArrayVisitor.prototype.visitInt8 = arrayOfVector;\nToArrayVisitor.prototype.visitInt16 = arrayOfVector;\nToArrayVisitor.prototype.visitInt32 = arrayOfVector;\nToArrayVisitor.prototype.visitInt64 = arrayOfVector;\nToArrayVisitor.prototype.visitUint8 = arrayOfVector;\nToArrayVisitor.prototype.visitUint16 = arrayOfVector;\nToArrayVisitor.prototype.visitUint32 = arrayOfVector;\nToArrayVisitor.prototype.visitUint64 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat = arrayOfVector;\nToArrayVisitor.prototype.visitFloat16 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat32 = arrayOfVector;\nToArrayVisitor.prototype.visitFloat64 = arrayOfVector;\nToArrayVisitor.prototype.visitUtf8 = arrayOfVector;\nToArrayVisitor.prototype.visitBinary = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeBinary = arrayOfVector;\nToArrayVisitor.prototype.visitDate = arrayOfVector;\nToArrayVisitor.prototype.visitDateDay = arrayOfVector;\nToArrayVisitor.prototype.visitDateMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestamp = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimestampNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTime = arrayOfVector;\nToArrayVisitor.prototype.visitTimeSecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMillisecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeMicrosecond = arrayOfVector;\nToArrayVisitor.prototype.visitTimeNanosecond = arrayOfVector;\nToArrayVisitor.prototype.visitDecimal = arrayOfVector;\nToArrayVisitor.prototype.visitList = arrayOfVector;\nToArrayVisitor.prototype.visitStruct = arrayOfVector;\nToArrayVisitor.prototype.visitUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDenseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitSparseUnion = arrayOfVector;\nToArrayVisitor.prototype.visitDictionary = arrayOfVector;\nToArrayVisitor.prototype.visitInterval = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalDayTime = arrayOfVector;\nToArrayVisitor.prototype.visitIntervalYearMonth = arrayOfVector;\nToArrayVisitor.prototype.visitFixedSizeList = arrayOfVector;\nToArrayVisitor.prototype.visitMap = arrayOfVector;\nexport const instance = new ToArrayVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport { TimeUnit } from '../enum';\nconst sum = (x, y) => x + y;\nconst variableWidthColumnErrorMessage = (type) => `Cannot compute the byte width of variable-width column ${type}`;\nexport class ByteWidthVisitor extends Visitor {\n    visitNull(____) { return 0; }\n    visitInt(type) { return type.bitWidth / 8; }\n    visitFloat(type) { return type.ArrayType.BYTES_PER_ELEMENT; }\n    visitBinary(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitUtf8(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitBool(____) { return 1 / 8; }\n    visitDecimal(____) { return 16; }\n    visitDate(type) { return (type.unit + 1) * 4; }\n    visitTime(type) { return type.bitWidth / 8; }\n    visitTimestamp(type) { return type.unit === TimeUnit.SECOND ? 4 : 8; }\n    visitInterval(type) { return (type.unit + 1) * 4; }\n    visitList(type) { throw new Error(variableWidthColumnErrorMessage(type)); }\n    visitStruct(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitUnion(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitFixedSizeBinary(type) { return type.byteWidth; }\n    visitFixedSizeList(type) { return type.listSize * this.visitFields(type.children).reduce(sum, 0); }\n    visitMap(type) { return this.visitFields(type.children).reduce(sum, 0); }\n    visitDictionary(type) { return this.visit(type.indices); }\n    visitFields(fields) { return (fields || []).map((field) => this.visit(field.type)); }\n    visitSchema(schema) { return this.visitFields(schema.fields).reduce(sum, 0); }\n}\nexport const instance = new ByteWidthVisitor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Visitor } from '../visitor';\nimport * as vecs from '../vector/all';\nexport class GetVectorConstructor extends Visitor {\n    visitNull() { return vecs.NullVector; }\n    visitBool() { return vecs.BoolVector; }\n    visitInt() { return vecs.IntVector; }\n    visitInt8() { return vecs.Int8Vector; }\n    visitInt16() { return vecs.Int16Vector; }\n    visitInt32() { return vecs.Int32Vector; }\n    visitInt64() { return vecs.Int64Vector; }\n    visitUint8() { return vecs.Uint8Vector; }\n    visitUint16() { return vecs.Uint16Vector; }\n    visitUint32() { return vecs.Uint32Vector; }\n    visitUint64() { return vecs.Uint64Vector; }\n    visitFloat() { return vecs.FloatVector; }\n    visitFloat16() { return vecs.Float16Vector; }\n    visitFloat32() { return vecs.Float32Vector; }\n    visitFloat64() { return vecs.Float64Vector; }\n    visitUtf8() { return vecs.Utf8Vector; }\n    visitBinary() { return vecs.BinaryVector; }\n    visitFixedSizeBinary() { return vecs.FixedSizeBinaryVector; }\n    visitDate() { return vecs.DateVector; }\n    visitDateDay() { return vecs.DateDayVector; }\n    visitDateMillisecond() { return vecs.DateMillisecondVector; }\n    visitTimestamp() { return vecs.TimestampVector; }\n    visitTimestampSecond() { return vecs.TimestampSecondVector; }\n    visitTimestampMillisecond() { return vecs.TimestampMillisecondVector; }\n    visitTimestampMicrosecond() { return vecs.TimestampMicrosecondVector; }\n    visitTimestampNanosecond() { return vecs.TimestampNanosecondVector; }\n    visitTime() { return vecs.TimeVector; }\n    visitTimeSecond() { return vecs.TimeSecondVector; }\n    visitTimeMillisecond() { return vecs.TimeMillisecondVector; }\n    visitTimeMicrosecond() { return vecs.TimeMicrosecondVector; }\n    visitTimeNanosecond() { return vecs.TimeNanosecondVector; }\n    visitDecimal() { return vecs.DecimalVector; }\n    visitList() { return vecs.ListVector; }\n    visitStruct() { return vecs.StructVector; }\n    visitUnion() { return vecs.UnionVector; }\n    visitDenseUnion() { return vecs.DenseUnionVector; }\n    visitSparseUnion() { return vecs.SparseUnionVector; }\n    visitDictionary() { return vecs.DictionaryVector; }\n    visitInterval() { return vecs.IntervalVector; }\n    visitIntervalDayTime() { return vecs.IntervalDayTimeVector; }\n    visitIntervalYearMonth() { return vecs.IntervalYearMonthVector; }\n    visitFixedSizeList() { return vecs.FixedSizeListVector; }\n    visitMap() { return vecs.MapVector; }\n}\nexport const instance = new GetVectorConstructor();\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { Row } from './all';\nexport { Vector } from './all';\nexport { BaseVector } from './all';\nexport { BinaryVector } from './all';\nexport { BoolVector } from './all';\nexport { ChunkedVector } from './all';\nexport { DateVector, DateDayVector, DateMillisecondVector } from './all';\nexport { DecimalVector } from './all';\nexport { DictionaryVector } from './all';\nexport { FixedSizeBinaryVector } from './all';\nexport { FixedSizeListVector } from './all';\nexport { FloatVector, Float16Vector, Float32Vector, Float64Vector } from './all';\nexport { IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector } from './all';\nexport { IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector } from './all';\nexport { ListVector } from './all';\nexport { MapVector } from './all';\nexport { NullVector } from './all';\nexport { StructVector } from './all';\nexport { TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector } from './all';\nexport { TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector } from './all';\nexport { UnionVector, DenseUnionVector, SparseUnionVector } from './all';\nexport { Utf8Vector } from './all';\nimport { Type } from '../enum';\nimport { Vector } from '../vector';\nimport { BaseVector } from './base';\nimport { setBool } from '../util/bit';\nimport { instance as getVisitor } from '../visitor/get';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as indexOfVisitor } from '../visitor/indexof';\nimport { instance as toArrayVisitor } from '../visitor/toarray';\nimport { instance as iteratorVisitor } from '../visitor/iterator';\nimport { instance as byteWidthVisitor } from '../visitor/bytewidth';\nimport { instance as getVectorConstructor } from '../visitor/vectorctor';\n/** @nocollapse */\nVector.new = newVector;\nfunction newVector(data, ...args) {\n    return new (getVectorConstructor.getVisitFn(data.type)())(data, ...args);\n}\n//\n// We provide the following method implementations for code navigability purposes only.\n// They're overridden at runtime below with the specific Visitor implementation for each type,\n// short-circuiting the usual Visitor traversal and reducing intermediate lookups and calls.\n// This comment is here to remind you to not set breakpoints in these function bodies, or to inform\n// you why the breakpoints you have already set are not being triggered. Have a great day!\n//\nBaseVector.prototype.get = function baseVectorGet(index) {\n    return getVisitor.visit(this, index);\n};\nBaseVector.prototype.set = function baseVectorSet(index, value) {\n    return setVisitor.visit(this, index, value);\n};\nBaseVector.prototype.indexOf = function baseVectorIndexOf(value, fromIndex) {\n    return indexOfVisitor.visit(this, value, fromIndex);\n};\nBaseVector.prototype.toArray = function baseVectorToArray() {\n    return toArrayVisitor.visit(this);\n};\nBaseVector.prototype.getByteWidth = function baseVectorGetByteWidth() {\n    return byteWidthVisitor.visit(this.type);\n};\nBaseVector.prototype[Symbol.iterator] = function baseVectorSymbolIterator() {\n    return iteratorVisitor.visit(this);\n};\nBaseVector.prototype._bindDataAccessors = bindBaseVectorDataAccessors;\n// Perf: bind and assign the operator Visitor methods to each of the Vector subclasses for each Type\nObject.keys(Type)\n    .filter((typeId) => typeId !== Type.NONE && typeId !== Type[Type.NONE])\n    .map((T) => Type[T]).filter((T) => typeof T === 'number')\n    .forEach((typeId) => {\n    let typeIds;\n    switch (typeId) {\n        case Type.Int:\n            typeIds = [Type.Int8, Type.Int16, Type.Int32, Type.Int64, Type.Uint8, Type.Uint16, Type.Uint32, Type.Uint64];\n            break;\n        case Type.Float:\n            typeIds = [Type.Float16, Type.Float32, Type.Float64];\n            break;\n        case Type.Date:\n            typeIds = [Type.DateDay, Type.DateMillisecond];\n            break;\n        case Type.Time:\n            typeIds = [Type.TimeSecond, Type.TimeMillisecond, Type.TimeMicrosecond, Type.TimeNanosecond];\n            break;\n        case Type.Timestamp:\n            typeIds = [Type.TimestampSecond, Type.TimestampMillisecond, Type.TimestampMicrosecond, Type.TimestampNanosecond];\n            break;\n        case Type.Interval:\n            typeIds = [Type.IntervalDayTime, Type.IntervalYearMonth];\n            break;\n        case Type.Union:\n            typeIds = [Type.DenseUnion, Type.SparseUnion];\n            break;\n        default:\n            typeIds = [typeId];\n            break;\n    }\n    typeIds.forEach((typeId) => {\n        const VectorCtor = getVectorConstructor.visit(typeId);\n        VectorCtor.prototype['get'] = partial1(getVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['set'] = partial2(setVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['indexOf'] = partial2(indexOfVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['toArray'] = partial0(toArrayVisitor.getVisitFn(typeId));\n        VectorCtor.prototype['getByteWidth'] = partial0(byteWidthVisitor.getVisitFn(typeId));\n        VectorCtor.prototype[Symbol.iterator] = partial0(iteratorVisitor.getVisitFn(typeId));\n    });\n});\nfunction partial0(visit) {\n    return function () { return visit(this); };\n}\nfunction partial1(visit) {\n    return function (a) { return visit(this, a); };\n}\nfunction partial2(visit) {\n    return function (a, b) { return visit(this, a, b); };\n}\nfunction wrapNullable1(fn) {\n    return function (i) { return this.isValid(i) ? fn.call(this, i) : null; };\n}\nfunction wrapNullableSet(fn) {\n    return function (i, a) {\n        if (setBool(this.nullBitmap, this.offset + i, a != null)) {\n            fn.call(this, i, a);\n        }\n    };\n}\n// @ts-ignore\nfunction bindBaseVectorDataAccessors(data) {\n    const type = this.type;\n    this['get'] = getVisitor.getVisitFn(type).bind(this, this);\n    this['set'] = setVisitor.getVisitFn(type).bind(this, this);\n    this['indexOf'] = indexOfVisitor.getVisitFn(type).bind(this, this);\n    this['toArray'] = toArrayVisitor.getVisitFn(type).bind(this, this);\n    this[Symbol.iterator] = iteratorVisitor.getVisitFn(type).bind(this, this);\n    if (this.nullCount > 0) {\n        this['get'] = wrapNullable1(this['get']);\n        this['set'] = wrapNullableSet(this['set']);\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { Column } from './column';\nimport { Schema } from './schema';\nimport { isPromise } from './util/compat';\nimport { RecordBatch } from './recordbatch';\nimport { RecordBatchReader } from './ipc/reader';\nimport { ChunkedVector } from './vector/index';\nimport { RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport class Table {\n    constructor(...args) {\n        // List of inner Vectors, possibly spanning batches\n        this._columns = [];\n        let schema = null;\n        if (args[0] instanceof Schema) {\n            schema = args.shift();\n        }\n        let batches = args.reduce(function flatten(xs, x) {\n            return Array.isArray(x) ? x.reduce(flatten, xs) : [...xs, x];\n        }, []).filter((x) => x instanceof RecordBatch);\n        if (!schema && !(schema = batches[0] && batches[0].schema)) {\n            throw new TypeError('Table must be initialized with a Schema or at least one RecordBatch with a Schema');\n        }\n        this._schema = schema;\n        this._batches = batches;\n        this._batchesUnion = batches.length == 0\n            ? new RecordBatch(schema, 0, [])\n            : batches.length === 1 ? batches[0]\n                : ChunkedVector.concat(...batches);\n        this._length = this.batchesUnion.length;\n        this._numCols = this.schema.fields.length;\n    }\n    /** @nocollapse */\n    static empty() { return new Table(new Schema([]), []); }\n    /** @nocollapse */\n    static from(source) {\n        if (!source) {\n            return Table.empty();\n        }\n        let reader = RecordBatchReader.from(source);\n        if (isPromise(reader)) {\n            return (async () => await Table.from(await reader))();\n        }\n        if (reader.isSync() && (reader = reader.open())) {\n            return !reader.schema ? Table.empty() : new Table(reader.schema, [...reader]);\n        }\n        return (async (opening) => {\n            const reader = await opening;\n            const schema = reader.schema;\n            const batches = [];\n            if (schema) {\n                for await (let batch of reader) {\n                    batches.push(batch);\n                }\n                return new Table(schema, batches);\n            }\n            return Table.empty();\n        })(reader.open());\n    }\n    /** @nocollapse */\n    static async fromAsync(source) {\n        return await Table.from(source);\n    }\n    /** @nocollapse */\n    static fromVectors(vectors, names) {\n        return new Table(RecordBatch.from(vectors, names));\n    }\n    /** @nocollapse */\n    static fromStruct(struct) {\n        const schema = new Schema(struct.type.children);\n        const chunks = (struct instanceof ChunkedVector ? struct.chunks : [struct]);\n        return new Table(schema, chunks.map((chunk) => new RecordBatch(schema, chunk.data)));\n    }\n    get schema() { return this._schema; }\n    get length() { return this._length; }\n    get numCols() { return this._numCols; }\n    get batches() { return this._batches; }\n    get batchesUnion() { return this._batchesUnion; }\n    get(index) {\n        return this.batchesUnion.get(index);\n    }\n    getColumn(name) {\n        return this.getColumnAt(this.getColumnIndex(name));\n    }\n    getColumnAt(index) {\n        if (index < 0 || index >= this.numCols) {\n            return null;\n        }\n        if (this.batches.length === 1) {\n            return this.batches[0].getChildAt(index);\n        }\n        return new Column(this.schema.fields[index], this.batches.map((b) => b.getChildAt(index)));\n    }\n    getColumnIndex(name) {\n        return this.schema.fields.findIndex((f) => f.name === name);\n    }\n    [Symbol.iterator]() {\n        return this.batchesUnion[Symbol.iterator]();\n    }\n    // @ts-ignore\n    serialize(encoding = 'binary', stream = true) {\n        const writer = !stream\n            ? RecordBatchFileWriter\n            : RecordBatchStreamWriter;\n        return writer.writeAll(this.batches).toUint8Array(true);\n    }\n    count() {\n        return this.length;\n    }\n    select(...columnNames) {\n        return new Table(this.batches.map((batch) => batch.select(...columnNames)));\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { DictionaryVector } from '../vector/dictionary';\nexport class Value {\n    eq(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new Equals(this, other);\n    }\n    le(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new LTeq(this, other);\n    }\n    ge(other) {\n        if (!(other instanceof Value)) {\n            other = new Literal(other);\n        }\n        return new GTeq(this, other);\n    }\n    lt(other) {\n        return new Not(this.ge(other));\n    }\n    gt(other) {\n        return new Not(this.le(other));\n    }\n    ne(other) {\n        return new Not(this.eq(other));\n    }\n}\nexport class Literal extends Value {\n    constructor(v) {\n        super();\n        this.v = v;\n    }\n}\nexport class Col extends Value {\n    constructor(name) {\n        super();\n        this.name = name;\n    }\n    bind(batch) {\n        if (!this.colidx) {\n            // Assume column index doesn't change between calls to bind\n            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);\n            this.colidx = -1;\n            const fields = batch.schema.fields;\n            for (let idx = -1; ++idx < fields.length;) {\n                if (fields[idx].name === this.name) {\n                    this.colidx = idx;\n                    break;\n                }\n            }\n            if (this.colidx < 0) {\n                throw new Error(`Failed to bind Col \"${this.name}\"`);\n            }\n        }\n        this.vector = batch.getChildAt(this.colidx);\n        return this.vector.get.bind(this.vector);\n    }\n}\nexport class Predicate {\n    and(...expr) { return new And(this, ...expr); }\n    or(...expr) { return new Or(this, ...expr); }\n    not() { return new Not(this); }\n}\nexport class ComparisonPredicate extends Predicate {\n    constructor(left, right) {\n        super();\n        this.left = left;\n        this.right = right;\n    }\n    bind(batch) {\n        if (this.left instanceof Literal) {\n            if (this.right instanceof Literal) {\n                return this._bindLitLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindLitCol(batch, this.left, this.right);\n            }\n        }\n        else { // left is a Col\n            if (this.right instanceof Literal) {\n                return this._bindColLit(batch, this.left, this.right);\n            }\n            else { // right is a Col\n                return this._bindColCol(batch, this.left, this.right);\n            }\n        }\n    }\n}\nexport class CombinationPredicate extends Predicate {\n    constructor(...children) {\n        super();\n        this.children = children;\n    }\n}\n// add children to protoype so it doesn't get mangled in es2015/umd\nCombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety\nexport class And extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ands\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof And ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.every((p) => p(idx, batch));\n    }\n}\nexport class Or extends CombinationPredicate {\n    constructor(...children) {\n        // Flatten any Ors\n        children = children.reduce((accum, p) => {\n            return accum.concat(p instanceof Or ? p.children : p);\n        }, []);\n        super(...children);\n    }\n    bind(batch) {\n        const bound = this.children.map((p) => p.bind(batch));\n        return (idx, batch) => bound.some((p) => p(idx, batch));\n    }\n}\nexport class Equals extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v == right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        if (col.vector instanceof DictionaryVector) {\n            let key;\n            const vector = col.vector;\n            if (vector.dictionary !== this.lastDictionary) {\n                key = vector.reverseLookup(lit.v);\n                this.lastDictionary = vector.dictionary;\n                this.lastKey = key;\n            }\n            else {\n                key = this.lastKey;\n            }\n            if (key === -1) {\n                // the value doesn't exist in the dictionary - always return\n                // false\n                // TODO: special-case of PredicateFunc that encapsulates this\n                // \"always false\" behavior. That way filtering operations don't\n                // have to bother checking\n                return () => false;\n            }\n            else {\n                return (idx) => {\n                    return vector.getKey(idx) === key;\n                };\n            }\n        }\n        else {\n            return (idx, cols) => col_func(idx, cols) == lit.v;\n        }\n    }\n    _bindLitCol(batch, lit, col) {\n        // Equals is comutative\n        return this._bindColLit(batch, col, lit);\n    }\n}\nexport class LTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v <= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) <= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v <= col_func(idx, cols);\n    }\n}\nexport class GTeq extends ComparisonPredicate {\n    _bindLitLit(_batch, left, right) {\n        const rtrn = left.v >= right.v;\n        return () => rtrn;\n    }\n    _bindColCol(batch, left, right) {\n        const left_func = left.bind(batch);\n        const right_func = right.bind(batch);\n        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);\n    }\n    _bindColLit(batch, col, lit) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => col_func(idx, cols) >= lit.v;\n    }\n    _bindLitCol(batch, lit, col) {\n        const col_func = col.bind(batch);\n        return (idx, cols) => lit.v >= col_func(idx, cols);\n    }\n}\nexport class Not extends Predicate {\n    constructor(child) {\n        super();\n        this.child = child;\n    }\n    bind(batch) {\n        const func = this.child.bind(batch);\n        return (idx, batch) => !func(idx, batch);\n    }\n}\nexport class CustomPredicate extends Predicate {\n    constructor(next, bind_) {\n        super();\n        this.next = next;\n        this.bind_ = bind_;\n    }\n    bind(batch) {\n        this.bind_(batch);\n        return this.next;\n    }\n}\nexport function lit(v) { return new Literal(v); }\nexport function col(n) { return new Col(n); }\nexport function and(...p) { return new And(...p); }\nexport function or(...p) { return new Or(...p); }\nexport function custom(next, bind) {\n    return new CustomPredicate(next, bind);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport { IntVector } from '../vector/int';\nimport { Field, Schema } from '../schema';\nimport { Col } from './predicate';\nimport { RecordBatch } from '../recordbatch';\nimport { Table } from '../table';\nimport { DataType } from '../type';\nTable.prototype.scan = tableScan;\nTable.prototype.filter = tableFilter;\nTable.prototype.countBy = tableCountBy;\nexport class Dataframe extends Table {\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, predicate);\n    }\n    scan(next, bind) {\n        const batches = this.batches, numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            if (bind) {\n                bind(batch);\n            }\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                next(index, batch);\n            }\n        }\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nexport class CountByResult extends Table {\n    constructor(values, counts) {\n        const schema = new Schema([\n            new Field('values', values.type),\n            new Field('counts', counts.type)\n        ]);\n        super(new RecordBatch(schema, counts.length, [values, counts]));\n    }\n    toJSON() {\n        const values = this.getColumnAt(0);\n        const counts = this.getColumnAt(1);\n        const result = {};\n        for (let i = -1; ++i < this.length;) {\n            result[values.get(i)] = counts.get(i);\n        }\n        return result;\n    }\n}\nexport class FilteredDataFrame {\n    constructor(batches, predicate) {\n        this.batches = batches;\n        this.predicate = predicate;\n    }\n    scan(next, bind) {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            if (bind) {\n                bind(batch);\n            }\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    next(index, batch);\n                }\n            }\n        }\n    }\n    count() {\n        // inlined version of this:\n        // let sum = 0;\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) ++sum;\n        // });\n        // return sum;\n        let sum = 0;\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    ++sum;\n                }\n            }\n        }\n        return sum;\n    }\n    *[Symbol.iterator]() {\n        // inlined version of this:\n        // this.parent.scan((idx, columns) => {\n        //     if (this.predicate(idx, columns)) next(idx, columns);\n        // });\n        const batches = this.batches;\n        const numBatches = batches.length;\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            // TODO: bind batches lazily\n            // If predicate doesn't match anything in the batch we don't need\n            // to bind the callback\n            const predicate = this.predicate.bind(batch);\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                if (predicate(index, batch)) {\n                    yield batch.get(index);\n                }\n            }\n        }\n    }\n    filter(predicate) {\n        return new FilteredDataFrame(this.batches, this.predicate.and(predicate));\n    }\n    countBy(name) {\n        const batches = this.batches, numBatches = batches.length;\n        const count_by = typeof name === 'string' ? new Col(name) : name;\n        // Assume that all dictionary batches are deltas, which means that the\n        // last record batch has the most complete dictionary\n        count_by.bind(batches[numBatches - 1]);\n        const vector = count_by.vector;\n        if (!DataType.isDictionary(vector.type)) {\n            throw new Error('countBy currently only supports dictionary-encoded columns');\n        }\n        const countByteLength = Math.ceil(Math.log(vector.dictionary.length) / Math.log(256));\n        const CountsArrayType = countByteLength == 4 ? Uint32Array :\n            countByteLength >= 2 ? Uint16Array : Uint8Array;\n        const counts = new CountsArrayType(vector.dictionary.length);\n        for (let batchIndex = -1; ++batchIndex < numBatches;) {\n            // load batches\n            const batch = batches[batchIndex];\n            const predicate = this.predicate.bind(batch);\n            // rebind the countBy Col\n            count_by.bind(batch);\n            const keys = count_by.vector.indices;\n            // yield all indices\n            for (let index = -1, numRows = batch.length; ++index < numRows;) {\n                let key = keys.get(index);\n                if (key !== null && predicate(index, batch)) {\n                    counts[key]++;\n                }\n            }\n        }\n        return new CountByResult(vector.dictionary, IntVector.from(counts));\n    }\n}\nfunction tableScan(next, bind) {\n    return new Dataframe(this.batches).scan(next, bind);\n}\nfunction tableFilter(predicate) {\n    return new Dataframe(this.batches).filter(predicate);\n}\nfunction tableCountBy(name) {\n    return new Dataframe(this.batches).countBy(name);\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType } from './enum';\nexport { Data } from './data';\nexport { DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, } from './type';\nexport { Table } from './table';\nexport { Column } from './column';\nexport { Schema, Field } from './schema';\nexport { Visitor } from './visitor';\nexport { Row, Vector, BaseVector, BinaryVector, BoolVector, ChunkedVector, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, } from './vector/index';\nexport { ByteStream, AsyncByteStream, AsyncByteQueue } from './io/stream';\nexport { RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader } from './ipc/reader';\nexport { RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter } from './ipc/writer';\nexport { MessageReader, AsyncMessageReader, JSONMessageReader } from './ipc/message';\nexport { Message } from './ipc/metadata/message';\nexport { RecordBatch } from './recordbatch';\nexport { Dataframe, FilteredDataFrame, CountByResult } from './compute/dataframe';\nimport * as util_int_ from './util/int';\nimport * as util_bit_ from './util/bit';\nimport * as util_buffer_ from './util/buffer';\nimport * as util_vector_ from './util/vector';\nimport * as predicate from './compute/predicate';\nexport { predicate };\nexport const util = {\n    ...util_int_,\n    ...util_bit_,\n    ...util_buffer_,\n    ...util_vector_\n};\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\nimport streamAdapters from './io/adapters';\nimport { RecordBatchReader } from './ipc/reader';\nimport { RecordBatchWriter } from './ipc/writer';\nimport { isIterable, isAsyncIterable } from './util/compat';\nimport { AsyncByteStream, AsyncByteQueue } from './io/stream';\nstreamAdapters.toReadableDOMStream = toReadableDOMStream;\nRecordBatchReader['throughDOM'] = recordBatchReaderThroughDOMStream;\nRecordBatchWriter['throughDOM'] = recordBatchWriterThroughDOMStream;\nexport { ArrowType, DateUnit, IntervalUnit, MessageHeader, MetadataVersion, Precision, TimeUnit, Type, UnionMode, VectorType, Data, DataType, Null, Bool, Int, Int8, Int16, Int32, Int64, Uint8, Uint16, Uint32, Uint64, Float, Float16, Float32, Float64, Utf8, Binary, FixedSizeBinary, Date_, DateDay, DateMillisecond, Timestamp, TimestampSecond, TimestampMillisecond, TimestampMicrosecond, TimestampNanosecond, Time, TimeSecond, TimeMillisecond, TimeMicrosecond, TimeNanosecond, Decimal, List, Struct, Union, DenseUnion, SparseUnion, Dictionary, Interval, IntervalDayTime, IntervalYearMonth, FixedSizeList, Map_, Table, Column, Schema, Field, Visitor, Vector, BaseVector, BinaryVector, BoolVector, ChunkedVector, DateVector, DateDayVector, DateMillisecondVector, DecimalVector, DictionaryVector, FixedSizeBinaryVector, FixedSizeListVector, FloatVector, Float16Vector, Float32Vector, Float64Vector, IntervalVector, IntervalDayTimeVector, IntervalYearMonthVector, IntVector, Int8Vector, Int16Vector, Int32Vector, Int64Vector, Uint8Vector, Uint16Vector, Uint32Vector, Uint64Vector, ListVector, MapVector, NullVector, StructVector, TimestampVector, TimestampSecondVector, TimestampMillisecondVector, TimestampMicrosecondVector, TimestampNanosecondVector, TimeVector, TimeSecondVector, TimeMillisecondVector, TimeMicrosecondVector, TimeNanosecondVector, UnionVector, DenseUnionVector, SparseUnionVector, Utf8Vector, ByteStream, AsyncByteStream, AsyncByteQueue, RecordBatchReader, RecordBatchFileReader, RecordBatchStreamReader, AsyncRecordBatchFileReader, AsyncRecordBatchStreamReader, RecordBatchWriter, RecordBatchFileWriter, RecordBatchStreamWriter, MessageReader, AsyncMessageReader, JSONMessageReader, Message, RecordBatch, Dataframe, FilteredDataFrame, CountByResult, predicate, util } from './Arrow';\nfunction recordBatchReaderThroughDOMStream() {\n    const through = new AsyncByteQueue();\n    let reader = null;\n    const readable = new ReadableStream({\n        async cancel() { await through.close(); },\n        async start(controller) { await next(controller, reader || (reader = await open())); },\n        async pull(controller) { reader ? await next(controller, reader) : controller.close(); }\n    });\n    return { writable: new WritableStream(through), readable };\n    async function open() {\n        return await (await RecordBatchReader.from(through)).open();\n    }\n    async function next(controller, reader) {\n        let size = controller.desiredSize;\n        let r = null;\n        while (!(r = await reader.next()).done) {\n            controller.enqueue(r.value);\n            if (size != null && --size <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\nfunction recordBatchWriterThroughDOMStream(writableStrategy, readableStrategy) {\n    const through = new AsyncByteQueue();\n    const writer = new this().reset(through);\n    const reader = new AsyncByteStream(through);\n    const readable = new ReadableStream({\n        type: 'bytes',\n        async cancel() { await through.close(); },\n        async pull(controller) { await next(controller); },\n        async start(controller) { await next(controller); },\n    }, readableStrategy);\n    return { writable: new WritableStream(writer, writableStrategy), readable };\n    async function next(controller) {\n        let buf = null;\n        let size = controller.desiredSize;\n        while (buf = await reader.read(size || null)) {\n            // Work around https://github.com/whatwg/streams/blob/0ebe4b042e467d9876d80ae045de3843092ad797/reference-implementation/lib/helpers.js#L126\n            controller.enqueue((buf.buffer.byteLength !== 0) ? buf : buf.slice());\n            if (size != null && (size -= buf.byteLength) <= 0) {\n                return;\n            }\n        }\n        controller.close();\n    }\n}\nfunction toReadableDOMStream(source, options) {\n    if (isAsyncIterable(source)) {\n        return asyncIterableAsReadableDOMStream(source, options);\n    }\n    if (isIterable(source)) {\n        return iterableAsReadableDOMStream(source, options);\n    }\n    throw new Error(`toReadableDOMStream() must be called with an Iterable or AsyncIterable`);\n}\nfunction iterableAsReadableDOMStream(source, options) {\n    let it = null;\n    return new ReadableStream({\n        ...options,\n        start(controller) { next(controller, it || (it = source[Symbol.iterator]())); },\n        pull(controller) { it ? (next(controller, it)) : controller.close(); },\n        cancel() { (it && (it.return && it.return()) || true) && (it = null); }\n    });\n    function next(controller, it) {\n        let size = controller.desiredSize;\n        let r = null;\n        while ((size == null || size-- > 0) && !(r = it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\nfunction asyncIterableAsReadableDOMStream(source, options) {\n    let it = null;\n    return new ReadableStream({\n        ...options,\n        async start(controller) { await next(controller, it || (it = source[Symbol.asyncIterator]())); },\n        async pull(controller) { it ? (await next(controller, it)) : controller.close(); },\n        async cancel() { (it && (it.return && await it.return()) || true) && (it = null); },\n    });\n    async function next(controller, it) {\n        let size = controller.desiredSize;\n        let r = null;\n        while ((size == null || size-- > 0) && !(r = await it.next()).done) {\n            controller.enqueue(r.value);\n        }\n        r && r.done && controller.close();\n    }\n}\n\n//# sourceMappingURL=data:application/json;charset=utf8;base64,\n","import * as exports0 from './Arrow.dom.js';\nimport * as exports1 from './util/int.js';\nimport * as exports2 from './compute/predicate.js';\nObject.assign(arguments[0], exports0);"]}