// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { DictionaryVector } from '../vector/dictionary';
export class Value {
    eq(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new Equals(this, other);
    }
    le(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new LTeq(this, other);
    }
    ge(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new GTeq(this, other);
    }
    lt(other) {
        return new Not(this.ge(other));
    }
    gt(other) {
        return new Not(this.le(other));
    }
    ne(other) {
        return new Not(this.eq(other));
    }
}
export class Literal extends Value {
    constructor(v) {
        super();
        this.v = v;
    }
}
export class Col extends Value {
    constructor(name) {
        super();
        this.name = name;
    }
    bind(batch) {
        if (!this.colidx) {
            // Assume column index doesn't change between calls to bind
            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);
            this.colidx = -1;
            const fields = batch.schema.fields;
            for (let idx = -1; ++idx < fields.length;) {
                if (fields[idx].name === this.name) {
                    this.colidx = idx;
                    break;
                }
            }
            if (this.colidx < 0) {
                throw new Error(`Failed to bind Col "${this.name}"`);
            }
        }
        this.vector = batch.getChildAt(this.colidx);
        return this.vector.get.bind(this.vector);
    }
}
export class Predicate {
    and(...expr) { return new And(this, ...expr); }
    or(...expr) { return new Or(this, ...expr); }
    not() { return new Not(this); }
}
export class ComparisonPredicate extends Predicate {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
    bind(batch) {
        if (this.left instanceof Literal) {
            if (this.right instanceof Literal) {
                return this._bindLitLit(batch, this.left, this.right);
            }
            else { // right is a Col
                return this._bindLitCol(batch, this.left, this.right);
            }
        }
        else { // left is a Col
            if (this.right instanceof Literal) {
                return this._bindColLit(batch, this.left, this.right);
            }
            else { // right is a Col
                return this._bindColCol(batch, this.left, this.right);
            }
        }
    }
}
export class CombinationPredicate extends Predicate {
    constructor(...children) {
        super();
        this.children = children;
    }
}
// add children to protoype so it doesn't get mangled in es2015/umd
CombinationPredicate.prototype.children = Object.freeze([]); // freeze for safety
export class And extends CombinationPredicate {
    constructor(...children) {
        // Flatten any Ands
        children = children.reduce((accum, p) => {
            return accum.concat(p instanceof And ? p.children : p);
        }, []);
        super(...children);
    }
    bind(batch) {
        const bound = this.children.map((p) => p.bind(batch));
        return (idx, batch) => bound.every((p) => p(idx, batch));
    }
}
export class Or extends CombinationPredicate {
    constructor(...children) {
        // Flatten any Ors
        children = children.reduce((accum, p) => {
            return accum.concat(p instanceof Or ? p.children : p);
        }, []);
        super(...children);
    }
    bind(batch) {
        const bound = this.children.map((p) => p.bind(batch));
        return (idx, batch) => bound.some((p) => p(idx, batch));
    }
}
export class Equals extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v == right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        if (col.vector instanceof DictionaryVector) {
            let key;
            const vector = col.vector;
            if (vector.dictionary !== this.lastDictionary) {
                key = vector.reverseLookup(lit.v);
                this.lastDictionary = vector.dictionary;
                this.lastKey = key;
            }
            else {
                key = this.lastKey;
            }
            if (key === -1) {
                // the value doesn't exist in the dictionary - always return
                // false
                // TODO: special-case of PredicateFunc that encapsulates this
                // "always false" behavior. That way filtering operations don't
                // have to bother checking
                return () => false;
            }
            else {
                return (idx) => {
                    return vector.getKey(idx) === key;
                };
            }
        }
        else {
            return (idx, cols) => col_func(idx, cols) == lit.v;
        }
    }
    _bindLitCol(batch, lit, col) {
        // Equals is comutative
        return this._bindColLit(batch, col, lit);
    }
}
export class LTeq extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v <= right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        return (idx, cols) => col_func(idx, cols) <= lit.v;
    }
    _bindLitCol(batch, lit, col) {
        const col_func = col.bind(batch);
        return (idx, cols) => lit.v <= col_func(idx, cols);
    }
}
export class GTeq extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v >= right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        return (idx, cols) => col_func(idx, cols) >= lit.v;
    }
    _bindLitCol(batch, lit, col) {
        const col_func = col.bind(batch);
        return (idx, cols) => lit.v >= col_func(idx, cols);
    }
}
export class Not extends Predicate {
    constructor(child) {
        super();
        this.child = child;
    }
    bind(batch) {
        const func = this.child.bind(batch);
        return (idx, batch) => !func(idx, batch);
    }
}
export class CustomPredicate extends Predicate {
    constructor(next, bind_) {
        super();
        this.next = next;
        this.bind_ = bind_;
    }
    bind(batch) {
        this.bind_(batch);
        return this.next;
    }
}
export function lit(v) { return new Literal(v); }
export function col(n) { return new Col(n); }
export function and(...p) { return new And(...p); }
export function or(...p) { return new Or(...p); }
export function custom(next, bind) {
    return new CustomPredicate(next, bind);
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O1FBQVUsVUFBSyxHQUFMLEtBQUssQ0FBOEI7SUFFcEYsQ0FBQztJQUVELElBQUksQ0FBQyxLQUFrQjtRQUNuQixJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQztJQUNyQixDQUFDO0NBQ0o7QUFFRCxNQUFNLFVBQVUsR0FBRyxDQUFDLENBQU0sSUFBZ0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEUsTUFBTSxVQUFVLEdBQUcsQ0FBQyxDQUFTLElBQWMsT0FBTyxJQUFJLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDL0QsTUFBTSxVQUFVLEdBQUcsQ0FBQyxHQUFHLENBQWMsSUFBUyxPQUFPLElBQUksR0FBRyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQ3JFLE1BQU0sVUFBVSxFQUFFLENBQUMsR0FBRyxDQUFjLElBQVEsT0FBTyxJQUFJLEVBQUUsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztBQUNsRSxNQUFNLFVBQVUsTUFBTSxDQUFDLElBQW1CLEVBQUUsSUFBa0M7SUFDMUUsT0FBTyxJQUFJLGVBQWUsQ0FBQyxJQUFJLEVBQUUsSUFBSSxDQUFDLENBQUM7QUFDM0MsQ0FBQyIsImZpbGUiOiJjb21wdXRlL3ByZWRpY2F0ZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBWZWN0b3IgfSBmcm9tICcuLi92ZWN0b3InO1xuaW1wb3J0IHsgUmVjb3JkQmF0Y2ggfSBmcm9tICcuLi9yZWNvcmRiYXRjaCc7XG5pbXBvcnQgeyBEaWN0aW9uYXJ5VmVjdG9yIH0gZnJvbSAnLi4vdmVjdG9yL2RpY3Rpb25hcnknO1xuXG5leHBvcnQgdHlwZSBWYWx1ZUZ1bmM8VD4gPSAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBUIHwgbnVsbDtcbmV4cG9ydCB0eXBlIFByZWRpY2F0ZUZ1bmMgPSAoaWR4OiBudW1iZXIsIGNvbHM6IFJlY29yZEJhdGNoKSA9PiBib29sZWFuO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVmFsdWU8VD4ge1xuICAgIGVxKG90aGVyOiBWYWx1ZTxUPiB8IFQpOiBQcmVkaWNhdGUge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFZhbHVlKSkgeyBvdGhlciA9IG5ldyBMaXRlcmFsKG90aGVyKTsgfVxuICAgICAgICByZXR1cm4gbmV3IEVxdWFscyh0aGlzLCBvdGhlcik7XG4gICAgfVxuICAgIGxlKG90aGVyOiBWYWx1ZTxUPiB8IFQpOiBQcmVkaWNhdGUge1xuICAgICAgICBpZiAoIShvdGhlciBpbnN0YW5jZW9mIFZhbHVlKSkgeyBvdGhlciA9IG5ldyBMaXRlcmFsKG90aGVyKTsgfVxuICAgICAgICByZXR1cm4gbmV3IExUZXEodGhpcywgb3RoZXIpO1xuICAgIH1cbiAgICBnZShvdGhlcjogVmFsdWU8VD4gfCBUKTogUHJlZGljYXRlIHtcbiAgICAgICAgaWYgKCEob3RoZXIgaW5zdGFuY2VvZiBWYWx1ZSkpIHsgb3RoZXIgPSBuZXcgTGl0ZXJhbChvdGhlcik7IH1cbiAgICAgICAgcmV0dXJuIG5ldyBHVGVxKHRoaXMsIG90aGVyKTtcbiAgICB9XG4gICAgbHQob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMuZ2Uob3RoZXIpKTtcbiAgICB9XG4gICAgZ3Qob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMubGUob3RoZXIpKTtcbiAgICB9XG4gICAgbmUob3RoZXI6IFZhbHVlPFQ+IHwgVCk6IFByZWRpY2F0ZSB7XG4gICAgICAgIHJldHVybiBuZXcgTm90KHRoaXMuZXEob3RoZXIpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMaXRlcmFsPFQ9IGFueT4gZXh0ZW5kcyBWYWx1ZTxUPiB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHY6IFQpIHsgc3VwZXIoKTsgfVxufVxuXG5leHBvcnQgY2xhc3MgQ29sPFQ9IGFueT4gZXh0ZW5kcyBWYWx1ZTxUPiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHB1YmxpYyB2ZWN0b3I6IFZlY3RvcjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHVibGljIGNvbGlkeDogbnVtYmVyO1xuXG4gICAgY29uc3RydWN0b3IocHVibGljIG5hbWU6IHN0cmluZykgeyBzdXBlcigpOyB9XG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpOiAoaWR4OiBudW1iZXIsIGJhdGNoPzogUmVjb3JkQmF0Y2gpID0+IGFueSB7XG4gICAgICAgIGlmICghdGhpcy5jb2xpZHgpIHtcbiAgICAgICAgICAgIC8vIEFzc3VtZSBjb2x1bW4gaW5kZXggZG9lc24ndCBjaGFuZ2UgYmV0d2VlbiBjYWxscyB0byBiaW5kXG4gICAgICAgICAgICAvL3RoaXMuY29saWR4ID0gY29scy5maW5kSW5kZXgodiA9PiB2Lm5hbWUuaW5kZXhPZih0aGlzLm5hbWUpICE9IC0xKTtcbiAgICAgICAgICAgIHRoaXMuY29saWR4ID0gLTE7XG4gICAgICAgICAgICBjb25zdCBmaWVsZHMgPSBiYXRjaC5zY2hlbWEuZmllbGRzO1xuICAgICAgICAgICAgZm9yIChsZXQgaWR4ID0gLTE7ICsraWR4IDwgZmllbGRzLmxlbmd0aDspIHtcbiAgICAgICAgICAgICAgICBpZiAoZmllbGRzW2lkeF0ubmFtZSA9PT0gdGhpcy5uYW1lKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29saWR4ID0gaWR4O1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAodGhpcy5jb2xpZHggPCAwKSB7IHRocm93IG5ldyBFcnJvcihgRmFpbGVkIHRvIGJpbmQgQ29sIFwiJHt0aGlzLm5hbWV9XCJgKTsgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMudmVjdG9yID0gYmF0Y2guZ2V0Q2hpbGRBdCh0aGlzLmNvbGlkeCkhO1xuICAgICAgICByZXR1cm4gdGhpcy52ZWN0b3IuZ2V0LmJpbmQodGhpcy52ZWN0b3IpO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIFByZWRpY2F0ZSB7XG4gICAgYWJzdHJhY3QgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpOiBQcmVkaWNhdGVGdW5jO1xuICAgIGFuZCguLi5leHByOiBQcmVkaWNhdGVbXSk6IEFuZCB7IHJldHVybiBuZXcgQW5kKHRoaXMsIC4uLmV4cHIpOyB9XG4gICAgb3IoLi4uZXhwcjogUHJlZGljYXRlW10pOiBPciB7IHJldHVybiBuZXcgT3IodGhpcywgLi4uZXhwcik7IH1cbiAgICBub3QoKTogUHJlZGljYXRlIHsgcmV0dXJuIG5ldyBOb3QodGhpcyk7IH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIENvbXBhcmlzb25QcmVkaWNhdGU8VD0gYW55PiBleHRlbmRzIFByZWRpY2F0ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHJlYWRvbmx5IGxlZnQ6IFZhbHVlPFQ+LCBwdWJsaWMgcmVhZG9ubHkgcmlnaHQ6IFZhbHVlPFQ+KSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpIHtcbiAgICAgICAgaWYgKHRoaXMubGVmdCBpbnN0YW5jZW9mIExpdGVyYWwpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnJpZ2h0IGluc3RhbmNlb2YgTGl0ZXJhbCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5kTGl0TGl0KGJhdGNoLCB0aGlzLmxlZnQsIHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcmlnaHQgaXMgYSBDb2xcblxuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl9iaW5kTGl0Q29sKGJhdGNoLCB0aGlzLmxlZnQsIHRoaXMucmlnaHQgYXMgQ29sKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHsgLy8gbGVmdCBpcyBhIENvbFxuICAgICAgICAgICAgaWYgKHRoaXMucmlnaHQgaW5zdGFuY2VvZiBMaXRlcmFsKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRDb2xMaXQoYmF0Y2gsIHRoaXMubGVmdCBhcyBDb2wsIHRoaXMucmlnaHQpO1xuICAgICAgICAgICAgfSBlbHNlIHsgLy8gcmlnaHQgaXMgYSBDb2xcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fYmluZENvbENvbChiYXRjaCwgdGhpcy5sZWZ0IGFzIENvbCwgdGhpcy5yaWdodCBhcyBDb2wpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kTGl0TGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgbGVmdDogTGl0ZXJhbCwgcmlnaHQ6IExpdGVyYWwpOiBQcmVkaWNhdGVGdW5jO1xuICAgIHByb3RlY3RlZCBhYnN0cmFjdCBfYmluZENvbENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IENvbCwgcmlnaHQ6IENvbCk6IFByZWRpY2F0ZUZ1bmM7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kQ29sTGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgY29sOiBDb2wsIGxpdDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmM7XG4gICAgcHJvdGVjdGVkIGFic3RyYWN0IF9iaW5kTGl0Q29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGl0OiBMaXRlcmFsLCBjb2w6IENvbCk6IFByZWRpY2F0ZUZ1bmM7XG59XG5cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBDb21iaW5hdGlvblByZWRpY2F0ZSBleHRlbmRzIFByZWRpY2F0ZSB7XG4gICAgcmVhZG9ubHkgY2hpbGRyZW46IFByZWRpY2F0ZVtdO1xuICAgIGNvbnN0cnVjdG9yKC4uLmNoaWxkcmVuOiBQcmVkaWNhdGVbXSkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgfVxufVxuLy8gYWRkIGNoaWxkcmVuIHRvIHByb3RveXBlIHNvIGl0IGRvZXNuJ3QgZ2V0IG1hbmdsZWQgaW4gZXMyMDE1L3VtZFxuKDxhbnk+IENvbWJpbmF0aW9uUHJlZGljYXRlLnByb3RvdHlwZSkuY2hpbGRyZW4gPSBPYmplY3QuZnJlZXplKFtdKTsgLy8gZnJlZXplIGZvciBzYWZldHlcblxuZXhwb3J0IGNsYXNzIEFuZCBleHRlbmRzIENvbWJpbmF0aW9uUHJlZGljYXRlIHtcbiAgICBjb25zdHJ1Y3RvciguLi5jaGlsZHJlbjogUHJlZGljYXRlW10pIHtcbiAgICAgICAgLy8gRmxhdHRlbiBhbnkgQW5kc1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLnJlZHVjZSgoYWNjdW06IFByZWRpY2F0ZVtdLCBwOiBQcmVkaWNhdGUpOiBQcmVkaWNhdGVbXSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW0uY29uY2F0KHAgaW5zdGFuY2VvZiBBbmQgPyBwLmNoaWxkcmVuIDogcCk7XG4gICAgICAgIH0sIFtdKTtcbiAgICAgICAgc3VwZXIoLi4uY2hpbGRyZW4pO1xuICAgIH1cbiAgICBiaW5kKGJhdGNoOiBSZWNvcmRCYXRjaCkge1xuICAgICAgICBjb25zdCBib3VuZCA9IHRoaXMuY2hpbGRyZW4ubWFwKChwKSA9PiBwLmJpbmQoYmF0Y2gpKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgYmF0Y2g6IFJlY29yZEJhdGNoKSA9PiBib3VuZC5ldmVyeSgocCkgPT4gcChpZHgsIGJhdGNoKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgT3IgZXh0ZW5kcyBDb21iaW5hdGlvblByZWRpY2F0ZSB7XG4gICAgY29uc3RydWN0b3IoLi4uY2hpbGRyZW46IFByZWRpY2F0ZVtdKSB7XG4gICAgICAgIC8vIEZsYXR0ZW4gYW55IE9yc1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLnJlZHVjZSgoYWNjdW06IFByZWRpY2F0ZVtdLCBwOiBQcmVkaWNhdGUpOiBQcmVkaWNhdGVbXSA9PiB7XG4gICAgICAgICAgICByZXR1cm4gYWNjdW0uY29uY2F0KHAgaW5zdGFuY2VvZiBPciA/IHAuY2hpbGRyZW4gOiBwKTtcbiAgICAgICAgfSwgW10pO1xuICAgICAgICBzdXBlciguLi5jaGlsZHJlbik7XG4gICAgfVxuICAgIGJpbmQoYmF0Y2g6IFJlY29yZEJhdGNoKSB7XG4gICAgICAgIGNvbnN0IGJvdW5kID0gdGhpcy5jaGlsZHJlbi5tYXAoKHApID0+IHAuYmluZChiYXRjaCkpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBiYXRjaDogUmVjb3JkQmF0Y2gpID0+IGJvdW5kLnNvbWUoKHApID0+IHAoaWR4LCBiYXRjaCkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEVxdWFscyBleHRlbmRzIENvbXBhcmlzb25QcmVkaWNhdGUge1xuICAgIC8vIEhlbHBlcnMgdXNlZCB0byBjYWNoZSBkaWN0aW9uYXJ5IHJldmVyc2UgbG9va3VwcyBiZXR3ZWVuIGNhbGxzIHRvIGJpbmRcbiAgICBwcml2YXRlIGxhc3REaWN0aW9uYXJ5OiBWZWN0b3J8dW5kZWZpbmVkO1xuICAgIHByaXZhdGUgbGFzdEtleTogbnVtYmVyfHVuZGVmaW5lZDtcblxuICAgIHByb3RlY3RlZCBfYmluZExpdExpdChfYmF0Y2g6IFJlY29yZEJhdGNoLCBsZWZ0OiBMaXRlcmFsLCByaWdodDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBydHJuOiBib29sZWFuID0gbGVmdC52ID09IHJpZ2h0LnY7XG4gICAgICAgIHJldHVybiAoKSA9PiBydHJuO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYmluZENvbENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IENvbCwgcmlnaHQ6IENvbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBsZWZ0X2Z1bmMgPSBsZWZ0LmJpbmQoYmF0Y2gpO1xuICAgICAgICBjb25zdCByaWdodF9mdW5jID0gcmlnaHQuYmluZChiYXRjaCk7XG4gICAgICAgIHJldHVybiAoaWR4OiBudW1iZXIsIGJhdGNoOiBSZWNvcmRCYXRjaCkgPT4gbGVmdF9mdW5jKGlkeCwgYmF0Y2gpID09IHJpZ2h0X2Z1bmMoaWR4LCBiYXRjaCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kQ29sTGl0KGJhdGNoOiBSZWNvcmRCYXRjaCwgY29sOiBDb2wsIGxpdDogTGl0ZXJhbCk6IFByZWRpY2F0ZUZ1bmMge1xuICAgICAgICBjb25zdCBjb2xfZnVuYyA9IGNvbC5iaW5kKGJhdGNoKTtcbiAgICAgICAgaWYgKGNvbC52ZWN0b3IgaW5zdGFuY2VvZiBEaWN0aW9uYXJ5VmVjdG9yKSB7XG4gICAgICAgICAgICBsZXQga2V5OiBhbnk7XG4gICAgICAgICAgICBjb25zdCB2ZWN0b3IgPSBjb2wudmVjdG9yIGFzIERpY3Rpb25hcnlWZWN0b3I7XG4gICAgICAgICAgICBpZiAodmVjdG9yLmRpY3Rpb25hcnkgIT09IHRoaXMubGFzdERpY3Rpb25hcnkpIHtcbiAgICAgICAgICAgICAgICBrZXkgPSB2ZWN0b3IucmV2ZXJzZUxvb2t1cChsaXQudik7XG4gICAgICAgICAgICAgICAgdGhpcy5sYXN0RGljdGlvbmFyeSA9IHZlY3Rvci5kaWN0aW9uYXJ5O1xuICAgICAgICAgICAgICAgIHRoaXMubGFzdEtleSA9IGtleTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAga2V5ID0gdGhpcy5sYXN0S2V5O1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoa2V5ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIC8vIHRoZSB2YWx1ZSBkb2Vzbid0IGV4aXN0IGluIHRoZSBkaWN0aW9uYXJ5IC0gYWx3YXlzIHJldHVyblxuICAgICAgICAgICAgICAgIC8vIGZhbHNlXG4gICAgICAgICAgICAgICAgLy8gVE9ETzogc3BlY2lhbC1jYXNlIG9mIFByZWRpY2F0ZUZ1bmMgdGhhdCBlbmNhcHN1bGF0ZXMgdGhpc1xuICAgICAgICAgICAgICAgIC8vIFwiYWx3YXlzIGZhbHNlXCIgYmVoYXZpb3IuIFRoYXQgd2F5IGZpbHRlcmluZyBvcGVyYXRpb25zIGRvbid0XG4gICAgICAgICAgICAgICAgLy8gaGF2ZSB0byBib3RoZXIgY2hlY2tpbmdcbiAgICAgICAgICAgICAgICByZXR1cm4gKCkgPT4gZmFsc2U7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiAoaWR4OiBudW1iZXIpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHZlY3Rvci5nZXRLZXkoaWR4KSA9PT0ga2V5O1xuICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBjb2xzOiBSZWNvcmRCYXRjaCkgPT4gY29sX2Z1bmMoaWR4LCBjb2xzKSA9PSBsaXQudjtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHByb3RlY3RlZCBfYmluZExpdENvbChiYXRjaDogUmVjb3JkQmF0Y2gsIGxpdDogTGl0ZXJhbCwgY29sOiBDb2wpIHtcbiAgICAgICAgLy8gRXF1YWxzIGlzIGNvbXV0YXRpdmVcbiAgICAgICAgcmV0dXJuIHRoaXMuX2JpbmRDb2xMaXQoYmF0Y2gsIGNvbCwgbGl0KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBMVGVxIGV4dGVuZHMgQ29tcGFyaXNvblByZWRpY2F0ZSB7XG4gICAgcHJvdGVjdGVkIF9iaW5kTGl0TGl0KF9iYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IExpdGVyYWwsIHJpZ2h0OiBMaXRlcmFsKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IHJ0cm46IGJvb2xlYW4gPSBsZWZ0LnYgPD0gcmlnaHQudjtcbiAgICAgICAgcmV0dXJuICgpID0+IHJ0cm47XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kQ29sQ29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGVmdDogQ29sLCByaWdodDogQ29sKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IGxlZnRfZnVuYyA9IGxlZnQuYmluZChiYXRjaCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0X2Z1bmMgPSByaWdodC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGxlZnRfZnVuYyhpZHgsIGNvbHMpIDw9IHJpZ2h0X2Z1bmMoaWR4LCBjb2xzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRDb2xMaXQoYmF0Y2g6IFJlY29yZEJhdGNoLCBjb2w6IENvbCwgbGl0OiBMaXRlcmFsKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IGNvbF9mdW5jID0gY29sLmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBjb2xzOiBSZWNvcmRCYXRjaCkgPT4gY29sX2Z1bmMoaWR4LCBjb2xzKSA8PSBsaXQudjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRMaXRDb2woYmF0Y2g6IFJlY29yZEJhdGNoLCBsaXQ6IExpdGVyYWwsIGNvbDogQ29sKSB7XG4gICAgICAgIGNvbnN0IGNvbF9mdW5jID0gY29sLmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBjb2xzOiBSZWNvcmRCYXRjaCkgPT4gbGl0LnYgPD0gY29sX2Z1bmMoaWR4LCBjb2xzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBHVGVxIGV4dGVuZHMgQ29tcGFyaXNvblByZWRpY2F0ZSB7XG4gICAgcHJvdGVjdGVkIF9iaW5kTGl0TGl0KF9iYXRjaDogUmVjb3JkQmF0Y2gsIGxlZnQ6IExpdGVyYWwsIHJpZ2h0OiBMaXRlcmFsKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IHJ0cm46IGJvb2xlYW4gPSBsZWZ0LnYgPj0gcmlnaHQudjtcbiAgICAgICAgcmV0dXJuICgpID0+IHJ0cm47XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIF9iaW5kQ29sQ29sKGJhdGNoOiBSZWNvcmRCYXRjaCwgbGVmdDogQ29sLCByaWdodDogQ29sKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IGxlZnRfZnVuYyA9IGxlZnQuYmluZChiYXRjaCk7XG4gICAgICAgIGNvbnN0IHJpZ2h0X2Z1bmMgPSByaWdodC5iaW5kKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIChpZHg6IG51bWJlciwgY29sczogUmVjb3JkQmF0Y2gpID0+IGxlZnRfZnVuYyhpZHgsIGNvbHMpID49IHJpZ2h0X2Z1bmMoaWR4LCBjb2xzKTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRDb2xMaXQoYmF0Y2g6IFJlY29yZEJhdGNoLCBjb2w6IENvbCwgbGl0OiBMaXRlcmFsKTogUHJlZGljYXRlRnVuYyB7XG4gICAgICAgIGNvbnN0IGNvbF9mdW5jID0gY29sLmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBjb2xzOiBSZWNvcmRCYXRjaCkgPT4gY29sX2Z1bmMoaWR4LCBjb2xzKSA+PSBsaXQudjtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgX2JpbmRMaXRDb2woYmF0Y2g6IFJlY29yZEJhdGNoLCBsaXQ6IExpdGVyYWwsIGNvbDogQ29sKSB7XG4gICAgICAgIGNvbnN0IGNvbF9mdW5jID0gY29sLmJpbmQoYmF0Y2gpO1xuICAgICAgICByZXR1cm4gKGlkeDogbnVtYmVyLCBjb2xzOiBSZWNvcmRCYXRjaCkgPT4gbGl0LnYgPj0gY29sX2Z1bmMoaWR4LCBjb2xzKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBOb3QgZXh0ZW5kcyBQcmVkaWNhdGUge1xuICAgIGNvbnN0cnVjdG9yKHB1YmxpYyByZWFkb25seSBjaGlsZDogUHJlZGljYXRlKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgfVxuXG4gICAgYmluZChiYXRjaDogUmVjb3JkQmF0Y2gpIHtcbiAgICAgICAgY29uc3QgZnVuYyA9IHRoaXMuY2hpbGQuYmluZChiYXRjaCk7XG4gICAgICAgIHJldHVybiAoaWR4OiBudW1iZXIsIGJhdGNoOiBSZWNvcmRCYXRjaCkgPT4gIWZ1bmMoaWR4LCBiYXRjaCk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQ3VzdG9tUHJlZGljYXRlIGV4dGVuZHMgUHJlZGljYXRlIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG5leHQ6IFByZWRpY2F0ZUZ1bmMsIHByaXZhdGUgYmluZF86IChiYXRjaDogUmVjb3JkQmF0Y2gpID0+IHZvaWQpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG5cbiAgICBiaW5kKGJhdGNoOiBSZWNvcmRCYXRjaCkge1xuICAgICAgICB0aGlzLmJpbmRfKGJhdGNoKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubmV4dDtcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBsaXQodjogYW55KTogVmFsdWU8YW55PiB7IHJldHVybiBuZXcgTGl0ZXJhbCh2KTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGNvbChuOiBzdHJpbmcpOiBDb2w8YW55PiB7IHJldHVybiBuZXcgQ29sKG4pOyB9XG5leHBvcnQgZnVuY3Rpb24gYW5kKC4uLnA6IFByZWRpY2F0ZVtdKTogQW5kIHsgcmV0dXJuIG5ldyBBbmQoLi4ucCk7IH1cbmV4cG9ydCBmdW5jdGlvbiBvciguLi5wOiBQcmVkaWNhdGVbXSk6IE9yIHsgcmV0dXJuIG5ldyBPciguLi5wKTsgfVxuZXhwb3J0IGZ1bmN0aW9uIGN1c3RvbShuZXh0OiBQcmVkaWNhdGVGdW5jLCBiaW5kOiAoYmF0Y2g6IFJlY29yZEJhdGNoKSA9PiB2b2lkKSB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21QcmVkaWNhdGUobmV4dCwgYmluZCk7XG59XG4iXX0=
