{"version":3,"sources":["interfaces.ts"],"names":[],"mappings":";AAAA,6DAA6D;AAC7D,+DAA+D;AAC/D,wDAAwD;AACxD,6DAA6D;AAC7D,oDAAoD;AACpD,6DAA6D;AAC7D,6DAA6D;AAC7D,EAAE;AACF,+CAA+C;AAC/C,EAAE;AACF,6DAA6D;AAC7D,8DAA8D;AAC9D,yDAAyD;AACzD,4DAA4D;AAC5D,0DAA0D;AAC1D,qBAAqB","file":"interfaces.js","sourcesContent":["// Licensed to the Apache Software Foundation (ASF) under one\n// or more contributor license agreements.  See the NOTICE file\n// distributed with this work for additional information\n// regarding copyright ownership.  The ASF licenses this file\n// to you under the Apache License, Version 2.0 (the\n// \"License\"); you may not use this file except in compliance\n// with the License.  You may obtain a copy of the License at\n//\n//   http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing,\n// software distributed under the License is distributed on an\n// \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n// KIND, either express or implied.  See the License for the\n// specific language governing permissions and limitations\n// under the License.\n\nimport { Data } from './data';\nimport { Type } from './enum';\nimport * as type from './type';\nimport { DataType } from './type';\nimport * as vecs from './vector/index';\n\n/** @ignore */ type FloatArray = Float32Array | Float64Array;\n/** @ignore */ type IntArray = Int8Array | Int16Array | Int32Array;\n/** @ignore */ type UintArray = Uint8Array | Uint16Array | Uint32Array | Uint8ClampedArray;\n/** @ignore */\nexport type TypedArray = FloatArray | IntArray | UintArray;\nexport type BigIntArray = BigInt64Array | BigUint64Array;\n\n/** @ignore */\nexport interface TypedArrayConstructor<T extends TypedArray> {\n    readonly prototype: T;\n    new(length?: number): T;\n    new(array: Iterable<number>): T;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n    /**\n      * The size in bytes of each element in the array.\n      */\n    readonly BYTES_PER_ELEMENT: number;\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: number[]): T;\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<number>, mapfn?: (v: number, k: number) => number, thisArg?: any): T;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => number, thisArg?: any): T;\n}\n\n/** @ignore */\nexport interface BigIntArrayConstructor<T extends BigIntArray> {\n    readonly prototype: T;\n    new(length?: number): T;\n    new(array: Iterable<bigint>): T;\n    new(buffer: ArrayBufferLike, byteOffset?: number, length?: number): T;\n    /**\n      * The size in bytes of each element in the array.\n      */\n    readonly BYTES_PER_ELEMENT: number;\n    /**\n      * Returns a new array from a set of elements.\n      * @param items A set of elements to include in the new array object.\n      */\n    of(...items: bigint[]): T;\n    /**\n      * Creates an array from an array-like or iterable object.\n      * @param arrayLike An array-like or iterable object to convert to an array.\n      * @param mapfn A mapping function to call on every element of the array.\n      * @param thisArg Value of 'this' used to invoke the mapfn.\n      */\n    from(arrayLike: ArrayLike<bigint>, mapfn?: (v: bigint, k: number) => bigint, thisArg?: any): T;\n    from<U>(arrayLike: ArrayLike<U>, mapfn: (v: U, k: number) => bigint, thisArg?: any): T;\n}\n\n/** @ignore */\nexport type VectorCtorArgs<\n    T extends Vector<R>,\n    R extends DataType = any,\n    TArgs extends any[] = any[],\n    TCtor extends new (data: Data<R>, ...args: TArgs) => T =\n                  new (data: Data<R>, ...args: TArgs) => T\n> = TCtor extends new (data: Data<R>, ...args: infer TArgs) => T ? TArgs : never;\n\n/**\n * Obtain the constructor function of an instance type\n * @ignore\n */\nexport type ConstructorType<\n    T,\n    TCtor extends new (...args: any[]) => T =\n                  new (...args: any[]) => T\n> = TCtor extends new (...args: any[]) => T ? TCtor : never;\n\n/** @ignore */\nexport type VectorCtorType<\n    T extends Vector<R>,\n    R extends DataType = any,\n    TCtor extends new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T =\n                  new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T\n> = TCtor extends new (data: Data<R>, ...args: VectorCtorArgs<T, R>) => T ? TCtor : never;\n\n/** @ignore */\nexport type Vector<T extends Type | DataType = any> =\n    T extends Type          ? TypeToVector<T>     :\n    T extends DataType      ? DataTypeToVector<T> :\n                              vecs.BaseVector<any>\n    ;\n\n/** @ignore */\nexport type VectorCtor<T extends Type | DataType | Vector> =\n    T extends Vector        ? VectorCtorType<T>                  :\n    T extends Type          ? VectorCtorType<Vector<T>>          :\n    T extends DataType      ? VectorCtorType<Vector<T['TType']>> :\n                              VectorCtorType<vecs.BaseVector>\n    ;\n\n/** @ignore */\nexport type DataTypeCtor<T extends Type | DataType | Vector = any> =\n    T extends DataType      ? ConstructorType<T>                 :\n    T extends Vector        ? ConstructorType<T['type']>         :\n    T extends Type          ? ConstructorType<TypeToDataType<T>> :\n                              never\n    ;\n\n/** @ignore */\ntype TypeToVector<T extends Type> =\n    T extends Type.Null                 ? vecs.NullVector                 :\n    T extends Type.Bool                 ? vecs.BoolVector                 :\n    T extends Type.Int8                 ? vecs.Int8Vector                 :\n    T extends Type.Int16                ? vecs.Int16Vector                :\n    T extends Type.Int32                ? vecs.Int32Vector                :\n    T extends Type.Int64                ? vecs.Int64Vector                :\n    T extends Type.Uint8                ? vecs.Uint8Vector                :\n    T extends Type.Uint16               ? vecs.Uint16Vector               :\n    T extends Type.Uint32               ? vecs.Uint32Vector               :\n    T extends Type.Uint64               ? vecs.Uint64Vector               :\n    T extends Type.Int                  ? vecs.IntVector                  :\n    T extends Type.Float16              ? vecs.Float16Vector              :\n    T extends Type.Float32              ? vecs.Float32Vector              :\n    T extends Type.Float64              ? vecs.Float64Vector              :\n    T extends Type.Float                ? vecs.FloatVector                :\n    T extends Type.Utf8                 ? vecs.Utf8Vector                 :\n    T extends Type.Binary               ? vecs.BinaryVector               :\n    T extends Type.FixedSizeBinary      ? vecs.FixedSizeBinaryVector      :\n    T extends Type.Date                 ? vecs.DateVector                 :\n    T extends Type.DateDay              ? vecs.DateDayVector              :\n    T extends Type.DateMillisecond      ? vecs.DateMillisecondVector      :\n    T extends Type.Timestamp            ? vecs.TimestampVector            :\n    T extends Type.TimestampSecond      ? vecs.TimestampSecondVector      :\n    T extends Type.TimestampMillisecond ? vecs.TimestampMillisecondVector :\n    T extends Type.TimestampMicrosecond ? vecs.TimestampMicrosecondVector :\n    T extends Type.TimestampNanosecond  ? vecs.TimestampNanosecondVector  :\n    T extends Type.Time                 ? vecs.TimeVector                 :\n    T extends Type.TimeSecond           ? vecs.TimeSecondVector           :\n    T extends Type.TimeMillisecond      ? vecs.TimeMillisecondVector      :\n    T extends Type.TimeMicrosecond      ? vecs.TimeMicrosecondVector      :\n    T extends Type.TimeNanosecond       ? vecs.TimeNanosecondVector       :\n    T extends Type.Decimal              ? vecs.DecimalVector              :\n    T extends Type.Union                ? vecs.UnionVector                :\n    T extends Type.DenseUnion           ? vecs.DenseUnionVector           :\n    T extends Type.SparseUnion          ? vecs.SparseUnionVector          :\n    T extends Type.Interval             ? vecs.IntervalVector             :\n    T extends Type.IntervalDayTime      ? vecs.IntervalDayTimeVector      :\n    T extends Type.IntervalYearMonth    ? vecs.IntervalYearMonthVector    :\n    T extends Type.Map                  ? vecs.MapVector                  :\n    T extends Type.List                 ? vecs.ListVector                 :\n    T extends Type.Struct               ? vecs.StructVector               :\n    T extends Type.Dictionary           ? vecs.DictionaryVector           :\n    T extends Type.FixedSizeList        ? vecs.FixedSizeListVector        :\n                                          vecs.BaseVector\n    ;\n\n/** @ignore */\ntype DataTypeToVector<T extends DataType = any> =\n    T extends type.Null                 ? vecs.NullVector                          :\n    T extends type.Bool                 ? vecs.BoolVector                          :\n    T extends type.Int8                 ? vecs.Int8Vector                          :\n    T extends type.Int16                ? vecs.Int16Vector                         :\n    T extends type.Int32                ? vecs.Int32Vector                         :\n    T extends type.Int64                ? vecs.Int64Vector                         :\n    T extends type.Uint8                ? vecs.Uint8Vector                         :\n    T extends type.Uint16               ? vecs.Uint16Vector                        :\n    T extends type.Uint32               ? vecs.Uint32Vector                        :\n    T extends type.Uint64               ? vecs.Uint64Vector                        :\n    T extends type.Int                  ? vecs.IntVector                           :\n    T extends type.Float16              ? vecs.Float16Vector                       :\n    T extends type.Float32              ? vecs.Float32Vector                       :\n    T extends type.Float64              ? vecs.Float64Vector                       :\n    T extends type.Float                ? vecs.FloatVector                         :\n    T extends type.Utf8                 ? vecs.Utf8Vector                          :\n    T extends type.Binary               ? vecs.BinaryVector                        :\n    T extends type.FixedSizeBinary      ? vecs.FixedSizeBinaryVector               :\n    T extends type.Date_                ? vecs.DateVector                          :\n    T extends type.DateDay              ? vecs.DateDayVector                       :\n    T extends type.DateMillisecond      ? vecs.DateMillisecondVector               :\n    T extends type.Timestamp            ? vecs.TimestampVector                     :\n    T extends type.TimestampSecond      ? vecs.TimestampSecondVector               :\n    T extends type.TimestampMillisecond ? vecs.TimestampMillisecondVector          :\n    T extends type.TimestampMicrosecond ? vecs.TimestampMicrosecondVector          :\n    T extends type.TimestampNanosecond  ? vecs.TimestampNanosecondVector           :\n    T extends type.Time                 ? vecs.TimeVector                          :\n    T extends type.TimeSecond           ? vecs.TimeSecondVector                    :\n    T extends type.TimeMillisecond      ? vecs.TimeMillisecondVector               :\n    T extends type.TimeMicrosecond      ? vecs.TimeMicrosecondVector               :\n    T extends type.TimeNanosecond       ? vecs.TimeNanosecondVector                :\n    T extends type.Decimal              ? vecs.DecimalVector                       :\n    T extends type.Union                ? vecs.UnionVector                         :\n    T extends type.DenseUnion           ? vecs.DenseUnionVector                    :\n    T extends type.SparseUnion          ? vecs.SparseUnionVector                   :\n    T extends type.Interval             ? vecs.IntervalVector                      :\n    T extends type.IntervalDayTime      ? vecs.IntervalDayTimeVector               :\n    T extends type.IntervalYearMonth    ? vecs.IntervalYearMonthVector             :\n    T extends type.Map_                 ? vecs.MapVector<T['dataTypes']>           :\n    T extends type.List                 ? vecs.ListVector<T['valueType']>          :\n    T extends type.Struct               ? vecs.StructVector<T['dataTypes']>        :\n    T extends type.Dictionary           ? vecs.DictionaryVector<T['valueType'], T['indices']> :\n    T extends type.FixedSizeList        ? vecs.FixedSizeListVector<T['valueType']> :\n                                          vecs.BaseVector<T>\n    ;\n\n/** @ignore */\nexport type TypeToDataType<T extends Type> =\n      T extends Type.Null                 ? type.Null\n    : T extends Type.Bool                 ? type.Bool\n    : T extends Type.Int                  ? type.Int\n    : T extends Type.Int16                ? type.Int16\n    : T extends Type.Int32                ? type.Int32\n    : T extends Type.Int64                ? type.Int64\n    : T extends Type.Uint8                ? type.Uint8\n    : T extends Type.Uint16               ? type.Uint16\n    : T extends Type.Uint32               ? type.Uint32\n    : T extends Type.Uint64               ? type.Uint64\n    : T extends Type.Int8                 ? type.Int8\n    : T extends Type.Float16              ? type.Float16\n    : T extends Type.Float32              ? type.Float32\n    : T extends Type.Float64              ? type.Float64\n    : T extends Type.Float                ? type.Float\n    : T extends Type.Utf8                 ? type.Utf8\n    : T extends Type.Binary               ? type.Binary\n    : T extends Type.FixedSizeBinary      ? type.FixedSizeBinary\n    : T extends Type.Date                 ? type.Date_\n    : T extends Type.DateDay              ? type.DateDay\n    : T extends Type.DateMillisecond      ? type.DateMillisecond\n    : T extends Type.Timestamp            ? type.Timestamp\n    : T extends Type.TimestampSecond      ? type.TimestampSecond\n    : T extends Type.TimestampMillisecond ? type.TimestampMillisecond\n    : T extends Type.TimestampMicrosecond ? type.TimestampMicrosecond\n    : T extends Type.TimestampNanosecond  ? type.TimestampNanosecond\n    : T extends Type.Time                 ? type.Time\n    : T extends Type.TimeSecond           ? type.TimeSecond\n    : T extends Type.TimeMillisecond      ? type.TimeMillisecond\n    : T extends Type.TimeMicrosecond      ? type.TimeMicrosecond\n    : T extends Type.TimeNanosecond       ? type.TimeNanosecond\n    : T extends Type.Decimal              ? type.Decimal\n    : T extends Type.Union                ? type.Union\n    : T extends Type.DenseUnion           ? type.DenseUnion\n    : T extends Type.SparseUnion          ? type.SparseUnion\n    : T extends Type.Interval             ? type.Interval\n    : T extends Type.IntervalDayTime      ? type.IntervalDayTime\n    : T extends Type.IntervalYearMonth    ? type.IntervalYearMonth\n    : T extends Type.Map                  ? type.Map_\n    : T extends Type.List                 ? type.List\n    : T extends Type.Struct               ? type.Struct\n    : T extends Type.Dictionary           ? type.Dictionary\n    : T extends Type.FixedSizeList        ? type.FixedSizeList\n                                          : DataType\n    ;\n"]}