{"version":3,"sources":["builder/int.ts"],"names":[],"mappings":";;AAAA,iCAAyD;AACzD,mCAA4C;AAgB5C,MAAa,UAA6C,SAAQ,kBAAqB;CAAG;AAA1F,gCAA0F;AAE1F,MAAa,WAAyB,SAAQ,UAAuB;CAAG;AAAxE,kCAAwE;AACxE,MAAa,YAA0B,SAAQ,UAAwB;CAAG;AAA1E,oCAA0E;AAC1E,MAAa,YAA0B,SAAQ,UAAwB;CAAG;AAA1E,oCAA0E;AAC1E,MAAa,YAA0B,SAAQ,UAAwB;IACnE,YAAY,OAAyC;QACjD,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;YACvB,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACpE;QACD,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IACD,OAAO,CAAC,KAAkC;QACtC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC;CACJ;AAVD,oCAUC;AAED,MAAa,YAA0B,SAAQ,UAAwB;CAAG;AAA1E,oCAA0E;AAC1E,MAAa,aAA2B,SAAQ,UAAyB;CAAG;AAA5E,sCAA4E;AAC5E,MAAa,aAA2B,SAAQ,UAAyB;CAAG;AAA5E,sCAA4E;AAC5E,MAAa,aAA2B,SAAQ,UAAyB;IACrE,YAAY,OAA0C;QAClD,IAAI,OAAO,CAAC,YAAY,CAAC,EAAE;YACvB,OAAO,CAAC,YAAY,CAAC,GAAG,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SACpE;QACD,KAAK,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC;IACD,OAAO,CAAC,KAAmC;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,CAAC;IAC/C,CAAC;CACJ;AAVD,sCAUC;AAED,MAAM,aAAa,GAAG,CAAC,CAAC,IAAS,EAAE,EAAE,CAAC,CAAC,KAAU,EAAE,EAAE;IACjD,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE;QAC3B,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;QAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;QACnC,KAAK,GAAG,mBAAc,CAAC,IAAI,CAAC,CAAC;QAC7B,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;KACtB;IACD,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,aAAa,EAAE,CAAC,CAAC","file":"int.js","sourcesContent":["import { FlatBuilder, DataBuilderOptions } from './base';\nimport { bignumToBigInt } from '../util/bn';\nimport { Int, Uint8, Uint16, Uint32, Uint64, Int8, Int16, Int32, Int64 } from '../type';\n\nexport interface IntBuilder<T extends Int = Int, TNull = any> extends FlatBuilder<T, TNull> {\n    nullBitmap: Uint8Array; values: T['TArray'];\n}\n\nexport interface Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\nexport interface Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\nexport interface Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\nexport interface Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {}\nexport interface Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\nexport interface Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\nexport interface Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\nexport interface Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {}\n\nexport class IntBuilder<T extends Int = Int, TNull = any> extends FlatBuilder<T, TNull> {}\n\nexport class Int8Builder<TNull = any> extends IntBuilder<Int8, TNull> {}\nexport class Int16Builder<TNull = any> extends IntBuilder<Int16, TNull> {}\nexport class Int32Builder<TNull = any> extends IntBuilder<Int32, TNull> {}\nexport class Int64Builder<TNull = any> extends IntBuilder<Int64, TNull> {\n    constructor(options: DataBuilderOptions<Int64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toMaybeBigInt);\n        }\n        super(options);\n    }\n    isValid(value: Int32Array | bigint | TNull) {\n        return this._isValid(toMaybeBigInt(value));\n    }\n}\n\nexport class Uint8Builder<TNull = any> extends IntBuilder<Uint8, TNull> {}\nexport class Uint16Builder<TNull = any> extends IntBuilder<Uint16, TNull> {}\nexport class Uint32Builder<TNull = any> extends IntBuilder<Uint32, TNull> {}\nexport class Uint64Builder<TNull = any> extends IntBuilder<Uint64, TNull> {\n    constructor(options: DataBuilderOptions<Uint64, TNull>) {\n        if (options['nullValues']) {\n            options['nullValues'] = options['nullValues'].map(toMaybeBigInt);\n        }\n        super(options);\n    }\n    isValid(value: Uint32Array | bigint | TNull) {\n        return this._isValid(toMaybeBigInt(value));\n    }\n}\n\nconst toMaybeBigInt = ((memo: any) => (value: any) => {\n    if (ArrayBuffer.isView(value)) {\n        memo.buffer = value.buffer;\n        memo.byteOffset = value.byteOffset;\n        memo.byteLength = value.byteLength;\n        value = bignumToBigInt(memo);\n        memo.buffer = null;\n    }\n    return value;\n})({ BigIntArray: BigInt64Array });\n"]}