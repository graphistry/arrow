{"version":3,"sources":["builder/index.ts"],"names":[],"mappings":";;AAAA,+BAAiC;AAAxB,yBAAA,OAAO,CAAA;AAChB,mCAAyC;AAAhC,iCAAA,aAAa,CAAA;AACtB,+BAAqC;AAA5B,6BAAA,WAAW,CAAA;AACpB,+BAA6E;AAApE,6BAAA,WAAW,CAAA;AAAE,gCAAA,cAAc,CAAA;AAAE,wCAAA,sBAAsB,CAAA;AAC5D,qCAA2C;AAAlC,mCAAA,cAAc,CAAA;AACvB,2CAAiD;AAAxC,yCAAA,iBAAiB,CAAA;AAC1B,qDAA2D;AAAlD,mDAAA,sBAAsB,CAAA;AAC/B,iDAAuD;AAA9C,+CAAA,oBAAoB,CAAA;AAC7B,iCAAuF;AAA9E,+BAAA,YAAY,CAAA;AAAE,iCAAA,cAAc,CAAA;AAAE,iCAAA,cAAc,CAAA;AAAE,iCAAA,cAAc,CAAA;AACrE,uCAA+F;AAAtF,qCAAA,eAAe,CAAA;AAAE,4CAAA,sBAAsB,CAAA;AAAE,8CAAA,wBAAwB,CAAA;AAC1E,6BAAqJ;AAA5I,2BAAA,UAAU,CAAA;AAAE,4BAAA,WAAW,CAAA;AAAE,6BAAA,YAAY,CAAA;AAAE,6BAAA,YAAY,CAAA;AAAE,6BAAA,YAAY,CAAA;AAAE,6BAAA,YAAY,CAAA;AAAE,8BAAA,aAAa,CAAA;AAAE,8BAAA,aAAa,CAAA;AAAE,8BAAA,aAAa,CAAA;AACrI,+BAAqC;AAA5B,6BAAA,WAAW,CAAA;AACpB,6BAAmC;AAA1B,2BAAA,UAAU,CAAA;AACnB,+BAAqC;AAA5B,6BAAA,WAAW,CAAA;AACpB,mCAAyC;AAAhC,iCAAA,aAAa,CAAA;AACtB,yCAA6J;AAApJ,uCAAA,gBAAgB,CAAA;AAAE,6CAAA,sBAAsB,CAAA;AAAE,kDAAA,2BAA2B,CAAA;AAAE,kDAAA,2BAA2B,CAAA;AAAE,iDAAA,0BAA0B,CAAA;AACvI,+BAA+H;AAAtH,6BAAA,WAAW,CAAA;AAAE,mCAAA,iBAAiB,CAAA;AAAE,wCAAA,sBAAsB,CAAA;AAAE,wCAAA,sBAAsB,CAAA;AAAE,uCAAA,qBAAqB,CAAA;AAC9G,iCAA8E;AAArE,+BAAA,YAAY,CAAA;AAAE,oCAAA,iBAAiB,CAAA;AAAE,qCAAA,kBAAkB,CAAA;AAC5D,+BAAqC;AAA5B,6BAAA,WAAW,CAAA;AAEpB,kCAA+B;AAC/B,iCAAiC;AAEjC,iCAAqC;AAGrC,wCAAwD;AACxD,wDAA2E;AAQ3E,kBAAkB;AAClB,cAAO,CAAC,GAAG,GAAG,UAAU,CAAC;AAEzB,cAAc;AACd,SAAS,UAAU,CAAwC,OAAqC;IAC5F,OAAO,IAAI,CAAC,sBAAqB,CAAC,UAAU,CAAI,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,CAAgB,CAAC;AAC7F,CAAC;AAEA,MAAM,CAAC,IAAI,CAAC,WAAI,CAAW;KACvB,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,WAAI,CAAC,CAAC,CAAQ,CAAC;KAC/B,MAAM,CAAC,CAAC,CAAM,EAAa,EAAE,CAAC,OAAO,CAAC,KAAK,QAAQ,CAAC;KACpD,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,KAAK,WAAI,CAAC,IAAI,CAAC;KACxC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;IAChB,MAAM,WAAW,GAAG,sBAAqB,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;IACxD,WAAW,CAAC,SAAS,CAAC,SAAS,GAAG,cAAU,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;AACpE,CAAC,CAAC,CAAC;AAEN,kBAAW,CAAC,SAAiB,CAAC,SAAS,GAAG,cAAU,CAAC,UAAU,CAAC,WAAI,CAAC,MAAM,CAAC,CAAC","file":"index.js","sourcesContent":["export { Builder } from './base';\nexport { BinaryBuilder } from './binary';\nexport { BoolBuilder } from './bool';\nexport { DateBuilder, DateDayBuilder, DateMillisecondBuilder } from './date';\nexport { DecimalBuilder } from './decimal';\nexport { DictionaryBuilder } from './dictionary';\nexport { FixedSizeBinaryBuilder } from './fixedsizebinary';\nexport { FixedSizeListBuilder } from './fixedsizelist';\nexport { FloatBuilder, Float16Builder, Float32Builder, Float64Builder } from './float';\nexport { IntervalBuilder, IntervalDayTimeBuilder, IntervalYearMonthBuilder } from './interval';\nexport { IntBuilder, Int8Builder, Int16Builder, Int32Builder, Int64Builder, Uint8Builder, Uint16Builder, Uint32Builder, Uint64Builder } from './int';\nexport { ListBuilder } from './list';\nexport { MapBuilder } from './map';\nexport { NullBuilder } from './null';\nexport { StructBuilder } from './struct';\nexport { TimestampBuilder, TimestampSecondBuilder, TimestampMillisecondBuilder, TimestampMicrosecondBuilder, TimestampNanosecondBuilder } from './timestamp';\nexport { TimeBuilder, TimeSecondBuilder, TimeMillisecondBuilder, TimeMicrosecondBuilder, TimeNanosecondBuilder } from './time';\nexport { UnionBuilder, DenseUnionBuilder, SparseUnionBuilder } from './union';\nexport { Utf8Builder } from './utf8';\n\nimport { Type } from '../enum';\nimport { Builder } from './base';\nimport { DataType } from '../type';\nimport { Utf8Builder } from './utf8';\nimport { DataBuilderOptions } from './base';\nimport { Builder as B } from '../interfaces';\nimport { instance as setVisitor } from '../visitor/set';\nimport { instance as getBuilderConstructor } from '../visitor/builderctor';\n\ndeclare module './base' {\n    namespace Builder {\n        export { newBuilder as new };\n    }\n}\n\n/** @nocollapse */\nBuilder.new = newBuilder;\n\n/** @ignore */\nfunction newBuilder<T extends DataType = any, TNull = any>(options: DataBuilderOptions<T, TNull>): B<T, TNull> {\n    return new (getBuilderConstructor.getVisitFn<T>(options.type)())(options) as B<T, TNull>;\n}\n\n(Object.keys(Type) as any[])\n    .map((T: any) => Type[T] as any)\n    .filter((T: any): T is Type => typeof T === 'number')\n    .filter((typeId) => typeId !== Type.NONE)\n    .forEach((typeId) => {\n        const BuilderCtor = getBuilderConstructor.visit(typeId);\n        BuilderCtor.prototype._setValue = setVisitor.getVisitFn(typeId);\n    });\n\n(Utf8Builder.prototype as any)._setValue = setVisitor.getVisitFn(Type.Binary);\n"]}