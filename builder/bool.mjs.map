{"version":3,"sources":["builder/bool.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,OAAO,EAAsB,MAAM,QAAQ,CAAC;AAErD,MAAM,OAAO,WAAyB,SAAQ,OAAoB;IAC9D,YAAY,OAAwC;QAChD,KAAK,CAAC,OAAO,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,IAAI,UAAU,CAAC,CAAC,CAAC,CAAC;IACpC,CAAC;IACM,UAAU,CAAC,KAAc,EAAE,MAAc;QAC5C,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QAC9B,OAAO,KAAK,CAAC,UAAU,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;IAC3C,CAAC;IACS,gBAAgB,CAAC,MAAc,EAAE,MAAc;QACrD,MAAM,GAAG,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;QACxC,OAAO,KAAK,CAAC,gBAAgB,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;IAClD,CAAC;CACJ","file":"bool.js","sourcesContent":["import { Bool } from '../type';\nimport { Builder, DataBuilderOptions } from './base';\n\nexport class BoolBuilder<TNull = any> extends Builder<Bool, TNull> {\n    constructor(options: DataBuilderOptions<Bool, TNull>) {\n        super(options);\n        this.values = new Uint8Array(0);\n    }\n    public writeValue(value: boolean, offset: number) {\n        this._getValuesBitmap(offset);\n        return super.writeValue(value, offset);\n    }\n    protected _updateBytesUsed(offset: number, length: number) {\n        offset % 512 || (this._bytesUsed += 64);\n        return super._updateBytesUsed(offset, length);\n    }\n}\n"]}