{"version":3,"sources":["builder/union.ts"],"names":[],"mappings":"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","file":"union.js","sourcesContent":["import { Field } from '../schema';\nimport { Builder, NestedBuilder, DataBuilderOptions } from './base';\nimport { Union, SparseUnion, DenseUnion } from '../type';\n\nexport class UnionBuilder<T extends Union, TNull = any> extends NestedBuilder<T, TNull> {\n    constructor(options: DataBuilderOptions<T, TNull>) {\n        super(options);\n        this.typeIds = new Int8Array(0);\n    }\n    public get bytesReserved() {\n        return this.children.reduce(\n            (acc, { bytesReserved }) => acc + bytesReserved,\n            this.typeIds.byteLength + this.nullBitmap.byteLength\n        );\n    }\n    public write(value: any | TNull, childTypeId: number) {\n        const offset = this.length;\n        if (this.writeValid(this.isValid(value), offset)) {\n            this.writeValue(value, offset, childTypeId);\n        }\n        this.length = offset + 1;\n        return this;\n    }\n    public appendChild(child: Builder, name = `${this.children.length}`): number {\n        const childIndex = this.children.push(child);\n        const { type: { children, mode, typeIds } } = this;\n        const fields = [...children, new Field(name, child.type)];\n        this._type = new Union(mode, [...typeIds, childIndex], fields) as T;\n        return childIndex;\n    }\n    public writeValue(value: any, offset: number, typeId: number) {\n        this._getTypeIds(offset)[offset] = typeId;\n        return super.writeValue(value, offset);\n    }\n    protected _updateBytesUsed(offset: number, length: number) {\n        this._bytesUsed += 1;\n        return super._updateBytesUsed(offset, length);\n    }\n}\n\nexport class SparseUnionBuilder<T extends SparseUnion, TNull = any> extends UnionBuilder<T, TNull> {}\n\nexport class DenseUnionBuilder<T extends DenseUnion, TNull = any> extends UnionBuilder<T, TNull> {\n    constructor(options: DataBuilderOptions<T, TNull>) {\n        super(options);\n        this.valueOffsets = new Int32Array(0);\n    }\n    public writeValue(value: any, offset: number, childTypeId: number) {\n        const valueOffsets = this._getValueOffsets(offset);\n        valueOffsets[offset] = this.getChildAt(childTypeId)!.length;\n        return super.writeValue(value, offset, childTypeId);\n    }\n    protected _updateBytesUsed(offset: number, length: number) {\n        this._bytesUsed += 4;\n        return super._updateBytesUsed(offset, length);\n    }\n}\n"]}