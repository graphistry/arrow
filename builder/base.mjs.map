{"version":3,"sources":["builder/base.ts"],"names":[],"mappings":"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","file":"base.js","sourcesContent":["import { setBool } from '../util/bit';\nimport { memcpy } from '../util/buffer';\nimport { Data, Buffers } from '../data';\nimport { valueToString } from '../util/pretty';\nimport { BigIntAvailable } from '../util/compat';\nimport { TypedArray, TypedArrayConstructor } from '../interfaces';\nimport {\n    DataType, strideForType,\n    Utf8, Binary, Decimal, FixedSizeBinary, List, FixedSizeList, Map_, Struct,\n    Float, Int, Date_, Interval, Time, Timestamp, Union, DenseUnion, SparseUnion,\n} from '../type';\n\nexport interface DataBuilderOptions<T extends DataType = any, TNull = any> {\n    type: T;\n    nullValues?: TNull[];\n}\n\nexport class Builder<T extends DataType = any, TNull = any> {\n\n    public length = 0;\n    public nullCount = 0;\n\n    public readonly offset = 0;\n    public readonly stride: number;\n    public readonly children: Builder[];\n    public readonly nullValues: ReadonlyArray<TNull>;\n\n    // @ts-ignore\n    public valueOffsets: Int32Array;\n    // @ts-ignore\n    public values: T['TArray'];\n    // @ts-ignore\n    public nullBitmap: Uint8Array;\n    // @ts-ignore\n    public typeIds: Int8Array;\n\n    constructor(options: DataBuilderOptions<T, TNull>) {\n        const type = options['type'];\n        const nullValues = options['nullValues'];\n        this.stride = strideForType(this._type = type);\n        this.children = (type.children || []).map((f) => new Builder(f.type));\n        this.nullValues = Object.freeze(nullValues || []) as ReadonlyArray<TNull>;\n        this.nullBitmap = new Uint8Array(0);\n        if (this.nullValues.length) {\n            this._isValid = compileIsValid<T, TNull>(this.nullValues);\n            this.children.forEach((child: any /* <-- any so we can assign to `nullValues` */) => {\n                child._isValid = this._isValid;\n                child.nullValues = this.nullValues;\n                child.nullBitmap = new Uint8Array(0);\n            });\n        }\n    }\n\n    protected _type: T;\n    public get type() { return this._type; }\n\n    protected _bytesUsed = 0;\n    public get bytesUsed() { return this._bytesUsed; }\n\n    protected _bytesReserved = 0;\n    public get bytesReserved() { return this._bytesReserved; }\n\n    // @ts-ignore\n    protected _isValid: (value: T['TValue'] | TNull) => boolean;\n    // @ts-ignore\n    protected _setValue: (inst: Builder<T>, index: number, value: T['TValue']) => void;\n\n    public get ArrayType() { return this._type.ArrayType; }\n\n    // /**\n    //  * Create a clone of this Builder that uses the supplied list as values\n    //  * that indicate a null value should be written into the validity bitmap,\n    //  * indicating null instead of a valid value.\n    //  * \n    //  * This is helpful when building Arrow Vectors from data sources that use\n    //  * inline sentinel values to indicate null elements. For example, many systems\n    //  * use `NaN` to indicate FloatingPoint null, or the strings 'null', '\\0', 'na',\n    //  * or 'N/A' to indicate String null.\n    //  * @param nullValues An Array of values that should be interpreted as `null`\n    //  * when passed as the value to `Builder#set(val, idx)`.\n    //  */\n    // public withNullValues<RNull = any>(nullValues: RNull[]) {\n    //     return DataBuilder.new<T, RNull>(this.type, nullValues);\n    // }\n\n    public *readAll(source: Iterable<any>, chunkLength = Infinity) {\n        for (const value of source) {\n            if (this.write(value).length >= chunkLength) {\n                yield this.flush();\n            }\n        }\n        if (this.finish().length > 0) yield this.flush();\n    }\n\n    public async *readAllAsync(source: Iterable<any> | AsyncIterable<any>, chunkLength = Infinity) {\n        for await (const value of source) {\n            if (this.write(value).length >= chunkLength) {\n                yield this.flush();\n            }\n        }\n        if (this.finish().length > 0) yield this.flush();\n    }\n\n    /**\n     * Validates whether a value is valid (true), or null (false)\n     * @param value The value to compare against null the value representations\n     */\n    public isValid(value: T['TValue'] | TNull): boolean {\n        return this._isValid(value);\n    }\n\n    public write(value: T['TValue'] | TNull, ..._: any[]): this;\n    public write(value: T['TValue'] | TNull) {\n        const offset = this.length;\n        if (this.writeValid(this.isValid(value), offset)) {\n            this.writeValue(value, offset);\n        }\n        return this._updateBytesUsed(offset, this.length = offset + 1);\n    }\n\n    /** @ignore */\n    public writeValue(value: T['TValue'], offset: number, ..._: any[]): void;\n    public writeValue(value: T['TValue'], offset: number): void {\n        this._setValue(this, offset, value);\n    }\n\n    /** @ignore */\n    public writeValid(isValid: boolean, offset: number): boolean {\n        isValid || ++this.nullCount;\n        setBool(this._getNullBitmap(offset), offset, isValid);\n        return isValid;\n    }\n\n    // @ts-ignore\n    protected _updateBytesUsed(offset: number, length: number) {\n        offset % 512 || (this._bytesUsed += 64);\n        return this;\n    }\n\n    public flush() {\n\n        const { length, nullCount } = this;\n        let { valueOffsets, values, nullBitmap, typeIds } = this;\n\n        if (valueOffsets) {\n            valueOffsets = sliceOrExtendArray(valueOffsets, roundLengthToMultipleOf64Bytes(length, 4));\n            values && (values = sliceOrExtendArray(values, roundLengthToMultipleOf64Bytes(valueOffsets[length], values.BYTES_PER_ELEMENT)));\n        } else if (values) {\n            values = sliceOrExtendArray(values, roundLengthToMultipleOf64Bytes(length * this.stride, values.BYTES_PER_ELEMENT));\n        }\n\n        nullBitmap && (nullBitmap = nullCount === 0 ? new Uint8Array(0)\n            : sliceOrExtendArray(nullBitmap, roundLengthToMultipleOf64Bytes(length >> 3, 1) || 64));\n\n        typeIds && (typeIds = sliceOrExtendArray(typeIds, roundLengthToMultipleOf64Bytes(length, 1)));\n\n        const data = Data.new<T>(\n            this._type, 0, length, nullCount, [\n            valueOffsets, values, nullBitmap, typeIds] as Buffers<T>,\n            this.children.map((child) => child.flush())) as Data<T>;\n\n        this.reset();\n\n        return data;\n    }\n\n    public finish() {\n        this.children.forEach((child) => child.finish());\n        return this;\n    }\n\n    public reset() {\n        this.length = 0;\n        this.nullCount = 0;\n        this._bytesUsed = 0;\n        this._bytesReserved = 0;\n        this.values && (this.values = this.values.subarray(0, 0));\n        this.typeIds && (this.typeIds = this.typeIds.subarray(0, 0));\n        this.nullBitmap && (this.nullBitmap = this.nullBitmap.subarray(0, 0));\n        this.valueOffsets && (this.valueOffsets = this.valueOffsets.subarray(0, 0));\n        return this;\n    }\n\n    protected _getNullBitmap(length: number) {\n        let buf = this.nullBitmap;\n        if ((length >> 3) >= buf.length) {\n            length = roundLengthToMultipleOf64Bytes(length, 1) || 32;\n            this.nullBitmap = buf = memcpy(new Uint8Array(length * 2), buf);\n        }\n        return buf;\n    }\n    protected _getValueOffsets(length: number) {\n        let buf = this.valueOffsets;\n        if (length >= buf.length - 1) {\n            length = roundLengthToMultipleOf64Bytes(length, 4) || 8;\n            this.valueOffsets = buf = memcpy(new Int32Array(length * 2), buf);\n        }\n        return buf;\n    }\n    protected _getValues(length: number) {\n        let { stride, values: buf } = this;\n        if ((length * stride) >= buf.length) {\n            let { ArrayType } = this, BPE = ArrayType.BYTES_PER_ELEMENT;\n            length = roundLengthToMultipleOf64Bytes(length, BPE) || (32 / BPE);\n            this.values = buf = memcpy(new ArrayType(length * stride * 2), buf);\n        }\n        return buf;\n    }\n    protected _getValuesBitmap(length: number) {\n        let buf = this.values;\n        if ((length >> 3) >= buf.length) {\n            length = roundLengthToMultipleOf64Bytes(length, 1) || 32;\n            this.values = buf = memcpy(new Uint8Array(length * 2), buf);\n        }\n        return buf;\n    }\n    protected _getTypeIds(length: number) {\n        let buf = this.typeIds;\n        if (length >= buf.length) {\n            length = roundLengthToMultipleOf64Bytes(length, 1) || 32;\n            this.typeIds = buf = memcpy(new Int8Array(length * 2), buf);\n        }\n        return buf;\n    }\n}\n\n(Builder.prototype as any)._isValid = compileIsValid<any, any>([null, undefined]);\n\nexport abstract class FlatBuilder<T extends Int | Float | FixedSizeBinary | Date_ | Timestamp | Time | Decimal | Interval = any, TNull = any> extends Builder<T, TNull> {\n    public readonly BYTES_PER_ELEMENT: number;\n    constructor(options: DataBuilderOptions<T, TNull>) {\n        super(options);\n        this.values = new this.ArrayType(0);\n        this.BYTES_PER_ELEMENT = this.stride * this.ArrayType.BYTES_PER_ELEMENT;\n    }\n    public get bytesReserved() {\n        return this.values.byteLength + this.nullBitmap.byteLength;\n    }\n    public writeValue(value: T['TValue'], offset: number) {\n        this._getValues(offset);\n        return super.writeValue(value, offset);\n    }\n    protected _updateBytesUsed(offset: number, length: number) {\n        this._bytesUsed += this.BYTES_PER_ELEMENT;\n        return super._updateBytesUsed(offset, length);\n    }\n}\n\nexport abstract class FlatListBuilder<T extends Utf8 | Binary = any, TNull = any> extends Builder<T, TNull> {\n    protected _values?: Map<number, undefined | Uint8Array>;\n    constructor(options: DataBuilderOptions<T, TNull>) {\n        super(options);\n        this.valueOffsets = new Int32Array(0);\n    }\n    public get bytesReserved() {\n        return this.valueOffsets.byteLength + this.nullBitmap.byteLength +\n            roundLengthToMultipleOf64Bytes(this.valueOffsets[this.length], 1);\n    }\n    public writeValid(isValid: boolean, offset: number) {\n        if (!super.writeValid(isValid, offset)) {\n            const valueOffsets = this._getValueOffsets(offset);\n            valueOffsets[offset + 1] = valueOffsets[offset];\n        }\n        return isValid;\n    }\n    public writeValue(value: Uint8Array | string, offset: number) {\n        const valueOffsets = this._getValueOffsets(offset);\n        valueOffsets[offset + 1] = valueOffsets[offset] + value.length;\n        (this._values || (this._values = new Map())).set(offset, value);\n        this._bytesUsed += value.length;\n        this._bytesReserved += value.length;\n    }\n    protected _updateBytesUsed(offset: number, length: number) {\n        this._bytesUsed += 4;\n        return super._updateBytesUsed(offset, length);\n    }\n    public flush() {\n        this.values = new Uint8Array(roundLengthToMultipleOf64Bytes(this.valueOffsets[this.length], 1));\n        this._values && ((xs, n) => {\n            let i = -1, x: Uint8Array | undefined;\n            while (++i < n) {\n                if ((x = xs.get(i)) !== undefined) {\n                    super.writeValue(x, i);\n                }\n            }\n        })(this._values, this.length);\n        this._values = undefined;\n        return super.flush();\n    }\n}\n\nexport abstract class NestedBuilder<T extends List | FixedSizeList | Map_ | Struct | Union | DenseUnion | SparseUnion, TNull = any> extends Builder<T, TNull> {\n    public get bytesUsed() {\n        return this.children.reduce((acc, { bytesUsed }) => acc + bytesUsed, this._bytesUsed);\n    }\n    public get bytesReserved() {\n        return this.children.reduce((acc, { bytesReserved }) => acc + bytesReserved, this.nullBitmap.byteLength);\n    }\n    public getChildAt<R extends DataType = any>(index: number): Builder<R> | null {\n        return this.children[index];\n    }\n}\n\n/** @ignore */\nfunction roundLengthToMultipleOf64Bytes(len: number, BYTES_PER_ELEMENT: number) {\n    return ((((len * BYTES_PER_ELEMENT) + 63) & ~63)) / BYTES_PER_ELEMENT;\n}\n\n/** @ignore */\nfunction sliceOrExtendArray<T extends TypedArray>(array: T, alignedLength = 0) {\n    return array.length >= alignedLength ? array.subarray(0, alignedLength) as T\n        : memcpy(new (array.constructor as TypedArrayConstructor<T>)(alignedLength), array, 0) as T;\n}\n\n/** @ignore */\nfunction valueToCase(x: any) {\n    if (typeof x !== 'bigint') {\n        return valueToString(x);\n    } else if (BigIntAvailable) {\n        return `${valueToString(x)}n`;\n    }\n    return `\"${valueToString(x)}\"`;\n}\n\n/**\n * Dynamically compile the null values into an `isValid()` function whose\n * implementation is a switch statement. Microbenchmarks in v8 indicate\n * this approach is 25% faster than using an ES6 Map.\n * @ignore\n * @param nullValues \n */\nfunction compileIsValid<T extends DataType = any, TNull = any>(nullValues?: ReadonlyArray<TNull>) {\n\n    if (!nullValues || nullValues.length <= 0) {\n        return function isValid(_value: any) { return true; };\n    }\n\n    let fnBody = '';\n    let noNaNs = nullValues.filter((x) => x === x);\n\n    if (noNaNs.length > 0) {\n        fnBody = `\n    switch (x) {${noNaNs.map((x) => `\n        case ${valueToCase(x)}:`).join('')}\n            return false;\n    }`;\n    }\n\n    // NaN doesn't equal anything including itself, so it doesn't work as a\n    // switch case. Instead we must explicitly check for NaN before the switch.\n    if (nullValues.length !== noNaNs.length) {\n        fnBody = `if (x !== x) return false;\\n${fnBody}`;\n    }\n\n    return new Function(`x`, `${fnBody}\\nreturn true;`) as (value: T['TValue'] | TNull) => boolean;\n}\n"]}