"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const typecomparator_1 = require("./visitor/typecomparator");
const enum_1 = require("./enum");
class DataType {
    constructor(_children) {
        this._children = _children;
    }
    /** @nocollapse */ static isNull(x) { return x && x.typeId === enum_1.Type.Null; }
    /** @nocollapse */ static isInt(x) { return x && x.typeId === enum_1.Type.Int; }
    /** @nocollapse */ static isFloat(x) { return x && x.typeId === enum_1.Type.Float; }
    /** @nocollapse */ static isBinary(x) { return x && x.typeId === enum_1.Type.Binary; }
    /** @nocollapse */ static isUtf8(x) { return x && x.typeId === enum_1.Type.Utf8; }
    /** @nocollapse */ static isBool(x) { return x && x.typeId === enum_1.Type.Bool; }
    /** @nocollapse */ static isDecimal(x) { return x && x.typeId === enum_1.Type.Decimal; }
    /** @nocollapse */ static isDate(x) { return x && x.typeId === enum_1.Type.Date; }
    /** @nocollapse */ static isTime(x) { return x && x.typeId === enum_1.Type.Time; }
    /** @nocollapse */ static isTimestamp(x) { return x && x.typeId === enum_1.Type.Timestamp; }
    /** @nocollapse */ static isInterval(x) { return x && x.typeId === enum_1.Type.Interval; }
    /** @nocollapse */ static isList(x) { return x && x.typeId === enum_1.Type.List; }
    /** @nocollapse */ static isStruct(x) { return x && x.typeId === enum_1.Type.Struct; }
    /** @nocollapse */ static isUnion(x) { return x && x.typeId === enum_1.Type.Union; }
    /** @nocollapse */ static isFixedSizeBinary(x) { return x && x.typeId === enum_1.Type.FixedSizeBinary; }
    /** @nocollapse */ static isFixedSizeList(x) { return x && x.typeId === enum_1.Type.FixedSizeList; }
    /** @nocollapse */ static isMap(x) { return x && x.typeId === enum_1.Type.Map; }
    /** @nocollapse */ static isDictionary(x) { return x && x.typeId === enum_1.Type.Dictionary; }
    get children() { return this._children; }
    get typeId() { return enum_1.Type.NONE; }
    compareTo(other) {
        return typecomparator_1.instance.visit(this, other);
    }
}
DataType[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Array;
    return proto[Symbol.toStringTag] = 'DataType';
})(DataType.prototype);
exports.DataType = DataType;
class Null extends DataType {
    toString() { return `Null`; }
    get typeId() { return enum_1.Type.Null; }
}
Null[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Null';
})(Null.prototype);
exports.Null = Null;
class Int_ extends DataType {
    constructor(_isSigned, _bitWidth) {
        super();
        this._isSigned = _isSigned;
        this._bitWidth = _bitWidth;
    }
    get typeId() { return enum_1.Type.Int; }
    get isSigned() { return this._isSigned; }
    get bitWidth() { return this._bitWidth; }
    get ArrayType() {
        switch (this._bitWidth) {
            case 8: return (this._isSigned ? Int8Array : Uint8Array);
            case 16: return (this._isSigned ? Int16Array : Uint16Array);
            case 32: return (this._isSigned ? Int32Array : Uint32Array);
            case 64: return (this._isSigned ? Int32Array : Uint32Array);
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `${this._isSigned ? `I` : `Ui`}nt${this._bitWidth}`; }
}
Int_[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Int';
})(Int_.prototype);
exports.Int = Int_;
class Int8 extends Int_ {
    constructor() { super(true, 8); }
}
exports.Int8 = Int8;
class Int16 extends Int_ {
    constructor() { super(true, 16); }
}
exports.Int16 = Int16;
class Int32 extends Int_ {
    constructor() { super(true, 32); }
}
exports.Int32 = Int32;
class Int64 extends Int_ {
    constructor() { super(true, 64); }
}
exports.Int64 = Int64;
class Uint8 extends Int_ {
    constructor() { super(false, 8); }
}
exports.Uint8 = Uint8;
class Uint16 extends Int_ {
    constructor() { super(false, 16); }
}
exports.Uint16 = Uint16;
class Uint32 extends Int_ {
    constructor() { super(false, 32); }
}
exports.Uint32 = Uint32;
class Uint64 extends Int_ {
    constructor() { super(false, 64); }
}
exports.Uint64 = Uint64;
class Float extends DataType {
    constructor(_precision) {
        super();
        this._precision = _precision;
    }
    get typeId() { return enum_1.Type.Float; }
    get precision() { return this._precision; }
    get ArrayType() {
        switch (this.precision) {
            case enum_1.Precision.HALF: return Uint16Array;
            case enum_1.Precision.SINGLE: return Float32Array;
            case enum_1.Precision.DOUBLE: return Float64Array;
        }
        throw new Error(`Unrecognized ${this[Symbol.toStringTag]} type`);
    }
    toString() { return `Float${(this.precision << 5) || 16}`; }
}
Float[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Float';
})(Float.prototype);
exports.Float = Float;
class Float16 extends Float {
    constructor() { super(enum_1.Precision.HALF); }
}
exports.Float16 = Float16;
class Float32 extends Float {
    constructor() { super(enum_1.Precision.SINGLE); }
}
exports.Float32 = Float32;
class Float64 extends Float {
    constructor() { super(enum_1.Precision.DOUBLE); }
}
exports.Float64 = Float64;
class Binary extends DataType {
    constructor() {
        super();
    }
    get typeId() { return enum_1.Type.Binary; }
    toString() { return `Binary`; }
}
Binary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Binary';
})(Binary.prototype);
exports.Binary = Binary;
class Utf8 extends DataType {
    constructor() {
        super();
    }
    get typeId() { return enum_1.Type.Utf8; }
    toString() { return `Utf8`; }
}
Utf8[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Utf8';
})(Utf8.prototype);
exports.Utf8 = Utf8;
class Bool extends DataType {
    constructor() {
        super();
    }
    get typeId() { return enum_1.Type.Bool; }
    toString() { return `Bool`; }
}
Bool[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'Bool';
})(Bool.prototype);
exports.Bool = Bool;
class Decimal extends DataType {
    constructor(_scale, _precision) {
        super();
        this._scale = _scale;
        this._precision = _precision;
    }
    get typeId() { return enum_1.Type.Decimal; }
    get scale() { return this._scale; }
    get precision() { return this._precision; }
    toString() { return `Decimal[${this._precision}e${this._scale > 0 ? `+` : ``}${this._scale}]`; }
}
Decimal[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint32Array;
    return proto[Symbol.toStringTag] = 'Decimal';
})(Decimal.prototype);
exports.Decimal = Decimal;
class Date_ extends DataType {
    constructor(_unit) {
        super();
        this._unit = _unit;
    }
    get typeId() { return enum_1.Type.Date; }
    get unit() { return this._unit; }
    toString() { return `Date${(this._unit + 1) * 32}<${enum_1.DateUnit[this._unit]}>`; }
}
Date_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Date';
})(Date_.prototype);
exports.Date_ = Date_;
class DateDay extends Date_ {
    constructor() { super(enum_1.DateUnit.DAY); }
}
exports.DateDay = DateDay;
class DateMillisecond extends Date_ {
    constructor() { super(enum_1.DateUnit.MILLISECOND); }
}
exports.DateMillisecond = DateMillisecond;
class Time_ extends DataType {
    constructor(_unit, _bitWidth) {
        super();
        this._unit = _unit;
        this._bitWidth = _bitWidth;
    }
    get typeId() { return enum_1.Type.Time; }
    get unit() { return this._unit; }
    get bitWidth() { return this._bitWidth; }
    toString() { return `Time${this._bitWidth}<${enum_1.TimeUnit[this._unit]}>`; }
}
Time_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Time';
})(Time_.prototype);
exports.Time = Time_;
class TimeSecond extends Time_ {
    constructor() { super(enum_1.TimeUnit.SECOND, 32); }
}
exports.TimeSecond = TimeSecond;
class TimeMillisecond extends Time_ {
    constructor() { super(enum_1.TimeUnit.MILLISECOND, 32); }
}
exports.TimeMillisecond = TimeMillisecond;
class TimeMicrosecond extends Time_ {
    constructor() { super(enum_1.TimeUnit.MICROSECOND, 64); }
}
exports.TimeMicrosecond = TimeMicrosecond;
class TimeNanosecond extends Time_ {
    constructor() { super(enum_1.TimeUnit.NANOSECOND, 64); }
}
exports.TimeNanosecond = TimeNanosecond;
class Timestamp_ extends DataType {
    constructor(_unit, _timezone) {
        super();
        this._unit = _unit;
        this._timezone = _timezone;
    }
    get typeId() { return enum_1.Type.Timestamp; }
    get unit() { return this._unit; }
    get timezone() { return this._timezone; }
    toString() { return `Timestamp<${enum_1.TimeUnit[this._unit]}${this._timezone ? `, ${this._timezone}` : ``}>`; }
}
Timestamp_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Timestamp';
})(Timestamp_.prototype);
exports.Timestamp = Timestamp_;
class TimestampSecond extends Timestamp_ {
    constructor(timezone) { super(enum_1.TimeUnit.SECOND, timezone); }
}
exports.TimestampSecond = TimestampSecond;
class TimestampMillisecond extends Timestamp_ {
    constructor(timezone) { super(enum_1.TimeUnit.MILLISECOND, timezone); }
}
exports.TimestampMillisecond = TimestampMillisecond;
class TimestampMicrosecond extends Timestamp_ {
    constructor(timezone) { super(enum_1.TimeUnit.MICROSECOND, timezone); }
}
exports.TimestampMicrosecond = TimestampMicrosecond;
class TimestampNanosecond extends Timestamp_ {
    constructor(timezone) { super(enum_1.TimeUnit.NANOSECOND, timezone); }
}
exports.TimestampNanosecond = TimestampNanosecond;
class Interval_ extends DataType {
    constructor(_unit) {
        super();
        this._unit = _unit;
    }
    get typeId() { return enum_1.Type.Interval; }
    get unit() { return this._unit; }
    toString() { return `Interval<${enum_1.IntervalUnit[this._unit]}>`; }
}
Interval_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Interval';
})(Interval_.prototype);
exports.Interval = Interval_;
class IntervalDayTime extends Interval_ {
    constructor() { super(enum_1.IntervalUnit.DAY_TIME); }
}
exports.IntervalDayTime = IntervalDayTime;
class IntervalYearMonth extends Interval_ {
    constructor() { super(enum_1.IntervalUnit.YEAR_MONTH); }
}
exports.IntervalYearMonth = IntervalYearMonth;
class List extends DataType {
    constructor(child) {
        super([child]);
    }
    get typeId() { return enum_1.Type.List; }
    toString() { return `List<${this.valueType}>`; }
    get children() { return this._children; }
    get valueType() { return this._children[0].type; }
    get valueField() { return this._children[0]; }
    get ArrayType() { return this.valueType.ArrayType; }
}
List[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'List';
})(List.prototype);
exports.List = List;
class Struct extends DataType {
    constructor(_children) {
        super(_children);
        this._children = _children;
    }
    get typeId() { return enum_1.Type.Struct; }
    get children() { return this._children; }
    toString() { return `Struct<[${this._children.map((f) => f.type).join(`, `)}]>`; }
}
Struct[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Struct';
})(Struct.prototype);
exports.Struct = Struct;
class Union_ extends DataType {
    constructor(_mode, _typeIds, _children) {
        super(_children);
        this._mode = _mode;
        this._children = _children;
        this._typeIds = _typeIds = Int32Array.from(_typeIds);
        this._typeIdToChildIndex = _typeIds.reduce((typeIdToChildIndex, typeId, idx) => {
            return (typeIdToChildIndex[typeId] = idx) && typeIdToChildIndex || typeIdToChildIndex;
        }, Object.create(null));
    }
    get typeId() { return enum_1.Type.Union; }
    get mode() { return this._mode; }
    get typeIds() { return this._typeIds; }
    get children() { return this._children; }
    get typeIdToChildIndex() { return this._typeIdToChildIndex; }
    toString() {
        return `${this[Symbol.toStringTag]}<${this._children.map((x) => `${x.type}`).join(` | `)}>`;
    }
}
Union_[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Int32Array;
    return proto[Symbol.toStringTag] = 'Union';
})(Union_.prototype);
exports.Union = Union_;
class DenseUnion extends Union_ {
    constructor(typeIds, children) {
        super(enum_1.UnionMode.Dense, typeIds, children);
    }
}
exports.DenseUnion = DenseUnion;
class SparseUnion extends Union_ {
    constructor(typeIds, children) {
        super(enum_1.UnionMode.Sparse, typeIds, children);
    }
}
exports.SparseUnion = SparseUnion;
class FixedSizeBinary extends DataType {
    constructor(_byteWidth) {
        super();
        this._byteWidth = _byteWidth;
    }
    get typeId() { return enum_1.Type.FixedSizeBinary; }
    get byteWidth() { return this._byteWidth; }
    toString() { return `FixedSizeBinary[${this.byteWidth}]`; }
}
FixedSizeBinary[Symbol.toStringTag] = ((proto) => {
    proto.ArrayType = Uint8Array;
    return proto[Symbol.toStringTag] = 'FixedSizeBinary';
})(FixedSizeBinary.prototype);
exports.FixedSizeBinary = FixedSizeBinary;
class FixedSizeList extends DataType {
    constructor(_listSize, child) {
        super([child]);
        this._listSize = _listSize;
    }
    get typeId() { return enum_1.Type.FixedSizeList; }
    get listSize() { return this._listSize; }
    get children() { return this._children; }
    get valueType() { return this.children[0].type; }
    get valueField() { return this.children[0]; }
    get ArrayType() { return this.valueType.ArrayType; }
    toString() { return `FixedSizeList[${this._listSize}]<${this.valueType}>`; }
}
FixedSizeList[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'FixedSizeList';
})(FixedSizeList.prototype);
exports.FixedSizeList = FixedSizeList;
class Map_ extends DataType {
    constructor(_children, _keysSorted = false) {
        super(_children);
        this._children = _children;
        this._keysSorted = _keysSorted;
    }
    get typeId() { return enum_1.Type.Map; }
    get children() { return this._children; }
    get keysSorted() { return this._keysSorted; }
    toString() { return `Map<{${this._children.map((f) => `${f.name}:${f.type}`).join(`, `)}}>`; }
}
Map_[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Map_';
})(Map_.prototype);
exports.Map_ = Map_;
/** @ignore */
const getId = ((atomicDictionaryId) => () => ++atomicDictionaryId)(-1);
class Dictionary extends DataType {
    constructor(dictionary, indices, id, isOrdered, dictionaryVector) {
        super();
        this._indices = indices;
        this._dictionary = dictionary;
        this._isOrdered = isOrdered || false;
        this._dictionaryVector = dictionaryVector;
        this._id = id == null ? getId() : typeof id === 'number' ? id : id.low;
    }
    set dictionaryVector(v) { this._dictionaryVector = v; }
    get dictionaryVector() { return this._dictionaryVector; }
    get typeId() { return enum_1.Type.Dictionary; }
    get id() { return this._id; }
    get indices() { return this._indices; }
    get dictionary() { return this._dictionary; }
    get isOrdered() { return this._isOrdered; }
    set children(_) { }
    get children() { return this.dictionary.children; }
    get valueType() { return this.dictionary; }
    get ArrayType() { return this.dictionary.ArrayType; }
    toString() { return `Dictionary<${this.indices}, ${this.dictionary}>`; }
}
Dictionary[Symbol.toStringTag] = ((proto) => {
    return proto[Symbol.toStringTag] = 'Dictionary';
})(Dictionary.prototype);
exports.Dictionary = Dictionary;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
