"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const adapters_1 = require("./adapters");
const utf8_1 = require("../util/utf8");
const interfaces_1 = require("./interfaces");
const buffer_1 = require("../util/buffer");
const compat_1 = require("../util/compat");
/** @ignore */
class AsyncByteQueue extends interfaces_1.AsyncQueue {
    write(value) {
        if ((value = buffer_1.toUint8Array(value)).byteLength > 0) {
            return super.write(value);
        }
    }
    toString(sync = false) {
        return sync
            ? utf8_1.decodeUtf8(this.toUint8Array(true))
            : this.toUint8Array(false).then(utf8_1.decodeUtf8);
    }
    toUint8Array(sync = false) {
        return sync ? buffer_1.joinUint8Arrays(this._values.slice())[0] : (() => tslib_1.__awaiter(this, void 0, void 0, function* () {
            var e_1, _a;
            let buffers = [], byteLength = 0;
            try {
                for (var _b = tslib_1.__asyncValues(this), _c; _c = yield _b.next(), !_c.done;) {
                    const chunk = _c.value;
                    buffers.push(chunk);
                    byteLength += chunk.byteLength;
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield _a.call(_b);
                }
                finally { if (e_1) throw e_1.error; }
            }
            return buffer_1.joinUint8Arrays(buffers, byteLength)[0];
        }))();
    }
}
exports.AsyncByteQueue = AsyncByteQueue;
/** @ignore */
class ByteStream {
    constructor(source) {
        if (source) {
            this.source = new ByteStreamSource(adapters_1.default.fromIterable(source));
        }
    }
    [Symbol.iterator]() { return this; }
    next(value) { return this.source.next(value); }
    throw(value) { return this.source.throw(value); }
    return(value) { return this.source.return(value); }
    peek(size) { return this.source.peek(size); }
    read(size) { return this.source.read(size); }
}
exports.ByteStream = ByteStream;
/** @ignore */
class AsyncByteStream {
    constructor(source) {
        if (source instanceof AsyncByteStream) {
            this.source = source.source;
        }
        else if (source instanceof AsyncByteQueue) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
        }
        else if (compat_1.isReadableNodeStream(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromNodeStream(source));
        }
        else if (compat_1.isFetchResponse(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source.body));
        }
        else if (compat_1.isIterable(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromIterable(source));
        }
        else if (compat_1.isPromise(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
        }
        else if (compat_1.isAsyncIterable(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromAsyncIterable(source));
        }
        else if (compat_1.isReadableDOMStream(source)) {
            this.source = new AsyncByteStreamSource(adapters_1.default.fromDOMStream(source));
        }
    }
    [Symbol.asyncIterator]() { return this; }
    next(value) { return this.source.next(value); }
    throw(value) { return this.source.throw(value); }
    return(value) { return this.source.return(value); }
    get closed() { return this.source.closed; }
    cancel(reason) { return this.source.cancel(reason); }
    peek(size) { return this.source.peek(size); }
    read(size) { return this.source.read(size); }
}
exports.AsyncByteStream = AsyncByteStream;
/** @ignore */
class ByteStreamSource {
    constructor(source) {
        this.source = source;
    }
    cancel(reason) { this.return(reason); }
    peek(size) { return this.next(size, 'peek').value; }
    read(size) { return this.next(size, 'read').value; }
    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }
    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || interfaces_1.ITERATOR_DONE); }
    return(value) { return Object.create((this.source.return && this.source.return(value)) || interfaces_1.ITERATOR_DONE); }
}
/** @ignore */
class AsyncByteStreamSource {
    constructor(source) {
        this.source = source;
        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
    }
    cancel(reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.return(reason); });
    }
    get closed() { return this._closedPromise; }
    read(size) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });
    }
    peek(size) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });
    }
    next(size, cmd = 'read') {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.source.next({ cmd, size })); });
    }
    throw(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const result = (this.source.throw && (yield this.source.throw(value))) || interfaces_1.ITERATOR_DONE;
            this._closedPromiseResolve && this._closedPromiseResolve();
            this._closedPromiseResolve = undefined;
            return Object.create(result);
        });
    }
    return(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const result = (this.source.return && (yield this.source.return(value))) || interfaces_1.ITERATOR_DONE;
            this._closedPromiseResolve && this._closedPromiseResolve();
            this._closedPromiseResolve = undefined;
            return Object.create(result);
        });
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,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WSxNQUFNLENBQUMsS0FBVzs7WUFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sS0FBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFBLENBQUMsSUFBSSwwQkFBYSxDQUFDO1lBQ3hGLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztZQUMzRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsU0FBUyxDQUFDO1lBQ3ZDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUNqQyxDQUFDO0tBQUE7Q0FDSiIsImZpbGUiOiJpby9zdHJlYW0uanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHN0cmVhbUFkYXB0ZXJzIGZyb20gJy4vYWRhcHRlcnMnO1xuaW1wb3J0IHsgZGVjb2RlVXRmOCB9IGZyb20gJy4uL3V0aWwvdXRmOCc7XG5pbXBvcnQgeyBJVEVSQVRPUl9ET05FLCBSZWFkYWJsZSwgV3JpdGFibGUsIEFzeW5jUXVldWUgfSBmcm9tICcuL2ludGVyZmFjZXMnO1xuaW1wb3J0IHsgdG9VaW50OEFycmF5LCBqb2luVWludDhBcnJheXMsIEFycmF5QnVmZmVyVmlld0lucHV0IH0gZnJvbSAnLi4vdXRpbC9idWZmZXInO1xuXG5pbXBvcnQge1xuICAgIGlzUHJvbWlzZSwgaXNGZXRjaFJlc3BvbnNlLFxuICAgIGlzSXRlcmFibGUsIGlzQXN5bmNJdGVyYWJsZSxcbiAgICBpc1JlYWRhYmxlRE9NU3RyZWFtLCBpc1JlYWRhYmxlTm9kZVN0cmVhbVxufSBmcm9tICcuLi91dGlsL2NvbXBhdCc7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgdHlwZSBXcml0YWJsZVNpbms8VD4gPSBXcml0YWJsZTxUPiB8IFdyaXRhYmxlU3RyZWFtPFQ+IHwgTm9kZUpTLldyaXRhYmxlU3RyZWFtIHwgbnVsbDtcbi8qKiBAaWdub3JlICovXG5leHBvcnQgdHlwZSBSZWFkYWJsZVNvdXJjZTxUPiA9IFJlYWRhYmxlPFQ+IHwgUHJvbWlzZUxpa2U8VD4gfCBBc3luY0l0ZXJhYmxlPFQ+IHwgUmVhZGFibGVTdHJlYW08VD4gfCBOb2RlSlMuUmVhZGFibGVTdHJlYW0gfCBudWxsO1xuXG4vKiogQGlnbm9yZSAqL1xuZXhwb3J0IGNsYXNzIEFzeW5jQnl0ZVF1ZXVlPFQgZXh0ZW5kcyBBcnJheUJ1ZmZlclZpZXdJbnB1dCA9IFVpbnQ4QXJyYXk+IGV4dGVuZHMgQXN5bmNRdWV1ZTxVaW50OEFycmF5LCBUPiB7XG4gICAgcHVibGljIHdyaXRlKHZhbHVlOiBBcnJheUJ1ZmZlclZpZXdJbnB1dCB8IFVpbnQ4QXJyYXkpIHtcbiAgICAgICAgaWYgKCh2YWx1ZSA9IHRvVWludDhBcnJheSh2YWx1ZSkpLmJ5dGVMZW5ndGggPiAwKSB7XG4gICAgICAgICAgICByZXR1cm4gc3VwZXIud3JpdGUodmFsdWUgYXMgVCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIHRvU3RyaW5nKHN5bmM6IHRydWUpOiBzdHJpbmc7XG4gICAgcHVibGljIHRvU3RyaW5nKHN5bmM/OiBmYWxzZSk6IFByb21pc2U8c3RyaW5nPjtcbiAgICBwdWJsaWMgdG9TdHJpbmcoc3luYyA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBzeW5jXG4gICAgICAgICAgICA/IGRlY29kZVV0ZjgodGhpcy50b1VpbnQ4QXJyYXkodHJ1ZSkpXG4gICAgICAgICAgICA6IHRoaXMudG9VaW50OEFycmF5KGZhbHNlKS50aGVuKGRlY29kZVV0ZjgpO1xuICAgIH1cbiAgICBwdWJsaWMgdG9VaW50OEFycmF5KHN5bmM6IHRydWUpOiBVaW50OEFycmF5O1xuICAgIHB1YmxpYyB0b1VpbnQ4QXJyYXkoc3luYz86IGZhbHNlKTogUHJvbWlzZTxVaW50OEFycmF5PjtcbiAgICBwdWJsaWMgdG9VaW50OEFycmF5KHN5bmMgPSBmYWxzZSkge1xuICAgICAgICByZXR1cm4gc3luYyA/IGpvaW5VaW50OEFycmF5cygodGhpcy5fdmFsdWVzIGFzIGFueVtdKS5zbGljZSgpKVswXSA6IChhc3luYyAoKSA9PiB7XG4gICAgICAgICAgICBsZXQgYnVmZmVycyA9IFtdLCBieXRlTGVuZ3RoID0gMDtcbiAgICAgICAgICAgIGZvciBhd2FpdCAoY29uc3QgY2h1bmsgb2YgdGhpcykge1xuICAgICAgICAgICAgICAgIGJ1ZmZlcnMucHVzaChjaHVuayk7XG4gICAgICAgICAgICAgICAgYnl0ZUxlbmd0aCArPSBjaHVuay5ieXRlTGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGpvaW5VaW50OEFycmF5cyhidWZmZXJzLCBieXRlTGVuZ3RoKVswXTtcbiAgICAgICAgfSkoKTtcbiAgICB9XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY2xhc3MgQnl0ZVN0cmVhbSBpbXBsZW1lbnRzIEl0ZXJhYmxlSXRlcmF0b3I8VWludDhBcnJheT4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcml2YXRlIHNvdXJjZTogQnl0ZVN0cmVhbVNvdXJjZTxVaW50OEFycmF5PjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U/OiBJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBBcnJheUJ1ZmZlclZpZXdJbnB1dCkge1xuICAgICAgICBpZiAoc291cmNlKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG5ldyBCeXRlU3RyZWFtU291cmNlKHN0cmVhbUFkYXB0ZXJzLmZyb21JdGVyYWJsZShzb3VyY2UpKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBbU3ltYm9sLml0ZXJhdG9yXSgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICBwdWJsaWMgbmV4dCh2YWx1ZT86IGFueSkgeyByZXR1cm4gdGhpcy5zb3VyY2UubmV4dCh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgdGhyb3codmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuc291cmNlLnRocm93KHZhbHVlKTsgfVxuICAgIHB1YmxpYyByZXR1cm4odmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuc291cmNlLnJldHVybih2YWx1ZSk7IH1cbiAgICBwdWJsaWMgcGVlayhzaXplPzogbnVtYmVyIHwgbnVsbCkgeyByZXR1cm4gdGhpcy5zb3VyY2UucGVlayhzaXplKTsgfVxuICAgIHB1YmxpYyByZWFkKHNpemU/OiBudW1iZXIgfCBudWxsKSB7IHJldHVybiB0aGlzLnNvdXJjZS5yZWFkKHNpemUpOyB9XG59XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY2xhc3MgQXN5bmNCeXRlU3RyZWFtIGltcGxlbWVudHMgUmVhZGFibGU8VWludDhBcnJheT4sIEFzeW5jSXRlcmFibGVJdGVyYXRvcjxVaW50OEFycmF5PiB7XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHByaXZhdGUgc291cmNlOiBBc3luY0J5dGVTdHJlYW1Tb3VyY2U8VWludDhBcnJheT47XG4gICAgY29uc3RydWN0b3Ioc291cmNlPzogUHJvbWlzZUxpa2U8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+IHwgUmVzcG9uc2UgfCBSZWFkYWJsZVN0cmVhbTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBOb2RlSlMuUmVhZGFibGVTdHJlYW0gfCBBc3luY0l0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0PiB8IEl0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0Pikge1xuICAgICAgICBpZiAoc291cmNlIGluc3RhbmNlb2YgQXN5bmNCeXRlU3RyZWFtKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IChzb3VyY2UgYXMgQXN5bmNCeXRlU3RyZWFtKS5zb3VyY2U7XG4gICAgICAgIH0gZWxzZSBpZiAoc291cmNlIGluc3RhbmNlb2YgQXN5bmNCeXRlUXVldWUpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tQXN5bmNJdGVyYWJsZShzb3VyY2UpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1JlYWRhYmxlTm9kZVN0cmVhbShzb3VyY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG5ldyBBc3luY0J5dGVTdHJlYW1Tb3VyY2Uoc3RyZWFtQWRhcHRlcnMuZnJvbU5vZGVTdHJlYW0oc291cmNlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNGZXRjaFJlc3BvbnNlKHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tRE9NU3RyZWFtKHNvdXJjZS5ib2R5ISkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+KHNvdXJjZSkpIHtcbiAgICAgICAgICAgIHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tSXRlcmFibGUoc291cmNlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlPEFycmF5QnVmZmVyVmlld0lucHV0Pihzb3VyY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG5ldyBBc3luY0J5dGVTdHJlYW1Tb3VyY2Uoc3RyZWFtQWRhcHRlcnMuZnJvbUFzeW5jSXRlcmFibGUoc291cmNlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNBc3luY0l0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0Pihzb3VyY2UpKSB7XG4gICAgICAgICAgICB0aGlzLnNvdXJjZSA9IG5ldyBBc3luY0J5dGVTdHJlYW1Tb3VyY2Uoc3RyZWFtQWRhcHRlcnMuZnJvbUFzeW5jSXRlcmFibGUoc291cmNlKSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNSZWFkYWJsZURPTVN0cmVhbTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4oc291cmNlKSkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBuZXcgQXN5bmNCeXRlU3RyZWFtU291cmNlKHN0cmVhbUFkYXB0ZXJzLmZyb21ET01TdHJlYW0oc291cmNlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSgpIHsgcmV0dXJuIHRoaXM7IH1cbiAgICBwdWJsaWMgbmV4dCh2YWx1ZT86IGFueSkgeyByZXR1cm4gdGhpcy5zb3VyY2UubmV4dCh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgdGhyb3codmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuc291cmNlLnRocm93KHZhbHVlKTsgfVxuICAgIHB1YmxpYyByZXR1cm4odmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuc291cmNlLnJldHVybih2YWx1ZSk7IH1cbiAgICBwdWJsaWMgZ2V0IGNsb3NlZCgpOiBQcm9taXNlPHZvaWQ+IHsgcmV0dXJuIHRoaXMuc291cmNlLmNsb3NlZDsgfVxuICAgIHB1YmxpYyBjYW5jZWwocmVhc29uPzogYW55KSB7IHJldHVybiB0aGlzLnNvdXJjZS5jYW5jZWwocmVhc29uKTsgfVxuICAgIHB1YmxpYyBwZWVrKHNpemU/OiBudW1iZXIgfCBudWxsKSB7IHJldHVybiB0aGlzLnNvdXJjZS5wZWVrKHNpemUpOyB9XG4gICAgcHVibGljIHJlYWQoc2l6ZT86IG51bWJlciB8IG51bGwpIHsgcmV0dXJuIHRoaXMuc291cmNlLnJlYWQoc2l6ZSk7IH1cbn1cblxuLyoqIEBpZ25vcmUgKi9cbmludGVyZmFjZSBCeXRlU3RyZWFtU291cmNlSXRlcmF0b3I8VD4gZXh0ZW5kcyBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICBuZXh0KHZhbHVlPzogeyBjbWQ6ICdwZWVrJyB8ICdyZWFkJywgc2l6ZT86IG51bWJlciB8IG51bGwgfSk6IEl0ZXJhdG9yUmVzdWx0PFQ+O1xufVxuXG4vKiogQGlnbm9yZSAqL1xuaW50ZXJmYWNlIEFzeW5jQnl0ZVN0cmVhbVNvdXJjZUl0ZXJhdG9yPFQ+IGV4dGVuZHMgQXN5bmNJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICBuZXh0KHZhbHVlPzogeyBjbWQ6ICdwZWVrJyB8ICdyZWFkJywgc2l6ZT86IG51bWJlciB8IG51bGwgfSk6IFByb21pc2U8SXRlcmF0b3JSZXN1bHQ8VD4+O1xufVxuXG4vKiogQGlnbm9yZSAqL1xuY2xhc3MgQnl0ZVN0cmVhbVNvdXJjZTxUPiB7XG4gICAgY29uc3RydWN0b3IocHJvdGVjdGVkIHNvdXJjZTogQnl0ZVN0cmVhbVNvdXJjZUl0ZXJhdG9yPFQ+KSB7fVxuICAgIHB1YmxpYyBjYW5jZWwocmVhc29uPzogYW55KSB7IHRoaXMucmV0dXJuKHJlYXNvbik7IH1cbiAgICBwdWJsaWMgcGVlayhzaXplPzogbnVtYmVyIHwgbnVsbCk6IFQgfCBudWxsIHsgcmV0dXJuIHRoaXMubmV4dChzaXplLCAncGVlaycpLnZhbHVlOyB9XG4gICAgcHVibGljIHJlYWQoc2l6ZT86IG51bWJlciB8IG51bGwpOiBUIHwgbnVsbCB7IHJldHVybiB0aGlzLm5leHQoc2l6ZSwgJ3JlYWQnKS52YWx1ZTsgfVxuICAgIHB1YmxpYyBuZXh0KHNpemU/OiBudW1iZXIgfCBudWxsLCBjbWQ6ICdwZWVrJyB8ICdyZWFkJyA9ICdyZWFkJykgeyByZXR1cm4gdGhpcy5zb3VyY2UubmV4dCh7IGNtZCwgc2l6ZSB9KTsgfVxuICAgIHB1YmxpYyB0aHJvdyh2YWx1ZT86IGFueSkgeyByZXR1cm4gT2JqZWN0LmNyZWF0ZSgodGhpcy5zb3VyY2UudGhyb3cgJiYgdGhpcy5zb3VyY2UudGhyb3codmFsdWUpKSB8fCBJVEVSQVRPUl9ET05FKTsgfVxuICAgIHB1YmxpYyByZXR1cm4odmFsdWU/OiBhbnkpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUoKHRoaXMuc291cmNlLnJldHVybiAmJiB0aGlzLnNvdXJjZS5yZXR1cm4odmFsdWUpKSB8fCBJVEVSQVRPUl9ET05FKTsgfVxufVxuXG4vKiogQGlnbm9yZSAqL1xuY2xhc3MgQXN5bmNCeXRlU3RyZWFtU291cmNlPFQ+IGltcGxlbWVudHMgUmVhZGFibGU8VD4ge1xuXG4gICAgcHJpdmF0ZSBfY2xvc2VkUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIF9jbG9zZWRQcm9taXNlUmVzb2x2ZT86ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcbiAgICBjb25zdHJ1Y3RvciAocHJvdGVjdGVkIHNvdXJjZTogQnl0ZVN0cmVhbVNvdXJjZUl0ZXJhdG9yPFQ+IHwgQXN5bmNCeXRlU3RyZWFtU291cmNlSXRlcmF0b3I8VD4pIHtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyKSA9PiB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSA9IHIpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgY2FuY2VsKHJlYXNvbj86IGFueSkgeyBhd2FpdCB0aGlzLnJldHVybihyZWFzb24pOyB9XG4gICAgcHVibGljIGdldCBjbG9zZWQoKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybiB0aGlzLl9jbG9zZWRQcm9taXNlOyB9XG4gICAgcHVibGljIGFzeW5jIHJlYWQoc2l6ZT86IG51bWJlciB8IG51bGwpOiBQcm9taXNlPFQgfCBudWxsPiB7IHJldHVybiAoYXdhaXQgdGhpcy5uZXh0KHNpemUsICdyZWFkJykpLnZhbHVlOyB9XG4gICAgcHVibGljIGFzeW5jIHBlZWsoc2l6ZT86IG51bWJlciB8IG51bGwpOiBQcm9taXNlPFQgfCBudWxsPiB7IHJldHVybiAoYXdhaXQgdGhpcy5uZXh0KHNpemUsICdwZWVrJykpLnZhbHVlOyB9XG4gICAgcHVibGljIGFzeW5jIG5leHQoc2l6ZT86IG51bWJlciB8IG51bGwsIGNtZDogJ3BlZWsnIHwgJ3JlYWQnID0gJ3JlYWQnKSB7IHJldHVybiAoYXdhaXQgdGhpcy5zb3VyY2UubmV4dCh7IGNtZCwgc2l6ZSB9KSk7IH1cbiAgICBwdWJsaWMgYXN5bmMgdGhyb3codmFsdWU/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuc291cmNlLnRocm93ICYmIGF3YWl0IHRoaXMuc291cmNlLnRocm93KHZhbHVlKSkgfHwgSVRFUkFUT1JfRE9ORTtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUgJiYgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHJlc3VsdCk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZXR1cm4odmFsdWU/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuc291cmNlLnJldHVybiAmJiBhd2FpdCB0aGlzLnNvdXJjZS5yZXR1cm4odmFsdWUpKSB8fCBJVEVSQVRPUl9ET05FO1xuICAgICAgICB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSAmJiB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocmVzdWx0KTtcbiAgICB9XG59XG4iXX0=
