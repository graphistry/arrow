"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const stream_1 = require("./stream");
/** @ignore */
class RandomAccessFile extends stream_1.ByteStream {
    constructor(buffer, byteLength = buffer.byteLength) {
        super();
        this.position = 0;
        this.buffer = buffer;
        this.size = byteLength;
    }
    readInt32(position) {
        const { buffer, byteOffset } = this.readAt(position, 4);
        return new DataView(buffer, byteOffset).getInt32(0, true);
    }
    seek(position) {
        this.position = Math.min(position, this.size);
        return position < this.size;
    }
    read(nBytes) {
        const { buffer, size, position } = this;
        if (buffer && position < size) {
            if (typeof nBytes !== 'number') {
                nBytes = Infinity;
            }
            this.position = Math.min(size, position + Math.min(size - position, nBytes));
            return buffer.subarray(position, this.position);
        }
        return null;
    }
    readAt(position, nBytes) {
        const buf = this.buffer;
        const end = Math.min(this.size, position + nBytes);
        return buf ? buf.subarray(position, end) : new Uint8Array(nBytes);
    }
    close() { this.buffer && (this.buffer = null); }
    throw(value) { this.close(); return { done: true, value }; }
    return(value) { this.close(); return { done: true, value }; }
}
exports.RandomAccessFile = RandomAccessFile;
/** @ignore */
class AsyncRandomAccessFile extends stream_1.AsyncByteStream {
    constructor(file, byteLength) {
        super();
        this.position = 0;
        this.file = file;
        if (typeof byteLength === 'number') {
            this.size = byteLength;
        }
        else {
            this._pendingSize = (() => tslib_1.__awaiter(this, void 0, void 0, function* () {
                delete this._pendingSize;
                this.size = (yield file.stat()).size;
            }))();
        }
    }
    readInt32(position) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            const { buffer, byteOffset } = yield this.readAt(position, 4);
            return new DataView(buffer, byteOffset).getInt32(0, true);
        });
    }
    seek(position) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._pendingSize && (yield this._pendingSize);
            this.position = Math.min(position, this.size);
            return position < this.size;
        });
    }
    read(nBytes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._pendingSize && (yield this._pendingSize);
            const { file, size, position } = this;
            if (file && position < size) {
                if (typeof nBytes !== 'number') {
                    nBytes = Infinity;
                }
                let pos = position, offset = 0, bytesRead = 0;
                let end = Math.min(size, pos + Math.min(size - pos, nBytes));
                let buffer = new Uint8Array(Math.max(0, (this.position = end) - pos));
                while ((pos += bytesRead) < end && (offset += bytesRead) < buffer.byteLength) {
                    ({ bytesRead } = yield file.read(buffer, offset, buffer.byteLength - offset, pos));
                }
                return buffer;
            }
            return null;
        });
    }
    readAt(position, nBytes) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () {
            this._pendingSize && (yield this._pendingSize);
            const { file, size } = this;
            if (file && (position + nBytes) < size) {
                const end = Math.min(size, position + nBytes);
                const buffer = new Uint8Array(end - position);
                return (yield file.read(buffer, 0, nBytes, position)).buffer;
            }
            return new Uint8Array(nBytes);
        });
    }
    close() {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { const f = this.file; this.file = null; f && (yield f.close()); });
    }
    throw(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });
    }
    return(value) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return { done: true, value }; });
    }
}
exports.AsyncRandomAccessFile = AsyncRandomAccessFile;

//# sourceMappingURL=data:application/json;charset=utf8;base64,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O0tBQUE7Q0FDekY7QUF2REQsc0RBdURDIiwiZmlsZSI6ImlvL2ZpbGUuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBMaWNlbnNlZCB0byB0aGUgQXBhY2hlIFNvZnR3YXJlIEZvdW5kYXRpb24gKEFTRikgdW5kZXIgb25lXG4vLyBvciBtb3JlIGNvbnRyaWJ1dG9yIGxpY2Vuc2UgYWdyZWVtZW50cy4gIFNlZSB0aGUgTk9USUNFIGZpbGVcbi8vIGRpc3RyaWJ1dGVkIHdpdGggdGhpcyB3b3JrIGZvciBhZGRpdGlvbmFsIGluZm9ybWF0aW9uXG4vLyByZWdhcmRpbmcgY29weXJpZ2h0IG93bmVyc2hpcC4gIFRoZSBBU0YgbGljZW5zZXMgdGhpcyBmaWxlXG4vLyB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlXG4vLyBcIkxpY2Vuc2VcIik7IHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Vcbi8vIHdpdGggdGhlIExpY2Vuc2UuICBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXRcbi8vXG4vLyAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuLy9cbi8vIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZyxcbi8vIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuXG4vLyBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWVxuLy8gS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlXG4vLyBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zXG4vLyB1bmRlciB0aGUgTGljZW5zZS5cblxuaW1wb3J0IHsgRmlsZUhhbmRsZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBCeXRlU3RyZWFtLCBBc3luY0J5dGVTdHJlYW0gfSBmcm9tICcuL3N0cmVhbSc7XG5cbi8qKiBAaWdub3JlICovXG5leHBvcnQgY2xhc3MgUmFuZG9tQWNjZXNzRmlsZSBleHRlbmRzIEJ5dGVTdHJlYW0ge1xuICAgIHB1YmxpYyBzaXplOiBudW1iZXI7XG4gICAgcHVibGljIHBvc2l0aW9uOiBudW1iZXIgPSAwO1xuICAgIHByb3RlY3RlZCBidWZmZXI6IFVpbnQ4QXJyYXkgfCBudWxsO1xuICAgIGNvbnN0cnVjdG9yKGJ1ZmZlcjogVWludDhBcnJheSwgYnl0ZUxlbmd0aCA9IGJ1ZmZlci5ieXRlTGVuZ3RoKSB7XG4gICAgICAgIHN1cGVyKCk7XG4gICAgICAgIHRoaXMuYnVmZmVyID0gYnVmZmVyO1xuICAgICAgICB0aGlzLnNpemUgPSBieXRlTGVuZ3RoO1xuICAgIH1cbiAgICBwdWJsaWMgcmVhZEludDMyKHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3QgeyBidWZmZXIsIGJ5dGVPZmZzZXQgfSA9IHRoaXMucmVhZEF0KHBvc2l0aW9uLCA0KTtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRhVmlldyhidWZmZXIsIGJ5dGVPZmZzZXQpLmdldEludDMyKDAsIHRydWUpO1xuICAgIH1cbiAgICBwdWJsaWMgc2Vlayhwb3NpdGlvbjogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBNYXRoLm1pbihwb3NpdGlvbiwgdGhpcy5zaXplKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uIDwgdGhpcy5zaXplO1xuICAgIH1cbiAgICBwdWJsaWMgcmVhZChuQnl0ZXM/OiBudW1iZXIgfCBudWxsKSB7XG4gICAgICAgIGNvbnN0IHsgYnVmZmVyLCBzaXplLCBwb3NpdGlvbiB9ID0gdGhpcztcbiAgICAgICAgaWYgKGJ1ZmZlciAmJiBwb3NpdGlvbiA8IHNpemUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbkJ5dGVzICE9PSAnbnVtYmVyJykgeyBuQnl0ZXMgPSBJbmZpbml0eTsgfVxuICAgICAgICAgICAgdGhpcy5wb3NpdGlvbiA9IE1hdGgubWluKHNpemUsXG4gICAgICAgICAgICAgICAgIHBvc2l0aW9uICsgTWF0aC5taW4oc2l6ZSAtIHBvc2l0aW9uLCBuQnl0ZXMpKTtcbiAgICAgICAgICAgIHJldHVybiBidWZmZXIuc3ViYXJyYXkocG9zaXRpb24sIHRoaXMucG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwdWJsaWMgcmVhZEF0KHBvc2l0aW9uOiBudW1iZXIsIG5CeXRlczogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGJ1ZiA9IHRoaXMuYnVmZmVyO1xuICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbih0aGlzLnNpemUsIHBvc2l0aW9uICsgbkJ5dGVzKTtcbiAgICAgICAgcmV0dXJuIGJ1ZiA/IGJ1Zi5zdWJhcnJheShwb3NpdGlvbiwgZW5kKSA6IG5ldyBVaW50OEFycmF5KG5CeXRlcyk7XG4gICAgfVxuICAgIHB1YmxpYyBjbG9zZSgpIHsgdGhpcy5idWZmZXIgJiYgKHRoaXMuYnVmZmVyID0gbnVsbCk7IH1cbiAgICBwdWJsaWMgdGhyb3codmFsdWU/OiBhbnkpIHsgdGhpcy5jbG9zZSgpOyByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZSB9OyB9XG4gICAgcHVibGljIHJldHVybih2YWx1ZT86IGFueSkgeyB0aGlzLmNsb3NlKCk7IHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlIH07IH1cbn1cblxuLyoqIEBpZ25vcmUgKi9cbmV4cG9ydCBjbGFzcyBBc3luY1JhbmRvbUFjY2Vzc0ZpbGUgZXh0ZW5kcyBBc3luY0J5dGVTdHJlYW0ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgc2l6ZTogbnVtYmVyO1xuICAgIHB1YmxpYyBwb3NpdGlvbjogbnVtYmVyID0gMDtcbiAgICBwcm90ZWN0ZWQgZmlsZTogRmlsZUhhbmRsZSB8IG51bGw7XG4gICAgcHJvdGVjdGVkIF9wZW5kaW5nU2l6ZT86IFByb21pc2U8dm9pZD47XG4gICAgY29uc3RydWN0b3IoZmlsZTogRmlsZUhhbmRsZSwgYnl0ZUxlbmd0aD86IG51bWJlcikge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLmZpbGUgPSBmaWxlO1xuICAgICAgICBpZiAodHlwZW9mIGJ5dGVMZW5ndGggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICB0aGlzLnNpemUgPSBieXRlTGVuZ3RoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcGVuZGluZ1NpemUgPSAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIGRlbGV0ZSB0aGlzLl9wZW5kaW5nU2l6ZTtcbiAgICAgICAgICAgICAgICB0aGlzLnNpemUgPSAoYXdhaXQgZmlsZS5zdGF0KCkpLnNpemU7XG4gICAgICAgICAgICB9KSgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZWFkSW50MzIocG9zaXRpb246IG51bWJlcikge1xuICAgICAgICBjb25zdCB7IGJ1ZmZlciwgYnl0ZU9mZnNldCB9ID0gYXdhaXQgdGhpcy5yZWFkQXQocG9zaXRpb24sIDQpO1xuICAgICAgICByZXR1cm4gbmV3IERhdGFWaWV3KGJ1ZmZlciwgYnl0ZU9mZnNldCkuZ2V0SW50MzIoMCwgdHJ1ZSk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBzZWVrKHBvc2l0aW9uOiBudW1iZXIpIHtcbiAgICAgICAgdGhpcy5fcGVuZGluZ1NpemUgJiYgYXdhaXQgdGhpcy5fcGVuZGluZ1NpemU7XG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBNYXRoLm1pbihwb3NpdGlvbiwgdGhpcy5zaXplKTtcbiAgICAgICAgcmV0dXJuIHBvc2l0aW9uIDwgdGhpcy5zaXplO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgcmVhZChuQnl0ZXM/OiBudW1iZXIgfCBudWxsKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTaXplICYmIGF3YWl0IHRoaXMuX3BlbmRpbmdTaXplO1xuICAgICAgICBjb25zdCB7IGZpbGUsIHNpemUsIHBvc2l0aW9uIH0gPSB0aGlzO1xuICAgICAgICBpZiAoZmlsZSAmJiBwb3NpdGlvbiA8IHNpemUpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgbkJ5dGVzICE9PSAnbnVtYmVyJykgeyBuQnl0ZXMgPSBJbmZpbml0eTsgfVxuICAgICAgICAgICAgbGV0IHBvcyA9IHBvc2l0aW9uLCBvZmZzZXQgPSAwLCBieXRlc1JlYWQgPSAwO1xuICAgICAgICAgICAgbGV0IGVuZCA9IE1hdGgubWluKHNpemUsIHBvcyArIE1hdGgubWluKHNpemUgLSBwb3MsIG5CeXRlcykpO1xuICAgICAgICAgICAgbGV0IGJ1ZmZlciA9IG5ldyBVaW50OEFycmF5KE1hdGgubWF4KDAsICh0aGlzLnBvc2l0aW9uID0gZW5kKSAtIHBvcykpO1xuICAgICAgICAgICAgd2hpbGUgKChwb3MgKz0gYnl0ZXNSZWFkKSA8IGVuZCAmJiAob2Zmc2V0ICs9IGJ5dGVzUmVhZCkgPCBidWZmZXIuYnl0ZUxlbmd0aCkge1xuICAgICAgICAgICAgICAgICh7IGJ5dGVzUmVhZCB9ID0gYXdhaXQgZmlsZS5yZWFkKGJ1ZmZlciwgb2Zmc2V0LCBidWZmZXIuYnl0ZUxlbmd0aCAtIG9mZnNldCwgcG9zKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYnVmZmVyO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBudWxsO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgcmVhZEF0KHBvc2l0aW9uOiBudW1iZXIsIG5CeXRlczogbnVtYmVyKSB7XG4gICAgICAgIHRoaXMuX3BlbmRpbmdTaXplICYmIGF3YWl0IHRoaXMuX3BlbmRpbmdTaXplO1xuICAgICAgICBjb25zdCB7IGZpbGUsIHNpemUgfSA9IHRoaXM7XG4gICAgICAgIGlmIChmaWxlICYmIChwb3NpdGlvbiArIG5CeXRlcykgPCBzaXplKSB7XG4gICAgICAgICAgICBjb25zdCBlbmQgPSBNYXRoLm1pbihzaXplLCBwb3NpdGlvbiArIG5CeXRlcyk7XG4gICAgICAgICAgICBjb25zdCBidWZmZXIgPSBuZXcgVWludDhBcnJheShlbmQgLSBwb3NpdGlvbik7XG4gICAgICAgICAgICByZXR1cm4gKGF3YWl0IGZpbGUucmVhZChidWZmZXIsIDAsIG5CeXRlcywgcG9zaXRpb24pKS5idWZmZXI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ldyBVaW50OEFycmF5KG5CeXRlcyk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyBjbG9zZSgpIHsgY29uc3QgZiA9IHRoaXMuZmlsZTsgdGhpcy5maWxlID0gbnVsbDsgZiAmJiBhd2FpdCBmLmNsb3NlKCk7IH1cbiAgICBwdWJsaWMgYXN5bmMgdGhyb3codmFsdWU/OiBhbnkpIHsgYXdhaXQgdGhpcy5jbG9zZSgpOyByZXR1cm4geyBkb25lOiB0cnVlLCB2YWx1ZSB9OyB9XG4gICAgcHVibGljIGFzeW5jIHJldHVybih2YWx1ZT86IGFueSkgeyBhd2FpdCB0aGlzLmNsb3NlKCk7IHJldHVybiB7IGRvbmU6IHRydWUsIHZhbHVlIH07IH1cbn1cbiJdfQ==
