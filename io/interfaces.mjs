// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import streamAdapters from './adapters';
export const ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });
/**
 * @ignore
 */
export class ArrowJSON {
    constructor(_json) {
        this._json = _json;
    }
    get schema() { return this._json['schema']; }
    get batches() { return (this._json['batches'] || []); }
    get dictionaries() { return (this._json['dictionaries'] || []); }
}
Object.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; } });
Object.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []); } });
Object.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []); } });
export class ReadableInterop {
    tee() {
        return this._getReadableDOMStream().tee();
    }
    pipe(writable, options) {
        return this._getReadableNodeStream().pipe(writable, options);
    }
    pipeTo(writable, options) { return this._getReadableDOMStream().pipeTo(writable, options); }
    pipeThrough(duplex, options) {
        return this._getReadableDOMStream().pipeThrough(duplex, options);
    }
    _getReadableDOMStream() {
        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());
    }
    _getReadableNodeStream() {
        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());
    }
}
/**
 * @ignore
 */
export class AsyncQueue extends ReadableInterop {
    constructor() {
        super();
        this.values = [];
        this.resolvers = [];
        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
    }
    get closed() { return this._closedPromise; }
    async cancel(reason) { await this.return(reason); }
    write(value) {
        if (this._ensureOpen()) {
            this.resolvers.length <= 0
                ? (this.values.push(value))
                : (this.resolvers.shift().resolve({ done: false, value }));
        }
    }
    abort(value) {
        if (this._closedPromiseResolve) {
            this.resolvers.length <= 0
                ? (this._error = { error: value })
                : (this.resolvers.shift().reject({ done: true, value }));
        }
    }
    close() {
        if (this._closedPromiseResolve) {
            const { resolvers } = this;
            while (resolvers.length > 0) {
                resolvers.shift().resolve(ITERATOR_DONE);
            }
            this._closedPromiseResolve();
            this._closedPromiseResolve = undefined;
        }
    }
    [Symbol.asyncIterator]() { return this; }
    toReadableDOMStream(options) {
        return streamAdapters.toReadableDOMStream(this, options);
    }
    toReadableNodeStream(options) {
        return streamAdapters.toReadableNodeStream(this, options);
    }
    async throw(_) { await this.abort(_); return ITERATOR_DONE; }
    ;
    async return(_) { await this.close(); return ITERATOR_DONE; }
    ;
    async read(size) { return (await this.next(size, 'read')).value; }
    async peek(size) { return (await this.next(size, 'peek')).value; }
    next(..._args) {
        if (this.values.length > 0) {
            return Promise.resolve({ done: false, value: this.values.shift() });
        }
        else if (this._error) {
            return Promise.reject({ done: true, value: this._error.error });
        }
        else if (!this._closedPromiseResolve) {
            return Promise.resolve(ITERATOR_DONE);
        }
        else {
            return new Promise((resolve, reject) => {
                this.resolvers.push({ resolve, reject });
            });
        }
    }
    _ensureOpen() {
        if (this._closedPromiseResolve) {
            return true;
        }
        throw new Error(`${this.constructor.name} is closed`);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,
