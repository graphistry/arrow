// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import streamAdapters from './adapters';
import { ITERATOR_DONE, AsyncQueue } from './interfaces';
import { toUint8Array, joinUint8Arrays } from '../util/buffer';
import { isPromise, isFetchResponse, isIterable, isAsyncIterable, isReadableDOMStream, isReadableNodeStream } from '../util/compat';
/**
 * @ignore
 */
export class AsyncByteQueue extends AsyncQueue {
    write(value) {
        if ((value = toUint8Array(value)).byteLength > 0) {
            return super.write(value);
        }
    }
    toUint8Array(sync = false) {
        return sync ? joinUint8Arrays(this.values.slice())[0] : (async () => {
            let buffers = [], byteLength = 0;
            for await (const chunk of this) {
                buffers.push(chunk);
                byteLength += chunk.byteLength;
            }
            return joinUint8Arrays(buffers, byteLength)[0];
        })();
    }
}
/**
 * @ignore
 */
export class ByteStream {
    constructor(source) {
        if (source) {
            this.source = new ByteStreamSource(streamAdapters.fromIterable(source));
        }
    }
    throw(value) { return this.source.throw(value); }
    return(value) { return this.source.return(value); }
    peek(size) { return this.source.peek(size); }
    read(size) { return this.source.read(size); }
}
/**
 * @ignore
 */
export class AsyncByteStream {
    constructor(source) {
        if (!source) { }
        else if (source instanceof AsyncByteStream) {
            this.source = source.source;
        }
        else if (source instanceof AsyncByteQueue) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
        }
        else if (isReadableNodeStream(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableNodeStream(source));
        }
        else if (isFetchResponse(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source.body));
        }
        else if (isIterable(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromIterable(source));
        }
        else if (isPromise(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
        }
        else if (isAsyncIterable(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromAsyncIterable(source));
        }
        else if (isReadableDOMStream(source)) {
            this.source = new AsyncByteStreamSource(streamAdapters.fromReadableDOMStream(source));
        }
    }
    next(value) { return this.source.next(value); }
    throw(value) { return this.source.throw(value); }
    return(value) { return this.source.return(value); }
    get closed() { return this.source.closed; }
    cancel(reason) { return this.source.cancel(reason); }
    peek(size) { return this.source.peek(size); }
    read(size) { return this.source.read(size); }
}
class ByteStreamSource {
    constructor(source) {
        this.source = source;
    }
    cancel(reason) { this.return(reason); }
    peek(size) { return this.next(size, 'peek').value; }
    read(size) { return this.next(size, 'read').value; }
    next(size, cmd = 'read') { return this.source.next({ cmd, size }); }
    throw(value) { return Object.create((this.source.throw && this.source.throw(value)) || ITERATOR_DONE); }
    return(value) { return Object.create((this.source.return && this.source.return(value)) || ITERATOR_DONE); }
}
class AsyncByteStreamSource {
    constructor(source) {
        this.source = source;
        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
    }
    async cancel(reason) { await this.return(reason); }
    get closed() { return this._closedPromise; }
    async read(size) { return (await this.next(size, 'read')).value; }
    async peek(size) { return (await this.next(size, 'peek')).value; }
    async next(size, cmd = 'read') { return (await this.source.next({ cmd, size })); }
    async throw(value) {
        const result = (this.source.throw && await this.source.throw(value)) || ITERATOR_DONE;
        this._closedPromiseResolve && this._closedPromiseResolve();
        this._closedPromiseResolve = undefined;
        return Object.create(result);
    }
    async return(value) {
        const result = (this.source.return && await this.source.return(value)) || ITERATOR_DONE;
        this._closedPromiseResolve && this._closedPromiseResolve();
        this._closedPromiseResolve = undefined;
        return Object.create(result);
    }
}

//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlvL3N0cmVhbS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw2REFBNkQ7QUFDN0QsK0RBQStEO0FBQy9ELHdEQUF3RDtBQUN4RCw2REFBNkQ7QUFDN0Qsb0RBQW9EO0FBQ3BELDZEQUE2RDtBQUM3RCw2REFBNkQ7QUFDN0QsRUFBRTtBQUNGLCtDQUErQztBQUMvQyxFQUFFO0FBQ0YsNkRBQTZEO0FBQzdELDhEQUE4RDtBQUM5RCx5REFBeUQ7QUFDekQsNERBQTREO0FBQzVELDBEQUEwRDtBQUMxRCxxQkFBcUI7QUFFckIsT0FBTyxjQUFjLE1BQU0sWUFBWSxDQUFDO0FBQ3hDLE9BQU8sRUFBRSxhQUFhLEVBQXNCLFVBQVUsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUM3RSxPQUFPLEVBQUUsWUFBWSxFQUFFLGVBQWUsRUFBd0IsTUFBTSxnQkFBZ0IsQ0FBQztBQUNyRixPQUFPLEVBQ0gsU0FBUyxFQUFFLGVBQWUsRUFDMUIsVUFBVSxFQUFFLGVBQWUsRUFDM0IsbUJBQW1CLEVBQUUsb0JBQW9CLEVBQzVDLE1BQU0sZ0JBQWdCLENBQUM7QUFLeEI7O0dBRUc7QUFDSCxNQUFNLE9BQU8sY0FBNEQsU0FBUSxVQUF5QjtJQUMvRixLQUFLLENBQUMsS0FBd0M7UUFDakQsSUFBSSxDQUFDLEtBQUssR0FBRyxZQUFZLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxVQUFVLEdBQUcsQ0FBQyxFQUFFO1lBQzlDLE9BQU8sS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFVLENBQUMsQ0FBQztTQUNsQztJQUNMLENBQUM7SUFHTSxZQUFZLENBQUMsSUFBSSxHQUFHLEtBQUs7UUFDNUIsT0FBTyxJQUFJLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBRSxJQUFJLENBQUMsTUFBZ0IsQ0FBQyxLQUFLLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssSUFBSSxFQUFFO1lBQzNFLElBQUksT0FBTyxHQUFHLEVBQUUsRUFBRSxVQUFVLEdBQUcsQ0FBQyxDQUFDO1lBQ2pDLElBQUksS0FBSyxFQUFFLE1BQU0sS0FBSyxJQUFJLElBQUksRUFBRTtnQkFDNUIsT0FBTyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQztnQkFDcEIsVUFBVSxJQUFJLEtBQUssQ0FBQyxVQUFVLENBQUM7YUFDbEM7WUFDRCxPQUFPLGVBQWUsQ0FBQyxPQUFPLEVBQUUsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDbkQsQ0FBQyxDQUFDLEVBQUUsQ0FBQztJQUNULENBQUM7Q0FDSjtBQUVEOztHQUVHO0FBQ0gsTUFBTSxPQUFPLFVBQVU7SUFHbkIsWUFBWSxNQUE4RDtRQUN0RSxJQUFJLE1BQU0sRUFBRTtZQUNSLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxnQkFBZ0IsQ0FBQyxjQUFjLENBQUMsWUFBWSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FDM0U7SUFDTCxDQUFDO0lBQ00sS0FBSyxDQUFDLEtBQVcsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsS0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ3pELElBQUksQ0FBQyxJQUFvQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxJQUFvQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZFO0FBRUQ7O0dBRUc7QUFDSCxNQUFNLE9BQU8sZUFBZTtJQUd4QixZQUFZLE1BQTJMO1FBQ25NLElBQUksQ0FBQyxNQUFNLEVBQUUsR0FBRTthQUNWLElBQUksTUFBTSxZQUFZLGVBQWUsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUksTUFBMEIsQ0FBQyxNQUFNLENBQUM7U0FBRTthQUM1RixJQUFJLE1BQU0sWUFBWSxjQUFjLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkscUJBQXFCLENBQUMsY0FBYyxDQUFDLGlCQUFpQixDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7U0FBRTthQUM1SCxJQUFJLG9CQUFvQixDQUFDLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxzQkFBc0IsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDN0gsSUFBSSxlQUFlLENBQUMsTUFBTSxDQUFDLEVBQUU7WUFBRSxJQUFJLENBQUMsTUFBTSxHQUFHLElBQUkscUJBQXFCLENBQUMsY0FBYyxDQUFDLHFCQUFxQixDQUFDLE1BQU0sQ0FBQyxJQUFLLENBQUMsQ0FBQyxDQUFDO1NBQUU7YUFDN0gsSUFBSSxVQUFVLENBQXVCLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxZQUFZLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQy9ILElBQUksU0FBUyxDQUF1QixNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ25JLElBQUksZUFBZSxDQUF1QixNQUFNLENBQUMsRUFBRTtZQUFFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBSSxxQkFBcUIsQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztTQUFFO2FBQ3pJLElBQUksbUJBQW1CLENBQXVCLE1BQU0sQ0FBQyxFQUFFO1lBQUUsSUFBSSxDQUFDLE1BQU0sR0FBRyxJQUFJLHFCQUFxQixDQUFDLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDO1NBQUU7SUFDMUosQ0FBQztJQUNNLElBQUksQ0FBQyxLQUFXLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDckQsS0FBSyxDQUFDLEtBQVcsSUFBSSxPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUN2RCxNQUFNLENBQUMsS0FBVyxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ2hFLElBQVcsTUFBTSxLQUFvQixPQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQztJQUMxRCxNQUFNLENBQUMsTUFBWSxJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzNELElBQUksQ0FBQyxJQUFvQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzdELElBQUksQ0FBQyxJQUFvQixJQUFJLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO0NBQ3ZFO0FBVUQsTUFBTSxnQkFBZ0I7SUFDbEIsWUFBc0IsTUFBbUM7UUFBbkMsV0FBTSxHQUFOLE1BQU0sQ0FBNkI7SUFBRyxDQUFDO0lBQ3RELE1BQU0sQ0FBQyxNQUFZLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDN0MsSUFBSSxDQUFDLElBQW9CLElBQWMsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO0lBQzlFLElBQUksQ0FBQyxJQUFvQixJQUFjLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztJQUM5RSxJQUFJLENBQUMsSUFBb0IsRUFBRSxNQUF1QixNQUFNLElBQUksT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUNyRyxLQUFLLENBQUMsS0FBVyxJQUFJLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzlHLE1BQU0sQ0FBQyxLQUFXLElBQUksT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLElBQUksSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUMsQ0FBQyxDQUFDLENBQUM7Q0FDM0g7QUFFRCxNQUFNLHFCQUFxQjtJQUl2QixZQUF1QixNQUFzRTtRQUF0RSxXQUFNLEdBQU4sTUFBTSxDQUFnRTtRQUN6RixJQUFJLENBQUMsY0FBYyxHQUFHLElBQUksT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxJQUFJLENBQUMscUJBQXFCLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDN0UsQ0FBQztJQUNNLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBWSxJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDaEUsSUFBVyxNQUFNLEtBQW9CLE9BQU8sSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUM7SUFDM0QsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFvQixJQUF1QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFvQixJQUF1QixPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUM7SUFDckcsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFvQixFQUFFLE1BQXVCLE1BQU0sSUFBSSxPQUFPLENBQUMsTUFBTSxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQ25ILEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBVztRQUMxQixNQUFNLE1BQU0sR0FBRyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxJQUFJLE1BQU0sSUFBSSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxhQUFhLENBQUM7UUFDdEYsSUFBSSxDQUFDLHFCQUFxQixJQUFJLElBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO1FBQzNELElBQUksQ0FBQyxxQkFBcUIsR0FBRyxTQUFTLENBQUM7UUFDdkMsT0FBTyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFDTSxLQUFLLENBQUMsTUFBTSxDQUFDLEtBQVc7UUFDM0IsTUFBTSxNQUFNLEdBQUcsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sSUFBSSxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDLElBQUksYUFBYSxDQUFDO1FBQ3hGLElBQUksQ0FBQyxxQkFBcUIsSUFBSSxJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztRQUMzRCxJQUFJLENBQUMscUJBQXFCLEdBQUcsU0FBUyxDQUFDO1FBQ3ZDLE9BQU8sTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztJQUNqQyxDQUFDO0NBQ0oiLCJmaWxlIjoiaW8vc3RyZWFtLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLy8gTGljZW5zZWQgdG8gdGhlIEFwYWNoZSBTb2Z0d2FyZSBGb3VuZGF0aW9uIChBU0YpIHVuZGVyIG9uZVxuLy8gb3IgbW9yZSBjb250cmlidXRvciBsaWNlbnNlIGFncmVlbWVudHMuICBTZWUgdGhlIE5PVElDRSBmaWxlXG4vLyBkaXN0cmlidXRlZCB3aXRoIHRoaXMgd29yayBmb3IgYWRkaXRpb25hbCBpbmZvcm1hdGlvblxuLy8gcmVnYXJkaW5nIGNvcHlyaWdodCBvd25lcnNoaXAuICBUaGUgQVNGIGxpY2Vuc2VzIHRoaXMgZmlsZVxuLy8gdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZVxuLy8gXCJMaWNlbnNlXCIpOyB5b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlXG4vLyB3aXRoIHRoZSBMaWNlbnNlLiAgWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XG4vL1xuLy8gICBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcbi8vXG4vLyBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsXG4vLyBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlciB0aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhblxuLy8gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTllcbi8vIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuICBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZVxuLy8gc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9uc1xuLy8gdW5kZXIgdGhlIExpY2Vuc2UuXG5cbmltcG9ydCBzdHJlYW1BZGFwdGVycyBmcm9tICcuL2FkYXB0ZXJzJztcbmltcG9ydCB7IElURVJBVE9SX0RPTkUsIFJlYWRhYmxlLCBXcml0YWJsZSwgQXN5bmNRdWV1ZSB9IGZyb20gJy4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyB0b1VpbnQ4QXJyYXksIGpvaW5VaW50OEFycmF5cywgQXJyYXlCdWZmZXJWaWV3SW5wdXQgfSBmcm9tICcuLi91dGlsL2J1ZmZlcic7XG5pbXBvcnQge1xuICAgIGlzUHJvbWlzZSwgaXNGZXRjaFJlc3BvbnNlLFxuICAgIGlzSXRlcmFibGUsIGlzQXN5bmNJdGVyYWJsZSxcbiAgICBpc1JlYWRhYmxlRE9NU3RyZWFtLCBpc1JlYWRhYmxlTm9kZVN0cmVhbVxufSBmcm9tICcuLi91dGlsL2NvbXBhdCc7XG5cbmV4cG9ydCB0eXBlIFdyaXRhYmxlU2luazxUPiA9IFdyaXRhYmxlPFQ+IHwgV3JpdGFibGVTdHJlYW08VD4gfCBOb2RlSlMuV3JpdGFibGVTdHJlYW0gfCBudWxsO1xuZXhwb3J0IHR5cGUgUmVhZGFibGVTb3VyY2U8VD4gPSBSZWFkYWJsZTxUPiB8IFByb21pc2VMaWtlPFQ+IHwgQXN5bmNJdGVyYWJsZTxUPiB8IFJlYWRhYmxlU3RyZWFtPFQ+IHwgTm9kZUpTLlJlYWRhYmxlU3RyZWFtIHwgbnVsbDtcblxuLyoqXG4gKiBAaWdub3JlXG4gKi9cbmV4cG9ydCBjbGFzcyBBc3luY0J5dGVRdWV1ZTxUIGV4dGVuZHMgQXJyYXlCdWZmZXJWaWV3SW5wdXQgPSBVaW50OEFycmF5PiBleHRlbmRzIEFzeW5jUXVldWU8VWludDhBcnJheSwgVD4ge1xuICAgIHB1YmxpYyB3cml0ZSh2YWx1ZTogQXJyYXlCdWZmZXJWaWV3SW5wdXQgfCBVaW50OEFycmF5KSB7XG4gICAgICAgIGlmICgodmFsdWUgPSB0b1VpbnQ4QXJyYXkodmFsdWUpKS5ieXRlTGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHN1cGVyLndyaXRlKHZhbHVlIGFzIFQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIHB1YmxpYyB0b1VpbnQ4QXJyYXkoc3luYzogdHJ1ZSk6IFVpbnQ4QXJyYXk7XG4gICAgcHVibGljIHRvVWludDhBcnJheShzeW5jPzogZmFsc2UpOiBQcm9taXNlPFVpbnQ4QXJyYXk+O1xuICAgIHB1YmxpYyB0b1VpbnQ4QXJyYXkoc3luYyA9IGZhbHNlKSB7XG4gICAgICAgIHJldHVybiBzeW5jID8gam9pblVpbnQ4QXJyYXlzKCh0aGlzLnZhbHVlcyBhcyBhbnlbXSkuc2xpY2UoKSlbMF0gOiAoYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgbGV0IGJ1ZmZlcnMgPSBbXSwgYnl0ZUxlbmd0aCA9IDA7XG4gICAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIHRoaXMpIHtcbiAgICAgICAgICAgICAgICBidWZmZXJzLnB1c2goY2h1bmspO1xuICAgICAgICAgICAgICAgIGJ5dGVMZW5ndGggKz0gY2h1bmsuYnl0ZUxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBqb2luVWludDhBcnJheXMoYnVmZmVycywgYnl0ZUxlbmd0aClbMF07XG4gICAgICAgIH0pKCk7XG4gICAgfVxufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEJ5dGVTdHJlYW0ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwcml2YXRlIHNvdXJjZTogQnl0ZVN0cmVhbVNvdXJjZTxVaW50OEFycmF5IHwgbnVsbD47XG4gICAgY29uc3RydWN0b3Ioc291cmNlPzogSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+IHwgQXJyYXlCdWZmZXJWaWV3SW5wdXQpIHtcbiAgICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICAgICAgdGhpcy5zb3VyY2UgPSBuZXcgQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tSXRlcmFibGUoc291cmNlKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcHVibGljIHRocm93KHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLnNvdXJjZS50aHJvdyh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgcmV0dXJuKHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLnNvdXJjZS5yZXR1cm4odmFsdWUpOyB9XG4gICAgcHVibGljIHBlZWsoc2l6ZT86IG51bWJlciB8IG51bGwpIHsgcmV0dXJuIHRoaXMuc291cmNlLnBlZWsoc2l6ZSk7IH1cbiAgICBwdWJsaWMgcmVhZChzaXplPzogbnVtYmVyIHwgbnVsbCkgeyByZXR1cm4gdGhpcy5zb3VyY2UucmVhZChzaXplKTsgfVxufVxuXG4vKipcbiAqIEBpZ25vcmVcbiAqL1xuZXhwb3J0IGNsYXNzIEFzeW5jQnl0ZVN0cmVhbSBpbXBsZW1lbnRzIFJlYWRhYmxlPFVpbnQ4QXJyYXk+IHtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJpdmF0ZSBzb3VyY2U6IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZTxVaW50OEFycmF5PjtcbiAgICBjb25zdHJ1Y3Rvcihzb3VyY2U/OiBQcm9taXNlTGlrZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4gfCBSZXNwb25zZSB8IFJlYWRhYmxlU3RyZWFtPEFycmF5QnVmZmVyVmlld0lucHV0PiB8IE5vZGVKUy5SZWFkYWJsZVN0cmVhbSB8IEFzeW5jSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+IHwgSXRlcmFibGU8QXJyYXlCdWZmZXJWaWV3SW5wdXQ+KSB7XG4gICAgICAgIGlmICghc291cmNlKSB7fVxuICAgICAgICBlbHNlIGlmIChzb3VyY2UgaW5zdGFuY2VvZiBBc3luY0J5dGVTdHJlYW0pIHsgdGhpcy5zb3VyY2UgPSAoc291cmNlIGFzIEFzeW5jQnl0ZVN0cmVhbSkuc291cmNlOyB9XG4gICAgICAgIGVsc2UgaWYgKHNvdXJjZSBpbnN0YW5jZW9mIEFzeW5jQnl0ZVF1ZXVlKSB7IHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tQXN5bmNJdGVyYWJsZShzb3VyY2UpKTsgfVxuICAgICAgICBlbHNlIGlmIChpc1JlYWRhYmxlTm9kZVN0cmVhbShzb3VyY2UpKSB7IHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tUmVhZGFibGVOb2RlU3RyZWFtKHNvdXJjZSkpOyB9XG4gICAgICAgIGVsc2UgaWYgKGlzRmV0Y2hSZXNwb25zZShzb3VyY2UpKSB7IHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tUmVhZGFibGVET01TdHJlYW0oc291cmNlLmJvZHkhKSk7IH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4oc291cmNlKSkgeyB0aGlzLnNvdXJjZSA9IG5ldyBBc3luY0J5dGVTdHJlYW1Tb3VyY2Uoc3RyZWFtQWRhcHRlcnMuZnJvbUl0ZXJhYmxlKHNvdXJjZSkpOyB9XG4gICAgICAgIGVsc2UgaWYgKGlzUHJvbWlzZTxBcnJheUJ1ZmZlclZpZXdJbnB1dD4oc291cmNlKSkgeyB0aGlzLnNvdXJjZSA9IG5ldyBBc3luY0J5dGVTdHJlYW1Tb3VyY2Uoc3RyZWFtQWRhcHRlcnMuZnJvbUFzeW5jSXRlcmFibGUoc291cmNlKSk7IH1cbiAgICAgICAgZWxzZSBpZiAoaXNBc3luY0l0ZXJhYmxlPEFycmF5QnVmZmVyVmlld0lucHV0Pihzb3VyY2UpKSB7IHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tQXN5bmNJdGVyYWJsZShzb3VyY2UpKTsgfVxuICAgICAgICBlbHNlIGlmIChpc1JlYWRhYmxlRE9NU3RyZWFtPEFycmF5QnVmZmVyVmlld0lucHV0Pihzb3VyY2UpKSB7IHRoaXMuc291cmNlID0gbmV3IEFzeW5jQnl0ZVN0cmVhbVNvdXJjZShzdHJlYW1BZGFwdGVycy5mcm9tUmVhZGFibGVET01TdHJlYW0oc291cmNlKSk7IH1cbiAgICB9XG4gICAgcHVibGljIG5leHQodmFsdWU/OiBhbnkpIHsgcmV0dXJuIHRoaXMuc291cmNlLm5leHQodmFsdWUpOyB9XG4gICAgcHVibGljIHRocm93KHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLnNvdXJjZS50aHJvdyh2YWx1ZSk7IH1cbiAgICBwdWJsaWMgcmV0dXJuKHZhbHVlPzogYW55KSB7IHJldHVybiB0aGlzLnNvdXJjZS5yZXR1cm4odmFsdWUpOyB9XG4gICAgcHVibGljIGdldCBjbG9zZWQoKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybiB0aGlzLnNvdXJjZS5jbG9zZWQ7IH1cbiAgICBwdWJsaWMgY2FuY2VsKHJlYXNvbj86IGFueSkgeyByZXR1cm4gdGhpcy5zb3VyY2UuY2FuY2VsKHJlYXNvbik7IH1cbiAgICBwdWJsaWMgcGVlayhzaXplPzogbnVtYmVyIHwgbnVsbCkgeyByZXR1cm4gdGhpcy5zb3VyY2UucGVlayhzaXplKTsgfVxuICAgIHB1YmxpYyByZWFkKHNpemU/OiBudW1iZXIgfCBudWxsKSB7IHJldHVybiB0aGlzLnNvdXJjZS5yZWFkKHNpemUpOyB9XG59XG5cbmludGVyZmFjZSBCeXRlU3RyZWFtU291cmNlSXRlcmF0b3I8VD4gZXh0ZW5kcyBJdGVyYWJsZUl0ZXJhdG9yPFQ+IHtcbiAgICBuZXh0KHZhbHVlPzogeyBjbWQ6ICdwZWVrJyB8ICdyZWFkJywgc2l6ZT86IG51bWJlciB8IG51bGwgfSk6IEl0ZXJhdG9yUmVzdWx0PFQ+O1xufVxuXG5pbnRlcmZhY2UgQXN5bmNCeXRlU3RyZWFtU291cmNlSXRlcmF0b3I8VD4gZXh0ZW5kcyBBc3luY0l0ZXJhYmxlSXRlcmF0b3I8VD4ge1xuICAgIG5leHQodmFsdWU/OiB7IGNtZDogJ3BlZWsnIHwgJ3JlYWQnLCBzaXplPzogbnVtYmVyIHwgbnVsbCB9KTogUHJvbWlzZTxJdGVyYXRvclJlc3VsdDxUPj47XG59XG5cbmNsYXNzIEJ5dGVTdHJlYW1Tb3VyY2U8VD4ge1xuICAgIGNvbnN0cnVjdG9yKHByb3RlY3RlZCBzb3VyY2U6IEJ5dGVTdHJlYW1Tb3VyY2VJdGVyYXRvcjxUPikge31cbiAgICBwdWJsaWMgY2FuY2VsKHJlYXNvbj86IGFueSkgeyB0aGlzLnJldHVybihyZWFzb24pOyB9XG4gICAgcHVibGljIHBlZWsoc2l6ZT86IG51bWJlciB8IG51bGwpOiBUIHwgbnVsbCB7IHJldHVybiB0aGlzLm5leHQoc2l6ZSwgJ3BlZWsnKS52YWx1ZTsgfVxuICAgIHB1YmxpYyByZWFkKHNpemU/OiBudW1iZXIgfCBudWxsKTogVCB8IG51bGwgeyByZXR1cm4gdGhpcy5uZXh0KHNpemUsICdyZWFkJykudmFsdWU7IH1cbiAgICBwdWJsaWMgbmV4dChzaXplPzogbnVtYmVyIHwgbnVsbCwgY21kOiAncGVlaycgfCAncmVhZCcgPSAncmVhZCcpIHsgcmV0dXJuIHRoaXMuc291cmNlLm5leHQoeyBjbWQsIHNpemUgfSk7IH1cbiAgICBwdWJsaWMgdGhyb3codmFsdWU/OiBhbnkpIHsgcmV0dXJuIE9iamVjdC5jcmVhdGUoKHRoaXMuc291cmNlLnRocm93ICYmIHRoaXMuc291cmNlLnRocm93KHZhbHVlKSkgfHwgSVRFUkFUT1JfRE9ORSk7IH1cbiAgICBwdWJsaWMgcmV0dXJuKHZhbHVlPzogYW55KSB7IHJldHVybiBPYmplY3QuY3JlYXRlKCh0aGlzLnNvdXJjZS5yZXR1cm4gJiYgdGhpcy5zb3VyY2UucmV0dXJuKHZhbHVlKSkgfHwgSVRFUkFUT1JfRE9ORSk7IH1cbn1cblxuY2xhc3MgQXN5bmNCeXRlU3RyZWFtU291cmNlPFQ+IGltcGxlbWVudHMgUmVhZGFibGU8VD4ge1xuXG4gICAgcHJpdmF0ZSBfY2xvc2VkUHJvbWlzZTogUHJvbWlzZTx2b2lkPjtcbiAgICBwcml2YXRlIF9jbG9zZWRQcm9taXNlUmVzb2x2ZT86ICh2YWx1ZT86IGFueSkgPT4gdm9pZDtcbiAgICBjb25zdHJ1Y3RvciAocHJvdGVjdGVkIHNvdXJjZTogQnl0ZVN0cmVhbVNvdXJjZUl0ZXJhdG9yPFQ+IHwgQXN5bmNCeXRlU3RyZWFtU291cmNlSXRlcmF0b3I8VD4pIHtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZSA9IG5ldyBQcm9taXNlKChyKSA9PiB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSA9IHIpO1xuICAgIH1cbiAgICBwdWJsaWMgYXN5bmMgY2FuY2VsKHJlYXNvbj86IGFueSkgeyBhd2FpdCB0aGlzLnJldHVybihyZWFzb24pOyB9XG4gICAgcHVibGljIGdldCBjbG9zZWQoKTogUHJvbWlzZTx2b2lkPiB7IHJldHVybiB0aGlzLl9jbG9zZWRQcm9taXNlOyB9XG4gICAgcHVibGljIGFzeW5jIHJlYWQoc2l6ZT86IG51bWJlciB8IG51bGwpOiBQcm9taXNlPFQgfCBudWxsPiB7IHJldHVybiAoYXdhaXQgdGhpcy5uZXh0KHNpemUsICdyZWFkJykpLnZhbHVlOyB9XG4gICAgcHVibGljIGFzeW5jIHBlZWsoc2l6ZT86IG51bWJlciB8IG51bGwpOiBQcm9taXNlPFQgfCBudWxsPiB7IHJldHVybiAoYXdhaXQgdGhpcy5uZXh0KHNpemUsICdwZWVrJykpLnZhbHVlOyB9XG4gICAgcHVibGljIGFzeW5jIG5leHQoc2l6ZT86IG51bWJlciB8IG51bGwsIGNtZDogJ3BlZWsnIHwgJ3JlYWQnID0gJ3JlYWQnKSB7IHJldHVybiAoYXdhaXQgdGhpcy5zb3VyY2UubmV4dCh7IGNtZCwgc2l6ZSB9KSk7IH1cbiAgICBwdWJsaWMgYXN5bmMgdGhyb3codmFsdWU/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuc291cmNlLnRocm93ICYmIGF3YWl0IHRoaXMuc291cmNlLnRocm93KHZhbHVlKSkgfHwgSVRFUkFUT1JfRE9ORTtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUgJiYgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUoKTtcbiAgICAgICAgdGhpcy5fY2xvc2VkUHJvbWlzZVJlc29sdmUgPSB1bmRlZmluZWQ7XG4gICAgICAgIHJldHVybiBPYmplY3QuY3JlYXRlKHJlc3VsdCk7XG4gICAgfVxuICAgIHB1YmxpYyBhc3luYyByZXR1cm4odmFsdWU/OiBhbnkpIHtcbiAgICAgICAgY29uc3QgcmVzdWx0ID0gKHRoaXMuc291cmNlLnJldHVybiAmJiBhd2FpdCB0aGlzLnNvdXJjZS5yZXR1cm4odmFsdWUpKSB8fCBJVEVSQVRPUl9ET05FO1xuICAgICAgICB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSAmJiB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSgpO1xuICAgICAgICB0aGlzLl9jbG9zZWRQcm9taXNlUmVzb2x2ZSA9IHVuZGVmaW5lZDtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5jcmVhdGUocmVzdWx0KTtcbiAgICB9XG59XG4iXX0=
