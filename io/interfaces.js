"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const adapters_1 = require("./adapters");
exports.ITERATOR_DONE = Object.freeze({ done: true, value: void (0) });
/**
 * @ignore
 */
class ArrowJSON {
    constructor(_json) {
        this._json = _json;
    }
    get schema() { return this._json['schema']; }
    get batches() { return (this._json['batches'] || []); }
    get dictionaries() { return (this._json['dictionaries'] || []); }
}
exports.ArrowJSON = ArrowJSON;
Object.defineProperty(ArrowJSON.prototype, 'schema', { get() { return this._json['schema']; } });
Object.defineProperty(ArrowJSON.prototype, 'batches', { get() { return (this._json['batches'] || []); } });
Object.defineProperty(ArrowJSON.prototype, 'dictionaries', { get() { return (this._json['dictionaries'] || []); } });
class ReadableInterop {
    tee() {
        return this._getReadableDOMStream().tee();
    }
    pipe(writable, options) {
        return this._getReadableNodeStream().pipe(writable, options);
    }
    pipeTo(writable, options) { return this._getReadableDOMStream().pipeTo(writable, options); }
    pipeThrough(duplex, options) {
        return this._getReadableDOMStream().pipeThrough(duplex, options);
    }
    _getReadableDOMStream() {
        return this._readableDOMStream || (this._readableDOMStream = this.toReadableDOMStream());
    }
    _getReadableNodeStream() {
        return this._readableNodeStream || (this._readableNodeStream = this.toReadableNodeStream());
    }
}
exports.ReadableInterop = ReadableInterop;
/**
 * @ignore
 */
class AsyncQueue extends ReadableInterop {
    constructor() {
        super();
        this.values = [];
        this.resolvers = [];
        this._closedPromise = new Promise((r) => this._closedPromiseResolve = r);
    }
    get closed() { return this._closedPromise; }
    cancel(reason) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.return(reason); });
    }
    write(value) {
        if (this._ensureOpen()) {
            this.resolvers.length <= 0
                ? (this.values.push(value))
                : (this.resolvers.shift().resolve({ done: false, value }));
        }
    }
    abort(value) {
        if (this._closedPromiseResolve) {
            this.resolvers.length <= 0
                ? (this._error = { error: value })
                : (this.resolvers.shift().reject({ done: true, value }));
        }
    }
    close() {
        if (this._closedPromiseResolve) {
            const { resolvers } = this;
            while (resolvers.length > 0) {
                resolvers.shift().resolve(exports.ITERATOR_DONE);
            }
            this._closedPromiseResolve();
            this._closedPromiseResolve = undefined;
        }
    }
    [Symbol.asyncIterator]() { return this; }
    toReadableDOMStream(options) {
        return adapters_1.default.toReadableDOMStream(this, options);
    }
    toReadableNodeStream(options) {
        return adapters_1.default.toReadableNodeStream(this, options);
    }
    throw(_) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.abort(_); return exports.ITERATOR_DONE; });
    }
    return(_) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { yield this.close(); return exports.ITERATOR_DONE; });
    }
    read(size) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'read')).value; });
    }
    peek(size) {
        return tslib_1.__awaiter(this, void 0, void 0, function* () { return (yield this.next(size, 'peek')).value; });
    }
    next(..._args) {
        if (this.values.length > 0) {
            return Promise.resolve({ done: false, value: this.values.shift() });
        }
        else if (this._error) {
            return Promise.reject({ done: true, value: this._error.error });
        }
        else if (!this._closedPromiseResolve) {
            return Promise.resolve(exports.ITERATOR_DONE);
        }
        else {
            return new Promise((resolve, reject) => {
                this.resolvers.push({ resolve, reject });
            });
        }
    }
    _ensureOpen() {
        if (this._closedPromiseResolve) {
            return true;
        }
        throw new Error(`${this.constructor.name} is closed`);
    }
}
exports.AsyncQueue = AsyncQueue;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
