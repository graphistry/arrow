"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const type_ = require("./type");
const data_ = require("./data");
const vector_ = require("./vector");
const util_ = require("./util/int");
const visitor_ = require("./visitor");
const vector_1 = require("./vector");
exports.Vector = vector_1.Vector;
const recordbatch_1 = require("./recordbatch");
exports.RecordBatch = recordbatch_1.RecordBatch;
const type_1 = require("./type");
exports.Schema = type_1.Schema;
exports.Field = type_1.Field;
exports.Type = type_1.Type;
const table_1 = require("./table");
exports.Table = table_1.Table;
exports.CountByResult = table_1.CountByResult;
const predicate_1 = require("./predicate");
exports.lit = predicate_1.lit;
exports.col = predicate_1.col;
exports.Col = predicate_1.Col;
exports.Value = predicate_1.Value;
const arrow_1 = require("./ipc/reader/arrow");
exports.read = arrow_1.read;
exports.readAsync = arrow_1.readAsync;
var util;
(function (util) {
    util.Uint64 = util_.Uint64;
    util.Int64 = util_.Int64;
    util.Int128 = util_.Int128;
})(util = exports.util || (exports.util = {}));
var data;
(function (data) {
    data.BaseData = data_.BaseData;
    data.FlatData = data_.FlatData;
    data.BoolData = data_.BoolData;
    data.FlatListData = data_.FlatListData;
    data.DictionaryData = data_.DictionaryData;
    data.NestedData = data_.NestedData;
    data.ListData = data_.ListData;
    data.UnionData = data_.UnionData;
    data.SparseUnionData = data_.SparseUnionData;
    data.DenseUnionData = data_.DenseUnionData;
    data.ChunkedData = data_.ChunkedData;
})(data = exports.data || (exports.data = {}));
var type;
(function (type) {
    type.Schema = type_.Schema;
    type.Field = type_.Field;
    type.Null = type_.Null;
    type.Int = type_.Int;
    type.Int8 = type_.Int8;
    type.Int16 = type_.Int16;
    type.Int32 = type_.Int32;
    type.Int64 = type_.Int64;
    type.Uint8 = type_.Uint8;
    type.Uint16 = type_.Uint16;
    type.Uint32 = type_.Uint32;
    type.Uint64 = type_.Uint64;
    type.Float = type_.Float;
    type.Float16 = type_.Float16;
    type.Float32 = type_.Float32;
    type.Float64 = type_.Float64;
    type.Binary = type_.Binary;
    type.Utf8 = type_.Utf8;
    type.Bool = type_.Bool;
    type.Decimal = type_.Decimal;
    type.Date_ = type_.Date_;
    type.Time = type_.Time;
    type.Timestamp = type_.Timestamp;
    type.Interval = type_.Interval;
    type.List = type_.List;
    type.Struct = type_.Struct;
    type.Union = type_.Union;
    type.DenseUnion = type_.DenseUnion;
    type.SparseUnion = type_.SparseUnion;
    type.FixedSizeBinary = type_.FixedSizeBinary;
    type.FixedSizeList = type_.FixedSizeList;
    type.Map_ = type_.Map_;
    type.Dictionary = type_.Dictionary;
})(type = exports.type || (exports.type = {}));
var vector;
(function (vector) {
    vector.Vector = vector_.Vector;
    vector.NullVector = vector_.NullVector;
    vector.BoolVector = vector_.BoolVector;
    vector.IntVector = vector_.IntVector;
    vector.FloatVector = vector_.FloatVector;
    vector.DateVector = vector_.DateVector;
    vector.DecimalVector = vector_.DecimalVector;
    vector.TimeVector = vector_.TimeVector;
    vector.TimestampVector = vector_.TimestampVector;
    vector.IntervalVector = vector_.IntervalVector;
    vector.BinaryVector = vector_.BinaryVector;
    vector.FixedSizeBinaryVector = vector_.FixedSizeBinaryVector;
    vector.Utf8Vector = vector_.Utf8Vector;
    vector.ListVector = vector_.ListVector;
    vector.FixedSizeListVector = vector_.FixedSizeListVector;
    vector.MapVector = vector_.MapVector;
    vector.StructVector = vector_.StructVector;
    vector.UnionVector = vector_.UnionVector;
    vector.DictionaryVector = vector_.DictionaryVector;
})(vector = exports.vector || (exports.vector = {}));
var visitor;
(function (visitor) {
    visitor.TypeVisitor = visitor_.TypeVisitor;
    visitor.VectorVisitor = visitor_.VectorVisitor;
})(visitor = exports.visitor || (exports.visitor = {}));
/* These exports are needed for the closure and uglify umd targets */
try {
    let Arrow = eval('exports');
    if (Arrow && typeof Arrow === 'object') {
        // string indexers tell closure and uglify not to rename these properties
        Arrow['data'] = data;
        Arrow['type'] = type;
        Arrow['util'] = util;
        Arrow['vector'] = vector;
        Arrow['visitor'] = visitor;
        Arrow['read'] = arrow_1.read;
        Arrow['readAsync'] = arrow_1.readAsync;
        Arrow['Type'] = type_1.Type;
        Arrow['Field'] = type_1.Field;
        Arrow['Schema'] = type_1.Schema;
        Arrow['Vector'] = vector_1.Vector;
        Arrow['RecordBatch'] = recordbatch_1.RecordBatch;
        Arrow['Table'] = table_1.Table;
        Arrow['CountByResult'] = table_1.CountByResult;
        Arrow['Value'] = predicate_1.Value;
        Arrow['lit'] = predicate_1.lit;
        Arrow['col'] = predicate_1.col;
        Arrow['Col'] = predicate_1.Col;
    }
}
catch (e) { }
/* end umd exports */
// closure compiler erases static properties/methods:
// https://github.com/google/closure-compiler/issues/1776
// set them via string indexers to save them from the mangler
type_1.Schema['from'] = type_1.Schema.from;
table_1.Table['from'] = table_1.Table.from;
table_1.Table['fromAsync'] = table_1.Table.fromAsync;
table_1.Table['empty'] = table_1.Table.empty;
vector_1.Vector['create'] = vector_1.Vector.create;
recordbatch_1.RecordBatch['from'] = recordbatch_1.RecordBatch.from;
util_.Uint64['add'] = util_.Uint64.add;
util_.Uint64['multiply'] = util_.Uint64.multiply;
util_.Int64['add'] = util_.Int64.add;
util_.Int64['multiply'] = util_.Int64.multiply;
util_.Int64['fromString'] = util_.Int64.fromString;
util_.Int128['add'] = util_.Int128.add;
util_.Int128['multiply'] = util_.Int128.multiply;
util_.Int128['fromString'] = util_.Int128.fromString;
data_.ChunkedData['computeOffsets'] = data_.ChunkedData.computeOffsets;
type_.Type['NONE'] = type_.Type.NONE;
type_.Type['Null'] = type_.Type.Null;
type_.Type['Int'] = type_.Type.Int;
type_.Type['Float'] = type_.Type.Float;
type_.Type['Binary'] = type_.Type.Binary;
type_.Type['Utf8'] = type_.Type.Utf8;
type_.Type['Bool'] = type_.Type.Bool;
type_.Type['Decimal'] = type_.Type.Decimal;
type_.Type['Date'] = type_.Type.Date;
type_.Type['Time'] = type_.Type.Time;
type_.Type['Timestamp'] = type_.Type.Timestamp;
type_.Type['Interval'] = type_.Type.Interval;
type_.Type['List'] = type_.Type.List;
type_.Type['Struct'] = type_.Type.Struct;
type_.Type['Union'] = type_.Type.Union;
type_.Type['FixedSizeBinary'] = type_.Type.FixedSizeBinary;
type_.Type['FixedSizeList'] = type_.Type.FixedSizeList;
type_.Type['Map'] = type_.Type.Map;
type_.Type['Dictionary'] = type_.Type.Dictionary;
type_.Type['DenseUnion'] = type_.Type.DenseUnion;
type_.Type['SparseUnion'] = type_.Type.SparseUnion;
type_.DataType['isNull'] = type_.DataType.isNull;
type_.DataType['isInt'] = type_.DataType.isInt;
type_.DataType['isFloat'] = type_.DataType.isFloat;
type_.DataType['isBinary'] = type_.DataType.isBinary;
type_.DataType['isUtf8'] = type_.DataType.isUtf8;
type_.DataType['isBool'] = type_.DataType.isBool;
type_.DataType['isDecimal'] = type_.DataType.isDecimal;
type_.DataType['isDate'] = type_.DataType.isDate;
type_.DataType['isTime'] = type_.DataType.isTime;
type_.DataType['isTimestamp'] = type_.DataType.isTimestamp;
type_.DataType['isInterval'] = type_.DataType.isInterval;
type_.DataType['isList'] = type_.DataType.isList;
type_.DataType['isStruct'] = type_.DataType.isStruct;
type_.DataType['isUnion'] = type_.DataType.isUnion;
type_.DataType['isDenseUnion'] = type_.DataType.isDenseUnion;
type_.DataType['isSparseUnion'] = type_.DataType.isSparseUnion;
type_.DataType['isFixedSizeBinary'] = type_.DataType.isFixedSizeBinary;
type_.DataType['isFixedSizeList'] = type_.DataType.isFixedSizeList;
type_.DataType['isMap'] = type_.DataType.isMap;
type_.DataType['isDictionary'] = type_.DataType.isDictionary;
vector_.BoolVector['from'] = vector_.BoolVector.from;
vector_.IntVector['from'] = vector_.IntVector.from;
vector_.FloatVector['from'] = vector_.FloatVector.from;
visitor_.TypeVisitor['visitTypeInline'] = visitor_.TypeVisitor.visitTypeInline;
visitor_.VectorVisitor['visitTypeInline'] = visitor_.VectorVisitor.visitTypeInline;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
