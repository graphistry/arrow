// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
import { DictionaryVector } from './vector';
export class Value {
    eq(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new Equals(this, other);
    }
    lteq(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new LTeq(this, other);
    }
    gteq(other) {
        if (!(other instanceof Value)) {
            other = new Literal(other);
        }
        return new GTeq(this, other);
    }
}
export class Literal extends Value {
    constructor(v) {
        super();
        this.v = v;
    }
}
export class Col extends Value {
    constructor(name) {
        super();
        this.name = name;
    }
    bind(batch) {
        if (!this.colidx) {
            // Assume column index doesn't change between calls to bind
            //this.colidx = cols.findIndex(v => v.name.indexOf(this.name) != -1);
            this.colidx = -1;
            const fields = batch.schema.fields;
            for (let idx = -1; ++idx < fields.length;) {
                if (fields[idx].name === this.name) {
                    this.colidx = idx;
                    break;
                }
            }
            if (this.colidx < 0) {
                throw new Error(`Failed to bind Col "${this.name}"`);
            }
        }
        this.vector = batch.columns[this.colidx];
        return this.vector.get.bind(this.vector);
    }
    emitString() { return `cols[${this.colidx}].get(idx)`; }
}
export class Predicate {
    and(expr) { return new And(this, expr); }
    or(expr) { return new Or(this, expr); }
    ands() { return [this]; }
}
export class ComparisonPredicate extends Predicate {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
    bind(batch) {
        if (this.left instanceof Literal) {
            if (this.right instanceof Literal) {
                return this._bindLitLit(batch, this.left, this.right);
            }
            else {
                return this._bindColLit(batch, this.right, this.left);
            }
        }
        else {
            if (this.right instanceof Literal) {
                return this._bindColLit(batch, this.left, this.right);
            }
            else {
                return this._bindColCol(batch, this.left, this.right);
            }
        }
    }
}
class CombinationPredicate extends Predicate {
    constructor(left, right) {
        super();
        this.left = left;
        this.right = right;
    }
}
class And extends CombinationPredicate {
    bind(batch) {
        const left = this.left.bind(batch);
        const right = this.right.bind(batch);
        return (idx, batch) => left(idx, batch) && right(idx, batch);
    }
    ands() { return this.left.ands().concat(this.right.ands()); }
}
class Or extends CombinationPredicate {
    bind(batch) {
        const left = this.left.bind(batch);
        const right = this.right.bind(batch);
        return (idx, batch) => left(idx, batch) || right(idx, batch);
    }
}
export class Equals extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v == right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, batch) => left_func(idx, batch) == right_func(idx, batch);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        if (col.vector instanceof DictionaryVector) {
            // Assume that there is only one key with the value `lit.v`
            // TODO: add lazily-computed reverse dictionary lookups, associated
            // with col.vector.data so that we only have to do this once per
            // dictionary
            let key = -1;
            let dict = col.vector;
            let data = dict.dictionary;
            for (let len = data.length; ++key < len;) {
                if (data.get(key) === lit.v) {
                    break;
                }
            }
            if (key == data.length) {
                // the value doesn't exist in the dictionary - always return
                // false
                // TODO: special-case of PredicateFunc that encapsulates this
                // "always false" behavior. That way filtering operations don't
                // have to bother checking
                return () => false;
            }
            else {
                return (idx) => {
                    return dict.getKey(idx) === key;
                };
            }
        }
        else {
            return (idx, cols) => col_func(idx, cols) == lit.v;
        }
    }
}
export class LTeq extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v <= right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, cols) => left_func(idx, cols) <= right_func(idx, cols);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        return (idx, cols) => col_func(idx, cols) <= lit.v;
    }
}
export class GTeq extends ComparisonPredicate {
    _bindLitLit(_batch, left, right) {
        const rtrn = left.v >= right.v;
        return () => rtrn;
    }
    _bindColCol(batch, left, right) {
        const left_func = left.bind(batch);
        const right_func = right.bind(batch);
        return (idx, cols) => left_func(idx, cols) >= right_func(idx, cols);
    }
    _bindColLit(batch, col, lit) {
        const col_func = col.bind(batch);
        return (idx, cols) => col_func(idx, cols) >= lit.v;
    }
}
export function lit(n) { return new Literal(n); }
export function col(n) { return new Col(n); }

//# sourceMappingURL=data:application/json;charset=utf8;base64,
