"use strict";
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.
Object.defineProperty(exports, "__esModule", { value: true });
const data_1 = require("./data");
const visitor_1 = require("./visitor");
const type_1 = require("./type");
const type_2 = require("./type");
class Vector {
    constructor(data, view) {
        this.data = data;
        this.type = data.type;
        this.length = data.length;
        let nulls;
        if ((data instanceof data_1.ChunkedData) && !(view instanceof chunked_1.ChunkedView)) {
            this.view = new chunked_1.ChunkedView(data);
        }
        else if (!(view instanceof flat_1.ValidityView) && (nulls = data.nullBitmap) && nulls.length > 0 && data.nullCount > 0) {
            this.view = new flat_1.ValidityView(data, view);
        }
        else {
            this.view = view;
        }
    }
    static create(data) {
        return exports.createVector(data);
    }
    static concat(...sources) {
        return sources.length === 1 ? sources[0] : sources.reduce((a, b) => a.concat(b));
    }
    get nullCount() { return this.data.nullCount; }
    get nullBitmap() { return this.data.nullBitmap; }
    get [Symbol.toStringTag]() {
        return `Vector<${this.type[Symbol.toStringTag]}>`;
    }
    toJSON() { return this.toArray(); }
    clone(data, view = this.view.clone(data)) {
        return new this.constructor(data, view);
    }
    isValid(index) {
        return this.view.isValid(index);
    }
    get(index) {
        return this.view.get(index);
    }
    set(index, value) {
        return this.view.set(index, value);
    }
    toArray() {
        return this.view.toArray();
    }
    [Symbol.iterator]() {
        return this.view[Symbol.iterator]();
    }
    concat(...others) {
        if ((others = others.filter(Boolean)).length === 0) {
            return this;
        }
        const { view } = this;
        const vecs = !(view instanceof chunked_1.ChunkedView)
            ? [this, ...others]
            : [...view.chunkVectors, ...others];
        const offsets = data_1.ChunkedData.computeOffsets(vecs);
        const chunksLength = offsets[offsets.length - 1];
        const chunkedData = new data_1.ChunkedData(this.type, chunksLength, vecs, 0, -1, offsets);
        return this.clone(chunkedData, new chunked_1.ChunkedView(chunkedData));
    }
    slice(begin, end) {
        let { length } = this;
        let size = this.view.size || 1;
        let total = length, from = (begin || 0) * size;
        let to = (typeof end === 'number' ? end : total) * size;
        if (to < 0) {
            to = total - (to * -1) % total;
        }
        if (from < 0) {
            from = total - (from * -1) % total;
        }
        if (to < from) {
            [from, to] = [to, from];
        }
        total = !isFinite(total = (to - from)) || total < 0 ? 0 : total;
        const slicedData = this.data.slice(from, Math.min(total, length));
        return this.clone(slicedData, this.view.clone(slicedData));
    }
    acceptTypeVisitor(visitor) {
        return visitor_1.TypeVisitor.visitTypeInline(visitor, this.type);
    }
    acceptVectorVisitor(visitor) {
        return visitor_1.VectorVisitor.visitTypeInline(visitor, this.type, this);
    }
}
exports.Vector = Vector;
class FlatVector extends Vector {
    get values() { return this.data.values; }
    lows() { return this.asInt32(0, 2); }
    highs() { return this.asInt32(1, 2); }
    asInt32(offset = 0, stride = 2) {
        let data = this.data.clone(new type_3.Int32());
        if (offset > 0) {
            data = data.slice(offset, this.length - offset);
        }
        const int32s = new IntVector(data, new flat_1.PrimitiveView(data, stride));
        int32s.length = this.length / stride | 0;
        return int32s;
    }
}
exports.FlatVector = FlatVector;
class ListVectorBase extends Vector {
    get values() { return this.data.values; }
    get valueOffsets() { return this.data.valueOffsets; }
    getValueOffset(index) {
        return this.valueOffsets[index];
    }
    getValueLength(index) {
        return this.valueOffsets[index + 1] - this.valueOffsets[index];
    }
}
exports.ListVectorBase = ListVectorBase;
class NestedVector extends Vector {
    getChildAt(index) {
        return this.view.getChildAt(index);
    }
    get childData() {
        let data;
        if ((data = this._childData)) {
            return data;
        }
        else if (!((data = this.data) instanceof data_1.ChunkedData)) {
            return this._childData = data.childData;
        }
        const chunks = data.chunkVectors;
        return this._childData = chunks.reduce((columns, chunk) => chunk.childData.reduce((columns, _, i) => (columns[i] = [...(columns[i] || []), chunk.getChildAt(i)]) && columns, columns), []).map((cols) => Vector.concat(...cols).data);
    }
}
exports.NestedVector = NestedVector;
const type_4 = require("./type");
const type_3 = require("./type");
const type_5 = require("./type");
const chunked_1 = require("./vector/chunked");
const dictionary_1 = require("./vector/dictionary");
const list_1 = require("./vector/list");
const nested_1 = require("./vector/nested");
const flat_1 = require("./vector/flat");
const flat_2 = require("./vector/flat");
const flat_3 = require("./vector/flat");
const bit_1 = require("./util/bit");
class NullVector extends Vector {
    constructor(data, view = new flat_1.NullView(data)) {
        super(data, view);
    }
}
exports.NullVector = NullVector;
class BoolVector extends Vector {
    static from(data) {
        return new BoolVector(new data_1.BoolData(new type_4.Bool(), data.length, null, bit_1.packBools(data)));
    }
    get values() { return this.data.values; }
    constructor(data, view = new flat_1.BoolView(data)) {
        super(data, view);
    }
}
exports.BoolVector = BoolVector;
class IntVector extends FlatVector {
    constructor(data, view = IntVector.defaultView(data)) {
        super(data, view);
    }
    static from(data, is64) {
        if (is64 === true) {
            return data instanceof Int32Array
                ? new IntVector(new data_1.FlatData(new type_3.Int64(), data.length, null, data))
                : new IntVector(new data_1.FlatData(new type_3.Uint64(), data.length, null, data));
        }
        switch (data.constructor) {
            case Int8Array: return new IntVector(new data_1.FlatData(new type_3.Int8(), data.length, null, data));
            case Int16Array: return new IntVector(new data_1.FlatData(new type_3.Int16(), data.length, null, data));
            case Int32Array: return new IntVector(new data_1.FlatData(new type_3.Int32(), data.length, null, data));
            case Uint8Array: return new IntVector(new data_1.FlatData(new type_3.Uint8(), data.length, null, data));
            case Uint16Array: return new IntVector(new data_1.FlatData(new type_3.Uint16(), data.length, null, data));
            case Uint32Array: return new IntVector(new data_1.FlatData(new type_3.Uint32(), data.length, null, data));
        }
        throw new TypeError('Unrecognized Int data');
    }
    static defaultView(data) {
        return data.type.bitWidth <= 32 ? new flat_1.FlatView(data) : new flat_1.FixedSizeView(data, (data.type.bitWidth / 32) | 0);
    }
}
exports.IntVector = IntVector;
class FloatVector extends FlatVector {
    constructor(data, view = FloatVector.defaultView(data)) {
        super(data, view);
    }
    static from(data) {
        switch (data.constructor) {
            case Uint16Array: return new FloatVector(new data_1.FlatData(new type_3.Float16(), data.length, null, data));
            case Float32Array: return new FloatVector(new data_1.FlatData(new type_3.Float32(), data.length, null, data));
            case Float64Array: return new FloatVector(new data_1.FlatData(new type_3.Float64(), data.length, null, data));
        }
        throw new TypeError('Unrecognized Float data');
    }
    static defaultView(data) {
        return data.type.precision !== type_2.Precision.HALF ? new flat_1.FlatView(data) : new flat_1.Float16View(data);
    }
}
exports.FloatVector = FloatVector;
class DateVector extends FlatVector {
    static defaultView(data) {
        return data.type.unit === type_2.DateUnit.DAY ? new flat_2.DateDayView(data) : new flat_2.DateMillisecondView(data, 2);
    }
    constructor(data, view = DateVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.unit === type_2.DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.unit === type_2.DateUnit.DAY ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
    asEpochMilliseconds() {
        let data = this.data.clone(new type_3.Int32());
        switch (this.type.unit) {
            case type_2.DateUnit.DAY: return new IntVector(data, new flat_3.TimestampDayView(data, 1));
            case type_2.DateUnit.MILLISECOND: return new IntVector(data, new flat_3.TimestampMillisecondView(data, 2));
        }
        throw new TypeError(`Unrecognized date unit "${type_2.DateUnit[this.type.unit]}"`);
    }
}
exports.DateVector = DateVector;
class DecimalVector extends FlatVector {
    constructor(data, view = new flat_1.FixedSizeView(data, 4)) {
        super(data, view);
    }
}
exports.DecimalVector = DecimalVector;
class TimeVector extends FlatVector {
    static defaultView(data) {
        return data.type.bitWidth <= 32 ? new flat_1.FlatView(data) : new flat_1.FixedSizeView(data, (data.type.bitWidth / 32) | 0);
    }
    constructor(data, view = TimeVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.bitWidth <= 32 ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
}
exports.TimeVector = TimeVector;
class TimestampVector extends FlatVector {
    constructor(data, view = new flat_1.FixedSizeView(data, 2)) {
        super(data, view);
    }
    asEpochMilliseconds() {
        let data = this.data.clone(new type_3.Int32());
        switch (this.type.unit) {
            case type_1.TimeUnit.SECOND: return new IntVector(data, new flat_3.TimestampSecondView(data, 1));
            case type_1.TimeUnit.MILLISECOND: return new IntVector(data, new flat_3.TimestampMillisecondView(data, 2));
            case type_1.TimeUnit.MICROSECOND: return new IntVector(data, new flat_3.TimestampMicrosecondView(data, 2));
            case type_1.TimeUnit.NANOSECOND: return new IntVector(data, new flat_3.TimestampNanosecondView(data, 2));
        }
        throw new TypeError(`Unrecognized time unit "${type_1.TimeUnit[this.type.unit]}"`);
    }
}
exports.TimestampVector = TimestampVector;
class IntervalVector extends FlatVector {
    static defaultView(data) {
        return data.type.unit === type_2.IntervalUnit.YEAR_MONTH ? new flat_2.IntervalYearMonthView(data) : new flat_1.FixedSizeView(data, 2);
    }
    constructor(data, view = IntervalVector.defaultView(data)) {
        super(data, view);
    }
    lows() {
        return this.type.unit === type_2.IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(0, 2);
    }
    highs() {
        return this.type.unit === type_2.IntervalUnit.YEAR_MONTH ? this.asInt32(0, 1) : this.asInt32(1, 2);
    }
}
exports.IntervalVector = IntervalVector;
class BinaryVector extends ListVectorBase {
    constructor(data, view = new list_1.BinaryView(data)) {
        super(data, view);
    }
    asUtf8() {
        return new Utf8Vector(this.data.clone(new type_4.Utf8()));
    }
}
exports.BinaryVector = BinaryVector;
class FixedSizeBinaryVector extends FlatVector {
    constructor(data, view = new flat_1.FixedSizeView(data, data.type.byteWidth)) {
        super(data, view);
    }
}
exports.FixedSizeBinaryVector = FixedSizeBinaryVector;
class Utf8Vector extends ListVectorBase {
    constructor(data, view = new list_1.Utf8View(data)) {
        super(data, view);
    }
    asBinary() {
        return new BinaryVector(this.data.clone(new type_4.Binary()));
    }
}
exports.Utf8Vector = Utf8Vector;
class ListVector extends ListVectorBase {
    constructor(data, view = new list_1.ListView(data)) {
        super(data, view);
    }
}
exports.ListVector = ListVector;
class FixedSizeListVector extends Vector {
    constructor(data, view = new list_1.FixedSizeListView(data)) {
        super(data, view);
    }
}
exports.FixedSizeListVector = FixedSizeListVector;
class MapVector extends NestedVector {
    constructor(data, view = new nested_1.MapView(data)) {
        super(data, view);
    }
    asStruct() {
        return new StructVector(this.data.clone(new type_5.Struct(this.type.children)));
    }
}
exports.MapVector = MapVector;
class StructVector extends NestedVector {
    constructor(data, view = new nested_1.StructView(data)) {
        super(data, view);
    }
    asMap(keysSorted = false) {
        return new MapVector(this.data.clone(new type_5.Map_(keysSorted, this.type.children)));
    }
}
exports.StructVector = StructVector;
class UnionVector extends NestedVector {
    constructor(data, view = (data.type.mode === type_2.UnionMode.Sparse ? new nested_1.UnionView(data) : new nested_1.DenseUnionView(data))) {
        super(data, view);
    }
}
exports.UnionVector = UnionVector;
class DictionaryVector extends Vector {
    constructor(data, view = new dictionary_1.DictionaryView(data.dictionary, new IntVector(data.indicies))) {
        super(data, view);
        if (data instanceof data_1.DictionaryData && view instanceof dictionary_1.DictionaryView) {
            this.indicies = view.indicies;
            this.dictionary = data.dictionary;
        }
        else if (data instanceof data_1.ChunkedData && view instanceof chunked_1.ChunkedView) {
            const chunks = view.chunkVectors;
            // Assume the last chunk's dictionary data is the most up-to-date,
            // including data from DictionaryBatches that were marked as deltas
            this.dictionary = chunks[chunks.length - 1].dictionary;
            this.indicies = chunks.reduce((idxs, dict) => !idxs ? dict.indicies : idxs.concat(dict.indicies), null);
        }
        else {
            throw new TypeError(`Unrecognized DictionaryVector view`);
        }
    }
    getKey(index) { return this.indicies.get(index); }
    getValue(key) { return this.dictionary.get(key); }
}
exports.DictionaryVector = DictionaryVector;
exports.createVector = ((VectorLoader) => ((data) => visitor_1.TypeVisitor.visitTypeInline(new VectorLoader(data), data.type)))(class VectorLoader extends visitor_1.TypeVisitor {
    constructor(data) {
        super();
        this.data = data;
    }
    visitNull(_type) { return new NullVector(this.data); }
    visitInt(_type) { return new IntVector(this.data); }
    visitFloat(_type) { return new FloatVector(this.data); }
    visitBinary(_type) { return new BinaryVector(this.data); }
    visitUtf8(_type) { return new Utf8Vector(this.data); }
    visitBool(_type) { return new BoolVector(this.data); }
    visitDecimal(_type) { return new DecimalVector(this.data); }
    visitDate(_type) { return new DateVector(this.data); }
    visitTime(_type) { return new TimeVector(this.data); }
    visitTimestamp(_type) { return new TimestampVector(this.data); }
    visitInterval(_type) { return new IntervalVector(this.data); }
    visitList(_type) { return new ListVector(this.data); }
    visitStruct(_type) { return new StructVector(this.data); }
    visitUnion(_type) { return new UnionVector(this.data); }
    visitFixedSizeBinary(_type) { return new FixedSizeBinaryVector(this.data); }
    visitFixedSizeList(_type) { return new FixedSizeListVector(this.data); }
    visitMap(_type) { return new MapVector(this.data); }
    visitDictionary(_type) { return new DictionaryVector(this.data); }
});

//# sourceMappingURL=data:application/json;charset=utf8;base64,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QUFNLENBQUM7Q0FDaEcsQ0FBQyxDQUFDIiwiZmlsZSI6InZlY3Rvci5qcyIsInNvdXJjZXNDb250ZW50IjpbIi8vIExpY2Vuc2VkIHRvIHRoZSBBcGFjaGUgU29mdHdhcmUgRm91bmRhdGlvbiAoQVNGKSB1bmRlciBvbmVcbi8vIG9yIG1vcmUgY29udHJpYnV0b3IgbGljZW5zZSBhZ3JlZW1lbnRzLiAgU2VlIHRoZSBOT1RJQ0UgZmlsZVxuLy8gZGlzdHJpYnV0ZWQgd2l0aCB0aGlzIHdvcmsgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb25cbi8vIHJlZ2FyZGluZyBjb3B5cmlnaHQgb3duZXJzaGlwLiAgVGhlIEFTRiBsaWNlbnNlcyB0aGlzIGZpbGVcbi8vIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGVcbi8vIFwiTGljZW5zZVwiKTsgeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZVxuLy8gd2l0aCB0aGUgTGljZW5zZS4gIFlvdSBtYXkgb2J0YWluIGEgY29weSBvZiB0aGUgTGljZW5zZSBhdFxuLy9cbi8vICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG4vL1xuLy8gVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLFxuLy8gc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW5cbi8vIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIENPTkRJVElPTlMgT0YgQU5ZXG4vLyBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiAgU2VlIHRoZSBMaWNlbnNlIGZvciB0aGVcbi8vIHNwZWNpZmljIGxhbmd1YWdlIGdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnNcbi8vIHVuZGVyIHRoZSBMaWNlbnNlLlxuXG5pbXBvcnQgeyBEYXRhLCBDaHVua2VkRGF0YSwgRmxhdERhdGEsIEJvb2xEYXRhLCBGbGF0TGlzdERhdGEsIE5lc3RlZERhdGEsIERpY3Rpb25hcnlEYXRhIH0gZnJvbSAnLi9kYXRhJztcbmltcG9ydCB7IFZpc2l0b3JOb2RlLCBUeXBlVmlzaXRvciwgVmVjdG9yVmlzaXRvciB9IGZyb20gJy4vdmlzaXRvcic7XG5pbXBvcnQgeyBEYXRhVHlwZSwgTGlzdFR5cGUsIEZsYXRUeXBlLCBOZXN0ZWRUeXBlLCBGbGF0TGlzdFR5cGUsIFRpbWVVbml0IH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IEl0ZXJhYmxlQXJyYXlMaWtlLCBQcmVjaXNpb24sIERhdGVVbml0LCBJbnRlcnZhbFVuaXQsIFVuaW9uTW9kZSB9IGZyb20gJy4vdHlwZSc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgVmVjdG9yTGlrZSB7IGxlbmd0aDogbnVtYmVyOyBudWxsQ291bnQ6IG51bWJlcjsgfVxuXG5leHBvcnQgaW50ZXJmYWNlIFZpZXc8VCBleHRlbmRzIERhdGFUeXBlPiB7XG4gICAgY2xvbmUoZGF0YTogRGF0YTxUPik6IHRoaXM7XG4gICAgaXNWYWxpZChpbmRleDogbnVtYmVyKTogYm9vbGVhbjtcbiAgICBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbDtcbiAgICBzZXQoaW5kZXg6IG51bWJlciwgdmFsdWU6IFRbJ1RWYWx1ZSddKTogdm9pZDtcbiAgICB0b0FycmF5KCk6IEl0ZXJhYmxlQXJyYXlMaWtlPFRbJ1RWYWx1ZSddIHwgbnVsbD47XG4gICAgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXSB8IG51bGw+O1xufVxuXG5leHBvcnQgY2xhc3MgVmVjdG9yPFQgZXh0ZW5kcyBEYXRhVHlwZSA9IGFueT4gaW1wbGVtZW50cyBWZWN0b3JMaWtlLCBWaWV3PFQ+LCBWaXNpdG9yTm9kZSB7XG4gICAgcHVibGljIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIERhdGFUeXBlPihkYXRhOiBEYXRhPFQ+KTogVmVjdG9yPFQ+IHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVZlY3RvcihkYXRhKTtcbiAgICB9XG4gICAgcHVibGljIHN0YXRpYyBjb25jYXQ8VCBleHRlbmRzIERhdGFUeXBlPiguLi5zb3VyY2VzOiBWZWN0b3I8VD5bXSk6IFZlY3RvcjxUPiB7XG4gICAgICAgIHJldHVybiBzb3VyY2VzLmxlbmd0aCA9PT0gMSA/IHNvdXJjZXNbMF0gOiBzb3VyY2VzLnJlZHVjZSgoYSwgYikgPT4gYS5jb25jYXQoYikpO1xuICAgIH1cbiAgICBwdWJsaWMgdHlwZTogVDtcbiAgICBwdWJsaWMgbGVuZ3RoOiBudW1iZXI7XG4gICAgcHVibGljIHJlYWRvbmx5IGRhdGE6IERhdGE8VD47XG4gICAgcHVibGljIHJlYWRvbmx5IHZpZXc6IFZpZXc8VD47XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPiwgdmlldzogVmlldzxUPikge1xuICAgICAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgICAgICB0aGlzLnR5cGUgPSBkYXRhLnR5cGU7XG4gICAgICAgIHRoaXMubGVuZ3RoID0gZGF0YS5sZW5ndGg7XG4gICAgICAgIGxldCBudWxsczogVWludDhBcnJheTtcbiAgICAgICAgaWYgKCg8YW55PiBkYXRhIGluc3RhbmNlb2YgQ2h1bmtlZERhdGEpICYmICEodmlldyBpbnN0YW5jZW9mIENodW5rZWRWaWV3KSkge1xuICAgICAgICAgICAgdGhpcy52aWV3ID0gbmV3IENodW5rZWRWaWV3KGRhdGEpO1xuICAgICAgICB9IGVsc2UgaWYgKCEodmlldyBpbnN0YW5jZW9mIFZhbGlkaXR5VmlldykgJiYgKG51bGxzID0gZGF0YS5udWxsQml0bWFwISkgJiYgbnVsbHMubGVuZ3RoID4gMCAmJiBkYXRhLm51bGxDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMudmlldyA9IG5ldyBWYWxpZGl0eVZpZXcoZGF0YSwgdmlldyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnZpZXcgPSB2aWV3O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHVibGljIGdldCBudWxsQ291bnQoKSB7IHJldHVybiB0aGlzLmRhdGEubnVsbENvdW50OyB9XG4gICAgcHVibGljIGdldCBudWxsQml0bWFwKCkgeyByZXR1cm4gdGhpcy5kYXRhLm51bGxCaXRtYXA7IH1cbiAgICBwdWJsaWMgZ2V0IFtTeW1ib2wudG9TdHJpbmdUYWddKCkge1xuICAgICAgICByZXR1cm4gYFZlY3Rvcjwke3RoaXMudHlwZVtTeW1ib2wudG9TdHJpbmdUYWddfT5gO1xuICAgIH1cbiAgICBwdWJsaWMgdG9KU09OKCk6IGFueSB7IHJldHVybiB0aGlzLnRvQXJyYXkoKTsgfVxuICAgIHB1YmxpYyBjbG9uZTxSIGV4dGVuZHMgVD4oZGF0YTogRGF0YTxSPiwgdmlldzogVmlldzxSPiA9IHRoaXMudmlldy5jbG9uZShkYXRhKSBhcyBhbnkpOiB0aGlzIHtcbiAgICAgICAgcmV0dXJuIG5ldyAodGhpcy5jb25zdHJ1Y3RvciBhcyBhbnkpKGRhdGEsIHZpZXcpO1xuICAgIH1cbiAgICBwdWJsaWMgaXNWYWxpZChpbmRleDogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuaXNWYWxpZChpbmRleCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQoaW5kZXg6IG51bWJlcik6IFRbJ1RWYWx1ZSddIHwgbnVsbCB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0KGluZGV4KTtcbiAgICB9XG4gICAgcHVibGljIHNldChpbmRleDogbnVtYmVyLCB2YWx1ZTogVFsnVFZhbHVlJ10pOiB2b2lkIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlldy5zZXQoaW5kZXgsIHZhbHVlKTtcbiAgICB9XG4gICAgcHVibGljIHRvQXJyYXkoKTogSXRlcmFibGVBcnJheUxpa2U8VFsnVFZhbHVlJ10gfCBudWxsPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcudG9BcnJheSgpO1xuICAgIH1cbiAgICBwdWJsaWMgW1N5bWJvbC5pdGVyYXRvcl0oKTogSXRlcmFibGVJdGVyYXRvcjxUWydUVmFsdWUnXSB8IG51bGw+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmlld1tTeW1ib2wuaXRlcmF0b3JdKCk7XG4gICAgfVxuICAgIHB1YmxpYyBjb25jYXQoLi4ub3RoZXJzOiBWZWN0b3I8VD5bXSk6IHRoaXMge1xuICAgICAgICBpZiAoKG90aGVycyA9IG90aGVycy5maWx0ZXIoQm9vbGVhbikpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgeyB2aWV3IH0gPSB0aGlzO1xuICAgICAgICBjb25zdCB2ZWNzID0gISh2aWV3IGluc3RhbmNlb2YgQ2h1bmtlZFZpZXcpXG4gICAgICAgICAgICA/IFt0aGlzLCAuLi5vdGhlcnNdXG4gICAgICAgICAgICA6IFsuLi52aWV3LmNodW5rVmVjdG9ycywgLi4ub3RoZXJzXTtcbiAgICAgICAgY29uc3Qgb2Zmc2V0cyA9IENodW5rZWREYXRhLmNvbXB1dGVPZmZzZXRzKHZlY3MpO1xuICAgICAgICBjb25zdCBjaHVua3NMZW5ndGggPSBvZmZzZXRzW29mZnNldHMubGVuZ3RoIC0gMV07XG4gICAgICAgIGNvbnN0IGNodW5rZWREYXRhID0gbmV3IENodW5rZWREYXRhKHRoaXMudHlwZSwgY2h1bmtzTGVuZ3RoLCB2ZWNzLCAwLCAtMSwgb2Zmc2V0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKGNodW5rZWREYXRhLCBuZXcgQ2h1bmtlZFZpZXcoY2h1bmtlZERhdGEpKSBhcyB0aGlzO1xuICAgIH1cbiAgICBwdWJsaWMgc2xpY2UoYmVnaW4/OiBudW1iZXIsIGVuZD86IG51bWJlcik6IHRoaXMge1xuICAgICAgICBsZXQgeyBsZW5ndGggfSA9IHRoaXM7XG4gICAgICAgIGxldCBzaXplID0gKHRoaXMudmlldyBhcyBhbnkpLnNpemUgfHwgMTtcbiAgICAgICAgbGV0IHRvdGFsID0gbGVuZ3RoLCBmcm9tID0gKGJlZ2luIHx8IDApICogc2l6ZTtcbiAgICAgICAgbGV0IHRvID0gKHR5cGVvZiBlbmQgPT09ICdudW1iZXInID8gZW5kIDogdG90YWwpICogc2l6ZTtcbiAgICAgICAgaWYgKHRvIDwgMCkgeyB0byA9IHRvdGFsIC0gKHRvICogLTEpICUgdG90YWw7IH1cbiAgICAgICAgaWYgKGZyb20gPCAwKSB7IGZyb20gPSB0b3RhbCAtIChmcm9tICogLTEpICUgdG90YWw7IH1cbiAgICAgICAgaWYgKHRvIDwgZnJvbSkgeyBbZnJvbSwgdG9dID0gW3RvLCBmcm9tXTsgfVxuICAgICAgICB0b3RhbCA9ICFpc0Zpbml0ZSh0b3RhbCA9ICh0byAtIGZyb20pKSB8fCB0b3RhbCA8IDAgPyAwIDogdG90YWw7XG4gICAgICAgIGNvbnN0IHNsaWNlZERhdGEgPSB0aGlzLmRhdGEuc2xpY2UoZnJvbSwgTWF0aC5taW4odG90YWwsIGxlbmd0aCkpO1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9uZShzbGljZWREYXRhLCB0aGlzLnZpZXcuY2xvbmUoc2xpY2VkRGF0YSkpIGFzIHRoaXM7XG4gICAgfVxuXG4gICAgcHVibGljIGFjY2VwdFR5cGVWaXNpdG9yKHZpc2l0b3I6IFR5cGVWaXNpdG9yKTogYW55IHtcbiAgICAgICAgcmV0dXJuIFR5cGVWaXNpdG9yLnZpc2l0VHlwZUlubGluZSh2aXNpdG9yLCB0aGlzLnR5cGUpO1xuICAgIH1cbiAgICBwdWJsaWMgYWNjZXB0VmVjdG9yVmlzaXRvcih2aXNpdG9yOiBWZWN0b3JWaXNpdG9yKTogYW55IHtcbiAgICAgICAgcmV0dXJuIFZlY3RvclZpc2l0b3IudmlzaXRUeXBlSW5saW5lKHZpc2l0b3IsIHRoaXMudHlwZSwgdGhpcyk7XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgRmxhdFZlY3RvcjxUIGV4dGVuZHMgRmxhdFR5cGU+IGV4dGVuZHMgVmVjdG9yPFQ+IHtcbiAgICBwdWJsaWMgZ2V0IHZhbHVlcygpIHsgcmV0dXJuIHRoaXMuZGF0YS52YWx1ZXM7IH1cbiAgICBwdWJsaWMgbG93cygpOiBJbnRWZWN0b3I8SW50MzI+IHsgcmV0dXJuIHRoaXMuYXNJbnQzMigwLCAyKTsgfVxuICAgIHB1YmxpYyBoaWdocygpOiBJbnRWZWN0b3I8SW50MzI+IHsgcmV0dXJuIHRoaXMuYXNJbnQzMigxLCAyKTsgfVxuICAgIHB1YmxpYyBhc0ludDMyKG9mZnNldDogbnVtYmVyID0gMCwgc3RyaWRlOiBudW1iZXIgPSAyKTogSW50VmVjdG9yPEludDMyPiB7XG4gICAgICAgIGxldCBkYXRhID0gKHRoaXMuZGF0YSBhcyBGbGF0RGF0YTxhbnk+KS5jbG9uZShuZXcgSW50MzIoKSk7XG4gICAgICAgIGlmIChvZmZzZXQgPiAwKSB7XG4gICAgICAgICAgICBkYXRhID0gZGF0YS5zbGljZShvZmZzZXQsIHRoaXMubGVuZ3RoIC0gb2Zmc2V0KTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpbnQzMnMgPSBuZXcgSW50VmVjdG9yKGRhdGEsIG5ldyBQcmltaXRpdmVWaWV3KGRhdGEsIHN0cmlkZSkpO1xuICAgICAgICBpbnQzMnMubGVuZ3RoID0gdGhpcy5sZW5ndGggLyBzdHJpZGUgfCAwO1xuICAgICAgICByZXR1cm4gaW50MzJzO1xuICAgIH1cbn1cblxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIExpc3RWZWN0b3JCYXNlPFQgZXh0ZW5kcyAoTGlzdFR5cGUgfCBGbGF0TGlzdFR5cGUpPiBleHRlbmRzIFZlY3RvcjxUPiB7XG4gICAgcHVibGljIGdldCB2YWx1ZXMoKSB7IHJldHVybiB0aGlzLmRhdGEudmFsdWVzOyB9XG4gICAgcHVibGljIGdldCB2YWx1ZU9mZnNldHMoKSB7IHJldHVybiB0aGlzLmRhdGEudmFsdWVPZmZzZXRzOyB9XG4gICAgcHVibGljIGdldFZhbHVlT2Zmc2V0KGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZmZzZXRzW2luZGV4XTtcbiAgICB9XG4gICAgcHVibGljIGdldFZhbHVlTGVuZ3RoKGluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsdWVPZmZzZXRzW2luZGV4ICsgMV0gLSB0aGlzLnZhbHVlT2Zmc2V0c1tpbmRleF07XG4gICAgfVxufVxuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgTmVzdGVkVmVjdG9yPFQgZXh0ZW5kcyBOZXN0ZWRUeXBlPiBleHRlbmRzIFZlY3RvcjxUPiAge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgcmVhZG9ubHkgdmlldzogTmVzdGVkVmlldzxUPjtcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgcHJvdGVjdGVkIF9jaGlsZERhdGE6IERhdGE8YW55PltdO1xuICAgIHB1YmxpYyBnZXRDaGlsZEF0PFIgZXh0ZW5kcyBEYXRhVHlwZSA9IERhdGFUeXBlPihpbmRleDogbnVtYmVyKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnZpZXcuZ2V0Q2hpbGRBdDxSPihpbmRleCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXQgY2hpbGREYXRhKCk6IERhdGE8YW55PltdIHtcbiAgICAgICAgbGV0IGRhdGE6IERhdGE8VD4gfCBEYXRhPGFueT5bXTtcbiAgICAgICAgaWYgKChkYXRhID0gdGhpcy5fY2hpbGREYXRhKSkge1xuICAgICAgICAgICAgcmV0dXJuIGRhdGEgYXMgRGF0YTxhbnk+W107XG4gICAgICAgIH0gZWxzZSBpZiAoISg8YW55PiAoZGF0YSA9IHRoaXMuZGF0YSkgaW5zdGFuY2VvZiBDaHVua2VkRGF0YSkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9jaGlsZERhdGEgPSAoZGF0YSBhcyBOZXN0ZWREYXRhPFQ+KS5jaGlsZERhdGE7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY2h1bmtzID0gKChkYXRhIGFzIENodW5rZWREYXRhPFQ+KS5jaHVua1ZlY3RvcnMgYXMgTmVzdGVkVmVjdG9yPFQ+W10pO1xuICAgICAgICByZXR1cm4gdGhpcy5fY2hpbGREYXRhID0gY2h1bmtzLnJlZHVjZTxWZWN0b3I8VD5bXVtdPigoY29sdW1ucywgY2h1bmspID0+XG4gICAgICAgICAgICAgICAgY2h1bmsuY2hpbGREYXRhLnJlZHVjZTxWZWN0b3I8VD5bXVtdPigoY29sdW1ucywgXywgaSkgPT4gKFxuICAgICAgICAgICAgICAgICAgICBjb2x1bW5zW2ldID0gWy4uLihjb2x1bW5zW2ldIHx8IFtdKSwgY2h1bmsuZ2V0Q2hpbGRBdChpKV1cbiAgICAgICAgICAgICAgICApICYmIGNvbHVtbnMsIGNvbHVtbnNcbiAgICAgICAgICAgICksIFtdIGFzIFZlY3RvcjxUPltdW11cbiAgICAgICAgKS5tYXAoKGNvbHMpID0+IFZlY3Rvci5jb25jYXQ8VD4oLi4uY29scykuZGF0YSk7XG4gICAgfVxufVxuXG5pbXBvcnQgeyBMaXN0LCBCaW5hcnksIFV0ZjgsIEJvb2wsIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IE51bGwsIEludCwgRmxvYXQsIERlY2ltYWwsIERhdGVfLCBUaW1lLCBUaW1lc3RhbXAsIEludGVydmFsIH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFVpbnQ4LCBVaW50MTYsIFVpbnQzMiwgVWludDY0LCBJbnQ4LCBJbnQxNiwgSW50MzIsIEludDY0LCBGbG9hdDE2LCBGbG9hdDMyLCBGbG9hdDY0IH0gZnJvbSAnLi90eXBlJztcbmltcG9ydCB7IFN0cnVjdCwgVW5pb24sIFNwYXJzZVVuaW9uLCBEZW5zZVVuaW9uLCBGaXhlZFNpemVCaW5hcnksIEZpeGVkU2l6ZUxpc3QsIE1hcF8sIERpY3Rpb25hcnkgfSBmcm9tICcuL3R5cGUnO1xuXG5pbXBvcnQgeyBDaHVua2VkVmlldyB9IGZyb20gJy4vdmVjdG9yL2NodW5rZWQnO1xuaW1wb3J0IHsgRGljdGlvbmFyeVZpZXcgfSBmcm9tICcuL3ZlY3Rvci9kaWN0aW9uYXJ5JztcbmltcG9ydCB7IExpc3RWaWV3LCBGaXhlZFNpemVMaXN0VmlldywgQmluYXJ5VmlldywgVXRmOFZpZXcgfSBmcm9tICcuL3ZlY3Rvci9saXN0JztcbmltcG9ydCB7IFVuaW9uVmlldywgRGVuc2VVbmlvblZpZXcsIE5lc3RlZFZpZXcsIFN0cnVjdFZpZXcsIE1hcFZpZXcgfSBmcm9tICcuL3ZlY3Rvci9uZXN0ZWQnO1xuaW1wb3J0IHsgRmxhdFZpZXcsIE51bGxWaWV3LCBCb29sVmlldywgVmFsaWRpdHlWaWV3LCBQcmltaXRpdmVWaWV3LCBGaXhlZFNpemVWaWV3LCBGbG9hdDE2VmlldyB9IGZyb20gJy4vdmVjdG9yL2ZsYXQnO1xuaW1wb3J0IHsgRGF0ZURheVZpZXcsIERhdGVNaWxsaXNlY29uZFZpZXcsIEludGVydmFsWWVhck1vbnRoVmlldyB9IGZyb20gJy4vdmVjdG9yL2ZsYXQnO1xuaW1wb3J0IHsgVGltZXN0YW1wRGF5VmlldywgVGltZXN0YW1wU2Vjb25kVmlldywgVGltZXN0YW1wTWlsbGlzZWNvbmRWaWV3LCBUaW1lc3RhbXBNaWNyb3NlY29uZFZpZXcsIFRpbWVzdGFtcE5hbm9zZWNvbmRWaWV3IH0gZnJvbSAnLi92ZWN0b3IvZmxhdCc7XG5pbXBvcnQgeyBwYWNrQm9vbHMgfSBmcm9tICcuL3V0aWwvYml0JztcblxuZXhwb3J0IGNsYXNzIE51bGxWZWN0b3IgZXh0ZW5kcyBWZWN0b3I8TnVsbD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8TnVsbD4sIHZpZXc6IFZpZXc8TnVsbD4gPSBuZXcgTnVsbFZpZXcoZGF0YSkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQm9vbFZlY3RvciBleHRlbmRzIFZlY3RvcjxCb29sPiB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEl0ZXJhYmxlQXJyYXlMaWtlPGJvb2xlYW4+KSB7XG4gICAgICAgIHJldHVybiBuZXcgQm9vbFZlY3RvcihuZXcgQm9vbERhdGEobmV3IEJvb2woKSwgZGF0YS5sZW5ndGgsIG51bGwsIHBhY2tCb29scyhkYXRhKSkpO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IHZhbHVlcygpIHsgcmV0dXJuIHRoaXMuZGF0YS52YWx1ZXM7IH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPEJvb2w+LCB2aWV3OiBWaWV3PEJvb2w+ID0gbmV3IEJvb2xWaWV3KGRhdGEpKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZpZXcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludFZlY3RvcjxUIGV4dGVuZHMgSW50ID0gSW50PGFueT4+IGV4dGVuZHMgRmxhdFZlY3RvcjxUPiB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEludDhBcnJheSk6IEludFZlY3RvcjxJbnQ4PjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogSW50MTZBcnJheSk6IEludFZlY3RvcjxJbnQxNj47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEludDMyQXJyYXkpOiBJbnRWZWN0b3I8SW50MzI+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbShkYXRhOiBVaW50OEFycmF5KTogSW50VmVjdG9yPFVpbnQ4PjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogVWludDE2QXJyYXkpOiBJbnRWZWN0b3I8VWludDE2PjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogVWludDMyQXJyYXkpOiBJbnRWZWN0b3I8VWludDMyPjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogSW50MzJBcnJheSwgaXM2NDogdHJ1ZSk6IEludFZlY3RvcjxJbnQ2ND47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IFVpbnQzMkFycmF5LCBpczY0OiB0cnVlKTogSW50VmVjdG9yPFVpbnQ2ND47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IGFueSwgaXM2ND86IGJvb2xlYW4pIHtcbiAgICAgICAgaWYgKGlzNjQgPT09IHRydWUpIHtcbiAgICAgICAgICAgIHJldHVybiBkYXRhIGluc3RhbmNlb2YgSW50MzJBcnJheVxuICAgICAgICAgICAgICAgID8gbmV3IEludFZlY3RvcihuZXcgRmxhdERhdGEobmV3IEludDY0KCksIGRhdGEubGVuZ3RoLCBudWxsLCBkYXRhKSlcbiAgICAgICAgICAgICAgICA6IG5ldyBJbnRWZWN0b3IobmV3IEZsYXREYXRhKG5ldyBVaW50NjQoKSwgZGF0YS5sZW5ndGgsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgfVxuICAgICAgICBzd2l0Y2ggKGRhdGEuY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIGNhc2UgSW50OEFycmF5OiByZXR1cm4gbmV3IEludFZlY3RvcihuZXcgRmxhdERhdGEobmV3IEludDgoKSwgZGF0YS5sZW5ndGgsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgSW50MTZBcnJheTogcmV0dXJuIG5ldyBJbnRWZWN0b3IobmV3IEZsYXREYXRhKG5ldyBJbnQxNigpLCBkYXRhLmxlbmd0aCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBJbnQzMkFycmF5OiByZXR1cm4gbmV3IEludFZlY3RvcihuZXcgRmxhdERhdGEobmV3IEludDMyKCksIGRhdGEubGVuZ3RoLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQ4QXJyYXk6IHJldHVybiBuZXcgSW50VmVjdG9yKG5ldyBGbGF0RGF0YShuZXcgVWludDgoKSwgZGF0YS5sZW5ndGgsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgVWludDE2QXJyYXk6IHJldHVybiBuZXcgSW50VmVjdG9yKG5ldyBGbGF0RGF0YShuZXcgVWludDE2KCksIGRhdGEubGVuZ3RoLCBudWxsLCBkYXRhKSk7XG4gICAgICAgICAgICBjYXNlIFVpbnQzMkFycmF5OiByZXR1cm4gbmV3IEludFZlY3RvcihuZXcgRmxhdERhdGEobmV3IFVpbnQzMigpLCBkYXRhLmxlbmd0aCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1VucmVjb2duaXplZCBJbnQgZGF0YScpO1xuICAgIH1cbiAgICBzdGF0aWMgZGVmYXVsdFZpZXc8VCBleHRlbmRzIEludD4oZGF0YTogRGF0YTxUPikge1xuICAgICAgICByZXR1cm4gZGF0YS50eXBlLmJpdFdpZHRoIDw9IDMyID8gbmV3IEZsYXRWaWV3KGRhdGEpIDogbmV3IEZpeGVkU2l6ZVZpZXcoZGF0YSwgKGRhdGEudHlwZS5iaXRXaWR0aCAvIDMyKSB8IDApO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFQ+LCB2aWV3OiBWaWV3PFQ+ID0gSW50VmVjdG9yLmRlZmF1bHRWaWV3KGRhdGEpKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZpZXcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEZsb2F0VmVjdG9yPFQgZXh0ZW5kcyBGbG9hdCA9IEZsb2F0PGFueT4+IGV4dGVuZHMgRmxhdFZlY3RvcjxUPiB7XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IFVpbnQxNkFycmF5KTogRmxvYXRWZWN0b3I8RmxvYXQxNj47XG4gICAgcHVibGljIHN0YXRpYyBmcm9tKGRhdGE6IEZsb2F0MzJBcnJheSk6IEZsb2F0VmVjdG9yPEZsb2F0MzI+O1xuICAgIHB1YmxpYyBzdGF0aWMgZnJvbShkYXRhOiBGbG9hdDY0QXJyYXkpOiBGbG9hdFZlY3RvcjxGbG9hdDY0PjtcbiAgICBwdWJsaWMgc3RhdGljIGZyb20oZGF0YTogYW55KSB7XG4gICAgICAgIHN3aXRjaCAoZGF0YS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY2FzZSBVaW50MTZBcnJheTogcmV0dXJuIG5ldyBGbG9hdFZlY3RvcihuZXcgRmxhdERhdGEobmV3IEZsb2F0MTYoKSwgZGF0YS5sZW5ndGgsIG51bGwsIGRhdGEpKTtcbiAgICAgICAgICAgIGNhc2UgRmxvYXQzMkFycmF5OiByZXR1cm4gbmV3IEZsb2F0VmVjdG9yKG5ldyBGbGF0RGF0YShuZXcgRmxvYXQzMigpLCBkYXRhLmxlbmd0aCwgbnVsbCwgZGF0YSkpO1xuICAgICAgICAgICAgY2FzZSBGbG9hdDY0QXJyYXk6IHJldHVybiBuZXcgRmxvYXRWZWN0b3IobmV3IEZsYXREYXRhKG5ldyBGbG9hdDY0KCksIGRhdGEubGVuZ3RoLCBudWxsLCBkYXRhKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5yZWNvZ25pemVkIEZsb2F0IGRhdGEnKTtcbiAgICB9XG4gICAgc3RhdGljIGRlZmF1bHRWaWV3PFQgZXh0ZW5kcyBGbG9hdD4oZGF0YTogRGF0YTxUPik6IEZsYXRWaWV3PGFueT4ge1xuICAgICAgICByZXR1cm4gZGF0YS50eXBlLnByZWNpc2lvbiAhPT0gUHJlY2lzaW9uLkhBTEYgPyBuZXcgRmxhdFZpZXcoZGF0YSkgOiBuZXcgRmxvYXQxNlZpZXcoZGF0YSBhcyBEYXRhPEZsb2F0MTY+KTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxUPiwgdmlldzogVmlldzxUPiA9IEZsb2F0VmVjdG9yLmRlZmF1bHRWaWV3KGRhdGEpKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZpZXcpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERhdGVWZWN0b3IgZXh0ZW5kcyBGbGF0VmVjdG9yPERhdGVfPiB7XG4gICAgc3RhdGljIGRlZmF1bHRWaWV3PFQgZXh0ZW5kcyBEYXRlXz4oZGF0YTogRGF0YTxUPikge1xuICAgICAgICByZXR1cm4gZGF0YS50eXBlLnVuaXQgPT09IERhdGVVbml0LkRBWSA/IG5ldyBEYXRlRGF5VmlldyhkYXRhKSA6IG5ldyBEYXRlTWlsbGlzZWNvbmRWaWV3KGRhdGEsIDIpO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPERhdGVfPiwgdmlldzogVmlldzxEYXRlXz4gPSBEYXRlVmVjdG9yLmRlZmF1bHRWaWV3KGRhdGEpKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZpZXcpO1xuICAgIH1cbiAgICBwdWJsaWMgbG93cygpOiBJbnRWZWN0b3I8SW50MzI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS51bml0ID09PSBEYXRlVW5pdC5EQVkgPyB0aGlzLmFzSW50MzIoMCwgMSkgOiB0aGlzLmFzSW50MzIoMCwgMik7XG4gICAgfVxuICAgIHB1YmxpYyBoaWdocygpOiBJbnRWZWN0b3I8SW50MzI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS51bml0ID09PSBEYXRlVW5pdC5EQVkgPyB0aGlzLmFzSW50MzIoMCwgMSkgOiB0aGlzLmFzSW50MzIoMSwgMik7XG4gICAgfVxuICAgIHB1YmxpYyBhc0Vwb2NoTWlsbGlzZWNvbmRzKCk6IEludFZlY3RvcjxJbnQzMj4ge1xuICAgICAgICBsZXQgZGF0YSA9ICh0aGlzLmRhdGEgYXMgRmxhdERhdGE8YW55PikuY2xvbmUobmV3IEludDMyKCkpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZS51bml0KSB7XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0LkRBWTogcmV0dXJuIG5ldyBJbnRWZWN0b3IoZGF0YSwgbmV3IFRpbWVzdGFtcERheVZpZXcoZGF0YSBhcyBhbnksIDEpIGFzIGFueSk7XG4gICAgICAgICAgICBjYXNlIERhdGVVbml0Lk1JTExJU0VDT05EOiByZXR1cm4gbmV3IEludFZlY3RvcihkYXRhLCBuZXcgVGltZXN0YW1wTWlsbGlzZWNvbmRWaWV3KGRhdGEgYXMgYW55LCAyKSBhcyBhbnkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCBkYXRlIHVuaXQgXCIke0RhdGVVbml0W3RoaXMudHlwZS51bml0XX1cImApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIERlY2ltYWxWZWN0b3IgZXh0ZW5kcyBGbGF0VmVjdG9yPERlY2ltYWw+IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPERlY2ltYWw+LCB2aWV3OiBWaWV3PERlY2ltYWw+ID0gbmV3IEZpeGVkU2l6ZVZpZXcoZGF0YSwgNCkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVGltZVZlY3RvciBleHRlbmRzIEZsYXRWZWN0b3I8VGltZT4ge1xuICAgIHN0YXRpYyBkZWZhdWx0VmlldzxUIGV4dGVuZHMgVGltZT4oZGF0YTogRGF0YTxUPikge1xuICAgICAgICByZXR1cm4gZGF0YS50eXBlLmJpdFdpZHRoIDw9IDMyID8gbmV3IEZsYXRWaWV3KGRhdGEpIDogbmV3IEZpeGVkU2l6ZVZpZXcoZGF0YSwgKGRhdGEudHlwZS5iaXRXaWR0aCAvIDMyKSB8IDApO1xuICAgIH1cbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFRpbWU+LCB2aWV3OiBWaWV3PFRpbWU+ID0gVGltZVZlY3Rvci5kZWZhdWx0VmlldyhkYXRhKSkge1xuICAgICAgICBzdXBlcihkYXRhLCB2aWV3KTtcbiAgICB9XG4gICAgcHVibGljIGxvd3MoKTogSW50VmVjdG9yPEludDMyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUuYml0V2lkdGggPD0gMzIgPyB0aGlzLmFzSW50MzIoMCwgMSkgOiB0aGlzLmFzSW50MzIoMCwgMik7XG4gICAgfVxuICAgIHB1YmxpYyBoaWdocygpOiBJbnRWZWN0b3I8SW50MzI+IHtcbiAgICAgICAgcmV0dXJuIHRoaXMudHlwZS5iaXRXaWR0aCA8PSAzMiA/IHRoaXMuYXNJbnQzMigwLCAxKSA6IHRoaXMuYXNJbnQzMigxLCAyKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBUaW1lc3RhbXBWZWN0b3IgZXh0ZW5kcyBGbGF0VmVjdG9yPFRpbWVzdGFtcD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8VGltZXN0YW1wPiwgdmlldzogVmlldzxUaW1lc3RhbXA+ID0gbmV3IEZpeGVkU2l6ZVZpZXcoZGF0YSwgMikpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxuICAgIHB1YmxpYyBhc0Vwb2NoTWlsbGlzZWNvbmRzKCk6IEludFZlY3RvcjxJbnQzMj4ge1xuICAgICAgICBsZXQgZGF0YSA9ICh0aGlzLmRhdGEgYXMgRmxhdERhdGE8YW55PikuY2xvbmUobmV3IEludDMyKCkpO1xuICAgICAgICBzd2l0Y2ggKHRoaXMudHlwZS51bml0KSB7XG4gICAgICAgICAgICBjYXNlIFRpbWVVbml0LlNFQ09ORDogcmV0dXJuIG5ldyBJbnRWZWN0b3IoZGF0YSwgbmV3IFRpbWVzdGFtcFNlY29uZFZpZXcoZGF0YSBhcyBhbnksIDEpIGFzIGFueSk7XG4gICAgICAgICAgICBjYXNlIFRpbWVVbml0Lk1JTExJU0VDT05EOiByZXR1cm4gbmV3IEludFZlY3RvcihkYXRhLCBuZXcgVGltZXN0YW1wTWlsbGlzZWNvbmRWaWV3KGRhdGEgYXMgYW55LCAyKSBhcyBhbnkpO1xuICAgICAgICAgICAgY2FzZSBUaW1lVW5pdC5NSUNST1NFQ09ORDogcmV0dXJuIG5ldyBJbnRWZWN0b3IoZGF0YSwgbmV3IFRpbWVzdGFtcE1pY3Jvc2Vjb25kVmlldyhkYXRhIGFzIGFueSwgMikgYXMgYW55KTtcbiAgICAgICAgICAgIGNhc2UgVGltZVVuaXQuTkFOT1NFQ09ORDogcmV0dXJuIG5ldyBJbnRWZWN0b3IoZGF0YSwgbmV3IFRpbWVzdGFtcE5hbm9zZWNvbmRWaWV3KGRhdGEgYXMgYW55LCAyKSBhcyBhbnkpO1xuICAgICAgICB9XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCB0aW1lIHVuaXQgXCIke1RpbWVVbml0W3RoaXMudHlwZS51bml0XX1cImApO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIEludGVydmFsVmVjdG9yIGV4dGVuZHMgRmxhdFZlY3RvcjxJbnRlcnZhbD4ge1xuICAgIHN0YXRpYyBkZWZhdWx0VmlldzxUIGV4dGVuZHMgSW50ZXJ2YWw+KGRhdGE6IERhdGE8VD4pIHtcbiAgICAgICAgcmV0dXJuIGRhdGEudHlwZS51bml0ID09PSBJbnRlcnZhbFVuaXQuWUVBUl9NT05USCA/IG5ldyBJbnRlcnZhbFllYXJNb250aFZpZXcoZGF0YSkgOiBuZXcgRml4ZWRTaXplVmlldyhkYXRhLCAyKTtcbiAgICB9XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxJbnRlcnZhbD4sIHZpZXc6IFZpZXc8SW50ZXJ2YWw+ID0gSW50ZXJ2YWxWZWN0b3IuZGVmYXVsdFZpZXcoZGF0YSkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxuICAgIHB1YmxpYyBsb3dzKCk6IEludFZlY3RvcjxJbnQzMj4ge1xuICAgICAgICByZXR1cm4gdGhpcy50eXBlLnVuaXQgPT09IEludGVydmFsVW5pdC5ZRUFSX01PTlRIID8gdGhpcy5hc0ludDMyKDAsIDEpIDogdGhpcy5hc0ludDMyKDAsIDIpO1xuICAgIH1cbiAgICBwdWJsaWMgaGlnaHMoKTogSW50VmVjdG9yPEludDMyPiB7XG4gICAgICAgIHJldHVybiB0aGlzLnR5cGUudW5pdCA9PT0gSW50ZXJ2YWxVbml0LllFQVJfTU9OVEggPyB0aGlzLmFzSW50MzIoMCwgMSkgOiB0aGlzLmFzSW50MzIoMSwgMik7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgQmluYXJ5VmVjdG9yIGV4dGVuZHMgTGlzdFZlY3RvckJhc2U8QmluYXJ5PiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxCaW5hcnk+LCB2aWV3OiBWaWV3PEJpbmFyeT4gPSBuZXcgQmluYXJ5VmlldyhkYXRhKSkge1xuICAgICAgICBzdXBlcihkYXRhLCB2aWV3KTtcbiAgICB9XG4gICAgcHVibGljIGFzVXRmOCgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBVdGY4VmVjdG9yKCh0aGlzLmRhdGEgYXMgRmxhdExpc3REYXRhPGFueT4pLmNsb25lKG5ldyBVdGY4KCkpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBGaXhlZFNpemVCaW5hcnlWZWN0b3IgZXh0ZW5kcyBGbGF0VmVjdG9yPEZpeGVkU2l6ZUJpbmFyeT4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8Rml4ZWRTaXplQmluYXJ5PiwgdmlldzogVmlldzxGaXhlZFNpemVCaW5hcnk+ID0gbmV3IEZpeGVkU2l6ZVZpZXcoZGF0YSwgZGF0YS50eXBlLmJ5dGVXaWR0aCkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgVXRmOFZlY3RvciBleHRlbmRzIExpc3RWZWN0b3JCYXNlPFV0Zjg+IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFV0Zjg+LCB2aWV3OiBWaWV3PFV0Zjg+ID0gbmV3IFV0ZjhWaWV3KGRhdGEpKSB7XG4gICAgICAgIHN1cGVyKGRhdGEsIHZpZXcpO1xuICAgIH1cbiAgICBwdWJsaWMgYXNCaW5hcnkoKSB7XG4gICAgICAgIHJldHVybiBuZXcgQmluYXJ5VmVjdG9yKCh0aGlzLmRhdGEgYXMgRmxhdExpc3REYXRhPGFueT4pLmNsb25lKG5ldyBCaW5hcnkoKSkpO1xuICAgIH1cbn1cblxuZXhwb3J0IGNsYXNzIExpc3RWZWN0b3I8VCBleHRlbmRzIERhdGFUeXBlID0gRGF0YVR5cGU+IGV4dGVuZHMgTGlzdFZlY3RvckJhc2U8TGlzdDxUPj4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8TGlzdDxUPj4sIHZpZXc6IFZpZXc8TGlzdDxUPj4gPSBuZXcgTGlzdFZpZXcoZGF0YSkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRml4ZWRTaXplTGlzdFZlY3RvciBleHRlbmRzIFZlY3RvcjxGaXhlZFNpemVMaXN0PiB7XG4gICAgY29uc3RydWN0b3IoZGF0YTogRGF0YTxGaXhlZFNpemVMaXN0PiwgdmlldzogVmlldzxGaXhlZFNpemVMaXN0PiA9IG5ldyBGaXhlZFNpemVMaXN0VmlldyhkYXRhKSkge1xuICAgICAgICBzdXBlcihkYXRhLCB2aWV3KTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBNYXBWZWN0b3IgZXh0ZW5kcyBOZXN0ZWRWZWN0b3I8TWFwXz4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8TWFwXz4sIHZpZXc6IFZpZXc8TWFwXz4gPSBuZXcgTWFwVmlldyhkYXRhKSkge1xuICAgICAgICBzdXBlcihkYXRhLCB2aWV3KTtcbiAgICB9XG4gICAgcHVibGljIGFzU3RydWN0KCkge1xuICAgICAgICByZXR1cm4gbmV3IFN0cnVjdFZlY3RvcigodGhpcy5kYXRhIGFzIE5lc3RlZERhdGE8YW55PikuY2xvbmUobmV3IFN0cnVjdCh0aGlzLnR5cGUuY2hpbGRyZW4pKSk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgU3RydWN0VmVjdG9yIGV4dGVuZHMgTmVzdGVkVmVjdG9yPFN0cnVjdD4ge1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8U3RydWN0PiwgdmlldzogVmlldzxTdHJ1Y3Q+ID0gbmV3IFN0cnVjdFZpZXcoZGF0YSkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxuICAgIHB1YmxpYyBhc01hcChrZXlzU29ydGVkOiBib29sZWFuID0gZmFsc2UpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNYXBWZWN0b3IoKHRoaXMuZGF0YSBhcyBOZXN0ZWREYXRhPGFueT4pLmNsb25lKG5ldyBNYXBfKGtleXNTb3J0ZWQsIHRoaXMudHlwZS5jaGlsZHJlbikpKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjbGFzcyBVbmlvblZlY3RvcjxUIGV4dGVuZHMgKFNwYXJzZVVuaW9uIHwgRGVuc2VVbmlvbikgPSBhbnk+IGV4dGVuZHMgTmVzdGVkVmVjdG9yPFQ+IHtcbiAgICBjb25zdHJ1Y3RvcihkYXRhOiBEYXRhPFQ+LCB2aWV3OiBWaWV3PFQ+ID0gPGFueT4gKGRhdGEudHlwZS5tb2RlID09PSBVbmlvbk1vZGUuU3BhcnNlID8gbmV3IFVuaW9uVmlldzxTcGFyc2VVbmlvbj4oZGF0YSBhcyBEYXRhPFNwYXJzZVVuaW9uPikgOiBuZXcgRGVuc2VVbmlvblZpZXcoZGF0YSBhcyBEYXRhPERlbnNlVW5pb24+KSkpIHtcbiAgICAgICAgc3VwZXIoZGF0YSwgdmlldyk7XG4gICAgfVxufVxuXG5leHBvcnQgY2xhc3MgRGljdGlvbmFyeVZlY3RvcjxUIGV4dGVuZHMgRGF0YVR5cGUgPSBEYXRhVHlwZT4gZXh0ZW5kcyBWZWN0b3I8RGljdGlvbmFyeTxUPj4ge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW5kaWNpZXM6IFZlY3RvcjxJbnQ+O1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwdWJsaWMgcmVhZG9ubHkgZGljdGlvbmFyeTogVmVjdG9yPFQ+O1xuICAgIGNvbnN0cnVjdG9yKGRhdGE6IERhdGE8RGljdGlvbmFyeTxUPj4sIHZpZXc6IFZpZXc8RGljdGlvbmFyeTxUPj4gPSBuZXcgRGljdGlvbmFyeVZpZXc8VD4oZGF0YS5kaWN0aW9uYXJ5LCBuZXcgSW50VmVjdG9yKGRhdGEuaW5kaWNpZXMpKSkge1xuICAgICAgICBzdXBlcihkYXRhIGFzIERhdGE8YW55Piwgdmlldyk7XG4gICAgICAgIGlmIChkYXRhIGluc3RhbmNlb2YgRGljdGlvbmFyeURhdGEgJiYgdmlldyBpbnN0YW5jZW9mIERpY3Rpb25hcnlWaWV3KSB7XG4gICAgICAgICAgICB0aGlzLmluZGljaWVzID0gdmlldy5pbmRpY2llcztcbiAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IGRhdGEuZGljdGlvbmFyeTtcbiAgICAgICAgfSBlbHNlIGlmIChkYXRhIGluc3RhbmNlb2YgQ2h1bmtlZERhdGEgJiYgdmlldyBpbnN0YW5jZW9mIENodW5rZWRWaWV3KSB7XG4gICAgICAgICAgICBjb25zdCBjaHVua3MgPSB2aWV3LmNodW5rVmVjdG9ycyBhcyBEaWN0aW9uYXJ5VmVjdG9yPFQ+W107XG4gICAgICAgICAgICAvLyBBc3N1bWUgdGhlIGxhc3QgY2h1bmsncyBkaWN0aW9uYXJ5IGRhdGEgaXMgdGhlIG1vc3QgdXAtdG8tZGF0ZSxcbiAgICAgICAgICAgIC8vIGluY2x1ZGluZyBkYXRhIGZyb20gRGljdGlvbmFyeUJhdGNoZXMgdGhhdCB3ZXJlIG1hcmtlZCBhcyBkZWx0YXNcbiAgICAgICAgICAgIHRoaXMuZGljdGlvbmFyeSA9IGNodW5rc1tjaHVua3MubGVuZ3RoIC0gMV0uZGljdGlvbmFyeTtcbiAgICAgICAgICAgIHRoaXMuaW5kaWNpZXMgPSBjaHVua3MucmVkdWNlPFZlY3RvcjxJbnQ+IHwgbnVsbD4oXG4gICAgICAgICAgICAgICAgKGlkeHM6IFZlY3RvcjxJbnQ+IHwgbnVsbCwgZGljdDogRGljdGlvbmFyeVZlY3RvcjxUPikgPT5cbiAgICAgICAgICAgICAgICAgICAgIWlkeHMgPyBkaWN0LmluZGljaWVzISA6IGlkeHMuY29uY2F0KGRpY3QuaW5kaWNpZXMhKSxcbiAgICAgICAgICAgICAgICBudWxsXG4gICAgICAgICAgICApITtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFVucmVjb2duaXplZCBEaWN0aW9uYXJ5VmVjdG9yIHZpZXdgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBwdWJsaWMgZ2V0S2V5KGluZGV4OiBudW1iZXIpIHsgcmV0dXJuIHRoaXMuaW5kaWNpZXMuZ2V0KGluZGV4KTsgfVxuICAgIHB1YmxpYyBnZXRWYWx1ZShrZXk6IG51bWJlcikgeyByZXR1cm4gdGhpcy5kaWN0aW9uYXJ5LmdldChrZXkpOyB9XG59XG5cbmV4cG9ydCBjb25zdCBjcmVhdGVWZWN0b3IgPSAoKFZlY3RvckxvYWRlcjogbmV3IDxUIGV4dGVuZHMgRGF0YVR5cGU+KGRhdGE6IERhdGE8VD4pID0+IFR5cGVWaXNpdG9yKSA9PiAoXG4gICAgPFQgZXh0ZW5kcyBEYXRhVHlwZT4oZGF0YTogRGF0YTxUPikgPT4gVHlwZVZpc2l0b3IudmlzaXRUeXBlSW5saW5lKG5ldyBWZWN0b3JMb2FkZXIoZGF0YSksIGRhdGEudHlwZSkgYXMgVmVjdG9yPFQ+XG4pKShjbGFzcyBWZWN0b3JMb2FkZXI8VCBleHRlbmRzIERhdGFUeXBlPiBleHRlbmRzIFR5cGVWaXNpdG9yIHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGRhdGE6IERhdGE8VD4pIHsgc3VwZXIoKTsgfVxuICAgIHZpc2l0TnVsbCAgICAgICAgICAgKF90eXBlOiBOdWxsKSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBOdWxsVmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0SW50ICAgICAgICAgICAgKF90eXBlOiBJbnQpICAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBJbnRWZWN0b3IodGhpcy5kYXRhKTsgICAgICAgICAgICAgfVxuICAgIHZpc2l0RmxvYXQgICAgICAgICAgKF90eXBlOiBGbG9hdCkgICAgICAgICAgIHsgcmV0dXJuIG5ldyBGbG9hdFZlY3Rvcih0aGlzLmRhdGEpOyAgICAgICAgICAgfVxuICAgIHZpc2l0QmluYXJ5ICAgICAgICAgKF90eXBlOiBCaW5hcnkpICAgICAgICAgIHsgcmV0dXJuIG5ldyBCaW5hcnlWZWN0b3IodGhpcy5kYXRhKTsgICAgICAgICAgfVxuICAgIHZpc2l0VXRmOCAgICAgICAgICAgKF90eXBlOiBVdGY4KSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBVdGY4VmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0Qm9vbCAgICAgICAgICAgKF90eXBlOiBCb29sKSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBCb29sVmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0RGVjaW1hbCAgICAgICAgKF90eXBlOiBEZWNpbWFsKSAgICAgICAgIHsgcmV0dXJuIG5ldyBEZWNpbWFsVmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgfVxuICAgIHZpc2l0RGF0ZSAgICAgICAgICAgKF90eXBlOiBEYXRlXykgICAgICAgICAgIHsgcmV0dXJuIG5ldyBEYXRlVmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0VGltZSAgICAgICAgICAgKF90eXBlOiBUaW1lKSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBUaW1lVmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0VGltZXN0YW1wICAgICAgKF90eXBlOiBUaW1lc3RhbXApICAgICAgIHsgcmV0dXJuIG5ldyBUaW1lc3RhbXBWZWN0b3IodGhpcy5kYXRhKTsgICAgICAgfVxuICAgIHZpc2l0SW50ZXJ2YWwgICAgICAgKF90eXBlOiBJbnRlcnZhbCkgICAgICAgIHsgcmV0dXJuIG5ldyBJbnRlcnZhbFZlY3Rvcih0aGlzLmRhdGEpOyAgICAgICAgfVxuICAgIHZpc2l0TGlzdCAgICAgICAgICAgKF90eXBlOiBMaXN0KSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBMaXN0VmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgICAgICAgfVxuICAgIHZpc2l0U3RydWN0ICAgICAgICAgKF90eXBlOiBTdHJ1Y3QpICAgICAgICAgIHsgcmV0dXJuIG5ldyBTdHJ1Y3RWZWN0b3IodGhpcy5kYXRhKTsgICAgICAgICAgfVxuICAgIHZpc2l0VW5pb24gICAgICAgICAgKF90eXBlOiBVbmlvbikgICAgICAgICAgIHsgcmV0dXJuIG5ldyBVbmlvblZlY3Rvcih0aGlzLmRhdGEpOyAgICAgICAgICAgfVxuICAgIHZpc2l0Rml4ZWRTaXplQmluYXJ5KF90eXBlOiBGaXhlZFNpemVCaW5hcnkpIHsgcmV0dXJuIG5ldyBGaXhlZFNpemVCaW5hcnlWZWN0b3IodGhpcy5kYXRhKTsgfVxuICAgIHZpc2l0Rml4ZWRTaXplTGlzdCAgKF90eXBlOiBGaXhlZFNpemVMaXN0KSAgIHsgcmV0dXJuIG5ldyBGaXhlZFNpemVMaXN0VmVjdG9yKHRoaXMuZGF0YSk7ICAgfVxuICAgIHZpc2l0TWFwICAgICAgICAgICAgKF90eXBlOiBNYXBfKSAgICAgICAgICAgIHsgcmV0dXJuIG5ldyBNYXBWZWN0b3IodGhpcy5kYXRhKTsgICAgICAgICAgICAgfVxuICAgIHZpc2l0RGljdGlvbmFyeSAgICAgKF90eXBlOiBEaWN0aW9uYXJ5KSAgICAgIHsgcmV0dXJuIG5ldyBEaWN0aW9uYXJ5VmVjdG9yKHRoaXMuZGF0YSk7ICAgICAgfVxufSk7XG4iXX0=
